
second_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ba0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dcc  08003d70  08003d70  00004d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b3c  08004b3c  00006064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004b3c  08004b3c  00005b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b44  08004b44  00006064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b44  08004b44  00005b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004b48  08004b48  00005b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08004b4c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000610  20000064  08004bb0  00006064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000674  08004bb0  00006674  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bc74  00000000  00000000  00006094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c92  00000000  00000000  00011d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa0  00000000  00000000  000139a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000084f  00000000  00000000  00014440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021c71  00000000  00000000  00014c8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e1c7  00000000  00000000  00036900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb574  00000000  00000000  00044ac7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011003b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003100  00000000  00000000  00110080  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00113180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000064 	.word	0x20000064
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003d58 	.word	0x08003d58

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000068 	.word	0x20000068
 800020c:	08003d58 	.word	0x08003d58

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b086      	sub	sp, #24
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e2:	f000 fdd1 	bl	8001188 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e6:	f000 f883 	bl	80006f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ea:	f000 f939 	bl	8000860 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ee:	f000 f90d 	bl	800080c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80005f2:	f000 f8dd 	bl	80007b0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
//  char msg[] = "Hello from STM32!\n";
  SSD1306_Init();
 80005f6:	f000 f9a7 	bl	8000948 <SSD1306_Init>
//  SSD1306_Puts("Tem: 30°C", &Font_11x18, 1);
//  SSD1306_GotoXY(0, 18);
  int set_hum = 65;
 80005fa:	2341      	movs	r3, #65	@ 0x41
 80005fc:	617b      	str	r3, [r7, #20]
  char msg[20] = {0};
 80005fe:	463b      	mov	r3, r7
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]
  SSD1306_Puts("Set: 65%", &Font_11x18, 1);
 800060c:	2201      	movs	r2, #1
 800060e:	4932      	ldr	r1, [pc, #200]	@ (80006d8 <main+0xfc>)
 8000610:	4832      	ldr	r0, [pc, #200]	@ (80006dc <main+0x100>)
 8000612:	f000 fb97 	bl	8000d44 <SSD1306_Puts>
  SSD1306_GotoXY(0, 22);
 8000616:	2116      	movs	r1, #22
 8000618:	2000      	movs	r0, #0
 800061a:	f000 faff 	bl	8000c1c <SSD1306_GotoXY>
  SSD1306_Puts("Cur: 50%", &Font_11x18, 1);
 800061e:	2201      	movs	r2, #1
 8000620:	492d      	ldr	r1, [pc, #180]	@ (80006d8 <main+0xfc>)
 8000622:	482f      	ldr	r0, [pc, #188]	@ (80006e0 <main+0x104>)
 8000624:	f000 fb8e 	bl	8000d44 <SSD1306_Puts>
//  SSD1306_Puts("Tem: 30°C, Hum: 65%", &Font_7x10, 1);
//  SSD1306_GotoXY(0, 20);
//  SSD1306_Puts("HUMI:65%", &Font_7x10, 1);
  SSD1306_UpdateScreen();
 8000628:	f000 fa52 	bl	8000ad0 <SSD1306_UpdateScreen>
//	 	  SSD1306_UpdateScreen();
//	  HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), 2000);
//	  i++;
//	  printf("i = %d\r\n", i);
//	  HAL_Delay(1000);
	  if (!HAL_GPIO_ReadPin(GPIO_SW_GPIO_Port, GPIO_SW_Pin)) {
 800062c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000630:	482c      	ldr	r0, [pc, #176]	@ (80006e4 <main+0x108>)
 8000632:	f001 f8b9 	bl	80017a8 <HAL_GPIO_ReadPin>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d122      	bne.n	8000682 <main+0xa6>
		  set_hum++;
 800063c:	697b      	ldr	r3, [r7, #20]
 800063e:	3301      	adds	r3, #1
 8000640:	617b      	str	r3, [r7, #20]
		  snprintf(msg, sizeof(msg), "Set: %d%%", set_hum);
 8000642:	4638      	mov	r0, r7
 8000644:	697b      	ldr	r3, [r7, #20]
 8000646:	4a28      	ldr	r2, [pc, #160]	@ (80006e8 <main+0x10c>)
 8000648:	2114      	movs	r1, #20
 800064a:	f002 fed1 	bl	80033f0 <sniprintf>
		  SSD1306_Clear();
 800064e:	f000 fb9e 	bl	8000d8e <SSD1306_Clear>
		  SSD1306_GotoXY(0, 0);
 8000652:	2100      	movs	r1, #0
 8000654:	2000      	movs	r0, #0
 8000656:	f000 fae1 	bl	8000c1c <SSD1306_GotoXY>
		  SSD1306_Puts(msg, &Font_11x18, 1);
 800065a:	463b      	mov	r3, r7
 800065c:	2201      	movs	r2, #1
 800065e:	491e      	ldr	r1, [pc, #120]	@ (80006d8 <main+0xfc>)
 8000660:	4618      	mov	r0, r3
 8000662:	f000 fb6f 	bl	8000d44 <SSD1306_Puts>
		  SSD1306_GotoXY(0, 22);
 8000666:	2116      	movs	r1, #22
 8000668:	2000      	movs	r0, #0
 800066a:	f000 fad7 	bl	8000c1c <SSD1306_GotoXY>
		  SSD1306_Puts("Cur: 50%", &Font_11x18, 1);
 800066e:	2201      	movs	r2, #1
 8000670:	4919      	ldr	r1, [pc, #100]	@ (80006d8 <main+0xfc>)
 8000672:	481b      	ldr	r0, [pc, #108]	@ (80006e0 <main+0x104>)
 8000674:	f000 fb66 	bl	8000d44 <SSD1306_Puts>
		  SSD1306_UpdateScreen();
 8000678:	f000 fa2a 	bl	8000ad0 <SSD1306_UpdateScreen>
		  HAL_Delay(100);
 800067c:	2064      	movs	r0, #100	@ 0x64
 800067e:	f000 fdf5 	bl	800126c <HAL_Delay>
//		  HAL_GPIO_WritePin(GPIO_LED_GPIO_Port, GPIO_LED_Pin, GPIO_PIN_RESET);
	  }
//	  } else {
//		  HAL_GPIO_WritePin(GPIO_LED_GPIO_Port, GPIO_LED_Pin, GPIO_PIN_SET);
//	  }
	  if (!HAL_GPIO_ReadPin(GPIO_SW_D_GPIO_Port, GPIO_SW_D_Pin)) {
 8000682:	2101      	movs	r1, #1
 8000684:	4819      	ldr	r0, [pc, #100]	@ (80006ec <main+0x110>)
 8000686:	f001 f88f 	bl	80017a8 <HAL_GPIO_ReadPin>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d1cd      	bne.n	800062c <main+0x50>
		  set_hum--;
 8000690:	697b      	ldr	r3, [r7, #20]
 8000692:	3b01      	subs	r3, #1
 8000694:	617b      	str	r3, [r7, #20]
		  snprintf(msg, sizeof(msg), "Set: %d%%", set_hum);
 8000696:	4638      	mov	r0, r7
 8000698:	697b      	ldr	r3, [r7, #20]
 800069a:	4a13      	ldr	r2, [pc, #76]	@ (80006e8 <main+0x10c>)
 800069c:	2114      	movs	r1, #20
 800069e:	f002 fea7 	bl	80033f0 <sniprintf>
		  SSD1306_Clear();
 80006a2:	f000 fb74 	bl	8000d8e <SSD1306_Clear>
		  SSD1306_GotoXY(0, 0);
 80006a6:	2100      	movs	r1, #0
 80006a8:	2000      	movs	r0, #0
 80006aa:	f000 fab7 	bl	8000c1c <SSD1306_GotoXY>
		  SSD1306_Puts(msg, &Font_11x18, 1);
 80006ae:	463b      	mov	r3, r7
 80006b0:	2201      	movs	r2, #1
 80006b2:	4909      	ldr	r1, [pc, #36]	@ (80006d8 <main+0xfc>)
 80006b4:	4618      	mov	r0, r3
 80006b6:	f000 fb45 	bl	8000d44 <SSD1306_Puts>
		  SSD1306_GotoXY(0, 22);
 80006ba:	2116      	movs	r1, #22
 80006bc:	2000      	movs	r0, #0
 80006be:	f000 faad 	bl	8000c1c <SSD1306_GotoXY>
		  SSD1306_Puts("Cur: 50%", &Font_11x18, 1);
 80006c2:	2201      	movs	r2, #1
 80006c4:	4904      	ldr	r1, [pc, #16]	@ (80006d8 <main+0xfc>)
 80006c6:	4806      	ldr	r0, [pc, #24]	@ (80006e0 <main+0x104>)
 80006c8:	f000 fb3c 	bl	8000d44 <SSD1306_Puts>
		  SSD1306_UpdateScreen();
 80006cc:	f000 fa00 	bl	8000ad0 <SSD1306_UpdateScreen>
		  HAL_Delay(100);
 80006d0:	2064      	movs	r0, #100	@ 0x64
 80006d2:	f000 fdcb 	bl	800126c <HAL_Delay>
	  if (!HAL_GPIO_ReadPin(GPIO_SW_GPIO_Port, GPIO_SW_Pin)) {
 80006d6:	e7a9      	b.n	800062c <main+0x50>
 80006d8:	20000000 	.word	0x20000000
 80006dc:	08003d70 	.word	0x08003d70
 80006e0:	08003d7c 	.word	0x08003d7c
 80006e4:	40020800 	.word	0x40020800
 80006e8:	08003d88 	.word	0x08003d88
 80006ec:	40020400 	.word	0x40020400

080006f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b094      	sub	sp, #80	@ 0x50
 80006f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f6:	f107 031c 	add.w	r3, r7, #28
 80006fa:	2234      	movs	r2, #52	@ 0x34
 80006fc:	2100      	movs	r1, #0
 80006fe:	4618      	mov	r0, r3
 8000700:	f002 feac 	bl	800345c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000704:	f107 0308 	add.w	r3, r7, #8
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]
 8000712:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000714:	2300      	movs	r3, #0
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	4b23      	ldr	r3, [pc, #140]	@ (80007a8 <SystemClock_Config+0xb8>)
 800071a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800071c:	4a22      	ldr	r2, [pc, #136]	@ (80007a8 <SystemClock_Config+0xb8>)
 800071e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000722:	6413      	str	r3, [r2, #64]	@ 0x40
 8000724:	4b20      	ldr	r3, [pc, #128]	@ (80007a8 <SystemClock_Config+0xb8>)
 8000726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000728:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000730:	2300      	movs	r3, #0
 8000732:	603b      	str	r3, [r7, #0]
 8000734:	4b1d      	ldr	r3, [pc, #116]	@ (80007ac <SystemClock_Config+0xbc>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800073c:	4a1b      	ldr	r2, [pc, #108]	@ (80007ac <SystemClock_Config+0xbc>)
 800073e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000742:	6013      	str	r3, [r2, #0]
 8000744:	4b19      	ldr	r3, [pc, #100]	@ (80007ac <SystemClock_Config+0xbc>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800074c:	603b      	str	r3, [r7, #0]
 800074e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000750:	2302      	movs	r3, #2
 8000752:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000754:	2301      	movs	r3, #1
 8000756:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000758:	2310      	movs	r3, #16
 800075a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800075c:	2300      	movs	r3, #0
 800075e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000760:	f107 031c 	add.w	r3, r7, #28
 8000764:	4618      	mov	r0, r3
 8000766:	f002 f8e1 	bl	800292c <HAL_RCC_OscConfig>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000770:	f000 f8e4 	bl	800093c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000774:	230f      	movs	r3, #15
 8000776:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000778:	2300      	movs	r3, #0
 800077a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077c:	2300      	movs	r3, #0
 800077e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000784:	2300      	movs	r3, #0
 8000786:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000788:	f107 0308 	add.w	r3, r7, #8
 800078c:	2100      	movs	r1, #0
 800078e:	4618      	mov	r0, r3
 8000790:	f001 fe08 	bl	80023a4 <HAL_RCC_ClockConfig>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800079a:	f000 f8cf 	bl	800093c <Error_Handler>
  }
}
 800079e:	bf00      	nop
 80007a0:	3750      	adds	r7, #80	@ 0x50
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40023800 	.word	0x40023800
 80007ac:	40007000 	.word	0x40007000

080007b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007b4:	4b12      	ldr	r3, [pc, #72]	@ (8000800 <MX_I2C1_Init+0x50>)
 80007b6:	4a13      	ldr	r2, [pc, #76]	@ (8000804 <MX_I2C1_Init+0x54>)
 80007b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80007ba:	4b11      	ldr	r3, [pc, #68]	@ (8000800 <MX_I2C1_Init+0x50>)
 80007bc:	4a12      	ldr	r2, [pc, #72]	@ (8000808 <MX_I2C1_Init+0x58>)
 80007be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000800 <MX_I2C1_Init+0x50>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000800 <MX_I2C1_Init+0x50>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000800 <MX_I2C1_Init+0x50>)
 80007ce:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000800 <MX_I2C1_Init+0x50>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007da:	4b09      	ldr	r3, [pc, #36]	@ (8000800 <MX_I2C1_Init+0x50>)
 80007dc:	2200      	movs	r2, #0
 80007de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007e0:	4b07      	ldr	r3, [pc, #28]	@ (8000800 <MX_I2C1_Init+0x50>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007e6:	4b06      	ldr	r3, [pc, #24]	@ (8000800 <MX_I2C1_Init+0x50>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007ec:	4804      	ldr	r0, [pc, #16]	@ (8000800 <MX_I2C1_Init+0x50>)
 80007ee:	f001 f80d 	bl	800180c <HAL_I2C_Init>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007f8:	f000 f8a0 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007fc:	bf00      	nop
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20000080 	.word	0x20000080
 8000804:	40005400 	.word	0x40005400
 8000808:	00061a80 	.word	0x00061a80

0800080c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000810:	4b11      	ldr	r3, [pc, #68]	@ (8000858 <MX_USART2_UART_Init+0x4c>)
 8000812:	4a12      	ldr	r2, [pc, #72]	@ (800085c <MX_USART2_UART_Init+0x50>)
 8000814:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000816:	4b10      	ldr	r3, [pc, #64]	@ (8000858 <MX_USART2_UART_Init+0x4c>)
 8000818:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800081c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800081e:	4b0e      	ldr	r3, [pc, #56]	@ (8000858 <MX_USART2_UART_Init+0x4c>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000824:	4b0c      	ldr	r3, [pc, #48]	@ (8000858 <MX_USART2_UART_Init+0x4c>)
 8000826:	2200      	movs	r2, #0
 8000828:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800082a:	4b0b      	ldr	r3, [pc, #44]	@ (8000858 <MX_USART2_UART_Init+0x4c>)
 800082c:	2200      	movs	r2, #0
 800082e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000830:	4b09      	ldr	r3, [pc, #36]	@ (8000858 <MX_USART2_UART_Init+0x4c>)
 8000832:	220c      	movs	r2, #12
 8000834:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000836:	4b08      	ldr	r3, [pc, #32]	@ (8000858 <MX_USART2_UART_Init+0x4c>)
 8000838:	2200      	movs	r2, #0
 800083a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800083c:	4b06      	ldr	r3, [pc, #24]	@ (8000858 <MX_USART2_UART_Init+0x4c>)
 800083e:	2200      	movs	r2, #0
 8000840:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000842:	4805      	ldr	r0, [pc, #20]	@ (8000858 <MX_USART2_UART_Init+0x4c>)
 8000844:	f002 fb10 	bl	8002e68 <HAL_UART_Init>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800084e:	f000 f875 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	200000d4 	.word	0x200000d4
 800085c:	40004400 	.word	0x40004400

08000860 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b088      	sub	sp, #32
 8000864:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000866:	f107 030c 	add.w	r3, r7, #12
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]
 8000874:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	60bb      	str	r3, [r7, #8]
 800087a:	4b2c      	ldr	r3, [pc, #176]	@ (800092c <MX_GPIO_Init+0xcc>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	4a2b      	ldr	r2, [pc, #172]	@ (800092c <MX_GPIO_Init+0xcc>)
 8000880:	f043 0304 	orr.w	r3, r3, #4
 8000884:	6313      	str	r3, [r2, #48]	@ 0x30
 8000886:	4b29      	ldr	r3, [pc, #164]	@ (800092c <MX_GPIO_Init+0xcc>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	f003 0304 	and.w	r3, r3, #4
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	4b25      	ldr	r3, [pc, #148]	@ (800092c <MX_GPIO_Init+0xcc>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	4a24      	ldr	r2, [pc, #144]	@ (800092c <MX_GPIO_Init+0xcc>)
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a2:	4b22      	ldr	r3, [pc, #136]	@ (800092c <MX_GPIO_Init+0xcc>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	607b      	str	r3, [r7, #4]
 80008ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ae:	2300      	movs	r3, #0
 80008b0:	603b      	str	r3, [r7, #0]
 80008b2:	4b1e      	ldr	r3, [pc, #120]	@ (800092c <MX_GPIO_Init+0xcc>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	4a1d      	ldr	r2, [pc, #116]	@ (800092c <MX_GPIO_Init+0xcc>)
 80008b8:	f043 0302 	orr.w	r3, r3, #2
 80008bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008be:	4b1b      	ldr	r3, [pc, #108]	@ (800092c <MX_GPIO_Init+0xcc>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	f003 0302 	and.w	r3, r3, #2
 80008c6:	603b      	str	r3, [r7, #0]
 80008c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_LED_GPIO_Port, GPIO_LED_Pin, GPIO_PIN_RESET);
 80008ca:	2200      	movs	r2, #0
 80008cc:	2120      	movs	r1, #32
 80008ce:	4818      	ldr	r0, [pc, #96]	@ (8000930 <MX_GPIO_Init+0xd0>)
 80008d0:	f000 ff82 	bl	80017d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPIO_SW_Pin */
  GPIO_InitStruct.Pin = GPIO_SW_Pin;
 80008d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008da:	2300      	movs	r3, #0
 80008dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008de:	2301      	movs	r3, #1
 80008e0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIO_SW_GPIO_Port, &GPIO_InitStruct);
 80008e2:	f107 030c 	add.w	r3, r7, #12
 80008e6:	4619      	mov	r1, r3
 80008e8:	4812      	ldr	r0, [pc, #72]	@ (8000934 <MX_GPIO_Init+0xd4>)
 80008ea:	f000 fdc9 	bl	8001480 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_LED_Pin */
  GPIO_InitStruct.Pin = GPIO_LED_Pin;
 80008ee:	2320      	movs	r3, #32
 80008f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f2:	2301      	movs	r3, #1
 80008f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	2300      	movs	r3, #0
 80008fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIO_LED_GPIO_Port, &GPIO_InitStruct);
 80008fe:	f107 030c 	add.w	r3, r7, #12
 8000902:	4619      	mov	r1, r3
 8000904:	480a      	ldr	r0, [pc, #40]	@ (8000930 <MX_GPIO_Init+0xd0>)
 8000906:	f000 fdbb 	bl	8001480 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_SW_D_Pin */
  GPIO_InitStruct.Pin = GPIO_SW_D_Pin;
 800090a:	2301      	movs	r3, #1
 800090c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090e:	2300      	movs	r3, #0
 8000910:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000912:	2301      	movs	r3, #1
 8000914:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIO_SW_D_GPIO_Port, &GPIO_InitStruct);
 8000916:	f107 030c 	add.w	r3, r7, #12
 800091a:	4619      	mov	r1, r3
 800091c:	4806      	ldr	r0, [pc, #24]	@ (8000938 <MX_GPIO_Init+0xd8>)
 800091e:	f000 fdaf 	bl	8001480 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000922:	bf00      	nop
 8000924:	3720      	adds	r7, #32
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40023800 	.word	0x40023800
 8000930:	40020000 	.word	0x40020000
 8000934:	40020800 	.word	0x40020800
 8000938:	40020400 	.word	0x40020400

0800093c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000940:	b672      	cpsid	i
}
 8000942:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000944:	bf00      	nop
 8000946:	e7fd      	b.n	8000944 <Error_Handler+0x8>

08000948 <SSD1306_Init>:

/* Private variable */
static SSD1306_t SSD1306;


uint8_t SSD1306_Init(void) {
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800094e:	f000 fa27 	bl	8000da0 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000952:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8000956:	2201      	movs	r2, #1
 8000958:	2178      	movs	r1, #120	@ 0x78
 800095a:	485b      	ldr	r0, [pc, #364]	@ (8000ac8 <SSD1306_Init+0x180>)
 800095c:	f001 f998 	bl	8001c90 <HAL_I2C_IsDeviceReady>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000966:	2300      	movs	r3, #0
 8000968:	e0a9      	b.n	8000abe <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 800096a:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800096e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000970:	e002      	b.n	8000978 <SSD1306_Init+0x30>
		p--;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	3b01      	subs	r3, #1
 8000976:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d1f9      	bne.n	8000972 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800097e:	22ae      	movs	r2, #174	@ 0xae
 8000980:	2100      	movs	r1, #0
 8000982:	2078      	movs	r0, #120	@ 0x78
 8000984:	f000 fa88 	bl	8000e98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000988:	2220      	movs	r2, #32
 800098a:	2100      	movs	r1, #0
 800098c:	2078      	movs	r0, #120	@ 0x78
 800098e:	f000 fa83 	bl	8000e98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000992:	2210      	movs	r2, #16
 8000994:	2100      	movs	r1, #0
 8000996:	2078      	movs	r0, #120	@ 0x78
 8000998:	f000 fa7e 	bl	8000e98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800099c:	22b0      	movs	r2, #176	@ 0xb0
 800099e:	2100      	movs	r1, #0
 80009a0:	2078      	movs	r0, #120	@ 0x78
 80009a2:	f000 fa79 	bl	8000e98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80009a6:	22c8      	movs	r2, #200	@ 0xc8
 80009a8:	2100      	movs	r1, #0
 80009aa:	2078      	movs	r0, #120	@ 0x78
 80009ac:	f000 fa74 	bl	8000e98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80009b0:	2200      	movs	r2, #0
 80009b2:	2100      	movs	r1, #0
 80009b4:	2078      	movs	r0, #120	@ 0x78
 80009b6:	f000 fa6f 	bl	8000e98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80009ba:	2210      	movs	r2, #16
 80009bc:	2100      	movs	r1, #0
 80009be:	2078      	movs	r0, #120	@ 0x78
 80009c0:	f000 fa6a 	bl	8000e98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80009c4:	2240      	movs	r2, #64	@ 0x40
 80009c6:	2100      	movs	r1, #0
 80009c8:	2078      	movs	r0, #120	@ 0x78
 80009ca:	f000 fa65 	bl	8000e98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80009ce:	2281      	movs	r2, #129	@ 0x81
 80009d0:	2100      	movs	r1, #0
 80009d2:	2078      	movs	r0, #120	@ 0x78
 80009d4:	f000 fa60 	bl	8000e98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80009d8:	22ff      	movs	r2, #255	@ 0xff
 80009da:	2100      	movs	r1, #0
 80009dc:	2078      	movs	r0, #120	@ 0x78
 80009de:	f000 fa5b 	bl	8000e98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80009e2:	22a1      	movs	r2, #161	@ 0xa1
 80009e4:	2100      	movs	r1, #0
 80009e6:	2078      	movs	r0, #120	@ 0x78
 80009e8:	f000 fa56 	bl	8000e98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80009ec:	22a6      	movs	r2, #166	@ 0xa6
 80009ee:	2100      	movs	r1, #0
 80009f0:	2078      	movs	r0, #120	@ 0x78
 80009f2:	f000 fa51 	bl	8000e98 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
	SSD1306_WRITECOMMAND(0xFF);
#else
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80009f6:	22a8      	movs	r2, #168	@ 0xa8
 80009f8:	2100      	movs	r1, #0
 80009fa:	2078      	movs	r0, #120	@ 0x78
 80009fc:	f000 fa4c 	bl	8000e98 <ssd1306_I2C_Write>
#endif

#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x1F); //
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x3F); //
 8000a00:	223f      	movs	r2, #63	@ 0x3f
 8000a02:	2100      	movs	r1, #0
 8000a04:	2078      	movs	r0, #120	@ 0x78
 8000a06:	f000 fa47 	bl	8000e98 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x3F); // Seems to work for 128px high displays too.
#endif
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000a0a:	22a4      	movs	r2, #164	@ 0xa4
 8000a0c:	2100      	movs	r1, #0
 8000a0e:	2078      	movs	r0, #120	@ 0x78
 8000a10:	f000 fa42 	bl	8000e98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000a14:	22d3      	movs	r2, #211	@ 0xd3
 8000a16:	2100      	movs	r1, #0
 8000a18:	2078      	movs	r0, #120	@ 0x78
 8000a1a:	f000 fa3d 	bl	8000e98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2100      	movs	r1, #0
 8000a22:	2078      	movs	r0, #120	@ 0x78
 8000a24:	f000 fa38 	bl	8000e98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000a28:	22d5      	movs	r2, #213	@ 0xd5
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	2078      	movs	r0, #120	@ 0x78
 8000a2e:	f000 fa33 	bl	8000e98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000a32:	22f0      	movs	r2, #240	@ 0xf0
 8000a34:	2100      	movs	r1, #0
 8000a36:	2078      	movs	r0, #120	@ 0x78
 8000a38:	f000 fa2e 	bl	8000e98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000a3c:	22d9      	movs	r2, #217	@ 0xd9
 8000a3e:	2100      	movs	r1, #0
 8000a40:	2078      	movs	r0, #120	@ 0x78
 8000a42:	f000 fa29 	bl	8000e98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000a46:	2222      	movs	r2, #34	@ 0x22
 8000a48:	2100      	movs	r1, #0
 8000a4a:	2078      	movs	r0, #120	@ 0x78
 8000a4c:	f000 fa24 	bl	8000e98 <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000a50:	22da      	movs	r2, #218	@ 0xda
 8000a52:	2100      	movs	r1, #0
 8000a54:	2078      	movs	r0, #120	@ 0x78
 8000a56:	f000 fa1f 	bl	8000e98 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x02);
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x12);
 8000a5a:	2212      	movs	r2, #18
 8000a5c:	2100      	movs	r1, #0
 8000a5e:	2078      	movs	r0, #120	@ 0x78
 8000a60:	f000 fa1a 	bl	8000e98 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x12);
#endif

	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000a64:	22db      	movs	r2, #219	@ 0xdb
 8000a66:	2100      	movs	r1, #0
 8000a68:	2078      	movs	r0, #120	@ 0x78
 8000a6a:	f000 fa15 	bl	8000e98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000a6e:	2220      	movs	r2, #32
 8000a70:	2100      	movs	r1, #0
 8000a72:	2078      	movs	r0, #120	@ 0x78
 8000a74:	f000 fa10 	bl	8000e98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000a78:	228d      	movs	r2, #141	@ 0x8d
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	2078      	movs	r0, #120	@ 0x78
 8000a7e:	f000 fa0b 	bl	8000e98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000a82:	2214      	movs	r2, #20
 8000a84:	2100      	movs	r1, #0
 8000a86:	2078      	movs	r0, #120	@ 0x78
 8000a88:	f000 fa06 	bl	8000e98 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000a8c:	22af      	movs	r2, #175	@ 0xaf
 8000a8e:	2100      	movs	r1, #0
 8000a90:	2078      	movs	r0, #120	@ 0x78
 8000a92:	f000 fa01 	bl	8000e98 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000a96:	222e      	movs	r2, #46	@ 0x2e
 8000a98:	2100      	movs	r1, #0
 8000a9a:	2078      	movs	r0, #120	@ 0x78
 8000a9c:	f000 f9fc 	bl	8000e98 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000aa0:	2000      	movs	r0, #0
 8000aa2:	f000 f843 	bl	8000b2c <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000aa6:	f000 f813 	bl	8000ad0 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000aaa:	4b08      	ldr	r3, [pc, #32]	@ (8000acc <SSD1306_Init+0x184>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000ab0:	4b06      	ldr	r3, [pc, #24]	@ (8000acc <SSD1306_Init+0x184>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000ab6:	4b05      	ldr	r3, [pc, #20]	@ (8000acc <SSD1306_Init+0x184>)
 8000ab8:	2201      	movs	r2, #1
 8000aba:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000abc:	2301      	movs	r3, #1
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	20000080 	.word	0x20000080
 8000acc:	2000051c 	.word	0x2000051c

08000ad0 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	71fb      	strb	r3, [r7, #7]
 8000ada:	e01d      	b.n	8000b18 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000adc:	79fb      	ldrb	r3, [r7, #7]
 8000ade:	3b50      	subs	r3, #80	@ 0x50
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	2078      	movs	r0, #120	@ 0x78
 8000ae8:	f000 f9d6 	bl	8000e98 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000aec:	2200      	movs	r2, #0
 8000aee:	2100      	movs	r1, #0
 8000af0:	2078      	movs	r0, #120	@ 0x78
 8000af2:	f000 f9d1 	bl	8000e98 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000af6:	2210      	movs	r2, #16
 8000af8:	2100      	movs	r1, #0
 8000afa:	2078      	movs	r0, #120	@ 0x78
 8000afc:	f000 f9cc 	bl	8000e98 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000b00:	79fb      	ldrb	r3, [r7, #7]
 8000b02:	01db      	lsls	r3, r3, #7
 8000b04:	4a08      	ldr	r2, [pc, #32]	@ (8000b28 <SSD1306_UpdateScreen+0x58>)
 8000b06:	441a      	add	r2, r3
 8000b08:	2380      	movs	r3, #128	@ 0x80
 8000b0a:	2140      	movs	r1, #64	@ 0x40
 8000b0c:	2078      	movs	r0, #120	@ 0x78
 8000b0e:	f000 f95d 	bl	8000dcc <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	3301      	adds	r3, #1
 8000b16:	71fb      	strb	r3, [r7, #7]
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	2b07      	cmp	r3, #7
 8000b1c:	d9de      	bls.n	8000adc <SSD1306_UpdateScreen+0xc>
	}
}
 8000b1e:	bf00      	nop
 8000b20:	bf00      	nop
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	2000011c 	.word	0x2000011c

08000b2c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	4603      	mov	r3, r0
 8000b34:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d101      	bne.n	8000b40 <SSD1306_Fill+0x14>
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	e000      	b.n	8000b42 <SSD1306_Fill+0x16>
 8000b40:	23ff      	movs	r3, #255	@ 0xff
 8000b42:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b46:	4619      	mov	r1, r3
 8000b48:	4803      	ldr	r0, [pc, #12]	@ (8000b58 <SSD1306_Fill+0x2c>)
 8000b4a:	f002 fc87 	bl	800345c <memset>
}
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	2000011c 	.word	0x2000011c

08000b5c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	80fb      	strh	r3, [r7, #6]
 8000b66:	460b      	mov	r3, r1
 8000b68:	80bb      	strh	r3, [r7, #4]
 8000b6a:	4613      	mov	r3, r2
 8000b6c:	70fb      	strb	r3, [r7, #3]
	if (
 8000b6e:	88fb      	ldrh	r3, [r7, #6]
 8000b70:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b72:	d848      	bhi.n	8000c06 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000b74:	88bb      	ldrh	r3, [r7, #4]
 8000b76:	2b3f      	cmp	r3, #63	@ 0x3f
 8000b78:	d845      	bhi.n	8000c06 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000b7a:	4b26      	ldr	r3, [pc, #152]	@ (8000c14 <SSD1306_DrawPixel+0xb8>)
 8000b7c:	791b      	ldrb	r3, [r3, #4]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d006      	beq.n	8000b90 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000b82:	78fb      	ldrb	r3, [r7, #3]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	bf0c      	ite	eq
 8000b88:	2301      	moveq	r3, #1
 8000b8a:	2300      	movne	r3, #0
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000b90:	78fb      	ldrb	r3, [r7, #3]
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d11a      	bne.n	8000bcc <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000b96:	88fa      	ldrh	r2, [r7, #6]
 8000b98:	88bb      	ldrh	r3, [r7, #4]
 8000b9a:	08db      	lsrs	r3, r3, #3
 8000b9c:	b298      	uxth	r0, r3
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	01db      	lsls	r3, r3, #7
 8000ba2:	4413      	add	r3, r2
 8000ba4:	4a1c      	ldr	r2, [pc, #112]	@ (8000c18 <SSD1306_DrawPixel+0xbc>)
 8000ba6:	5cd3      	ldrb	r3, [r2, r3]
 8000ba8:	b25a      	sxtb	r2, r3
 8000baa:	88bb      	ldrh	r3, [r7, #4]
 8000bac:	f003 0307 	and.w	r3, r3, #7
 8000bb0:	2101      	movs	r1, #1
 8000bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb6:	b25b      	sxtb	r3, r3
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	b259      	sxtb	r1, r3
 8000bbc:	88fa      	ldrh	r2, [r7, #6]
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	01db      	lsls	r3, r3, #7
 8000bc2:	4413      	add	r3, r2
 8000bc4:	b2c9      	uxtb	r1, r1
 8000bc6:	4a14      	ldr	r2, [pc, #80]	@ (8000c18 <SSD1306_DrawPixel+0xbc>)
 8000bc8:	54d1      	strb	r1, [r2, r3]
 8000bca:	e01d      	b.n	8000c08 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000bcc:	88fa      	ldrh	r2, [r7, #6]
 8000bce:	88bb      	ldrh	r3, [r7, #4]
 8000bd0:	08db      	lsrs	r3, r3, #3
 8000bd2:	b298      	uxth	r0, r3
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	01db      	lsls	r3, r3, #7
 8000bd8:	4413      	add	r3, r2
 8000bda:	4a0f      	ldr	r2, [pc, #60]	@ (8000c18 <SSD1306_DrawPixel+0xbc>)
 8000bdc:	5cd3      	ldrb	r3, [r2, r3]
 8000bde:	b25a      	sxtb	r2, r3
 8000be0:	88bb      	ldrh	r3, [r7, #4]
 8000be2:	f003 0307 	and.w	r3, r3, #7
 8000be6:	2101      	movs	r1, #1
 8000be8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bec:	b25b      	sxtb	r3, r3
 8000bee:	43db      	mvns	r3, r3
 8000bf0:	b25b      	sxtb	r3, r3
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	b259      	sxtb	r1, r3
 8000bf6:	88fa      	ldrh	r2, [r7, #6]
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	01db      	lsls	r3, r3, #7
 8000bfc:	4413      	add	r3, r2
 8000bfe:	b2c9      	uxtb	r1, r1
 8000c00:	4a05      	ldr	r2, [pc, #20]	@ (8000c18 <SSD1306_DrawPixel+0xbc>)
 8000c02:	54d1      	strb	r1, [r2, r3]
 8000c04:	e000      	b.n	8000c08 <SSD1306_DrawPixel+0xac>
		return;
 8000c06:	bf00      	nop
	}
}
 8000c08:	370c      	adds	r7, #12
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	2000051c 	.word	0x2000051c
 8000c18:	2000011c 	.word	0x2000011c

08000c1c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	460a      	mov	r2, r1
 8000c26:	80fb      	strh	r3, [r7, #6]
 8000c28:	4613      	mov	r3, r2
 8000c2a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000c2c:	4a05      	ldr	r2, [pc, #20]	@ (8000c44 <SSD1306_GotoXY+0x28>)
 8000c2e:	88fb      	ldrh	r3, [r7, #6]
 8000c30:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8000c32:	4a04      	ldr	r2, [pc, #16]	@ (8000c44 <SSD1306_GotoXY+0x28>)
 8000c34:	88bb      	ldrh	r3, [r7, #4]
 8000c36:	8053      	strh	r3, [r2, #2]
}
 8000c38:	bf00      	nop
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	2000051c 	.word	0x2000051c

08000c48 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	6039      	str	r1, [r7, #0]
 8000c52:	71fb      	strb	r3, [r7, #7]
 8000c54:	4613      	mov	r3, r2
 8000c56:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000c58:	4b39      	ldr	r3, [pc, #228]	@ (8000d40 <SSD1306_Putc+0xf8>)
 8000c5a:	881b      	ldrh	r3, [r3, #0]
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	4413      	add	r3, r2
	if (
 8000c64:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c66:	dc07      	bgt.n	8000c78 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8000c68:	4b35      	ldr	r3, [pc, #212]	@ (8000d40 <SSD1306_Putc+0xf8>)
 8000c6a:	885b      	ldrh	r3, [r3, #2]
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	785b      	ldrb	r3, [r3, #1]
 8000c72:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8000c74:	2b3f      	cmp	r3, #63	@ 0x3f
 8000c76:	dd01      	ble.n	8000c7c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	e05d      	b.n	8000d38 <SSD1306_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	617b      	str	r3, [r7, #20]
 8000c80:	e04b      	b.n	8000d1a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	685a      	ldr	r2, [r3, #4]
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	3b20      	subs	r3, #32
 8000c8a:	6839      	ldr	r1, [r7, #0]
 8000c8c:	7849      	ldrb	r1, [r1, #1]
 8000c8e:	fb01 f303 	mul.w	r3, r1, r3
 8000c92:	4619      	mov	r1, r3
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	440b      	add	r3, r1
 8000c98:	005b      	lsls	r3, r3, #1
 8000c9a:	4413      	add	r3, r2
 8000c9c:	881b      	ldrh	r3, [r3, #0]
 8000c9e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	613b      	str	r3, [r7, #16]
 8000ca4:	e030      	b.n	8000d08 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8000ca6:	68fa      	ldr	r2, [r7, #12]
 8000ca8:	693b      	ldr	r3, [r7, #16]
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d010      	beq.n	8000cd8 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8000cb6:	4b22      	ldr	r3, [pc, #136]	@ (8000d40 <SSD1306_Putc+0xf8>)
 8000cb8:	881a      	ldrh	r2, [r3, #0]
 8000cba:	693b      	ldr	r3, [r7, #16]
 8000cbc:	b29b      	uxth	r3, r3
 8000cbe:	4413      	add	r3, r2
 8000cc0:	b298      	uxth	r0, r3
 8000cc2:	4b1f      	ldr	r3, [pc, #124]	@ (8000d40 <SSD1306_Putc+0xf8>)
 8000cc4:	885a      	ldrh	r2, [r3, #2]
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	b29b      	uxth	r3, r3
 8000cca:	4413      	add	r3, r2
 8000ccc:	b29b      	uxth	r3, r3
 8000cce:	79ba      	ldrb	r2, [r7, #6]
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	f7ff ff43 	bl	8000b5c <SSD1306_DrawPixel>
 8000cd6:	e014      	b.n	8000d02 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8000cd8:	4b19      	ldr	r3, [pc, #100]	@ (8000d40 <SSD1306_Putc+0xf8>)
 8000cda:	881a      	ldrh	r2, [r3, #0]
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	b29b      	uxth	r3, r3
 8000ce0:	4413      	add	r3, r2
 8000ce2:	b298      	uxth	r0, r3
 8000ce4:	4b16      	ldr	r3, [pc, #88]	@ (8000d40 <SSD1306_Putc+0xf8>)
 8000ce6:	885a      	ldrh	r2, [r3, #2]
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	b29b      	uxth	r3, r3
 8000cec:	4413      	add	r3, r2
 8000cee:	b299      	uxth	r1, r3
 8000cf0:	79bb      	ldrb	r3, [r7, #6]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	bf0c      	ite	eq
 8000cf6:	2301      	moveq	r3, #1
 8000cf8:	2300      	movne	r3, #0
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	461a      	mov	r2, r3
 8000cfe:	f7ff ff2d 	bl	8000b5c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	3301      	adds	r3, #1
 8000d06:	613b      	str	r3, [r7, #16]
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	693b      	ldr	r3, [r7, #16]
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d3c8      	bcc.n	8000ca6 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	3301      	adds	r3, #1
 8000d18:	617b      	str	r3, [r7, #20]
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	785b      	ldrb	r3, [r3, #1]
 8000d1e:	461a      	mov	r2, r3
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d3ad      	bcc.n	8000c82 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8000d26:	4b06      	ldr	r3, [pc, #24]	@ (8000d40 <SSD1306_Putc+0xf8>)
 8000d28:	881b      	ldrh	r3, [r3, #0]
 8000d2a:	683a      	ldr	r2, [r7, #0]
 8000d2c:	7812      	ldrb	r2, [r2, #0]
 8000d2e:	4413      	add	r3, r2
 8000d30:	b29a      	uxth	r2, r3
 8000d32:	4b03      	ldr	r3, [pc, #12]	@ (8000d40 <SSD1306_Putc+0xf8>)
 8000d34:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8000d36:	79fb      	ldrb	r3, [r7, #7]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3718      	adds	r7, #24
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	2000051c 	.word	0x2000051c

08000d44 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	60b9      	str	r1, [r7, #8]
 8000d4e:	4613      	mov	r3, r2
 8000d50:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8000d52:	e012      	b.n	8000d7a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	79fa      	ldrb	r2, [r7, #7]
 8000d5a:	68b9      	ldr	r1, [r7, #8]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f7ff ff73 	bl	8000c48 <SSD1306_Putc>
 8000d62:	4603      	mov	r3, r0
 8000d64:	461a      	mov	r2, r3
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	429a      	cmp	r2, r3
 8000d6c:	d002      	beq.n	8000d74 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	e008      	b.n	8000d86 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	3301      	adds	r3, #1
 8000d78:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d1e8      	bne.n	8000d54 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	781b      	ldrb	r3, [r3, #0]
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3710      	adds	r7, #16
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <SSD1306_Clear>:
        }
    }
}

void SSD1306_Clear (void)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8000d92:	2000      	movs	r0, #0
 8000d94:	f7ff feca 	bl	8000b2c <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8000d98:	f7ff fe9a 	bl	8000ad0 <SSD1306_UpdateScreen>
}
 8000d9c:	bf00      	nop
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8000da6:	4b08      	ldr	r3, [pc, #32]	@ (8000dc8 <ssd1306_I2C_Init+0x28>)
 8000da8:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000daa:	e002      	b.n	8000db2 <ssd1306_I2C_Init+0x12>
		p--;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	3b01      	subs	r3, #1
 8000db0:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d1f9      	bne.n	8000dac <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8000db8:	bf00      	nop
 8000dba:	bf00      	nop
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	0003d090 	.word	0x0003d090

08000dcc <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8000dcc:	b590      	push	{r4, r7, lr}
 8000dce:	b0c7      	sub	sp, #284	@ 0x11c
 8000dd0:	af02      	add	r7, sp, #8
 8000dd2:	4604      	mov	r4, r0
 8000dd4:	4608      	mov	r0, r1
 8000dd6:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8000dda:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8000dde:	600a      	str	r2, [r1, #0]
 8000de0:	4619      	mov	r1, r3
 8000de2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000de6:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000dea:	4622      	mov	r2, r4
 8000dec:	701a      	strb	r2, [r3, #0]
 8000dee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000df2:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8000df6:	4602      	mov	r2, r0
 8000df8:	701a      	strb	r2, [r3, #0]
 8000dfa:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000dfe:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000e02:	460a      	mov	r2, r1
 8000e04:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8000e06:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000e0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000e0e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000e12:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8000e16:	7812      	ldrb	r2, [r2, #0]
 8000e18:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8000e20:	e015      	b.n	8000e4e <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8000e22:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000e26:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000e2a:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8000e2e:	6812      	ldr	r2, [r2, #0]
 8000e30:	441a      	add	r2, r3
 8000e32:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000e36:	3301      	adds	r3, #1
 8000e38:	7811      	ldrb	r1, [r2, #0]
 8000e3a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000e3e:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000e42:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8000e44:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000e48:	3301      	adds	r3, #1
 8000e4a:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8000e4e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8000e58:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000e5c:	8812      	ldrh	r2, [r2, #0]
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	d8df      	bhi.n	8000e22 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, count+1, 10);
 8000e62:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000e66:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	b299      	uxth	r1, r3
 8000e6e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8000e72:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000e76:	881b      	ldrh	r3, [r3, #0]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	b29b      	uxth	r3, r3
 8000e7c:	f107 020c 	add.w	r2, r7, #12
 8000e80:	200a      	movs	r0, #10
 8000e82:	9000      	str	r0, [sp, #0]
 8000e84:	4803      	ldr	r0, [pc, #12]	@ (8000e94 <ssd1306_I2C_WriteMulti+0xc8>)
 8000e86:	f000 fe05 	bl	8001a94 <HAL_I2C_Master_Transmit>
}
 8000e8a:	bf00      	nop
 8000e8c:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd90      	pop	{r4, r7, pc}
 8000e94:	20000080 	.word	0x20000080

08000e98 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af02      	add	r7, sp, #8
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	71fb      	strb	r3, [r7, #7]
 8000ea2:	460b      	mov	r3, r1
 8000ea4:	71bb      	strb	r3, [r7, #6]
 8000ea6:	4613      	mov	r3, r2
 8000ea8:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8000eaa:	79bb      	ldrb	r3, [r7, #6]
 8000eac:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8000eae:	797b      	ldrb	r3, [r7, #5]
 8000eb0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, 2, 10);
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	b299      	uxth	r1, r3
 8000eb6:	f107 020c 	add.w	r2, r7, #12
 8000eba:	230a      	movs	r3, #10
 8000ebc:	9300      	str	r3, [sp, #0]
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	4803      	ldr	r0, [pc, #12]	@ (8000ed0 <ssd1306_I2C_Write+0x38>)
 8000ec2:	f000 fde7 	bl	8001a94 <HAL_I2C_Master_Transmit>
}
 8000ec6:	bf00      	nop
 8000ec8:	3710      	adds	r7, #16
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	20000080 	.word	0x20000080

08000ed4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eda:	2300      	movs	r3, #0
 8000edc:	607b      	str	r3, [r7, #4]
 8000ede:	4b10      	ldr	r3, [pc, #64]	@ (8000f20 <HAL_MspInit+0x4c>)
 8000ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ee2:	4a0f      	ldr	r2, [pc, #60]	@ (8000f20 <HAL_MspInit+0x4c>)
 8000ee4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ee8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eea:	4b0d      	ldr	r3, [pc, #52]	@ (8000f20 <HAL_MspInit+0x4c>)
 8000eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ef2:	607b      	str	r3, [r7, #4]
 8000ef4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	603b      	str	r3, [r7, #0]
 8000efa:	4b09      	ldr	r3, [pc, #36]	@ (8000f20 <HAL_MspInit+0x4c>)
 8000efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000efe:	4a08      	ldr	r2, [pc, #32]	@ (8000f20 <HAL_MspInit+0x4c>)
 8000f00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f04:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f06:	4b06      	ldr	r3, [pc, #24]	@ (8000f20 <HAL_MspInit+0x4c>)
 8000f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f0e:	603b      	str	r3, [r7, #0]
 8000f10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f12:	bf00      	nop
 8000f14:	370c      	adds	r7, #12
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	40023800 	.word	0x40023800

08000f24 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b08a      	sub	sp, #40	@ 0x28
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2c:	f107 0314 	add.w	r3, r7, #20
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a19      	ldr	r2, [pc, #100]	@ (8000fa8 <HAL_I2C_MspInit+0x84>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d12c      	bne.n	8000fa0 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	613b      	str	r3, [r7, #16]
 8000f4a:	4b18      	ldr	r3, [pc, #96]	@ (8000fac <HAL_I2C_MspInit+0x88>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4e:	4a17      	ldr	r2, [pc, #92]	@ (8000fac <HAL_I2C_MspInit+0x88>)
 8000f50:	f043 0302 	orr.w	r3, r3, #2
 8000f54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f56:	4b15      	ldr	r3, [pc, #84]	@ (8000fac <HAL_I2C_MspInit+0x88>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5a:	f003 0302 	and.w	r3, r3, #2
 8000f5e:	613b      	str	r3, [r7, #16]
 8000f60:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f62:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f68:	2312      	movs	r3, #18
 8000f6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f70:	2303      	movs	r3, #3
 8000f72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f74:	2304      	movs	r3, #4
 8000f76:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f78:	f107 0314 	add.w	r3, r7, #20
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	480c      	ldr	r0, [pc, #48]	@ (8000fb0 <HAL_I2C_MspInit+0x8c>)
 8000f80:	f000 fa7e 	bl	8001480 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f84:	2300      	movs	r3, #0
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	4b08      	ldr	r3, [pc, #32]	@ (8000fac <HAL_I2C_MspInit+0x88>)
 8000f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8c:	4a07      	ldr	r2, [pc, #28]	@ (8000fac <HAL_I2C_MspInit+0x88>)
 8000f8e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000f92:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f94:	4b05      	ldr	r3, [pc, #20]	@ (8000fac <HAL_I2C_MspInit+0x88>)
 8000f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f9c:	60fb      	str	r3, [r7, #12]
 8000f9e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000fa0:	bf00      	nop
 8000fa2:	3728      	adds	r7, #40	@ 0x28
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	40005400 	.word	0x40005400
 8000fac:	40023800 	.word	0x40023800
 8000fb0:	40020400 	.word	0x40020400

08000fb4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08a      	sub	sp, #40	@ 0x28
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbc:	f107 0314 	add.w	r3, r7, #20
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a19      	ldr	r2, [pc, #100]	@ (8001038 <HAL_UART_MspInit+0x84>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d12b      	bne.n	800102e <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	613b      	str	r3, [r7, #16]
 8000fda:	4b18      	ldr	r3, [pc, #96]	@ (800103c <HAL_UART_MspInit+0x88>)
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fde:	4a17      	ldr	r2, [pc, #92]	@ (800103c <HAL_UART_MspInit+0x88>)
 8000fe0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fe4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fe6:	4b15      	ldr	r3, [pc, #84]	@ (800103c <HAL_UART_MspInit+0x88>)
 8000fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fee:	613b      	str	r3, [r7, #16]
 8000ff0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	4b11      	ldr	r3, [pc, #68]	@ (800103c <HAL_UART_MspInit+0x88>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffa:	4a10      	ldr	r2, [pc, #64]	@ (800103c <HAL_UART_MspInit+0x88>)
 8000ffc:	f043 0301 	orr.w	r3, r3, #1
 8001000:	6313      	str	r3, [r2, #48]	@ 0x30
 8001002:	4b0e      	ldr	r3, [pc, #56]	@ (800103c <HAL_UART_MspInit+0x88>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800100e:	230c      	movs	r3, #12
 8001010:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001012:	2302      	movs	r3, #2
 8001014:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	2300      	movs	r3, #0
 8001018:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800101a:	2303      	movs	r3, #3
 800101c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800101e:	2307      	movs	r3, #7
 8001020:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001022:	f107 0314 	add.w	r3, r7, #20
 8001026:	4619      	mov	r1, r3
 8001028:	4805      	ldr	r0, [pc, #20]	@ (8001040 <HAL_UART_MspInit+0x8c>)
 800102a:	f000 fa29 	bl	8001480 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800102e:	bf00      	nop
 8001030:	3728      	adds	r7, #40	@ 0x28
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40004400 	.word	0x40004400
 800103c:	40023800 	.word	0x40023800
 8001040:	40020000 	.word	0x40020000

08001044 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001048:	bf00      	nop
 800104a:	e7fd      	b.n	8001048 <NMI_Handler+0x4>

0800104c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001050:	bf00      	nop
 8001052:	e7fd      	b.n	8001050 <HardFault_Handler+0x4>

08001054 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001058:	bf00      	nop
 800105a:	e7fd      	b.n	8001058 <MemManage_Handler+0x4>

0800105c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001060:	bf00      	nop
 8001062:	e7fd      	b.n	8001060 <BusFault_Handler+0x4>

08001064 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001068:	bf00      	nop
 800106a:	e7fd      	b.n	8001068 <UsageFault_Handler+0x4>

0800106c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr

0800107a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800108c:	bf00      	nop
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr

08001096 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800109a:	f000 f8c7 	bl	800122c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
	...

080010a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b086      	sub	sp, #24
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010ac:	4a14      	ldr	r2, [pc, #80]	@ (8001100 <_sbrk+0x5c>)
 80010ae:	4b15      	ldr	r3, [pc, #84]	@ (8001104 <_sbrk+0x60>)
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010b8:	4b13      	ldr	r3, [pc, #76]	@ (8001108 <_sbrk+0x64>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d102      	bne.n	80010c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010c0:	4b11      	ldr	r3, [pc, #68]	@ (8001108 <_sbrk+0x64>)
 80010c2:	4a12      	ldr	r2, [pc, #72]	@ (800110c <_sbrk+0x68>)
 80010c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010c6:	4b10      	ldr	r3, [pc, #64]	@ (8001108 <_sbrk+0x64>)
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4413      	add	r3, r2
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d207      	bcs.n	80010e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010d4:	f002 f9ca 	bl	800346c <__errno>
 80010d8:	4603      	mov	r3, r0
 80010da:	220c      	movs	r2, #12
 80010dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010e2:	e009      	b.n	80010f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010e4:	4b08      	ldr	r3, [pc, #32]	@ (8001108 <_sbrk+0x64>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010ea:	4b07      	ldr	r3, [pc, #28]	@ (8001108 <_sbrk+0x64>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4413      	add	r3, r2
 80010f2:	4a05      	ldr	r2, [pc, #20]	@ (8001108 <_sbrk+0x64>)
 80010f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010f6:	68fb      	ldr	r3, [r7, #12]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3718      	adds	r7, #24
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20020000 	.word	0x20020000
 8001104:	00000400 	.word	0x00000400
 8001108:	20000524 	.word	0x20000524
 800110c:	20000678 	.word	0x20000678

08001110 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001114:	4b06      	ldr	r3, [pc, #24]	@ (8001130 <SystemInit+0x20>)
 8001116:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800111a:	4a05      	ldr	r2, [pc, #20]	@ (8001130 <SystemInit+0x20>)
 800111c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001120:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	e000ed00 	.word	0xe000ed00

08001134 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001134:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800116c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001138:	f7ff ffea 	bl	8001110 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800113c:	480c      	ldr	r0, [pc, #48]	@ (8001170 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800113e:	490d      	ldr	r1, [pc, #52]	@ (8001174 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001140:	4a0d      	ldr	r2, [pc, #52]	@ (8001178 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001142:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001144:	e002      	b.n	800114c <LoopCopyDataInit>

08001146 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001146:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001148:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800114a:	3304      	adds	r3, #4

0800114c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800114c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800114e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001150:	d3f9      	bcc.n	8001146 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001152:	4a0a      	ldr	r2, [pc, #40]	@ (800117c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001154:	4c0a      	ldr	r4, [pc, #40]	@ (8001180 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001156:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001158:	e001      	b.n	800115e <LoopFillZerobss>

0800115a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800115a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800115c:	3204      	adds	r2, #4

0800115e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800115e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001160:	d3fb      	bcc.n	800115a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001162:	f002 f989 	bl	8003478 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001166:	f7ff fa39 	bl	80005dc <main>
  bx  lr    
 800116a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800116c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001170:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001174:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001178:	08004b4c 	.word	0x08004b4c
  ldr r2, =_sbss
 800117c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001180:	20000674 	.word	0x20000674

08001184 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001184:	e7fe      	b.n	8001184 <ADC_IRQHandler>
	...

08001188 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800118c:	4b0e      	ldr	r3, [pc, #56]	@ (80011c8 <HAL_Init+0x40>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a0d      	ldr	r2, [pc, #52]	@ (80011c8 <HAL_Init+0x40>)
 8001192:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001196:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001198:	4b0b      	ldr	r3, [pc, #44]	@ (80011c8 <HAL_Init+0x40>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a0a      	ldr	r2, [pc, #40]	@ (80011c8 <HAL_Init+0x40>)
 800119e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011a4:	4b08      	ldr	r3, [pc, #32]	@ (80011c8 <HAL_Init+0x40>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a07      	ldr	r2, [pc, #28]	@ (80011c8 <HAL_Init+0x40>)
 80011aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011b0:	2003      	movs	r0, #3
 80011b2:	f000 f931 	bl	8001418 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011b6:	200f      	movs	r0, #15
 80011b8:	f000 f808 	bl	80011cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011bc:	f7ff fe8a 	bl	8000ed4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011c0:	2300      	movs	r3, #0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40023c00 	.word	0x40023c00

080011cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011d4:	4b12      	ldr	r3, [pc, #72]	@ (8001220 <HAL_InitTick+0x54>)
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	4b12      	ldr	r3, [pc, #72]	@ (8001224 <HAL_InitTick+0x58>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	4619      	mov	r1, r3
 80011de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011ea:	4618      	mov	r0, r3
 80011ec:	f000 f93b 	bl	8001466 <HAL_SYSTICK_Config>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e00e      	b.n	8001218 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2b0f      	cmp	r3, #15
 80011fe:	d80a      	bhi.n	8001216 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001200:	2200      	movs	r2, #0
 8001202:	6879      	ldr	r1, [r7, #4]
 8001204:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001208:	f000 f911 	bl	800142e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800120c:	4a06      	ldr	r2, [pc, #24]	@ (8001228 <HAL_InitTick+0x5c>)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001212:	2300      	movs	r3, #0
 8001214:	e000      	b.n	8001218 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
}
 8001218:	4618      	mov	r0, r3
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	20000008 	.word	0x20000008
 8001224:	20000010 	.word	0x20000010
 8001228:	2000000c 	.word	0x2000000c

0800122c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001230:	4b06      	ldr	r3, [pc, #24]	@ (800124c <HAL_IncTick+0x20>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	461a      	mov	r2, r3
 8001236:	4b06      	ldr	r3, [pc, #24]	@ (8001250 <HAL_IncTick+0x24>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4413      	add	r3, r2
 800123c:	4a04      	ldr	r2, [pc, #16]	@ (8001250 <HAL_IncTick+0x24>)
 800123e:	6013      	str	r3, [r2, #0]
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	20000010 	.word	0x20000010
 8001250:	20000528 	.word	0x20000528

08001254 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  return uwTick;
 8001258:	4b03      	ldr	r3, [pc, #12]	@ (8001268 <HAL_GetTick+0x14>)
 800125a:	681b      	ldr	r3, [r3, #0]
}
 800125c:	4618      	mov	r0, r3
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	20000528 	.word	0x20000528

0800126c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b084      	sub	sp, #16
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001274:	f7ff ffee 	bl	8001254 <HAL_GetTick>
 8001278:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001284:	d005      	beq.n	8001292 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001286:	4b0a      	ldr	r3, [pc, #40]	@ (80012b0 <HAL_Delay+0x44>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	461a      	mov	r2, r3
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	4413      	add	r3, r2
 8001290:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001292:	bf00      	nop
 8001294:	f7ff ffde 	bl	8001254 <HAL_GetTick>
 8001298:	4602      	mov	r2, r0
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	68fa      	ldr	r2, [r7, #12]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d8f7      	bhi.n	8001294 <HAL_Delay+0x28>
  {
  }
}
 80012a4:	bf00      	nop
 80012a6:	bf00      	nop
 80012a8:	3710      	adds	r7, #16
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20000010 	.word	0x20000010

080012b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f003 0307 	and.w	r3, r3, #7
 80012c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012c4:	4b0c      	ldr	r3, [pc, #48]	@ (80012f8 <__NVIC_SetPriorityGrouping+0x44>)
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ca:	68ba      	ldr	r2, [r7, #8]
 80012cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012d0:	4013      	ands	r3, r2
 80012d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012e6:	4a04      	ldr	r2, [pc, #16]	@ (80012f8 <__NVIC_SetPriorityGrouping+0x44>)
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	60d3      	str	r3, [r2, #12]
}
 80012ec:	bf00      	nop
 80012ee:	3714      	adds	r7, #20
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr
 80012f8:	e000ed00 	.word	0xe000ed00

080012fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001300:	4b04      	ldr	r3, [pc, #16]	@ (8001314 <__NVIC_GetPriorityGrouping+0x18>)
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	0a1b      	lsrs	r3, r3, #8
 8001306:	f003 0307 	and.w	r3, r3, #7
}
 800130a:	4618      	mov	r0, r3
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	e000ed00 	.word	0xe000ed00

08001318 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	6039      	str	r1, [r7, #0]
 8001322:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001324:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001328:	2b00      	cmp	r3, #0
 800132a:	db0a      	blt.n	8001342 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	b2da      	uxtb	r2, r3
 8001330:	490c      	ldr	r1, [pc, #48]	@ (8001364 <__NVIC_SetPriority+0x4c>)
 8001332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001336:	0112      	lsls	r2, r2, #4
 8001338:	b2d2      	uxtb	r2, r2
 800133a:	440b      	add	r3, r1
 800133c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001340:	e00a      	b.n	8001358 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	b2da      	uxtb	r2, r3
 8001346:	4908      	ldr	r1, [pc, #32]	@ (8001368 <__NVIC_SetPriority+0x50>)
 8001348:	79fb      	ldrb	r3, [r7, #7]
 800134a:	f003 030f 	and.w	r3, r3, #15
 800134e:	3b04      	subs	r3, #4
 8001350:	0112      	lsls	r2, r2, #4
 8001352:	b2d2      	uxtb	r2, r2
 8001354:	440b      	add	r3, r1
 8001356:	761a      	strb	r2, [r3, #24]
}
 8001358:	bf00      	nop
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	e000e100 	.word	0xe000e100
 8001368:	e000ed00 	.word	0xe000ed00

0800136c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800136c:	b480      	push	{r7}
 800136e:	b089      	sub	sp, #36	@ 0x24
 8001370:	af00      	add	r7, sp, #0
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	60b9      	str	r1, [r7, #8]
 8001376:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	f003 0307 	and.w	r3, r3, #7
 800137e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	f1c3 0307 	rsb	r3, r3, #7
 8001386:	2b04      	cmp	r3, #4
 8001388:	bf28      	it	cs
 800138a:	2304      	movcs	r3, #4
 800138c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	3304      	adds	r3, #4
 8001392:	2b06      	cmp	r3, #6
 8001394:	d902      	bls.n	800139c <NVIC_EncodePriority+0x30>
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	3b03      	subs	r3, #3
 800139a:	e000      	b.n	800139e <NVIC_EncodePriority+0x32>
 800139c:	2300      	movs	r3, #0
 800139e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	43da      	mvns	r2, r3
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	401a      	ands	r2, r3
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013b4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	fa01 f303 	lsl.w	r3, r1, r3
 80013be:	43d9      	mvns	r1, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c4:	4313      	orrs	r3, r2
         );
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3724      	adds	r7, #36	@ 0x24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
	...

080013d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	3b01      	subs	r3, #1
 80013e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013e4:	d301      	bcc.n	80013ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013e6:	2301      	movs	r3, #1
 80013e8:	e00f      	b.n	800140a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001414 <SysTick_Config+0x40>)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	3b01      	subs	r3, #1
 80013f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013f2:	210f      	movs	r1, #15
 80013f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80013f8:	f7ff ff8e 	bl	8001318 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013fc:	4b05      	ldr	r3, [pc, #20]	@ (8001414 <SysTick_Config+0x40>)
 80013fe:	2200      	movs	r2, #0
 8001400:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001402:	4b04      	ldr	r3, [pc, #16]	@ (8001414 <SysTick_Config+0x40>)
 8001404:	2207      	movs	r2, #7
 8001406:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	e000e010 	.word	0xe000e010

08001418 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f7ff ff47 	bl	80012b4 <__NVIC_SetPriorityGrouping>
}
 8001426:	bf00      	nop
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}

0800142e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800142e:	b580      	push	{r7, lr}
 8001430:	b086      	sub	sp, #24
 8001432:	af00      	add	r7, sp, #0
 8001434:	4603      	mov	r3, r0
 8001436:	60b9      	str	r1, [r7, #8]
 8001438:	607a      	str	r2, [r7, #4]
 800143a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800143c:	2300      	movs	r3, #0
 800143e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001440:	f7ff ff5c 	bl	80012fc <__NVIC_GetPriorityGrouping>
 8001444:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	68b9      	ldr	r1, [r7, #8]
 800144a:	6978      	ldr	r0, [r7, #20]
 800144c:	f7ff ff8e 	bl	800136c <NVIC_EncodePriority>
 8001450:	4602      	mov	r2, r0
 8001452:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001456:	4611      	mov	r1, r2
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff ff5d 	bl	8001318 <__NVIC_SetPriority>
}
 800145e:	bf00      	nop
 8001460:	3718      	adds	r7, #24
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	b082      	sub	sp, #8
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7ff ffb0 	bl	80013d4 <SysTick_Config>
 8001474:	4603      	mov	r3, r0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
	...

08001480 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001480:	b480      	push	{r7}
 8001482:	b089      	sub	sp, #36	@ 0x24
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800148a:	2300      	movs	r3, #0
 800148c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800148e:	2300      	movs	r3, #0
 8001490:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001492:	2300      	movs	r3, #0
 8001494:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001496:	2300      	movs	r3, #0
 8001498:	61fb      	str	r3, [r7, #28]
 800149a:	e165      	b.n	8001768 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800149c:	2201      	movs	r2, #1
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	697a      	ldr	r2, [r7, #20]
 80014ac:	4013      	ands	r3, r2
 80014ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014b0:	693a      	ldr	r2, [r7, #16]
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	f040 8154 	bne.w	8001762 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f003 0303 	and.w	r3, r3, #3
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d005      	beq.n	80014d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d130      	bne.n	8001534 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	2203      	movs	r2, #3
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	43db      	mvns	r3, r3
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	4013      	ands	r3, r2
 80014e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	68da      	ldr	r2, [r3, #12]
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001508:	2201      	movs	r2, #1
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	43db      	mvns	r3, r3
 8001512:	69ba      	ldr	r2, [r7, #24]
 8001514:	4013      	ands	r3, r2
 8001516:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	091b      	lsrs	r3, r3, #4
 800151e:	f003 0201 	and.w	r2, r3, #1
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	4313      	orrs	r3, r2
 800152c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f003 0303 	and.w	r3, r3, #3
 800153c:	2b03      	cmp	r3, #3
 800153e:	d017      	beq.n	8001570 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	2203      	movs	r2, #3
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	43db      	mvns	r3, r3
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	4013      	ands	r3, r2
 8001556:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	689a      	ldr	r2, [r3, #8]
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	4313      	orrs	r3, r2
 8001568:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f003 0303 	and.w	r3, r3, #3
 8001578:	2b02      	cmp	r3, #2
 800157a:	d123      	bne.n	80015c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	08da      	lsrs	r2, r3, #3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	3208      	adds	r2, #8
 8001584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001588:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	f003 0307 	and.w	r3, r3, #7
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	220f      	movs	r2, #15
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	43db      	mvns	r3, r3
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	4013      	ands	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	691a      	ldr	r2, [r3, #16]
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	08da      	lsrs	r2, r3, #3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	3208      	adds	r2, #8
 80015be:	69b9      	ldr	r1, [r7, #24]
 80015c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	2203      	movs	r2, #3
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	43db      	mvns	r3, r3
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	4013      	ands	r3, r2
 80015da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f003 0203 	and.w	r2, r3, #3
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001600:	2b00      	cmp	r3, #0
 8001602:	f000 80ae 	beq.w	8001762 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	60fb      	str	r3, [r7, #12]
 800160a:	4b5d      	ldr	r3, [pc, #372]	@ (8001780 <HAL_GPIO_Init+0x300>)
 800160c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800160e:	4a5c      	ldr	r2, [pc, #368]	@ (8001780 <HAL_GPIO_Init+0x300>)
 8001610:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001614:	6453      	str	r3, [r2, #68]	@ 0x44
 8001616:	4b5a      	ldr	r3, [pc, #360]	@ (8001780 <HAL_GPIO_Init+0x300>)
 8001618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800161a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001622:	4a58      	ldr	r2, [pc, #352]	@ (8001784 <HAL_GPIO_Init+0x304>)
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	089b      	lsrs	r3, r3, #2
 8001628:	3302      	adds	r3, #2
 800162a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800162e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	f003 0303 	and.w	r3, r3, #3
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	220f      	movs	r2, #15
 800163a:	fa02 f303 	lsl.w	r3, r2, r3
 800163e:	43db      	mvns	r3, r3
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	4013      	ands	r3, r2
 8001644:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4a4f      	ldr	r2, [pc, #316]	@ (8001788 <HAL_GPIO_Init+0x308>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d025      	beq.n	800169a <HAL_GPIO_Init+0x21a>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4a4e      	ldr	r2, [pc, #312]	@ (800178c <HAL_GPIO_Init+0x30c>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d01f      	beq.n	8001696 <HAL_GPIO_Init+0x216>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4a4d      	ldr	r2, [pc, #308]	@ (8001790 <HAL_GPIO_Init+0x310>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d019      	beq.n	8001692 <HAL_GPIO_Init+0x212>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4a4c      	ldr	r2, [pc, #304]	@ (8001794 <HAL_GPIO_Init+0x314>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d013      	beq.n	800168e <HAL_GPIO_Init+0x20e>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4a4b      	ldr	r2, [pc, #300]	@ (8001798 <HAL_GPIO_Init+0x318>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d00d      	beq.n	800168a <HAL_GPIO_Init+0x20a>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4a4a      	ldr	r2, [pc, #296]	@ (800179c <HAL_GPIO_Init+0x31c>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d007      	beq.n	8001686 <HAL_GPIO_Init+0x206>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a49      	ldr	r2, [pc, #292]	@ (80017a0 <HAL_GPIO_Init+0x320>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d101      	bne.n	8001682 <HAL_GPIO_Init+0x202>
 800167e:	2306      	movs	r3, #6
 8001680:	e00c      	b.n	800169c <HAL_GPIO_Init+0x21c>
 8001682:	2307      	movs	r3, #7
 8001684:	e00a      	b.n	800169c <HAL_GPIO_Init+0x21c>
 8001686:	2305      	movs	r3, #5
 8001688:	e008      	b.n	800169c <HAL_GPIO_Init+0x21c>
 800168a:	2304      	movs	r3, #4
 800168c:	e006      	b.n	800169c <HAL_GPIO_Init+0x21c>
 800168e:	2303      	movs	r3, #3
 8001690:	e004      	b.n	800169c <HAL_GPIO_Init+0x21c>
 8001692:	2302      	movs	r3, #2
 8001694:	e002      	b.n	800169c <HAL_GPIO_Init+0x21c>
 8001696:	2301      	movs	r3, #1
 8001698:	e000      	b.n	800169c <HAL_GPIO_Init+0x21c>
 800169a:	2300      	movs	r3, #0
 800169c:	69fa      	ldr	r2, [r7, #28]
 800169e:	f002 0203 	and.w	r2, r2, #3
 80016a2:	0092      	lsls	r2, r2, #2
 80016a4:	4093      	lsls	r3, r2
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016ac:	4935      	ldr	r1, [pc, #212]	@ (8001784 <HAL_GPIO_Init+0x304>)
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	089b      	lsrs	r3, r3, #2
 80016b2:	3302      	adds	r3, #2
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016ba:	4b3a      	ldr	r3, [pc, #232]	@ (80017a4 <HAL_GPIO_Init+0x324>)
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	43db      	mvns	r3, r3
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	4013      	ands	r3, r2
 80016c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d003      	beq.n	80016de <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	4313      	orrs	r3, r2
 80016dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016de:	4a31      	ldr	r2, [pc, #196]	@ (80017a4 <HAL_GPIO_Init+0x324>)
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016e4:	4b2f      	ldr	r3, [pc, #188]	@ (80017a4 <HAL_GPIO_Init+0x324>)
 80016e6:	68db      	ldr	r3, [r3, #12]
 80016e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	43db      	mvns	r3, r3
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	4013      	ands	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d003      	beq.n	8001708 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	4313      	orrs	r3, r2
 8001706:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001708:	4a26      	ldr	r2, [pc, #152]	@ (80017a4 <HAL_GPIO_Init+0x324>)
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800170e:	4b25      	ldr	r3, [pc, #148]	@ (80017a4 <HAL_GPIO_Init+0x324>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	43db      	mvns	r3, r3
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	4013      	ands	r3, r2
 800171c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d003      	beq.n	8001732 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	4313      	orrs	r3, r2
 8001730:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001732:	4a1c      	ldr	r2, [pc, #112]	@ (80017a4 <HAL_GPIO_Init+0x324>)
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001738:	4b1a      	ldr	r3, [pc, #104]	@ (80017a4 <HAL_GPIO_Init+0x324>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	43db      	mvns	r3, r3
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	4013      	ands	r3, r2
 8001746:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d003      	beq.n	800175c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	4313      	orrs	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800175c:	4a11      	ldr	r2, [pc, #68]	@ (80017a4 <HAL_GPIO_Init+0x324>)
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	3301      	adds	r3, #1
 8001766:	61fb      	str	r3, [r7, #28]
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	2b0f      	cmp	r3, #15
 800176c:	f67f ae96 	bls.w	800149c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001770:	bf00      	nop
 8001772:	bf00      	nop
 8001774:	3724      	adds	r7, #36	@ 0x24
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	40023800 	.word	0x40023800
 8001784:	40013800 	.word	0x40013800
 8001788:	40020000 	.word	0x40020000
 800178c:	40020400 	.word	0x40020400
 8001790:	40020800 	.word	0x40020800
 8001794:	40020c00 	.word	0x40020c00
 8001798:	40021000 	.word	0x40021000
 800179c:	40021400 	.word	0x40021400
 80017a0:	40021800 	.word	0x40021800
 80017a4:	40013c00 	.word	0x40013c00

080017a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	460b      	mov	r3, r1
 80017b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	691a      	ldr	r2, [r3, #16]
 80017b8:	887b      	ldrh	r3, [r7, #2]
 80017ba:	4013      	ands	r3, r2
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d002      	beq.n	80017c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80017c0:	2301      	movs	r3, #1
 80017c2:	73fb      	strb	r3, [r7, #15]
 80017c4:	e001      	b.n	80017ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017c6:	2300      	movs	r3, #0
 80017c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3714      	adds	r7, #20
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	460b      	mov	r3, r1
 80017e2:	807b      	strh	r3, [r7, #2]
 80017e4:	4613      	mov	r3, r2
 80017e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017e8:	787b      	ldrb	r3, [r7, #1]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d003      	beq.n	80017f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017ee:	887a      	ldrh	r2, [r7, #2]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017f4:	e003      	b.n	80017fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017f6:	887b      	ldrh	r3, [r7, #2]
 80017f8:	041a      	lsls	r2, r3, #16
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	619a      	str	r2, [r3, #24]
}
 80017fe:	bf00      	nop
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
	...

0800180c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d101      	bne.n	800181e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	e12b      	b.n	8001a76 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001824:	b2db      	uxtb	r3, r3
 8001826:	2b00      	cmp	r3, #0
 8001828:	d106      	bne.n	8001838 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f7ff fb76 	bl	8000f24 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2224      	movs	r2, #36	@ 0x24
 800183c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f022 0201 	bic.w	r2, r2, #1
 800184e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800185e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800186e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001870:	f000 fe8a 	bl	8002588 <HAL_RCC_GetPCLK1Freq>
 8001874:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	4a81      	ldr	r2, [pc, #516]	@ (8001a80 <HAL_I2C_Init+0x274>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d807      	bhi.n	8001890 <HAL_I2C_Init+0x84>
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	4a80      	ldr	r2, [pc, #512]	@ (8001a84 <HAL_I2C_Init+0x278>)
 8001884:	4293      	cmp	r3, r2
 8001886:	bf94      	ite	ls
 8001888:	2301      	movls	r3, #1
 800188a:	2300      	movhi	r3, #0
 800188c:	b2db      	uxtb	r3, r3
 800188e:	e006      	b.n	800189e <HAL_I2C_Init+0x92>
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	4a7d      	ldr	r2, [pc, #500]	@ (8001a88 <HAL_I2C_Init+0x27c>)
 8001894:	4293      	cmp	r3, r2
 8001896:	bf94      	ite	ls
 8001898:	2301      	movls	r3, #1
 800189a:	2300      	movhi	r3, #0
 800189c:	b2db      	uxtb	r3, r3
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e0e7      	b.n	8001a76 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	4a78      	ldr	r2, [pc, #480]	@ (8001a8c <HAL_I2C_Init+0x280>)
 80018aa:	fba2 2303 	umull	r2, r3, r2, r3
 80018ae:	0c9b      	lsrs	r3, r3, #18
 80018b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	68ba      	ldr	r2, [r7, #8]
 80018c2:	430a      	orrs	r2, r1
 80018c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	6a1b      	ldr	r3, [r3, #32]
 80018cc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	4a6a      	ldr	r2, [pc, #424]	@ (8001a80 <HAL_I2C_Init+0x274>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d802      	bhi.n	80018e0 <HAL_I2C_Init+0xd4>
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	3301      	adds	r3, #1
 80018de:	e009      	b.n	80018f4 <HAL_I2C_Init+0xe8>
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80018e6:	fb02 f303 	mul.w	r3, r2, r3
 80018ea:	4a69      	ldr	r2, [pc, #420]	@ (8001a90 <HAL_I2C_Init+0x284>)
 80018ec:	fba2 2303 	umull	r2, r3, r2, r3
 80018f0:	099b      	lsrs	r3, r3, #6
 80018f2:	3301      	adds	r3, #1
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	6812      	ldr	r2, [r2, #0]
 80018f8:	430b      	orrs	r3, r1
 80018fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	69db      	ldr	r3, [r3, #28]
 8001902:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001906:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	495c      	ldr	r1, [pc, #368]	@ (8001a80 <HAL_I2C_Init+0x274>)
 8001910:	428b      	cmp	r3, r1
 8001912:	d819      	bhi.n	8001948 <HAL_I2C_Init+0x13c>
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	1e59      	subs	r1, r3, #1
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001922:	1c59      	adds	r1, r3, #1
 8001924:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001928:	400b      	ands	r3, r1
 800192a:	2b00      	cmp	r3, #0
 800192c:	d00a      	beq.n	8001944 <HAL_I2C_Init+0x138>
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	1e59      	subs	r1, r3, #1
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	fbb1 f3f3 	udiv	r3, r1, r3
 800193c:	3301      	adds	r3, #1
 800193e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001942:	e051      	b.n	80019e8 <HAL_I2C_Init+0x1dc>
 8001944:	2304      	movs	r3, #4
 8001946:	e04f      	b.n	80019e8 <HAL_I2C_Init+0x1dc>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d111      	bne.n	8001974 <HAL_I2C_Init+0x168>
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	1e58      	subs	r0, r3, #1
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6859      	ldr	r1, [r3, #4]
 8001958:	460b      	mov	r3, r1
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	440b      	add	r3, r1
 800195e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001962:	3301      	adds	r3, #1
 8001964:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001968:	2b00      	cmp	r3, #0
 800196a:	bf0c      	ite	eq
 800196c:	2301      	moveq	r3, #1
 800196e:	2300      	movne	r3, #0
 8001970:	b2db      	uxtb	r3, r3
 8001972:	e012      	b.n	800199a <HAL_I2C_Init+0x18e>
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	1e58      	subs	r0, r3, #1
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6859      	ldr	r1, [r3, #4]
 800197c:	460b      	mov	r3, r1
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	440b      	add	r3, r1
 8001982:	0099      	lsls	r1, r3, #2
 8001984:	440b      	add	r3, r1
 8001986:	fbb0 f3f3 	udiv	r3, r0, r3
 800198a:	3301      	adds	r3, #1
 800198c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001990:	2b00      	cmp	r3, #0
 8001992:	bf0c      	ite	eq
 8001994:	2301      	moveq	r3, #1
 8001996:	2300      	movne	r3, #0
 8001998:	b2db      	uxtb	r3, r3
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <HAL_I2C_Init+0x196>
 800199e:	2301      	movs	r3, #1
 80019a0:	e022      	b.n	80019e8 <HAL_I2C_Init+0x1dc>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d10e      	bne.n	80019c8 <HAL_I2C_Init+0x1bc>
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	1e58      	subs	r0, r3, #1
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6859      	ldr	r1, [r3, #4]
 80019b2:	460b      	mov	r3, r1
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	440b      	add	r3, r1
 80019b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80019bc:	3301      	adds	r3, #1
 80019be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80019c6:	e00f      	b.n	80019e8 <HAL_I2C_Init+0x1dc>
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	1e58      	subs	r0, r3, #1
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6859      	ldr	r1, [r3, #4]
 80019d0:	460b      	mov	r3, r1
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	440b      	add	r3, r1
 80019d6:	0099      	lsls	r1, r3, #2
 80019d8:	440b      	add	r3, r1
 80019da:	fbb0 f3f3 	udiv	r3, r0, r3
 80019de:	3301      	adds	r3, #1
 80019e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019e4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80019e8:	6879      	ldr	r1, [r7, #4]
 80019ea:	6809      	ldr	r1, [r1, #0]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	69da      	ldr	r2, [r3, #28]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a1b      	ldr	r3, [r3, #32]
 8001a02:	431a      	orrs	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001a16:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001a1a:	687a      	ldr	r2, [r7, #4]
 8001a1c:	6911      	ldr	r1, [r2, #16]
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	68d2      	ldr	r2, [r2, #12]
 8001a22:	4311      	orrs	r1, r2
 8001a24:	687a      	ldr	r2, [r7, #4]
 8001a26:	6812      	ldr	r2, [r2, #0]
 8001a28:	430b      	orrs	r3, r1
 8001a2a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	68db      	ldr	r3, [r3, #12]
 8001a32:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	695a      	ldr	r2, [r3, #20]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	699b      	ldr	r3, [r3, #24]
 8001a3e:	431a      	orrs	r2, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	430a      	orrs	r2, r1
 8001a46:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f042 0201 	orr.w	r2, r2, #1
 8001a56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2220      	movs	r2, #32
 8001a62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3710      	adds	r7, #16
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	000186a0 	.word	0x000186a0
 8001a84:	001e847f 	.word	0x001e847f
 8001a88:	003d08ff 	.word	0x003d08ff
 8001a8c:	431bde83 	.word	0x431bde83
 8001a90:	10624dd3 	.word	0x10624dd3

08001a94 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b088      	sub	sp, #32
 8001a98:	af02      	add	r7, sp, #8
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	607a      	str	r2, [r7, #4]
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	817b      	strh	r3, [r7, #10]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001aa8:	f7ff fbd4 	bl	8001254 <HAL_GetTick>
 8001aac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	2b20      	cmp	r3, #32
 8001ab8:	f040 80e0 	bne.w	8001c7c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	9300      	str	r3, [sp, #0]
 8001ac0:	2319      	movs	r3, #25
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	4970      	ldr	r1, [pc, #448]	@ (8001c88 <HAL_I2C_Master_Transmit+0x1f4>)
 8001ac6:	68f8      	ldr	r0, [r7, #12]
 8001ac8:	f000 fa92 	bl	8001ff0 <I2C_WaitOnFlagUntilTimeout>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	e0d3      	b.n	8001c7e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d101      	bne.n	8001ae4 <HAL_I2C_Master_Transmit+0x50>
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	e0cc      	b.n	8001c7e <HAL_I2C_Master_Transmit+0x1ea>
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d007      	beq.n	8001b0a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f042 0201 	orr.w	r2, r2, #1
 8001b08:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b18:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	2221      	movs	r2, #33	@ 0x21
 8001b1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2210      	movs	r2, #16
 8001b26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	893a      	ldrh	r2, [r7, #8]
 8001b3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b40:	b29a      	uxth	r2, r3
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	4a50      	ldr	r2, [pc, #320]	@ (8001c8c <HAL_I2C_Master_Transmit+0x1f8>)
 8001b4a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001b4c:	8979      	ldrh	r1, [r7, #10]
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	6a3a      	ldr	r2, [r7, #32]
 8001b52:	68f8      	ldr	r0, [r7, #12]
 8001b54:	f000 f9ca 	bl	8001eec <I2C_MasterRequestWrite>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e08d      	b.n	8001c7e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001b62:	2300      	movs	r3, #0
 8001b64:	613b      	str	r3, [r7, #16]
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	695b      	ldr	r3, [r3, #20]
 8001b6c:	613b      	str	r3, [r7, #16]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	699b      	ldr	r3, [r3, #24]
 8001b74:	613b      	str	r3, [r7, #16]
 8001b76:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001b78:	e066      	b.n	8001c48 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b7a:	697a      	ldr	r2, [r7, #20]
 8001b7c:	6a39      	ldr	r1, [r7, #32]
 8001b7e:	68f8      	ldr	r0, [r7, #12]
 8001b80:	f000 fb50 	bl	8002224 <I2C_WaitOnTXEFlagUntilTimeout>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d00d      	beq.n	8001ba6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b8e:	2b04      	cmp	r3, #4
 8001b90:	d107      	bne.n	8001ba2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ba0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e06b      	b.n	8001c7e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001baa:	781a      	ldrb	r2, [r3, #0]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bb6:	1c5a      	adds	r2, r3, #1
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	3b01      	subs	r3, #1
 8001bc4:	b29a      	uxth	r2, r3
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	b29a      	uxth	r2, r3
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	695b      	ldr	r3, [r3, #20]
 8001bdc:	f003 0304 	and.w	r3, r3, #4
 8001be0:	2b04      	cmp	r3, #4
 8001be2:	d11b      	bne.n	8001c1c <HAL_I2C_Master_Transmit+0x188>
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d017      	beq.n	8001c1c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bf0:	781a      	ldrb	r2, [r3, #0]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bfc:	1c5a      	adds	r2, r3, #1
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c06:	b29b      	uxth	r3, r3
 8001c08:	3b01      	subs	r3, #1
 8001c0a:	b29a      	uxth	r2, r3
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c14:	3b01      	subs	r3, #1
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c1c:	697a      	ldr	r2, [r7, #20]
 8001c1e:	6a39      	ldr	r1, [r7, #32]
 8001c20:	68f8      	ldr	r0, [r7, #12]
 8001c22:	f000 fb47 	bl	80022b4 <I2C_WaitOnBTFFlagUntilTimeout>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d00d      	beq.n	8001c48 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c30:	2b04      	cmp	r3, #4
 8001c32:	d107      	bne.n	8001c44 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c42:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e01a      	b.n	8001c7e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d194      	bne.n	8001b7a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2220      	movs	r2, #32
 8001c64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2200      	movs	r2, #0
 8001c74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	e000      	b.n	8001c7e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001c7c:	2302      	movs	r3, #2
  }
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3718      	adds	r7, #24
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	00100002 	.word	0x00100002
 8001c8c:	ffff0000 	.word	0xffff0000

08001c90 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b08a      	sub	sp, #40	@ 0x28
 8001c94:	af02      	add	r7, sp, #8
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	607a      	str	r2, [r7, #4]
 8001c9a:	603b      	str	r3, [r7, #0]
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001ca0:	f7ff fad8 	bl	8001254 <HAL_GetTick>
 8001ca4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	2b20      	cmp	r3, #32
 8001cb4:	f040 8111 	bne.w	8001eda <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	9300      	str	r3, [sp, #0]
 8001cbc:	2319      	movs	r3, #25
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	4988      	ldr	r1, [pc, #544]	@ (8001ee4 <HAL_I2C_IsDeviceReady+0x254>)
 8001cc2:	68f8      	ldr	r0, [r7, #12]
 8001cc4:	f000 f994 	bl	8001ff0 <I2C_WaitOnFlagUntilTimeout>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001cce:	2302      	movs	r3, #2
 8001cd0:	e104      	b.n	8001edc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d101      	bne.n	8001ce0 <HAL_I2C_IsDeviceReady+0x50>
 8001cdc:	2302      	movs	r3, #2
 8001cde:	e0fd      	b.n	8001edc <HAL_I2C_IsDeviceReady+0x24c>
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0301 	and.w	r3, r3, #1
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d007      	beq.n	8001d06 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f042 0201 	orr.w	r2, r2, #1
 8001d04:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d14:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2224      	movs	r2, #36	@ 0x24
 8001d1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2200      	movs	r2, #0
 8001d22:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	4a70      	ldr	r2, [pc, #448]	@ (8001ee8 <HAL_I2C_IsDeviceReady+0x258>)
 8001d28:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d38:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	9300      	str	r3, [sp, #0]
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	2200      	movs	r2, #0
 8001d42:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001d46:	68f8      	ldr	r0, [r7, #12]
 8001d48:	f000 f952 	bl	8001ff0 <I2C_WaitOnFlagUntilTimeout>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d00d      	beq.n	8001d6e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d60:	d103      	bne.n	8001d6a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d68:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e0b6      	b.n	8001edc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d6e:	897b      	ldrh	r3, [r7, #10]
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	461a      	mov	r2, r3
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001d7c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001d7e:	f7ff fa69 	bl	8001254 <HAL_GetTick>
 8001d82:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	695b      	ldr	r3, [r3, #20]
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	bf0c      	ite	eq
 8001d92:	2301      	moveq	r3, #1
 8001d94:	2300      	movne	r3, #0
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	695b      	ldr	r3, [r3, #20]
 8001da0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001da4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001da8:	bf0c      	ite	eq
 8001daa:	2301      	moveq	r3, #1
 8001dac:	2300      	movne	r3, #0
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001db2:	e025      	b.n	8001e00 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001db4:	f7ff fa4e 	bl	8001254 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	683a      	ldr	r2, [r7, #0]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d302      	bcc.n	8001dca <HAL_I2C_IsDeviceReady+0x13a>
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d103      	bne.n	8001dd2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	22a0      	movs	r2, #160	@ 0xa0
 8001dce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	695b      	ldr	r3, [r3, #20]
 8001dd8:	f003 0302 	and.w	r3, r3, #2
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	bf0c      	ite	eq
 8001de0:	2301      	moveq	r3, #1
 8001de2:	2300      	movne	r3, #0
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	695b      	ldr	r3, [r3, #20]
 8001dee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001df2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001df6:	bf0c      	ite	eq
 8001df8:	2301      	moveq	r3, #1
 8001dfa:	2300      	movne	r3, #0
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	2ba0      	cmp	r3, #160	@ 0xa0
 8001e0a:	d005      	beq.n	8001e18 <HAL_I2C_IsDeviceReady+0x188>
 8001e0c:	7dfb      	ldrb	r3, [r7, #23]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d102      	bne.n	8001e18 <HAL_I2C_IsDeviceReady+0x188>
 8001e12:	7dbb      	ldrb	r3, [r7, #22]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d0cd      	beq.n	8001db4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2220      	movs	r2, #32
 8001e1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	695b      	ldr	r3, [r3, #20]
 8001e26:	f003 0302 	and.w	r3, r3, #2
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d129      	bne.n	8001e82 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e3c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e3e:	2300      	movs	r3, #0
 8001e40:	613b      	str	r3, [r7, #16]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	695b      	ldr	r3, [r3, #20]
 8001e48:	613b      	str	r3, [r7, #16]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	699b      	ldr	r3, [r3, #24]
 8001e50:	613b      	str	r3, [r7, #16]
 8001e52:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	9300      	str	r3, [sp, #0]
 8001e58:	2319      	movs	r3, #25
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	4921      	ldr	r1, [pc, #132]	@ (8001ee4 <HAL_I2C_IsDeviceReady+0x254>)
 8001e5e:	68f8      	ldr	r0, [r7, #12]
 8001e60:	f000 f8c6 	bl	8001ff0 <I2C_WaitOnFlagUntilTimeout>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e036      	b.n	8001edc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2220      	movs	r2, #32
 8001e72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	e02c      	b.n	8001edc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e90:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001e9a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	9300      	str	r3, [sp, #0]
 8001ea0:	2319      	movs	r3, #25
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	490f      	ldr	r1, [pc, #60]	@ (8001ee4 <HAL_I2C_IsDeviceReady+0x254>)
 8001ea6:	68f8      	ldr	r0, [r7, #12]
 8001ea8:	f000 f8a2 	bl	8001ff0 <I2C_WaitOnFlagUntilTimeout>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e012      	b.n	8001edc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	3301      	adds	r3, #1
 8001eba:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	f4ff af32 	bcc.w	8001d2a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2220      	movs	r2, #32
 8001eca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e000      	b.n	8001edc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001eda:	2302      	movs	r3, #2
  }
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3720      	adds	r7, #32
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	00100002 	.word	0x00100002
 8001ee8:	ffff0000 	.word	0xffff0000

08001eec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b088      	sub	sp, #32
 8001ef0:	af02      	add	r7, sp, #8
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	607a      	str	r2, [r7, #4]
 8001ef6:	603b      	str	r3, [r7, #0]
 8001ef8:	460b      	mov	r3, r1
 8001efa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f00:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	2b08      	cmp	r3, #8
 8001f06:	d006      	beq.n	8001f16 <I2C_MasterRequestWrite+0x2a>
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d003      	beq.n	8001f16 <I2C_MasterRequestWrite+0x2a>
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8001f14:	d108      	bne.n	8001f28 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	e00b      	b.n	8001f40 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2c:	2b12      	cmp	r3, #18
 8001f2e:	d107      	bne.n	8001f40 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f3e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	9300      	str	r3, [sp, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001f4c:	68f8      	ldr	r0, [r7, #12]
 8001f4e:	f000 f84f 	bl	8001ff0 <I2C_WaitOnFlagUntilTimeout>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d00d      	beq.n	8001f74 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f66:	d103      	bne.n	8001f70 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f6e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e035      	b.n	8001fe0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	691b      	ldr	r3, [r3, #16]
 8001f78:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001f7c:	d108      	bne.n	8001f90 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f7e:	897b      	ldrh	r3, [r7, #10]
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	461a      	mov	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001f8c:	611a      	str	r2, [r3, #16]
 8001f8e:	e01b      	b.n	8001fc8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001f90:	897b      	ldrh	r3, [r7, #10]
 8001f92:	11db      	asrs	r3, r3, #7
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	f003 0306 	and.w	r3, r3, #6
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	f063 030f 	orn	r3, r3, #15
 8001fa0:	b2da      	uxtb	r2, r3
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	490e      	ldr	r1, [pc, #56]	@ (8001fe8 <I2C_MasterRequestWrite+0xfc>)
 8001fae:	68f8      	ldr	r0, [r7, #12]
 8001fb0:	f000 f898 	bl	80020e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e010      	b.n	8001fe0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001fbe:	897b      	ldrh	r3, [r7, #10]
 8001fc0:	b2da      	uxtb	r2, r3
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	4907      	ldr	r1, [pc, #28]	@ (8001fec <I2C_MasterRequestWrite+0x100>)
 8001fce:	68f8      	ldr	r0, [r7, #12]
 8001fd0:	f000 f888 	bl	80020e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e000      	b.n	8001fe0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001fde:	2300      	movs	r3, #0
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3718      	adds	r7, #24
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	00010008 	.word	0x00010008
 8001fec:	00010002 	.word	0x00010002

08001ff0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	603b      	str	r3, [r7, #0]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002000:	e048      	b.n	8002094 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002008:	d044      	beq.n	8002094 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800200a:	f7ff f923 	bl	8001254 <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	429a      	cmp	r2, r3
 8002018:	d302      	bcc.n	8002020 <I2C_WaitOnFlagUntilTimeout+0x30>
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d139      	bne.n	8002094 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	0c1b      	lsrs	r3, r3, #16
 8002024:	b2db      	uxtb	r3, r3
 8002026:	2b01      	cmp	r3, #1
 8002028:	d10d      	bne.n	8002046 <I2C_WaitOnFlagUntilTimeout+0x56>
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	695b      	ldr	r3, [r3, #20]
 8002030:	43da      	mvns	r2, r3
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	4013      	ands	r3, r2
 8002036:	b29b      	uxth	r3, r3
 8002038:	2b00      	cmp	r3, #0
 800203a:	bf0c      	ite	eq
 800203c:	2301      	moveq	r3, #1
 800203e:	2300      	movne	r3, #0
 8002040:	b2db      	uxtb	r3, r3
 8002042:	461a      	mov	r2, r3
 8002044:	e00c      	b.n	8002060 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	43da      	mvns	r2, r3
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	4013      	ands	r3, r2
 8002052:	b29b      	uxth	r3, r3
 8002054:	2b00      	cmp	r3, #0
 8002056:	bf0c      	ite	eq
 8002058:	2301      	moveq	r3, #1
 800205a:	2300      	movne	r3, #0
 800205c:	b2db      	uxtb	r3, r3
 800205e:	461a      	mov	r2, r3
 8002060:	79fb      	ldrb	r3, [r7, #7]
 8002062:	429a      	cmp	r2, r3
 8002064:	d116      	bne.n	8002094 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	2200      	movs	r2, #0
 800206a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2220      	movs	r2, #32
 8002070:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2200      	movs	r2, #0
 8002078:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002080:	f043 0220 	orr.w	r2, r3, #32
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2200      	movs	r2, #0
 800208c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e023      	b.n	80020dc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	0c1b      	lsrs	r3, r3, #16
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b01      	cmp	r3, #1
 800209c:	d10d      	bne.n	80020ba <I2C_WaitOnFlagUntilTimeout+0xca>
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	695b      	ldr	r3, [r3, #20]
 80020a4:	43da      	mvns	r2, r3
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	4013      	ands	r3, r2
 80020aa:	b29b      	uxth	r3, r3
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	bf0c      	ite	eq
 80020b0:	2301      	moveq	r3, #1
 80020b2:	2300      	movne	r3, #0
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	461a      	mov	r2, r3
 80020b8:	e00c      	b.n	80020d4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	43da      	mvns	r2, r3
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	4013      	ands	r3, r2
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	bf0c      	ite	eq
 80020cc:	2301      	moveq	r3, #1
 80020ce:	2300      	movne	r3, #0
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	461a      	mov	r2, r3
 80020d4:	79fb      	ldrb	r3, [r7, #7]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d093      	beq.n	8002002 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80020da:	2300      	movs	r3, #0
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3710      	adds	r7, #16
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	60f8      	str	r0, [r7, #12]
 80020ec:	60b9      	str	r1, [r7, #8]
 80020ee:	607a      	str	r2, [r7, #4]
 80020f0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80020f2:	e071      	b.n	80021d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002102:	d123      	bne.n	800214c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002112:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800211c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2200      	movs	r2, #0
 8002122:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2220      	movs	r2, #32
 8002128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2200      	movs	r2, #0
 8002130:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002138:	f043 0204 	orr.w	r2, r3, #4
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2200      	movs	r2, #0
 8002144:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e067      	b.n	800221c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002152:	d041      	beq.n	80021d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002154:	f7ff f87e 	bl	8001254 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	429a      	cmp	r2, r3
 8002162:	d302      	bcc.n	800216a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d136      	bne.n	80021d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	0c1b      	lsrs	r3, r3, #16
 800216e:	b2db      	uxtb	r3, r3
 8002170:	2b01      	cmp	r3, #1
 8002172:	d10c      	bne.n	800218e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	695b      	ldr	r3, [r3, #20]
 800217a:	43da      	mvns	r2, r3
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	4013      	ands	r3, r2
 8002180:	b29b      	uxth	r3, r3
 8002182:	2b00      	cmp	r3, #0
 8002184:	bf14      	ite	ne
 8002186:	2301      	movne	r3, #1
 8002188:	2300      	moveq	r3, #0
 800218a:	b2db      	uxtb	r3, r3
 800218c:	e00b      	b.n	80021a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	43da      	mvns	r2, r3
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	4013      	ands	r3, r2
 800219a:	b29b      	uxth	r3, r3
 800219c:	2b00      	cmp	r3, #0
 800219e:	bf14      	ite	ne
 80021a0:	2301      	movne	r3, #1
 80021a2:	2300      	moveq	r3, #0
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d016      	beq.n	80021d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2200      	movs	r2, #0
 80021ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2220      	movs	r2, #32
 80021b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c4:	f043 0220 	orr.w	r2, r3, #32
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e021      	b.n	800221c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	0c1b      	lsrs	r3, r3, #16
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d10c      	bne.n	80021fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	695b      	ldr	r3, [r3, #20]
 80021e8:	43da      	mvns	r2, r3
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	4013      	ands	r3, r2
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	bf14      	ite	ne
 80021f4:	2301      	movne	r3, #1
 80021f6:	2300      	moveq	r3, #0
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	e00b      	b.n	8002214 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	43da      	mvns	r2, r3
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	4013      	ands	r3, r2
 8002208:	b29b      	uxth	r3, r3
 800220a:	2b00      	cmp	r3, #0
 800220c:	bf14      	ite	ne
 800220e:	2301      	movne	r3, #1
 8002210:	2300      	moveq	r3, #0
 8002212:	b2db      	uxtb	r3, r3
 8002214:	2b00      	cmp	r3, #0
 8002216:	f47f af6d 	bne.w	80020f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	3710      	adds	r7, #16
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002230:	e034      	b.n	800229c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002232:	68f8      	ldr	r0, [r7, #12]
 8002234:	f000 f886 	bl	8002344 <I2C_IsAcknowledgeFailed>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e034      	b.n	80022ac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002248:	d028      	beq.n	800229c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800224a:	f7ff f803 	bl	8001254 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	68ba      	ldr	r2, [r7, #8]
 8002256:	429a      	cmp	r2, r3
 8002258:	d302      	bcc.n	8002260 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d11d      	bne.n	800229c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	695b      	ldr	r3, [r3, #20]
 8002266:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800226a:	2b80      	cmp	r3, #128	@ 0x80
 800226c:	d016      	beq.n	800229c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2200      	movs	r2, #0
 8002272:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	2220      	movs	r2, #32
 8002278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2200      	movs	r2, #0
 8002280:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002288:	f043 0220 	orr.w	r2, r3, #32
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	2200      	movs	r2, #0
 8002294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e007      	b.n	80022ac <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	695b      	ldr	r3, [r3, #20]
 80022a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022a6:	2b80      	cmp	r3, #128	@ 0x80
 80022a8:	d1c3      	bne.n	8002232 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80022aa:	2300      	movs	r3, #0
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3710      	adds	r7, #16
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80022c0:	e034      	b.n	800232c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80022c2:	68f8      	ldr	r0, [r7, #12]
 80022c4:	f000 f83e 	bl	8002344 <I2C_IsAcknowledgeFailed>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e034      	b.n	800233c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80022d8:	d028      	beq.n	800232c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022da:	f7fe ffbb 	bl	8001254 <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	68ba      	ldr	r2, [r7, #8]
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d302      	bcc.n	80022f0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d11d      	bne.n	800232c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	695b      	ldr	r3, [r3, #20]
 80022f6:	f003 0304 	and.w	r3, r3, #4
 80022fa:	2b04      	cmp	r3, #4
 80022fc:	d016      	beq.n	800232c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2200      	movs	r2, #0
 8002302:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2220      	movs	r2, #32
 8002308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002318:	f043 0220 	orr.w	r2, r3, #32
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2200      	movs	r2, #0
 8002324:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e007      	b.n	800233c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	f003 0304 	and.w	r3, r3, #4
 8002336:	2b04      	cmp	r3, #4
 8002338:	d1c3      	bne.n	80022c2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800233a:	2300      	movs	r3, #0
}
 800233c:	4618      	mov	r0, r3
 800233e:	3710      	adds	r7, #16
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}

08002344 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	695b      	ldr	r3, [r3, #20]
 8002352:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002356:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800235a:	d11b      	bne.n	8002394 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002364:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2220      	movs	r2, #32
 8002370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002380:	f043 0204 	orr.w	r2, r3, #4
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e000      	b.n	8002396 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	370c      	adds	r7, #12
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
	...

080023a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d101      	bne.n	80023b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e0cc      	b.n	8002552 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023b8:	4b68      	ldr	r3, [pc, #416]	@ (800255c <HAL_RCC_ClockConfig+0x1b8>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 030f 	and.w	r3, r3, #15
 80023c0:	683a      	ldr	r2, [r7, #0]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d90c      	bls.n	80023e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023c6:	4b65      	ldr	r3, [pc, #404]	@ (800255c <HAL_RCC_ClockConfig+0x1b8>)
 80023c8:	683a      	ldr	r2, [r7, #0]
 80023ca:	b2d2      	uxtb	r2, r2
 80023cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ce:	4b63      	ldr	r3, [pc, #396]	@ (800255c <HAL_RCC_ClockConfig+0x1b8>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 030f 	and.w	r3, r3, #15
 80023d6:	683a      	ldr	r2, [r7, #0]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d001      	beq.n	80023e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	e0b8      	b.n	8002552 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0302 	and.w	r3, r3, #2
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d020      	beq.n	800242e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0304 	and.w	r3, r3, #4
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d005      	beq.n	8002404 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023f8:	4b59      	ldr	r3, [pc, #356]	@ (8002560 <HAL_RCC_ClockConfig+0x1bc>)
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	4a58      	ldr	r2, [pc, #352]	@ (8002560 <HAL_RCC_ClockConfig+0x1bc>)
 80023fe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002402:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0308 	and.w	r3, r3, #8
 800240c:	2b00      	cmp	r3, #0
 800240e:	d005      	beq.n	800241c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002410:	4b53      	ldr	r3, [pc, #332]	@ (8002560 <HAL_RCC_ClockConfig+0x1bc>)
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	4a52      	ldr	r2, [pc, #328]	@ (8002560 <HAL_RCC_ClockConfig+0x1bc>)
 8002416:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800241a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800241c:	4b50      	ldr	r3, [pc, #320]	@ (8002560 <HAL_RCC_ClockConfig+0x1bc>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	494d      	ldr	r1, [pc, #308]	@ (8002560 <HAL_RCC_ClockConfig+0x1bc>)
 800242a:	4313      	orrs	r3, r2
 800242c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	2b00      	cmp	r3, #0
 8002438:	d044      	beq.n	80024c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d107      	bne.n	8002452 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002442:	4b47      	ldr	r3, [pc, #284]	@ (8002560 <HAL_RCC_ClockConfig+0x1bc>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d119      	bne.n	8002482 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e07f      	b.n	8002552 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	2b02      	cmp	r3, #2
 8002458:	d003      	beq.n	8002462 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800245e:	2b03      	cmp	r3, #3
 8002460:	d107      	bne.n	8002472 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002462:	4b3f      	ldr	r3, [pc, #252]	@ (8002560 <HAL_RCC_ClockConfig+0x1bc>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d109      	bne.n	8002482 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e06f      	b.n	8002552 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002472:	4b3b      	ldr	r3, [pc, #236]	@ (8002560 <HAL_RCC_ClockConfig+0x1bc>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0302 	and.w	r3, r3, #2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e067      	b.n	8002552 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002482:	4b37      	ldr	r3, [pc, #220]	@ (8002560 <HAL_RCC_ClockConfig+0x1bc>)
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f023 0203 	bic.w	r2, r3, #3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	4934      	ldr	r1, [pc, #208]	@ (8002560 <HAL_RCC_ClockConfig+0x1bc>)
 8002490:	4313      	orrs	r3, r2
 8002492:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002494:	f7fe fede 	bl	8001254 <HAL_GetTick>
 8002498:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800249a:	e00a      	b.n	80024b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800249c:	f7fe feda 	bl	8001254 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e04f      	b.n	8002552 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024b2:	4b2b      	ldr	r3, [pc, #172]	@ (8002560 <HAL_RCC_ClockConfig+0x1bc>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f003 020c 	and.w	r2, r3, #12
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d1eb      	bne.n	800249c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024c4:	4b25      	ldr	r3, [pc, #148]	@ (800255c <HAL_RCC_ClockConfig+0x1b8>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 030f 	and.w	r3, r3, #15
 80024cc:	683a      	ldr	r2, [r7, #0]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d20c      	bcs.n	80024ec <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024d2:	4b22      	ldr	r3, [pc, #136]	@ (800255c <HAL_RCC_ClockConfig+0x1b8>)
 80024d4:	683a      	ldr	r2, [r7, #0]
 80024d6:	b2d2      	uxtb	r2, r2
 80024d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024da:	4b20      	ldr	r3, [pc, #128]	@ (800255c <HAL_RCC_ClockConfig+0x1b8>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 030f 	and.w	r3, r3, #15
 80024e2:	683a      	ldr	r2, [r7, #0]
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d001      	beq.n	80024ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e032      	b.n	8002552 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0304 	and.w	r3, r3, #4
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d008      	beq.n	800250a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024f8:	4b19      	ldr	r3, [pc, #100]	@ (8002560 <HAL_RCC_ClockConfig+0x1bc>)
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	4916      	ldr	r1, [pc, #88]	@ (8002560 <HAL_RCC_ClockConfig+0x1bc>)
 8002506:	4313      	orrs	r3, r2
 8002508:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0308 	and.w	r3, r3, #8
 8002512:	2b00      	cmp	r3, #0
 8002514:	d009      	beq.n	800252a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002516:	4b12      	ldr	r3, [pc, #72]	@ (8002560 <HAL_RCC_ClockConfig+0x1bc>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	00db      	lsls	r3, r3, #3
 8002524:	490e      	ldr	r1, [pc, #56]	@ (8002560 <HAL_RCC_ClockConfig+0x1bc>)
 8002526:	4313      	orrs	r3, r2
 8002528:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800252a:	f000 f855 	bl	80025d8 <HAL_RCC_GetSysClockFreq>
 800252e:	4602      	mov	r2, r0
 8002530:	4b0b      	ldr	r3, [pc, #44]	@ (8002560 <HAL_RCC_ClockConfig+0x1bc>)
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	091b      	lsrs	r3, r3, #4
 8002536:	f003 030f 	and.w	r3, r3, #15
 800253a:	490a      	ldr	r1, [pc, #40]	@ (8002564 <HAL_RCC_ClockConfig+0x1c0>)
 800253c:	5ccb      	ldrb	r3, [r1, r3]
 800253e:	fa22 f303 	lsr.w	r3, r2, r3
 8002542:	4a09      	ldr	r2, [pc, #36]	@ (8002568 <HAL_RCC_ClockConfig+0x1c4>)
 8002544:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002546:	4b09      	ldr	r3, [pc, #36]	@ (800256c <HAL_RCC_ClockConfig+0x1c8>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4618      	mov	r0, r3
 800254c:	f7fe fe3e 	bl	80011cc <HAL_InitTick>

  return HAL_OK;
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3710      	adds	r7, #16
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	40023c00 	.word	0x40023c00
 8002560:	40023800 	.word	0x40023800
 8002564:	08004af0 	.word	0x08004af0
 8002568:	20000008 	.word	0x20000008
 800256c:	2000000c 	.word	0x2000000c

08002570 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002574:	4b03      	ldr	r3, [pc, #12]	@ (8002584 <HAL_RCC_GetHCLKFreq+0x14>)
 8002576:	681b      	ldr	r3, [r3, #0]
}
 8002578:	4618      	mov	r0, r3
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	20000008 	.word	0x20000008

08002588 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800258c:	f7ff fff0 	bl	8002570 <HAL_RCC_GetHCLKFreq>
 8002590:	4602      	mov	r2, r0
 8002592:	4b05      	ldr	r3, [pc, #20]	@ (80025a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	0a9b      	lsrs	r3, r3, #10
 8002598:	f003 0307 	and.w	r3, r3, #7
 800259c:	4903      	ldr	r1, [pc, #12]	@ (80025ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800259e:	5ccb      	ldrb	r3, [r1, r3]
 80025a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	40023800 	.word	0x40023800
 80025ac:	08004b00 	.word	0x08004b00

080025b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025b4:	f7ff ffdc 	bl	8002570 <HAL_RCC_GetHCLKFreq>
 80025b8:	4602      	mov	r2, r0
 80025ba:	4b05      	ldr	r3, [pc, #20]	@ (80025d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	0b5b      	lsrs	r3, r3, #13
 80025c0:	f003 0307 	and.w	r3, r3, #7
 80025c4:	4903      	ldr	r1, [pc, #12]	@ (80025d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025c6:	5ccb      	ldrb	r3, [r1, r3]
 80025c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	40023800 	.word	0x40023800
 80025d4:	08004b00 	.word	0x08004b00

080025d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025dc:	b0a6      	sub	sp, #152	@ 0x98
 80025de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80025e0:	2300      	movs	r3, #0
 80025e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 80025e6:	2300      	movs	r3, #0
 80025e8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 80025ec:	2300      	movs	r3, #0
 80025ee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 80025f2:	2300      	movs	r3, #0
 80025f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 80025f8:	2300      	movs	r3, #0
 80025fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80025fe:	4bc8      	ldr	r3, [pc, #800]	@ (8002920 <HAL_RCC_GetSysClockFreq+0x348>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f003 030c 	and.w	r3, r3, #12
 8002606:	2b0c      	cmp	r3, #12
 8002608:	f200 817e 	bhi.w	8002908 <HAL_RCC_GetSysClockFreq+0x330>
 800260c:	a201      	add	r2, pc, #4	@ (adr r2, 8002614 <HAL_RCC_GetSysClockFreq+0x3c>)
 800260e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002612:	bf00      	nop
 8002614:	08002649 	.word	0x08002649
 8002618:	08002909 	.word	0x08002909
 800261c:	08002909 	.word	0x08002909
 8002620:	08002909 	.word	0x08002909
 8002624:	08002651 	.word	0x08002651
 8002628:	08002909 	.word	0x08002909
 800262c:	08002909 	.word	0x08002909
 8002630:	08002909 	.word	0x08002909
 8002634:	08002659 	.word	0x08002659
 8002638:	08002909 	.word	0x08002909
 800263c:	08002909 	.word	0x08002909
 8002640:	08002909 	.word	0x08002909
 8002644:	080027c3 	.word	0x080027c3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002648:	4bb6      	ldr	r3, [pc, #728]	@ (8002924 <HAL_RCC_GetSysClockFreq+0x34c>)
 800264a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800264e:	e15f      	b.n	8002910 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002650:	4bb5      	ldr	r3, [pc, #724]	@ (8002928 <HAL_RCC_GetSysClockFreq+0x350>)
 8002652:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002656:	e15b      	b.n	8002910 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002658:	4bb1      	ldr	r3, [pc, #708]	@ (8002920 <HAL_RCC_GetSysClockFreq+0x348>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002660:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002664:	4bae      	ldr	r3, [pc, #696]	@ (8002920 <HAL_RCC_GetSysClockFreq+0x348>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d031      	beq.n	80026d4 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002670:	4bab      	ldr	r3, [pc, #684]	@ (8002920 <HAL_RCC_GetSysClockFreq+0x348>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	099b      	lsrs	r3, r3, #6
 8002676:	2200      	movs	r2, #0
 8002678:	66bb      	str	r3, [r7, #104]	@ 0x68
 800267a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800267c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800267e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002682:	663b      	str	r3, [r7, #96]	@ 0x60
 8002684:	2300      	movs	r3, #0
 8002686:	667b      	str	r3, [r7, #100]	@ 0x64
 8002688:	4ba7      	ldr	r3, [pc, #668]	@ (8002928 <HAL_RCC_GetSysClockFreq+0x350>)
 800268a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800268e:	462a      	mov	r2, r5
 8002690:	fb03 f202 	mul.w	r2, r3, r2
 8002694:	2300      	movs	r3, #0
 8002696:	4621      	mov	r1, r4
 8002698:	fb01 f303 	mul.w	r3, r1, r3
 800269c:	4413      	add	r3, r2
 800269e:	4aa2      	ldr	r2, [pc, #648]	@ (8002928 <HAL_RCC_GetSysClockFreq+0x350>)
 80026a0:	4621      	mov	r1, r4
 80026a2:	fba1 1202 	umull	r1, r2, r1, r2
 80026a6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80026a8:	460a      	mov	r2, r1
 80026aa:	67ba      	str	r2, [r7, #120]	@ 0x78
 80026ac:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80026ae:	4413      	add	r3, r2
 80026b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80026b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80026b6:	2200      	movs	r2, #0
 80026b8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80026ba:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80026bc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80026c0:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80026c4:	f7fd fdf4 	bl	80002b0 <__aeabi_uldivmod>
 80026c8:	4602      	mov	r2, r0
 80026ca:	460b      	mov	r3, r1
 80026cc:	4613      	mov	r3, r2
 80026ce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80026d2:	e064      	b.n	800279e <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026d4:	4b92      	ldr	r3, [pc, #584]	@ (8002920 <HAL_RCC_GetSysClockFreq+0x348>)
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	099b      	lsrs	r3, r3, #6
 80026da:	2200      	movs	r2, #0
 80026dc:	653b      	str	r3, [r7, #80]	@ 0x50
 80026de:	657a      	str	r2, [r7, #84]	@ 0x54
 80026e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80026e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80026e8:	2300      	movs	r3, #0
 80026ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80026ec:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 80026f0:	4622      	mov	r2, r4
 80026f2:	462b      	mov	r3, r5
 80026f4:	f04f 0000 	mov.w	r0, #0
 80026f8:	f04f 0100 	mov.w	r1, #0
 80026fc:	0159      	lsls	r1, r3, #5
 80026fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002702:	0150      	lsls	r0, r2, #5
 8002704:	4602      	mov	r2, r0
 8002706:	460b      	mov	r3, r1
 8002708:	4621      	mov	r1, r4
 800270a:	1a51      	subs	r1, r2, r1
 800270c:	6139      	str	r1, [r7, #16]
 800270e:	4629      	mov	r1, r5
 8002710:	eb63 0301 	sbc.w	r3, r3, r1
 8002714:	617b      	str	r3, [r7, #20]
 8002716:	f04f 0200 	mov.w	r2, #0
 800271a:	f04f 0300 	mov.w	r3, #0
 800271e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002722:	4659      	mov	r1, fp
 8002724:	018b      	lsls	r3, r1, #6
 8002726:	4651      	mov	r1, sl
 8002728:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800272c:	4651      	mov	r1, sl
 800272e:	018a      	lsls	r2, r1, #6
 8002730:	4651      	mov	r1, sl
 8002732:	ebb2 0801 	subs.w	r8, r2, r1
 8002736:	4659      	mov	r1, fp
 8002738:	eb63 0901 	sbc.w	r9, r3, r1
 800273c:	f04f 0200 	mov.w	r2, #0
 8002740:	f04f 0300 	mov.w	r3, #0
 8002744:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002748:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800274c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002750:	4690      	mov	r8, r2
 8002752:	4699      	mov	r9, r3
 8002754:	4623      	mov	r3, r4
 8002756:	eb18 0303 	adds.w	r3, r8, r3
 800275a:	60bb      	str	r3, [r7, #8]
 800275c:	462b      	mov	r3, r5
 800275e:	eb49 0303 	adc.w	r3, r9, r3
 8002762:	60fb      	str	r3, [r7, #12]
 8002764:	f04f 0200 	mov.w	r2, #0
 8002768:	f04f 0300 	mov.w	r3, #0
 800276c:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002770:	4629      	mov	r1, r5
 8002772:	028b      	lsls	r3, r1, #10
 8002774:	4621      	mov	r1, r4
 8002776:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800277a:	4621      	mov	r1, r4
 800277c:	028a      	lsls	r2, r1, #10
 800277e:	4610      	mov	r0, r2
 8002780:	4619      	mov	r1, r3
 8002782:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002786:	2200      	movs	r2, #0
 8002788:	643b      	str	r3, [r7, #64]	@ 0x40
 800278a:	647a      	str	r2, [r7, #68]	@ 0x44
 800278c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002790:	f7fd fd8e 	bl	80002b0 <__aeabi_uldivmod>
 8002794:	4602      	mov	r2, r0
 8002796:	460b      	mov	r3, r1
 8002798:	4613      	mov	r3, r2
 800279a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800279e:	4b60      	ldr	r3, [pc, #384]	@ (8002920 <HAL_RCC_GetSysClockFreq+0x348>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	0c1b      	lsrs	r3, r3, #16
 80027a4:	f003 0303 	and.w	r3, r3, #3
 80027a8:	3301      	adds	r3, #1
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 80027b0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80027b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80027b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027bc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80027c0:	e0a6      	b.n	8002910 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027c2:	4b57      	ldr	r3, [pc, #348]	@ (8002920 <HAL_RCC_GetSysClockFreq+0x348>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80027ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027ce:	4b54      	ldr	r3, [pc, #336]	@ (8002920 <HAL_RCC_GetSysClockFreq+0x348>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d02a      	beq.n	8002830 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027da:	4b51      	ldr	r3, [pc, #324]	@ (8002920 <HAL_RCC_GetSysClockFreq+0x348>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	099b      	lsrs	r3, r3, #6
 80027e0:	2200      	movs	r2, #0
 80027e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80027e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80027e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027e8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80027ec:	2100      	movs	r1, #0
 80027ee:	4b4e      	ldr	r3, [pc, #312]	@ (8002928 <HAL_RCC_GetSysClockFreq+0x350>)
 80027f0:	fb03 f201 	mul.w	r2, r3, r1
 80027f4:	2300      	movs	r3, #0
 80027f6:	fb00 f303 	mul.w	r3, r0, r3
 80027fa:	4413      	add	r3, r2
 80027fc:	4a4a      	ldr	r2, [pc, #296]	@ (8002928 <HAL_RCC_GetSysClockFreq+0x350>)
 80027fe:	fba0 1202 	umull	r1, r2, r0, r2
 8002802:	677a      	str	r2, [r7, #116]	@ 0x74
 8002804:	460a      	mov	r2, r1
 8002806:	673a      	str	r2, [r7, #112]	@ 0x70
 8002808:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800280a:	4413      	add	r3, r2
 800280c:	677b      	str	r3, [r7, #116]	@ 0x74
 800280e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002812:	2200      	movs	r2, #0
 8002814:	633b      	str	r3, [r7, #48]	@ 0x30
 8002816:	637a      	str	r2, [r7, #52]	@ 0x34
 8002818:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800281c:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002820:	f7fd fd46 	bl	80002b0 <__aeabi_uldivmod>
 8002824:	4602      	mov	r2, r0
 8002826:	460b      	mov	r3, r1
 8002828:	4613      	mov	r3, r2
 800282a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800282e:	e05b      	b.n	80028e8 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002830:	4b3b      	ldr	r3, [pc, #236]	@ (8002920 <HAL_RCC_GetSysClockFreq+0x348>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	099b      	lsrs	r3, r3, #6
 8002836:	2200      	movs	r2, #0
 8002838:	62bb      	str	r3, [r7, #40]	@ 0x28
 800283a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800283c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800283e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002842:	623b      	str	r3, [r7, #32]
 8002844:	2300      	movs	r3, #0
 8002846:	627b      	str	r3, [r7, #36]	@ 0x24
 8002848:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800284c:	4642      	mov	r2, r8
 800284e:	464b      	mov	r3, r9
 8002850:	f04f 0000 	mov.w	r0, #0
 8002854:	f04f 0100 	mov.w	r1, #0
 8002858:	0159      	lsls	r1, r3, #5
 800285a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800285e:	0150      	lsls	r0, r2, #5
 8002860:	4602      	mov	r2, r0
 8002862:	460b      	mov	r3, r1
 8002864:	4641      	mov	r1, r8
 8002866:	ebb2 0a01 	subs.w	sl, r2, r1
 800286a:	4649      	mov	r1, r9
 800286c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002870:	f04f 0200 	mov.w	r2, #0
 8002874:	f04f 0300 	mov.w	r3, #0
 8002878:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800287c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002880:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002884:	ebb2 040a 	subs.w	r4, r2, sl
 8002888:	eb63 050b 	sbc.w	r5, r3, fp
 800288c:	f04f 0200 	mov.w	r2, #0
 8002890:	f04f 0300 	mov.w	r3, #0
 8002894:	00eb      	lsls	r3, r5, #3
 8002896:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800289a:	00e2      	lsls	r2, r4, #3
 800289c:	4614      	mov	r4, r2
 800289e:	461d      	mov	r5, r3
 80028a0:	4643      	mov	r3, r8
 80028a2:	18e3      	adds	r3, r4, r3
 80028a4:	603b      	str	r3, [r7, #0]
 80028a6:	464b      	mov	r3, r9
 80028a8:	eb45 0303 	adc.w	r3, r5, r3
 80028ac:	607b      	str	r3, [r7, #4]
 80028ae:	f04f 0200 	mov.w	r2, #0
 80028b2:	f04f 0300 	mov.w	r3, #0
 80028b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80028ba:	4629      	mov	r1, r5
 80028bc:	028b      	lsls	r3, r1, #10
 80028be:	4621      	mov	r1, r4
 80028c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028c4:	4621      	mov	r1, r4
 80028c6:	028a      	lsls	r2, r1, #10
 80028c8:	4610      	mov	r0, r2
 80028ca:	4619      	mov	r1, r3
 80028cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028d0:	2200      	movs	r2, #0
 80028d2:	61bb      	str	r3, [r7, #24]
 80028d4:	61fa      	str	r2, [r7, #28]
 80028d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028da:	f7fd fce9 	bl	80002b0 <__aeabi_uldivmod>
 80028de:	4602      	mov	r2, r0
 80028e0:	460b      	mov	r3, r1
 80028e2:	4613      	mov	r3, r2
 80028e4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80028e8:	4b0d      	ldr	r3, [pc, #52]	@ (8002920 <HAL_RCC_GetSysClockFreq+0x348>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	0f1b      	lsrs	r3, r3, #28
 80028ee:	f003 0307 	and.w	r3, r3, #7
 80028f2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 80028f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80028fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80028fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002902:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002906:	e003      	b.n	8002910 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002908:	4b06      	ldr	r3, [pc, #24]	@ (8002924 <HAL_RCC_GetSysClockFreq+0x34c>)
 800290a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800290e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002910:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8002914:	4618      	mov	r0, r3
 8002916:	3798      	adds	r7, #152	@ 0x98
 8002918:	46bd      	mov	sp, r7
 800291a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800291e:	bf00      	nop
 8002920:	40023800 	.word	0x40023800
 8002924:	00f42400 	.word	0x00f42400
 8002928:	017d7840 	.word	0x017d7840

0800292c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e28d      	b.n	8002e5a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	2b00      	cmp	r3, #0
 8002948:	f000 8083 	beq.w	8002a52 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800294c:	4b94      	ldr	r3, [pc, #592]	@ (8002ba0 <HAL_RCC_OscConfig+0x274>)
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f003 030c 	and.w	r3, r3, #12
 8002954:	2b04      	cmp	r3, #4
 8002956:	d019      	beq.n	800298c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002958:	4b91      	ldr	r3, [pc, #580]	@ (8002ba0 <HAL_RCC_OscConfig+0x274>)
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f003 030c 	and.w	r3, r3, #12
        || \
 8002960:	2b08      	cmp	r3, #8
 8002962:	d106      	bne.n	8002972 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002964:	4b8e      	ldr	r3, [pc, #568]	@ (8002ba0 <HAL_RCC_OscConfig+0x274>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800296c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002970:	d00c      	beq.n	800298c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002972:	4b8b      	ldr	r3, [pc, #556]	@ (8002ba0 <HAL_RCC_OscConfig+0x274>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800297a:	2b0c      	cmp	r3, #12
 800297c:	d112      	bne.n	80029a4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800297e:	4b88      	ldr	r3, [pc, #544]	@ (8002ba0 <HAL_RCC_OscConfig+0x274>)
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002986:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800298a:	d10b      	bne.n	80029a4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800298c:	4b84      	ldr	r3, [pc, #528]	@ (8002ba0 <HAL_RCC_OscConfig+0x274>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d05b      	beq.n	8002a50 <HAL_RCC_OscConfig+0x124>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d157      	bne.n	8002a50 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e25a      	b.n	8002e5a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029ac:	d106      	bne.n	80029bc <HAL_RCC_OscConfig+0x90>
 80029ae:	4b7c      	ldr	r3, [pc, #496]	@ (8002ba0 <HAL_RCC_OscConfig+0x274>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a7b      	ldr	r2, [pc, #492]	@ (8002ba0 <HAL_RCC_OscConfig+0x274>)
 80029b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029b8:	6013      	str	r3, [r2, #0]
 80029ba:	e01d      	b.n	80029f8 <HAL_RCC_OscConfig+0xcc>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029c4:	d10c      	bne.n	80029e0 <HAL_RCC_OscConfig+0xb4>
 80029c6:	4b76      	ldr	r3, [pc, #472]	@ (8002ba0 <HAL_RCC_OscConfig+0x274>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a75      	ldr	r2, [pc, #468]	@ (8002ba0 <HAL_RCC_OscConfig+0x274>)
 80029cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029d0:	6013      	str	r3, [r2, #0]
 80029d2:	4b73      	ldr	r3, [pc, #460]	@ (8002ba0 <HAL_RCC_OscConfig+0x274>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a72      	ldr	r2, [pc, #456]	@ (8002ba0 <HAL_RCC_OscConfig+0x274>)
 80029d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029dc:	6013      	str	r3, [r2, #0]
 80029de:	e00b      	b.n	80029f8 <HAL_RCC_OscConfig+0xcc>
 80029e0:	4b6f      	ldr	r3, [pc, #444]	@ (8002ba0 <HAL_RCC_OscConfig+0x274>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a6e      	ldr	r2, [pc, #440]	@ (8002ba0 <HAL_RCC_OscConfig+0x274>)
 80029e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029ea:	6013      	str	r3, [r2, #0]
 80029ec:	4b6c      	ldr	r3, [pc, #432]	@ (8002ba0 <HAL_RCC_OscConfig+0x274>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a6b      	ldr	r2, [pc, #428]	@ (8002ba0 <HAL_RCC_OscConfig+0x274>)
 80029f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d013      	beq.n	8002a28 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a00:	f7fe fc28 	bl	8001254 <HAL_GetTick>
 8002a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a06:	e008      	b.n	8002a1a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a08:	f7fe fc24 	bl	8001254 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b64      	cmp	r3, #100	@ 0x64
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e21f      	b.n	8002e5a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a1a:	4b61      	ldr	r3, [pc, #388]	@ (8002ba0 <HAL_RCC_OscConfig+0x274>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d0f0      	beq.n	8002a08 <HAL_RCC_OscConfig+0xdc>
 8002a26:	e014      	b.n	8002a52 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a28:	f7fe fc14 	bl	8001254 <HAL_GetTick>
 8002a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a2e:	e008      	b.n	8002a42 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a30:	f7fe fc10 	bl	8001254 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b64      	cmp	r3, #100	@ 0x64
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e20b      	b.n	8002e5a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a42:	4b57      	ldr	r3, [pc, #348]	@ (8002ba0 <HAL_RCC_OscConfig+0x274>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d1f0      	bne.n	8002a30 <HAL_RCC_OscConfig+0x104>
 8002a4e:	e000      	b.n	8002a52 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d06f      	beq.n	8002b3e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002a5e:	4b50      	ldr	r3, [pc, #320]	@ (8002ba0 <HAL_RCC_OscConfig+0x274>)
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f003 030c 	and.w	r3, r3, #12
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d017      	beq.n	8002a9a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002a6a:	4b4d      	ldr	r3, [pc, #308]	@ (8002ba0 <HAL_RCC_OscConfig+0x274>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	f003 030c 	and.w	r3, r3, #12
        || \
 8002a72:	2b08      	cmp	r3, #8
 8002a74:	d105      	bne.n	8002a82 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002a76:	4b4a      	ldr	r3, [pc, #296]	@ (8002ba0 <HAL_RCC_OscConfig+0x274>)
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d00b      	beq.n	8002a9a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a82:	4b47      	ldr	r3, [pc, #284]	@ (8002ba0 <HAL_RCC_OscConfig+0x274>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002a8a:	2b0c      	cmp	r3, #12
 8002a8c:	d11c      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a8e:	4b44      	ldr	r3, [pc, #272]	@ (8002ba0 <HAL_RCC_OscConfig+0x274>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d116      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a9a:	4b41      	ldr	r3, [pc, #260]	@ (8002ba0 <HAL_RCC_OscConfig+0x274>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d005      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x186>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d001      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e1d3      	b.n	8002e5a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ab2:	4b3b      	ldr	r3, [pc, #236]	@ (8002ba0 <HAL_RCC_OscConfig+0x274>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	4937      	ldr	r1, [pc, #220]	@ (8002ba0 <HAL_RCC_OscConfig+0x274>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ac6:	e03a      	b.n	8002b3e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d020      	beq.n	8002b12 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ad0:	4b34      	ldr	r3, [pc, #208]	@ (8002ba4 <HAL_RCC_OscConfig+0x278>)
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad6:	f7fe fbbd 	bl	8001254 <HAL_GetTick>
 8002ada:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002adc:	e008      	b.n	8002af0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ade:	f7fe fbb9 	bl	8001254 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d901      	bls.n	8002af0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e1b4      	b.n	8002e5a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002af0:	4b2b      	ldr	r3, [pc, #172]	@ (8002ba0 <HAL_RCC_OscConfig+0x274>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0302 	and.w	r3, r3, #2
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d0f0      	beq.n	8002ade <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002afc:	4b28      	ldr	r3, [pc, #160]	@ (8002ba0 <HAL_RCC_OscConfig+0x274>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	691b      	ldr	r3, [r3, #16]
 8002b08:	00db      	lsls	r3, r3, #3
 8002b0a:	4925      	ldr	r1, [pc, #148]	@ (8002ba0 <HAL_RCC_OscConfig+0x274>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	600b      	str	r3, [r1, #0]
 8002b10:	e015      	b.n	8002b3e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b12:	4b24      	ldr	r3, [pc, #144]	@ (8002ba4 <HAL_RCC_OscConfig+0x278>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b18:	f7fe fb9c 	bl	8001254 <HAL_GetTick>
 8002b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b1e:	e008      	b.n	8002b32 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b20:	f7fe fb98 	bl	8001254 <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d901      	bls.n	8002b32 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	e193      	b.n	8002e5a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b32:	4b1b      	ldr	r3, [pc, #108]	@ (8002ba0 <HAL_RCC_OscConfig+0x274>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0302 	and.w	r3, r3, #2
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d1f0      	bne.n	8002b20 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0308 	and.w	r3, r3, #8
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d036      	beq.n	8002bb8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d016      	beq.n	8002b80 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b52:	4b15      	ldr	r3, [pc, #84]	@ (8002ba8 <HAL_RCC_OscConfig+0x27c>)
 8002b54:	2201      	movs	r2, #1
 8002b56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b58:	f7fe fb7c 	bl	8001254 <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b60:	f7fe fb78 	bl	8001254 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e173      	b.n	8002e5a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b72:	4b0b      	ldr	r3, [pc, #44]	@ (8002ba0 <HAL_RCC_OscConfig+0x274>)
 8002b74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d0f0      	beq.n	8002b60 <HAL_RCC_OscConfig+0x234>
 8002b7e:	e01b      	b.n	8002bb8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b80:	4b09      	ldr	r3, [pc, #36]	@ (8002ba8 <HAL_RCC_OscConfig+0x27c>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b86:	f7fe fb65 	bl	8001254 <HAL_GetTick>
 8002b8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b8c:	e00e      	b.n	8002bac <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b8e:	f7fe fb61 	bl	8001254 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	693b      	ldr	r3, [r7, #16]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d907      	bls.n	8002bac <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e15c      	b.n	8002e5a <HAL_RCC_OscConfig+0x52e>
 8002ba0:	40023800 	.word	0x40023800
 8002ba4:	42470000 	.word	0x42470000
 8002ba8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bac:	4b8a      	ldr	r3, [pc, #552]	@ (8002dd8 <HAL_RCC_OscConfig+0x4ac>)
 8002bae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bb0:	f003 0302 	and.w	r3, r3, #2
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d1ea      	bne.n	8002b8e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0304 	and.w	r3, r3, #4
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	f000 8097 	beq.w	8002cf4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bca:	4b83      	ldr	r3, [pc, #524]	@ (8002dd8 <HAL_RCC_OscConfig+0x4ac>)
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d10f      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	60bb      	str	r3, [r7, #8]
 8002bda:	4b7f      	ldr	r3, [pc, #508]	@ (8002dd8 <HAL_RCC_OscConfig+0x4ac>)
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bde:	4a7e      	ldr	r2, [pc, #504]	@ (8002dd8 <HAL_RCC_OscConfig+0x4ac>)
 8002be0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002be4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002be6:	4b7c      	ldr	r3, [pc, #496]	@ (8002dd8 <HAL_RCC_OscConfig+0x4ac>)
 8002be8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bee:	60bb      	str	r3, [r7, #8]
 8002bf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bf6:	4b79      	ldr	r3, [pc, #484]	@ (8002ddc <HAL_RCC_OscConfig+0x4b0>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d118      	bne.n	8002c34 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c02:	4b76      	ldr	r3, [pc, #472]	@ (8002ddc <HAL_RCC_OscConfig+0x4b0>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a75      	ldr	r2, [pc, #468]	@ (8002ddc <HAL_RCC_OscConfig+0x4b0>)
 8002c08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c0e:	f7fe fb21 	bl	8001254 <HAL_GetTick>
 8002c12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c14:	e008      	b.n	8002c28 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c16:	f7fe fb1d 	bl	8001254 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d901      	bls.n	8002c28 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e118      	b.n	8002e5a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c28:	4b6c      	ldr	r3, [pc, #432]	@ (8002ddc <HAL_RCC_OscConfig+0x4b0>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d0f0      	beq.n	8002c16 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d106      	bne.n	8002c4a <HAL_RCC_OscConfig+0x31e>
 8002c3c:	4b66      	ldr	r3, [pc, #408]	@ (8002dd8 <HAL_RCC_OscConfig+0x4ac>)
 8002c3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c40:	4a65      	ldr	r2, [pc, #404]	@ (8002dd8 <HAL_RCC_OscConfig+0x4ac>)
 8002c42:	f043 0301 	orr.w	r3, r3, #1
 8002c46:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c48:	e01c      	b.n	8002c84 <HAL_RCC_OscConfig+0x358>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	2b05      	cmp	r3, #5
 8002c50:	d10c      	bne.n	8002c6c <HAL_RCC_OscConfig+0x340>
 8002c52:	4b61      	ldr	r3, [pc, #388]	@ (8002dd8 <HAL_RCC_OscConfig+0x4ac>)
 8002c54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c56:	4a60      	ldr	r2, [pc, #384]	@ (8002dd8 <HAL_RCC_OscConfig+0x4ac>)
 8002c58:	f043 0304 	orr.w	r3, r3, #4
 8002c5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c5e:	4b5e      	ldr	r3, [pc, #376]	@ (8002dd8 <HAL_RCC_OscConfig+0x4ac>)
 8002c60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c62:	4a5d      	ldr	r2, [pc, #372]	@ (8002dd8 <HAL_RCC_OscConfig+0x4ac>)
 8002c64:	f043 0301 	orr.w	r3, r3, #1
 8002c68:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c6a:	e00b      	b.n	8002c84 <HAL_RCC_OscConfig+0x358>
 8002c6c:	4b5a      	ldr	r3, [pc, #360]	@ (8002dd8 <HAL_RCC_OscConfig+0x4ac>)
 8002c6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c70:	4a59      	ldr	r2, [pc, #356]	@ (8002dd8 <HAL_RCC_OscConfig+0x4ac>)
 8002c72:	f023 0301 	bic.w	r3, r3, #1
 8002c76:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c78:	4b57      	ldr	r3, [pc, #348]	@ (8002dd8 <HAL_RCC_OscConfig+0x4ac>)
 8002c7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c7c:	4a56      	ldr	r2, [pc, #344]	@ (8002dd8 <HAL_RCC_OscConfig+0x4ac>)
 8002c7e:	f023 0304 	bic.w	r3, r3, #4
 8002c82:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d015      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c8c:	f7fe fae2 	bl	8001254 <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c92:	e00a      	b.n	8002caa <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c94:	f7fe fade 	bl	8001254 <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d901      	bls.n	8002caa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e0d7      	b.n	8002e5a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002caa:	4b4b      	ldr	r3, [pc, #300]	@ (8002dd8 <HAL_RCC_OscConfig+0x4ac>)
 8002cac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cae:	f003 0302 	and.w	r3, r3, #2
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d0ee      	beq.n	8002c94 <HAL_RCC_OscConfig+0x368>
 8002cb6:	e014      	b.n	8002ce2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb8:	f7fe facc 	bl	8001254 <HAL_GetTick>
 8002cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cbe:	e00a      	b.n	8002cd6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cc0:	f7fe fac8 	bl	8001254 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e0c1      	b.n	8002e5a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cd6:	4b40      	ldr	r3, [pc, #256]	@ (8002dd8 <HAL_RCC_OscConfig+0x4ac>)
 8002cd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d1ee      	bne.n	8002cc0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ce2:	7dfb      	ldrb	r3, [r7, #23]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d105      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ce8:	4b3b      	ldr	r3, [pc, #236]	@ (8002dd8 <HAL_RCC_OscConfig+0x4ac>)
 8002cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cec:	4a3a      	ldr	r2, [pc, #232]	@ (8002dd8 <HAL_RCC_OscConfig+0x4ac>)
 8002cee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cf2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	699b      	ldr	r3, [r3, #24]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	f000 80ad 	beq.w	8002e58 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002cfe:	4b36      	ldr	r3, [pc, #216]	@ (8002dd8 <HAL_RCC_OscConfig+0x4ac>)
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f003 030c 	and.w	r3, r3, #12
 8002d06:	2b08      	cmp	r3, #8
 8002d08:	d060      	beq.n	8002dcc <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d145      	bne.n	8002d9e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d12:	4b33      	ldr	r3, [pc, #204]	@ (8002de0 <HAL_RCC_OscConfig+0x4b4>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d18:	f7fe fa9c 	bl	8001254 <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d1e:	e008      	b.n	8002d32 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d20:	f7fe fa98 	bl	8001254 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e093      	b.n	8002e5a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d32:	4b29      	ldr	r3, [pc, #164]	@ (8002dd8 <HAL_RCC_OscConfig+0x4ac>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1f0      	bne.n	8002d20 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	69da      	ldr	r2, [r3, #28]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a1b      	ldr	r3, [r3, #32]
 8002d46:	431a      	orrs	r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d4c:	019b      	lsls	r3, r3, #6
 8002d4e:	431a      	orrs	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d54:	085b      	lsrs	r3, r3, #1
 8002d56:	3b01      	subs	r3, #1
 8002d58:	041b      	lsls	r3, r3, #16
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d60:	061b      	lsls	r3, r3, #24
 8002d62:	431a      	orrs	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d68:	071b      	lsls	r3, r3, #28
 8002d6a:	491b      	ldr	r1, [pc, #108]	@ (8002dd8 <HAL_RCC_OscConfig+0x4ac>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d70:	4b1b      	ldr	r3, [pc, #108]	@ (8002de0 <HAL_RCC_OscConfig+0x4b4>)
 8002d72:	2201      	movs	r2, #1
 8002d74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d76:	f7fe fa6d 	bl	8001254 <HAL_GetTick>
 8002d7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d7c:	e008      	b.n	8002d90 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d7e:	f7fe fa69 	bl	8001254 <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	2b02      	cmp	r3, #2
 8002d8a:	d901      	bls.n	8002d90 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002d8c:	2303      	movs	r3, #3
 8002d8e:	e064      	b.n	8002e5a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d90:	4b11      	ldr	r3, [pc, #68]	@ (8002dd8 <HAL_RCC_OscConfig+0x4ac>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d0f0      	beq.n	8002d7e <HAL_RCC_OscConfig+0x452>
 8002d9c:	e05c      	b.n	8002e58 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d9e:	4b10      	ldr	r3, [pc, #64]	@ (8002de0 <HAL_RCC_OscConfig+0x4b4>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002da4:	f7fe fa56 	bl	8001254 <HAL_GetTick>
 8002da8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002daa:	e008      	b.n	8002dbe <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dac:	f7fe fa52 	bl	8001254 <HAL_GetTick>
 8002db0:	4602      	mov	r2, r0
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	1ad3      	subs	r3, r2, r3
 8002db6:	2b02      	cmp	r3, #2
 8002db8:	d901      	bls.n	8002dbe <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e04d      	b.n	8002e5a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dbe:	4b06      	ldr	r3, [pc, #24]	@ (8002dd8 <HAL_RCC_OscConfig+0x4ac>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1f0      	bne.n	8002dac <HAL_RCC_OscConfig+0x480>
 8002dca:	e045      	b.n	8002e58 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	699b      	ldr	r3, [r3, #24]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d107      	bne.n	8002de4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e040      	b.n	8002e5a <HAL_RCC_OscConfig+0x52e>
 8002dd8:	40023800 	.word	0x40023800
 8002ddc:	40007000 	.word	0x40007000
 8002de0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002de4:	4b1f      	ldr	r3, [pc, #124]	@ (8002e64 <HAL_RCC_OscConfig+0x538>)
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d030      	beq.n	8002e54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d129      	bne.n	8002e54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d122      	bne.n	8002e54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002e14:	4013      	ands	r3, r2
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002e1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d119      	bne.n	8002e54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e2a:	085b      	lsrs	r3, r3, #1
 8002e2c:	3b01      	subs	r3, #1
 8002e2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d10f      	bne.n	8002e54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d107      	bne.n	8002e54 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e4e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d001      	beq.n	8002e58 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e000      	b.n	8002e5a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3718      	adds	r7, #24
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	40023800 	.word	0x40023800

08002e68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d101      	bne.n	8002e7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e042      	b.n	8002f00 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d106      	bne.n	8002e94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f7fe f890 	bl	8000fb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2224      	movs	r2, #36	@ 0x24
 8002e98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68da      	ldr	r2, [r3, #12]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002eaa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f000 f82b 	bl	8002f08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	691a      	ldr	r2, [r3, #16]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002ec0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	695a      	ldr	r2, [r3, #20]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002ed0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68da      	ldr	r2, [r3, #12]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002ee0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2220      	movs	r2, #32
 8002eec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2220      	movs	r2, #32
 8002ef4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002efe:	2300      	movs	r3, #0
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3708      	adds	r7, #8
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f0c:	b0c0      	sub	sp, #256	@ 0x100
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	691b      	ldr	r3, [r3, #16]
 8002f1c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f24:	68d9      	ldr	r1, [r3, #12]
 8002f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	ea40 0301 	orr.w	r3, r0, r1
 8002f30:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f36:	689a      	ldr	r2, [r3, #8]
 8002f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	431a      	orrs	r2, r3
 8002f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	431a      	orrs	r2, r3
 8002f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f4c:	69db      	ldr	r3, [r3, #28]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002f60:	f021 010c 	bic.w	r1, r1, #12
 8002f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002f6e:	430b      	orrs	r3, r1
 8002f70:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f82:	6999      	ldr	r1, [r3, #24]
 8002f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	ea40 0301 	orr.w	r3, r0, r1
 8002f8e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	4b8f      	ldr	r3, [pc, #572]	@ (80031d4 <UART_SetConfig+0x2cc>)
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d005      	beq.n	8002fa8 <UART_SetConfig+0xa0>
 8002f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	4b8d      	ldr	r3, [pc, #564]	@ (80031d8 <UART_SetConfig+0x2d0>)
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d104      	bne.n	8002fb2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002fa8:	f7ff fb02 	bl	80025b0 <HAL_RCC_GetPCLK2Freq>
 8002fac:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002fb0:	e003      	b.n	8002fba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002fb2:	f7ff fae9 	bl	8002588 <HAL_RCC_GetPCLK1Freq>
 8002fb6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fbe:	69db      	ldr	r3, [r3, #28]
 8002fc0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002fc4:	f040 810c 	bne.w	80031e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002fc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002fd2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002fd6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002fda:	4622      	mov	r2, r4
 8002fdc:	462b      	mov	r3, r5
 8002fde:	1891      	adds	r1, r2, r2
 8002fe0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002fe2:	415b      	adcs	r3, r3
 8002fe4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002fe6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002fea:	4621      	mov	r1, r4
 8002fec:	eb12 0801 	adds.w	r8, r2, r1
 8002ff0:	4629      	mov	r1, r5
 8002ff2:	eb43 0901 	adc.w	r9, r3, r1
 8002ff6:	f04f 0200 	mov.w	r2, #0
 8002ffa:	f04f 0300 	mov.w	r3, #0
 8002ffe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003002:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003006:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800300a:	4690      	mov	r8, r2
 800300c:	4699      	mov	r9, r3
 800300e:	4623      	mov	r3, r4
 8003010:	eb18 0303 	adds.w	r3, r8, r3
 8003014:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003018:	462b      	mov	r3, r5
 800301a:	eb49 0303 	adc.w	r3, r9, r3
 800301e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800302e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003032:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003036:	460b      	mov	r3, r1
 8003038:	18db      	adds	r3, r3, r3
 800303a:	653b      	str	r3, [r7, #80]	@ 0x50
 800303c:	4613      	mov	r3, r2
 800303e:	eb42 0303 	adc.w	r3, r2, r3
 8003042:	657b      	str	r3, [r7, #84]	@ 0x54
 8003044:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003048:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800304c:	f7fd f930 	bl	80002b0 <__aeabi_uldivmod>
 8003050:	4602      	mov	r2, r0
 8003052:	460b      	mov	r3, r1
 8003054:	4b61      	ldr	r3, [pc, #388]	@ (80031dc <UART_SetConfig+0x2d4>)
 8003056:	fba3 2302 	umull	r2, r3, r3, r2
 800305a:	095b      	lsrs	r3, r3, #5
 800305c:	011c      	lsls	r4, r3, #4
 800305e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003062:	2200      	movs	r2, #0
 8003064:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003068:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800306c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003070:	4642      	mov	r2, r8
 8003072:	464b      	mov	r3, r9
 8003074:	1891      	adds	r1, r2, r2
 8003076:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003078:	415b      	adcs	r3, r3
 800307a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800307c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003080:	4641      	mov	r1, r8
 8003082:	eb12 0a01 	adds.w	sl, r2, r1
 8003086:	4649      	mov	r1, r9
 8003088:	eb43 0b01 	adc.w	fp, r3, r1
 800308c:	f04f 0200 	mov.w	r2, #0
 8003090:	f04f 0300 	mov.w	r3, #0
 8003094:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003098:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800309c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030a0:	4692      	mov	sl, r2
 80030a2:	469b      	mov	fp, r3
 80030a4:	4643      	mov	r3, r8
 80030a6:	eb1a 0303 	adds.w	r3, sl, r3
 80030aa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80030ae:	464b      	mov	r3, r9
 80030b0:	eb4b 0303 	adc.w	r3, fp, r3
 80030b4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80030b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80030c4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80030c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80030cc:	460b      	mov	r3, r1
 80030ce:	18db      	adds	r3, r3, r3
 80030d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80030d2:	4613      	mov	r3, r2
 80030d4:	eb42 0303 	adc.w	r3, r2, r3
 80030d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80030da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80030de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80030e2:	f7fd f8e5 	bl	80002b0 <__aeabi_uldivmod>
 80030e6:	4602      	mov	r2, r0
 80030e8:	460b      	mov	r3, r1
 80030ea:	4611      	mov	r1, r2
 80030ec:	4b3b      	ldr	r3, [pc, #236]	@ (80031dc <UART_SetConfig+0x2d4>)
 80030ee:	fba3 2301 	umull	r2, r3, r3, r1
 80030f2:	095b      	lsrs	r3, r3, #5
 80030f4:	2264      	movs	r2, #100	@ 0x64
 80030f6:	fb02 f303 	mul.w	r3, r2, r3
 80030fa:	1acb      	subs	r3, r1, r3
 80030fc:	00db      	lsls	r3, r3, #3
 80030fe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003102:	4b36      	ldr	r3, [pc, #216]	@ (80031dc <UART_SetConfig+0x2d4>)
 8003104:	fba3 2302 	umull	r2, r3, r3, r2
 8003108:	095b      	lsrs	r3, r3, #5
 800310a:	005b      	lsls	r3, r3, #1
 800310c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003110:	441c      	add	r4, r3
 8003112:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003116:	2200      	movs	r2, #0
 8003118:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800311c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003120:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003124:	4642      	mov	r2, r8
 8003126:	464b      	mov	r3, r9
 8003128:	1891      	adds	r1, r2, r2
 800312a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800312c:	415b      	adcs	r3, r3
 800312e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003130:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003134:	4641      	mov	r1, r8
 8003136:	1851      	adds	r1, r2, r1
 8003138:	6339      	str	r1, [r7, #48]	@ 0x30
 800313a:	4649      	mov	r1, r9
 800313c:	414b      	adcs	r3, r1
 800313e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003140:	f04f 0200 	mov.w	r2, #0
 8003144:	f04f 0300 	mov.w	r3, #0
 8003148:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800314c:	4659      	mov	r1, fp
 800314e:	00cb      	lsls	r3, r1, #3
 8003150:	4651      	mov	r1, sl
 8003152:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003156:	4651      	mov	r1, sl
 8003158:	00ca      	lsls	r2, r1, #3
 800315a:	4610      	mov	r0, r2
 800315c:	4619      	mov	r1, r3
 800315e:	4603      	mov	r3, r0
 8003160:	4642      	mov	r2, r8
 8003162:	189b      	adds	r3, r3, r2
 8003164:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003168:	464b      	mov	r3, r9
 800316a:	460a      	mov	r2, r1
 800316c:	eb42 0303 	adc.w	r3, r2, r3
 8003170:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003180:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003184:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003188:	460b      	mov	r3, r1
 800318a:	18db      	adds	r3, r3, r3
 800318c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800318e:	4613      	mov	r3, r2
 8003190:	eb42 0303 	adc.w	r3, r2, r3
 8003194:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003196:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800319a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800319e:	f7fd f887 	bl	80002b0 <__aeabi_uldivmod>
 80031a2:	4602      	mov	r2, r0
 80031a4:	460b      	mov	r3, r1
 80031a6:	4b0d      	ldr	r3, [pc, #52]	@ (80031dc <UART_SetConfig+0x2d4>)
 80031a8:	fba3 1302 	umull	r1, r3, r3, r2
 80031ac:	095b      	lsrs	r3, r3, #5
 80031ae:	2164      	movs	r1, #100	@ 0x64
 80031b0:	fb01 f303 	mul.w	r3, r1, r3
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	00db      	lsls	r3, r3, #3
 80031b8:	3332      	adds	r3, #50	@ 0x32
 80031ba:	4a08      	ldr	r2, [pc, #32]	@ (80031dc <UART_SetConfig+0x2d4>)
 80031bc:	fba2 2303 	umull	r2, r3, r2, r3
 80031c0:	095b      	lsrs	r3, r3, #5
 80031c2:	f003 0207 	and.w	r2, r3, #7
 80031c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4422      	add	r2, r4
 80031ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80031d0:	e106      	b.n	80033e0 <UART_SetConfig+0x4d8>
 80031d2:	bf00      	nop
 80031d4:	40011000 	.word	0x40011000
 80031d8:	40011400 	.word	0x40011400
 80031dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031e4:	2200      	movs	r2, #0
 80031e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80031ea:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80031ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80031f2:	4642      	mov	r2, r8
 80031f4:	464b      	mov	r3, r9
 80031f6:	1891      	adds	r1, r2, r2
 80031f8:	6239      	str	r1, [r7, #32]
 80031fa:	415b      	adcs	r3, r3
 80031fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80031fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003202:	4641      	mov	r1, r8
 8003204:	1854      	adds	r4, r2, r1
 8003206:	4649      	mov	r1, r9
 8003208:	eb43 0501 	adc.w	r5, r3, r1
 800320c:	f04f 0200 	mov.w	r2, #0
 8003210:	f04f 0300 	mov.w	r3, #0
 8003214:	00eb      	lsls	r3, r5, #3
 8003216:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800321a:	00e2      	lsls	r2, r4, #3
 800321c:	4614      	mov	r4, r2
 800321e:	461d      	mov	r5, r3
 8003220:	4643      	mov	r3, r8
 8003222:	18e3      	adds	r3, r4, r3
 8003224:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003228:	464b      	mov	r3, r9
 800322a:	eb45 0303 	adc.w	r3, r5, r3
 800322e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003232:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800323e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003242:	f04f 0200 	mov.w	r2, #0
 8003246:	f04f 0300 	mov.w	r3, #0
 800324a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800324e:	4629      	mov	r1, r5
 8003250:	008b      	lsls	r3, r1, #2
 8003252:	4621      	mov	r1, r4
 8003254:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003258:	4621      	mov	r1, r4
 800325a:	008a      	lsls	r2, r1, #2
 800325c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003260:	f7fd f826 	bl	80002b0 <__aeabi_uldivmod>
 8003264:	4602      	mov	r2, r0
 8003266:	460b      	mov	r3, r1
 8003268:	4b60      	ldr	r3, [pc, #384]	@ (80033ec <UART_SetConfig+0x4e4>)
 800326a:	fba3 2302 	umull	r2, r3, r3, r2
 800326e:	095b      	lsrs	r3, r3, #5
 8003270:	011c      	lsls	r4, r3, #4
 8003272:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003276:	2200      	movs	r2, #0
 8003278:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800327c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003280:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003284:	4642      	mov	r2, r8
 8003286:	464b      	mov	r3, r9
 8003288:	1891      	adds	r1, r2, r2
 800328a:	61b9      	str	r1, [r7, #24]
 800328c:	415b      	adcs	r3, r3
 800328e:	61fb      	str	r3, [r7, #28]
 8003290:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003294:	4641      	mov	r1, r8
 8003296:	1851      	adds	r1, r2, r1
 8003298:	6139      	str	r1, [r7, #16]
 800329a:	4649      	mov	r1, r9
 800329c:	414b      	adcs	r3, r1
 800329e:	617b      	str	r3, [r7, #20]
 80032a0:	f04f 0200 	mov.w	r2, #0
 80032a4:	f04f 0300 	mov.w	r3, #0
 80032a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80032ac:	4659      	mov	r1, fp
 80032ae:	00cb      	lsls	r3, r1, #3
 80032b0:	4651      	mov	r1, sl
 80032b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032b6:	4651      	mov	r1, sl
 80032b8:	00ca      	lsls	r2, r1, #3
 80032ba:	4610      	mov	r0, r2
 80032bc:	4619      	mov	r1, r3
 80032be:	4603      	mov	r3, r0
 80032c0:	4642      	mov	r2, r8
 80032c2:	189b      	adds	r3, r3, r2
 80032c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80032c8:	464b      	mov	r3, r9
 80032ca:	460a      	mov	r2, r1
 80032cc:	eb42 0303 	adc.w	r3, r2, r3
 80032d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80032d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80032de:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80032e0:	f04f 0200 	mov.w	r2, #0
 80032e4:	f04f 0300 	mov.w	r3, #0
 80032e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80032ec:	4649      	mov	r1, r9
 80032ee:	008b      	lsls	r3, r1, #2
 80032f0:	4641      	mov	r1, r8
 80032f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032f6:	4641      	mov	r1, r8
 80032f8:	008a      	lsls	r2, r1, #2
 80032fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80032fe:	f7fc ffd7 	bl	80002b0 <__aeabi_uldivmod>
 8003302:	4602      	mov	r2, r0
 8003304:	460b      	mov	r3, r1
 8003306:	4611      	mov	r1, r2
 8003308:	4b38      	ldr	r3, [pc, #224]	@ (80033ec <UART_SetConfig+0x4e4>)
 800330a:	fba3 2301 	umull	r2, r3, r3, r1
 800330e:	095b      	lsrs	r3, r3, #5
 8003310:	2264      	movs	r2, #100	@ 0x64
 8003312:	fb02 f303 	mul.w	r3, r2, r3
 8003316:	1acb      	subs	r3, r1, r3
 8003318:	011b      	lsls	r3, r3, #4
 800331a:	3332      	adds	r3, #50	@ 0x32
 800331c:	4a33      	ldr	r2, [pc, #204]	@ (80033ec <UART_SetConfig+0x4e4>)
 800331e:	fba2 2303 	umull	r2, r3, r2, r3
 8003322:	095b      	lsrs	r3, r3, #5
 8003324:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003328:	441c      	add	r4, r3
 800332a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800332e:	2200      	movs	r2, #0
 8003330:	673b      	str	r3, [r7, #112]	@ 0x70
 8003332:	677a      	str	r2, [r7, #116]	@ 0x74
 8003334:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003338:	4642      	mov	r2, r8
 800333a:	464b      	mov	r3, r9
 800333c:	1891      	adds	r1, r2, r2
 800333e:	60b9      	str	r1, [r7, #8]
 8003340:	415b      	adcs	r3, r3
 8003342:	60fb      	str	r3, [r7, #12]
 8003344:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003348:	4641      	mov	r1, r8
 800334a:	1851      	adds	r1, r2, r1
 800334c:	6039      	str	r1, [r7, #0]
 800334e:	4649      	mov	r1, r9
 8003350:	414b      	adcs	r3, r1
 8003352:	607b      	str	r3, [r7, #4]
 8003354:	f04f 0200 	mov.w	r2, #0
 8003358:	f04f 0300 	mov.w	r3, #0
 800335c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003360:	4659      	mov	r1, fp
 8003362:	00cb      	lsls	r3, r1, #3
 8003364:	4651      	mov	r1, sl
 8003366:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800336a:	4651      	mov	r1, sl
 800336c:	00ca      	lsls	r2, r1, #3
 800336e:	4610      	mov	r0, r2
 8003370:	4619      	mov	r1, r3
 8003372:	4603      	mov	r3, r0
 8003374:	4642      	mov	r2, r8
 8003376:	189b      	adds	r3, r3, r2
 8003378:	66bb      	str	r3, [r7, #104]	@ 0x68
 800337a:	464b      	mov	r3, r9
 800337c:	460a      	mov	r2, r1
 800337e:	eb42 0303 	adc.w	r3, r2, r3
 8003382:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	663b      	str	r3, [r7, #96]	@ 0x60
 800338e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003390:	f04f 0200 	mov.w	r2, #0
 8003394:	f04f 0300 	mov.w	r3, #0
 8003398:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800339c:	4649      	mov	r1, r9
 800339e:	008b      	lsls	r3, r1, #2
 80033a0:	4641      	mov	r1, r8
 80033a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033a6:	4641      	mov	r1, r8
 80033a8:	008a      	lsls	r2, r1, #2
 80033aa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80033ae:	f7fc ff7f 	bl	80002b0 <__aeabi_uldivmod>
 80033b2:	4602      	mov	r2, r0
 80033b4:	460b      	mov	r3, r1
 80033b6:	4b0d      	ldr	r3, [pc, #52]	@ (80033ec <UART_SetConfig+0x4e4>)
 80033b8:	fba3 1302 	umull	r1, r3, r3, r2
 80033bc:	095b      	lsrs	r3, r3, #5
 80033be:	2164      	movs	r1, #100	@ 0x64
 80033c0:	fb01 f303 	mul.w	r3, r1, r3
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	011b      	lsls	r3, r3, #4
 80033c8:	3332      	adds	r3, #50	@ 0x32
 80033ca:	4a08      	ldr	r2, [pc, #32]	@ (80033ec <UART_SetConfig+0x4e4>)
 80033cc:	fba2 2303 	umull	r2, r3, r2, r3
 80033d0:	095b      	lsrs	r3, r3, #5
 80033d2:	f003 020f 	and.w	r2, r3, #15
 80033d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4422      	add	r2, r4
 80033de:	609a      	str	r2, [r3, #8]
}
 80033e0:	bf00      	nop
 80033e2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80033e6:	46bd      	mov	sp, r7
 80033e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033ec:	51eb851f 	.word	0x51eb851f

080033f0 <sniprintf>:
 80033f0:	b40c      	push	{r2, r3}
 80033f2:	b530      	push	{r4, r5, lr}
 80033f4:	4b18      	ldr	r3, [pc, #96]	@ (8003458 <sniprintf+0x68>)
 80033f6:	1e0c      	subs	r4, r1, #0
 80033f8:	681d      	ldr	r5, [r3, #0]
 80033fa:	b09d      	sub	sp, #116	@ 0x74
 80033fc:	da08      	bge.n	8003410 <sniprintf+0x20>
 80033fe:	238b      	movs	r3, #139	@ 0x8b
 8003400:	602b      	str	r3, [r5, #0]
 8003402:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003406:	b01d      	add	sp, #116	@ 0x74
 8003408:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800340c:	b002      	add	sp, #8
 800340e:	4770      	bx	lr
 8003410:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003414:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003418:	f04f 0300 	mov.w	r3, #0
 800341c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800341e:	bf14      	ite	ne
 8003420:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8003424:	4623      	moveq	r3, r4
 8003426:	9304      	str	r3, [sp, #16]
 8003428:	9307      	str	r3, [sp, #28]
 800342a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800342e:	9002      	str	r0, [sp, #8]
 8003430:	9006      	str	r0, [sp, #24]
 8003432:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003436:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003438:	ab21      	add	r3, sp, #132	@ 0x84
 800343a:	a902      	add	r1, sp, #8
 800343c:	4628      	mov	r0, r5
 800343e:	9301      	str	r3, [sp, #4]
 8003440:	f000 f89c 	bl	800357c <_svfiprintf_r>
 8003444:	1c43      	adds	r3, r0, #1
 8003446:	bfbc      	itt	lt
 8003448:	238b      	movlt	r3, #139	@ 0x8b
 800344a:	602b      	strlt	r3, [r5, #0]
 800344c:	2c00      	cmp	r4, #0
 800344e:	d0da      	beq.n	8003406 <sniprintf+0x16>
 8003450:	9b02      	ldr	r3, [sp, #8]
 8003452:	2200      	movs	r2, #0
 8003454:	701a      	strb	r2, [r3, #0]
 8003456:	e7d6      	b.n	8003406 <sniprintf+0x16>
 8003458:	20000014 	.word	0x20000014

0800345c <memset>:
 800345c:	4402      	add	r2, r0
 800345e:	4603      	mov	r3, r0
 8003460:	4293      	cmp	r3, r2
 8003462:	d100      	bne.n	8003466 <memset+0xa>
 8003464:	4770      	bx	lr
 8003466:	f803 1b01 	strb.w	r1, [r3], #1
 800346a:	e7f9      	b.n	8003460 <memset+0x4>

0800346c <__errno>:
 800346c:	4b01      	ldr	r3, [pc, #4]	@ (8003474 <__errno+0x8>)
 800346e:	6818      	ldr	r0, [r3, #0]
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	20000014 	.word	0x20000014

08003478 <__libc_init_array>:
 8003478:	b570      	push	{r4, r5, r6, lr}
 800347a:	4d0d      	ldr	r5, [pc, #52]	@ (80034b0 <__libc_init_array+0x38>)
 800347c:	4c0d      	ldr	r4, [pc, #52]	@ (80034b4 <__libc_init_array+0x3c>)
 800347e:	1b64      	subs	r4, r4, r5
 8003480:	10a4      	asrs	r4, r4, #2
 8003482:	2600      	movs	r6, #0
 8003484:	42a6      	cmp	r6, r4
 8003486:	d109      	bne.n	800349c <__libc_init_array+0x24>
 8003488:	4d0b      	ldr	r5, [pc, #44]	@ (80034b8 <__libc_init_array+0x40>)
 800348a:	4c0c      	ldr	r4, [pc, #48]	@ (80034bc <__libc_init_array+0x44>)
 800348c:	f000 fc64 	bl	8003d58 <_init>
 8003490:	1b64      	subs	r4, r4, r5
 8003492:	10a4      	asrs	r4, r4, #2
 8003494:	2600      	movs	r6, #0
 8003496:	42a6      	cmp	r6, r4
 8003498:	d105      	bne.n	80034a6 <__libc_init_array+0x2e>
 800349a:	bd70      	pop	{r4, r5, r6, pc}
 800349c:	f855 3b04 	ldr.w	r3, [r5], #4
 80034a0:	4798      	blx	r3
 80034a2:	3601      	adds	r6, #1
 80034a4:	e7ee      	b.n	8003484 <__libc_init_array+0xc>
 80034a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80034aa:	4798      	blx	r3
 80034ac:	3601      	adds	r6, #1
 80034ae:	e7f2      	b.n	8003496 <__libc_init_array+0x1e>
 80034b0:	08004b44 	.word	0x08004b44
 80034b4:	08004b44 	.word	0x08004b44
 80034b8:	08004b44 	.word	0x08004b44
 80034bc:	08004b48 	.word	0x08004b48

080034c0 <__retarget_lock_acquire_recursive>:
 80034c0:	4770      	bx	lr

080034c2 <__retarget_lock_release_recursive>:
 80034c2:	4770      	bx	lr

080034c4 <__ssputs_r>:
 80034c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034c8:	688e      	ldr	r6, [r1, #8]
 80034ca:	461f      	mov	r7, r3
 80034cc:	42be      	cmp	r6, r7
 80034ce:	680b      	ldr	r3, [r1, #0]
 80034d0:	4682      	mov	sl, r0
 80034d2:	460c      	mov	r4, r1
 80034d4:	4690      	mov	r8, r2
 80034d6:	d82d      	bhi.n	8003534 <__ssputs_r+0x70>
 80034d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80034dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80034e0:	d026      	beq.n	8003530 <__ssputs_r+0x6c>
 80034e2:	6965      	ldr	r5, [r4, #20]
 80034e4:	6909      	ldr	r1, [r1, #16]
 80034e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80034ea:	eba3 0901 	sub.w	r9, r3, r1
 80034ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80034f2:	1c7b      	adds	r3, r7, #1
 80034f4:	444b      	add	r3, r9
 80034f6:	106d      	asrs	r5, r5, #1
 80034f8:	429d      	cmp	r5, r3
 80034fa:	bf38      	it	cc
 80034fc:	461d      	movcc	r5, r3
 80034fe:	0553      	lsls	r3, r2, #21
 8003500:	d527      	bpl.n	8003552 <__ssputs_r+0x8e>
 8003502:	4629      	mov	r1, r5
 8003504:	f000 f958 	bl	80037b8 <_malloc_r>
 8003508:	4606      	mov	r6, r0
 800350a:	b360      	cbz	r0, 8003566 <__ssputs_r+0xa2>
 800350c:	6921      	ldr	r1, [r4, #16]
 800350e:	464a      	mov	r2, r9
 8003510:	f000 fbc2 	bl	8003c98 <memcpy>
 8003514:	89a3      	ldrh	r3, [r4, #12]
 8003516:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800351a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800351e:	81a3      	strh	r3, [r4, #12]
 8003520:	6126      	str	r6, [r4, #16]
 8003522:	6165      	str	r5, [r4, #20]
 8003524:	444e      	add	r6, r9
 8003526:	eba5 0509 	sub.w	r5, r5, r9
 800352a:	6026      	str	r6, [r4, #0]
 800352c:	60a5      	str	r5, [r4, #8]
 800352e:	463e      	mov	r6, r7
 8003530:	42be      	cmp	r6, r7
 8003532:	d900      	bls.n	8003536 <__ssputs_r+0x72>
 8003534:	463e      	mov	r6, r7
 8003536:	6820      	ldr	r0, [r4, #0]
 8003538:	4632      	mov	r2, r6
 800353a:	4641      	mov	r1, r8
 800353c:	f000 fb82 	bl	8003c44 <memmove>
 8003540:	68a3      	ldr	r3, [r4, #8]
 8003542:	1b9b      	subs	r3, r3, r6
 8003544:	60a3      	str	r3, [r4, #8]
 8003546:	6823      	ldr	r3, [r4, #0]
 8003548:	4433      	add	r3, r6
 800354a:	6023      	str	r3, [r4, #0]
 800354c:	2000      	movs	r0, #0
 800354e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003552:	462a      	mov	r2, r5
 8003554:	f000 fb48 	bl	8003be8 <_realloc_r>
 8003558:	4606      	mov	r6, r0
 800355a:	2800      	cmp	r0, #0
 800355c:	d1e0      	bne.n	8003520 <__ssputs_r+0x5c>
 800355e:	6921      	ldr	r1, [r4, #16]
 8003560:	4650      	mov	r0, sl
 8003562:	f000 fba7 	bl	8003cb4 <_free_r>
 8003566:	230c      	movs	r3, #12
 8003568:	f8ca 3000 	str.w	r3, [sl]
 800356c:	89a3      	ldrh	r3, [r4, #12]
 800356e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003572:	81a3      	strh	r3, [r4, #12]
 8003574:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003578:	e7e9      	b.n	800354e <__ssputs_r+0x8a>
	...

0800357c <_svfiprintf_r>:
 800357c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003580:	4698      	mov	r8, r3
 8003582:	898b      	ldrh	r3, [r1, #12]
 8003584:	061b      	lsls	r3, r3, #24
 8003586:	b09d      	sub	sp, #116	@ 0x74
 8003588:	4607      	mov	r7, r0
 800358a:	460d      	mov	r5, r1
 800358c:	4614      	mov	r4, r2
 800358e:	d510      	bpl.n	80035b2 <_svfiprintf_r+0x36>
 8003590:	690b      	ldr	r3, [r1, #16]
 8003592:	b973      	cbnz	r3, 80035b2 <_svfiprintf_r+0x36>
 8003594:	2140      	movs	r1, #64	@ 0x40
 8003596:	f000 f90f 	bl	80037b8 <_malloc_r>
 800359a:	6028      	str	r0, [r5, #0]
 800359c:	6128      	str	r0, [r5, #16]
 800359e:	b930      	cbnz	r0, 80035ae <_svfiprintf_r+0x32>
 80035a0:	230c      	movs	r3, #12
 80035a2:	603b      	str	r3, [r7, #0]
 80035a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80035a8:	b01d      	add	sp, #116	@ 0x74
 80035aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035ae:	2340      	movs	r3, #64	@ 0x40
 80035b0:	616b      	str	r3, [r5, #20]
 80035b2:	2300      	movs	r3, #0
 80035b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80035b6:	2320      	movs	r3, #32
 80035b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80035bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80035c0:	2330      	movs	r3, #48	@ 0x30
 80035c2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003760 <_svfiprintf_r+0x1e4>
 80035c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80035ca:	f04f 0901 	mov.w	r9, #1
 80035ce:	4623      	mov	r3, r4
 80035d0:	469a      	mov	sl, r3
 80035d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80035d6:	b10a      	cbz	r2, 80035dc <_svfiprintf_r+0x60>
 80035d8:	2a25      	cmp	r2, #37	@ 0x25
 80035da:	d1f9      	bne.n	80035d0 <_svfiprintf_r+0x54>
 80035dc:	ebba 0b04 	subs.w	fp, sl, r4
 80035e0:	d00b      	beq.n	80035fa <_svfiprintf_r+0x7e>
 80035e2:	465b      	mov	r3, fp
 80035e4:	4622      	mov	r2, r4
 80035e6:	4629      	mov	r1, r5
 80035e8:	4638      	mov	r0, r7
 80035ea:	f7ff ff6b 	bl	80034c4 <__ssputs_r>
 80035ee:	3001      	adds	r0, #1
 80035f0:	f000 80a7 	beq.w	8003742 <_svfiprintf_r+0x1c6>
 80035f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80035f6:	445a      	add	r2, fp
 80035f8:	9209      	str	r2, [sp, #36]	@ 0x24
 80035fa:	f89a 3000 	ldrb.w	r3, [sl]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	f000 809f 	beq.w	8003742 <_svfiprintf_r+0x1c6>
 8003604:	2300      	movs	r3, #0
 8003606:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800360a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800360e:	f10a 0a01 	add.w	sl, sl, #1
 8003612:	9304      	str	r3, [sp, #16]
 8003614:	9307      	str	r3, [sp, #28]
 8003616:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800361a:	931a      	str	r3, [sp, #104]	@ 0x68
 800361c:	4654      	mov	r4, sl
 800361e:	2205      	movs	r2, #5
 8003620:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003624:	484e      	ldr	r0, [pc, #312]	@ (8003760 <_svfiprintf_r+0x1e4>)
 8003626:	f7fc fdf3 	bl	8000210 <memchr>
 800362a:	9a04      	ldr	r2, [sp, #16]
 800362c:	b9d8      	cbnz	r0, 8003666 <_svfiprintf_r+0xea>
 800362e:	06d0      	lsls	r0, r2, #27
 8003630:	bf44      	itt	mi
 8003632:	2320      	movmi	r3, #32
 8003634:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003638:	0711      	lsls	r1, r2, #28
 800363a:	bf44      	itt	mi
 800363c:	232b      	movmi	r3, #43	@ 0x2b
 800363e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003642:	f89a 3000 	ldrb.w	r3, [sl]
 8003646:	2b2a      	cmp	r3, #42	@ 0x2a
 8003648:	d015      	beq.n	8003676 <_svfiprintf_r+0xfa>
 800364a:	9a07      	ldr	r2, [sp, #28]
 800364c:	4654      	mov	r4, sl
 800364e:	2000      	movs	r0, #0
 8003650:	f04f 0c0a 	mov.w	ip, #10
 8003654:	4621      	mov	r1, r4
 8003656:	f811 3b01 	ldrb.w	r3, [r1], #1
 800365a:	3b30      	subs	r3, #48	@ 0x30
 800365c:	2b09      	cmp	r3, #9
 800365e:	d94b      	bls.n	80036f8 <_svfiprintf_r+0x17c>
 8003660:	b1b0      	cbz	r0, 8003690 <_svfiprintf_r+0x114>
 8003662:	9207      	str	r2, [sp, #28]
 8003664:	e014      	b.n	8003690 <_svfiprintf_r+0x114>
 8003666:	eba0 0308 	sub.w	r3, r0, r8
 800366a:	fa09 f303 	lsl.w	r3, r9, r3
 800366e:	4313      	orrs	r3, r2
 8003670:	9304      	str	r3, [sp, #16]
 8003672:	46a2      	mov	sl, r4
 8003674:	e7d2      	b.n	800361c <_svfiprintf_r+0xa0>
 8003676:	9b03      	ldr	r3, [sp, #12]
 8003678:	1d19      	adds	r1, r3, #4
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	9103      	str	r1, [sp, #12]
 800367e:	2b00      	cmp	r3, #0
 8003680:	bfbb      	ittet	lt
 8003682:	425b      	neglt	r3, r3
 8003684:	f042 0202 	orrlt.w	r2, r2, #2
 8003688:	9307      	strge	r3, [sp, #28]
 800368a:	9307      	strlt	r3, [sp, #28]
 800368c:	bfb8      	it	lt
 800368e:	9204      	strlt	r2, [sp, #16]
 8003690:	7823      	ldrb	r3, [r4, #0]
 8003692:	2b2e      	cmp	r3, #46	@ 0x2e
 8003694:	d10a      	bne.n	80036ac <_svfiprintf_r+0x130>
 8003696:	7863      	ldrb	r3, [r4, #1]
 8003698:	2b2a      	cmp	r3, #42	@ 0x2a
 800369a:	d132      	bne.n	8003702 <_svfiprintf_r+0x186>
 800369c:	9b03      	ldr	r3, [sp, #12]
 800369e:	1d1a      	adds	r2, r3, #4
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	9203      	str	r2, [sp, #12]
 80036a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80036a8:	3402      	adds	r4, #2
 80036aa:	9305      	str	r3, [sp, #20]
 80036ac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003770 <_svfiprintf_r+0x1f4>
 80036b0:	7821      	ldrb	r1, [r4, #0]
 80036b2:	2203      	movs	r2, #3
 80036b4:	4650      	mov	r0, sl
 80036b6:	f7fc fdab 	bl	8000210 <memchr>
 80036ba:	b138      	cbz	r0, 80036cc <_svfiprintf_r+0x150>
 80036bc:	9b04      	ldr	r3, [sp, #16]
 80036be:	eba0 000a 	sub.w	r0, r0, sl
 80036c2:	2240      	movs	r2, #64	@ 0x40
 80036c4:	4082      	lsls	r2, r0
 80036c6:	4313      	orrs	r3, r2
 80036c8:	3401      	adds	r4, #1
 80036ca:	9304      	str	r3, [sp, #16]
 80036cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036d0:	4824      	ldr	r0, [pc, #144]	@ (8003764 <_svfiprintf_r+0x1e8>)
 80036d2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80036d6:	2206      	movs	r2, #6
 80036d8:	f7fc fd9a 	bl	8000210 <memchr>
 80036dc:	2800      	cmp	r0, #0
 80036de:	d036      	beq.n	800374e <_svfiprintf_r+0x1d2>
 80036e0:	4b21      	ldr	r3, [pc, #132]	@ (8003768 <_svfiprintf_r+0x1ec>)
 80036e2:	bb1b      	cbnz	r3, 800372c <_svfiprintf_r+0x1b0>
 80036e4:	9b03      	ldr	r3, [sp, #12]
 80036e6:	3307      	adds	r3, #7
 80036e8:	f023 0307 	bic.w	r3, r3, #7
 80036ec:	3308      	adds	r3, #8
 80036ee:	9303      	str	r3, [sp, #12]
 80036f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80036f2:	4433      	add	r3, r6
 80036f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80036f6:	e76a      	b.n	80035ce <_svfiprintf_r+0x52>
 80036f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80036fc:	460c      	mov	r4, r1
 80036fe:	2001      	movs	r0, #1
 8003700:	e7a8      	b.n	8003654 <_svfiprintf_r+0xd8>
 8003702:	2300      	movs	r3, #0
 8003704:	3401      	adds	r4, #1
 8003706:	9305      	str	r3, [sp, #20]
 8003708:	4619      	mov	r1, r3
 800370a:	f04f 0c0a 	mov.w	ip, #10
 800370e:	4620      	mov	r0, r4
 8003710:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003714:	3a30      	subs	r2, #48	@ 0x30
 8003716:	2a09      	cmp	r2, #9
 8003718:	d903      	bls.n	8003722 <_svfiprintf_r+0x1a6>
 800371a:	2b00      	cmp	r3, #0
 800371c:	d0c6      	beq.n	80036ac <_svfiprintf_r+0x130>
 800371e:	9105      	str	r1, [sp, #20]
 8003720:	e7c4      	b.n	80036ac <_svfiprintf_r+0x130>
 8003722:	fb0c 2101 	mla	r1, ip, r1, r2
 8003726:	4604      	mov	r4, r0
 8003728:	2301      	movs	r3, #1
 800372a:	e7f0      	b.n	800370e <_svfiprintf_r+0x192>
 800372c:	ab03      	add	r3, sp, #12
 800372e:	9300      	str	r3, [sp, #0]
 8003730:	462a      	mov	r2, r5
 8003732:	4b0e      	ldr	r3, [pc, #56]	@ (800376c <_svfiprintf_r+0x1f0>)
 8003734:	a904      	add	r1, sp, #16
 8003736:	4638      	mov	r0, r7
 8003738:	f3af 8000 	nop.w
 800373c:	1c42      	adds	r2, r0, #1
 800373e:	4606      	mov	r6, r0
 8003740:	d1d6      	bne.n	80036f0 <_svfiprintf_r+0x174>
 8003742:	89ab      	ldrh	r3, [r5, #12]
 8003744:	065b      	lsls	r3, r3, #25
 8003746:	f53f af2d 	bmi.w	80035a4 <_svfiprintf_r+0x28>
 800374a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800374c:	e72c      	b.n	80035a8 <_svfiprintf_r+0x2c>
 800374e:	ab03      	add	r3, sp, #12
 8003750:	9300      	str	r3, [sp, #0]
 8003752:	462a      	mov	r2, r5
 8003754:	4b05      	ldr	r3, [pc, #20]	@ (800376c <_svfiprintf_r+0x1f0>)
 8003756:	a904      	add	r1, sp, #16
 8003758:	4638      	mov	r0, r7
 800375a:	f000 f91b 	bl	8003994 <_printf_i>
 800375e:	e7ed      	b.n	800373c <_svfiprintf_r+0x1c0>
 8003760:	08004b08 	.word	0x08004b08
 8003764:	08004b12 	.word	0x08004b12
 8003768:	00000000 	.word	0x00000000
 800376c:	080034c5 	.word	0x080034c5
 8003770:	08004b0e 	.word	0x08004b0e

08003774 <sbrk_aligned>:
 8003774:	b570      	push	{r4, r5, r6, lr}
 8003776:	4e0f      	ldr	r6, [pc, #60]	@ (80037b4 <sbrk_aligned+0x40>)
 8003778:	460c      	mov	r4, r1
 800377a:	6831      	ldr	r1, [r6, #0]
 800377c:	4605      	mov	r5, r0
 800377e:	b911      	cbnz	r1, 8003786 <sbrk_aligned+0x12>
 8003780:	f000 fa7a 	bl	8003c78 <_sbrk_r>
 8003784:	6030      	str	r0, [r6, #0]
 8003786:	4621      	mov	r1, r4
 8003788:	4628      	mov	r0, r5
 800378a:	f000 fa75 	bl	8003c78 <_sbrk_r>
 800378e:	1c43      	adds	r3, r0, #1
 8003790:	d103      	bne.n	800379a <sbrk_aligned+0x26>
 8003792:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8003796:	4620      	mov	r0, r4
 8003798:	bd70      	pop	{r4, r5, r6, pc}
 800379a:	1cc4      	adds	r4, r0, #3
 800379c:	f024 0403 	bic.w	r4, r4, #3
 80037a0:	42a0      	cmp	r0, r4
 80037a2:	d0f8      	beq.n	8003796 <sbrk_aligned+0x22>
 80037a4:	1a21      	subs	r1, r4, r0
 80037a6:	4628      	mov	r0, r5
 80037a8:	f000 fa66 	bl	8003c78 <_sbrk_r>
 80037ac:	3001      	adds	r0, #1
 80037ae:	d1f2      	bne.n	8003796 <sbrk_aligned+0x22>
 80037b0:	e7ef      	b.n	8003792 <sbrk_aligned+0x1e>
 80037b2:	bf00      	nop
 80037b4:	20000668 	.word	0x20000668

080037b8 <_malloc_r>:
 80037b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80037bc:	1ccd      	adds	r5, r1, #3
 80037be:	f025 0503 	bic.w	r5, r5, #3
 80037c2:	3508      	adds	r5, #8
 80037c4:	2d0c      	cmp	r5, #12
 80037c6:	bf38      	it	cc
 80037c8:	250c      	movcc	r5, #12
 80037ca:	2d00      	cmp	r5, #0
 80037cc:	4606      	mov	r6, r0
 80037ce:	db01      	blt.n	80037d4 <_malloc_r+0x1c>
 80037d0:	42a9      	cmp	r1, r5
 80037d2:	d904      	bls.n	80037de <_malloc_r+0x26>
 80037d4:	230c      	movs	r3, #12
 80037d6:	6033      	str	r3, [r6, #0]
 80037d8:	2000      	movs	r0, #0
 80037da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80037de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80038b4 <_malloc_r+0xfc>
 80037e2:	f000 f9f5 	bl	8003bd0 <__malloc_lock>
 80037e6:	f8d8 3000 	ldr.w	r3, [r8]
 80037ea:	461c      	mov	r4, r3
 80037ec:	bb44      	cbnz	r4, 8003840 <_malloc_r+0x88>
 80037ee:	4629      	mov	r1, r5
 80037f0:	4630      	mov	r0, r6
 80037f2:	f7ff ffbf 	bl	8003774 <sbrk_aligned>
 80037f6:	1c43      	adds	r3, r0, #1
 80037f8:	4604      	mov	r4, r0
 80037fa:	d158      	bne.n	80038ae <_malloc_r+0xf6>
 80037fc:	f8d8 4000 	ldr.w	r4, [r8]
 8003800:	4627      	mov	r7, r4
 8003802:	2f00      	cmp	r7, #0
 8003804:	d143      	bne.n	800388e <_malloc_r+0xd6>
 8003806:	2c00      	cmp	r4, #0
 8003808:	d04b      	beq.n	80038a2 <_malloc_r+0xea>
 800380a:	6823      	ldr	r3, [r4, #0]
 800380c:	4639      	mov	r1, r7
 800380e:	4630      	mov	r0, r6
 8003810:	eb04 0903 	add.w	r9, r4, r3
 8003814:	f000 fa30 	bl	8003c78 <_sbrk_r>
 8003818:	4581      	cmp	r9, r0
 800381a:	d142      	bne.n	80038a2 <_malloc_r+0xea>
 800381c:	6821      	ldr	r1, [r4, #0]
 800381e:	1a6d      	subs	r5, r5, r1
 8003820:	4629      	mov	r1, r5
 8003822:	4630      	mov	r0, r6
 8003824:	f7ff ffa6 	bl	8003774 <sbrk_aligned>
 8003828:	3001      	adds	r0, #1
 800382a:	d03a      	beq.n	80038a2 <_malloc_r+0xea>
 800382c:	6823      	ldr	r3, [r4, #0]
 800382e:	442b      	add	r3, r5
 8003830:	6023      	str	r3, [r4, #0]
 8003832:	f8d8 3000 	ldr.w	r3, [r8]
 8003836:	685a      	ldr	r2, [r3, #4]
 8003838:	bb62      	cbnz	r2, 8003894 <_malloc_r+0xdc>
 800383a:	f8c8 7000 	str.w	r7, [r8]
 800383e:	e00f      	b.n	8003860 <_malloc_r+0xa8>
 8003840:	6822      	ldr	r2, [r4, #0]
 8003842:	1b52      	subs	r2, r2, r5
 8003844:	d420      	bmi.n	8003888 <_malloc_r+0xd0>
 8003846:	2a0b      	cmp	r2, #11
 8003848:	d917      	bls.n	800387a <_malloc_r+0xc2>
 800384a:	1961      	adds	r1, r4, r5
 800384c:	42a3      	cmp	r3, r4
 800384e:	6025      	str	r5, [r4, #0]
 8003850:	bf18      	it	ne
 8003852:	6059      	strne	r1, [r3, #4]
 8003854:	6863      	ldr	r3, [r4, #4]
 8003856:	bf08      	it	eq
 8003858:	f8c8 1000 	streq.w	r1, [r8]
 800385c:	5162      	str	r2, [r4, r5]
 800385e:	604b      	str	r3, [r1, #4]
 8003860:	4630      	mov	r0, r6
 8003862:	f000 f9bb 	bl	8003bdc <__malloc_unlock>
 8003866:	f104 000b 	add.w	r0, r4, #11
 800386a:	1d23      	adds	r3, r4, #4
 800386c:	f020 0007 	bic.w	r0, r0, #7
 8003870:	1ac2      	subs	r2, r0, r3
 8003872:	bf1c      	itt	ne
 8003874:	1a1b      	subne	r3, r3, r0
 8003876:	50a3      	strne	r3, [r4, r2]
 8003878:	e7af      	b.n	80037da <_malloc_r+0x22>
 800387a:	6862      	ldr	r2, [r4, #4]
 800387c:	42a3      	cmp	r3, r4
 800387e:	bf0c      	ite	eq
 8003880:	f8c8 2000 	streq.w	r2, [r8]
 8003884:	605a      	strne	r2, [r3, #4]
 8003886:	e7eb      	b.n	8003860 <_malloc_r+0xa8>
 8003888:	4623      	mov	r3, r4
 800388a:	6864      	ldr	r4, [r4, #4]
 800388c:	e7ae      	b.n	80037ec <_malloc_r+0x34>
 800388e:	463c      	mov	r4, r7
 8003890:	687f      	ldr	r7, [r7, #4]
 8003892:	e7b6      	b.n	8003802 <_malloc_r+0x4a>
 8003894:	461a      	mov	r2, r3
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	42a3      	cmp	r3, r4
 800389a:	d1fb      	bne.n	8003894 <_malloc_r+0xdc>
 800389c:	2300      	movs	r3, #0
 800389e:	6053      	str	r3, [r2, #4]
 80038a0:	e7de      	b.n	8003860 <_malloc_r+0xa8>
 80038a2:	230c      	movs	r3, #12
 80038a4:	6033      	str	r3, [r6, #0]
 80038a6:	4630      	mov	r0, r6
 80038a8:	f000 f998 	bl	8003bdc <__malloc_unlock>
 80038ac:	e794      	b.n	80037d8 <_malloc_r+0x20>
 80038ae:	6005      	str	r5, [r0, #0]
 80038b0:	e7d6      	b.n	8003860 <_malloc_r+0xa8>
 80038b2:	bf00      	nop
 80038b4:	2000066c 	.word	0x2000066c

080038b8 <_printf_common>:
 80038b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038bc:	4616      	mov	r6, r2
 80038be:	4698      	mov	r8, r3
 80038c0:	688a      	ldr	r2, [r1, #8]
 80038c2:	690b      	ldr	r3, [r1, #16]
 80038c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80038c8:	4293      	cmp	r3, r2
 80038ca:	bfb8      	it	lt
 80038cc:	4613      	movlt	r3, r2
 80038ce:	6033      	str	r3, [r6, #0]
 80038d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80038d4:	4607      	mov	r7, r0
 80038d6:	460c      	mov	r4, r1
 80038d8:	b10a      	cbz	r2, 80038de <_printf_common+0x26>
 80038da:	3301      	adds	r3, #1
 80038dc:	6033      	str	r3, [r6, #0]
 80038de:	6823      	ldr	r3, [r4, #0]
 80038e0:	0699      	lsls	r1, r3, #26
 80038e2:	bf42      	ittt	mi
 80038e4:	6833      	ldrmi	r3, [r6, #0]
 80038e6:	3302      	addmi	r3, #2
 80038e8:	6033      	strmi	r3, [r6, #0]
 80038ea:	6825      	ldr	r5, [r4, #0]
 80038ec:	f015 0506 	ands.w	r5, r5, #6
 80038f0:	d106      	bne.n	8003900 <_printf_common+0x48>
 80038f2:	f104 0a19 	add.w	sl, r4, #25
 80038f6:	68e3      	ldr	r3, [r4, #12]
 80038f8:	6832      	ldr	r2, [r6, #0]
 80038fa:	1a9b      	subs	r3, r3, r2
 80038fc:	42ab      	cmp	r3, r5
 80038fe:	dc26      	bgt.n	800394e <_printf_common+0x96>
 8003900:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003904:	6822      	ldr	r2, [r4, #0]
 8003906:	3b00      	subs	r3, #0
 8003908:	bf18      	it	ne
 800390a:	2301      	movne	r3, #1
 800390c:	0692      	lsls	r2, r2, #26
 800390e:	d42b      	bmi.n	8003968 <_printf_common+0xb0>
 8003910:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003914:	4641      	mov	r1, r8
 8003916:	4638      	mov	r0, r7
 8003918:	47c8      	blx	r9
 800391a:	3001      	adds	r0, #1
 800391c:	d01e      	beq.n	800395c <_printf_common+0xa4>
 800391e:	6823      	ldr	r3, [r4, #0]
 8003920:	6922      	ldr	r2, [r4, #16]
 8003922:	f003 0306 	and.w	r3, r3, #6
 8003926:	2b04      	cmp	r3, #4
 8003928:	bf02      	ittt	eq
 800392a:	68e5      	ldreq	r5, [r4, #12]
 800392c:	6833      	ldreq	r3, [r6, #0]
 800392e:	1aed      	subeq	r5, r5, r3
 8003930:	68a3      	ldr	r3, [r4, #8]
 8003932:	bf0c      	ite	eq
 8003934:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003938:	2500      	movne	r5, #0
 800393a:	4293      	cmp	r3, r2
 800393c:	bfc4      	itt	gt
 800393e:	1a9b      	subgt	r3, r3, r2
 8003940:	18ed      	addgt	r5, r5, r3
 8003942:	2600      	movs	r6, #0
 8003944:	341a      	adds	r4, #26
 8003946:	42b5      	cmp	r5, r6
 8003948:	d11a      	bne.n	8003980 <_printf_common+0xc8>
 800394a:	2000      	movs	r0, #0
 800394c:	e008      	b.n	8003960 <_printf_common+0xa8>
 800394e:	2301      	movs	r3, #1
 8003950:	4652      	mov	r2, sl
 8003952:	4641      	mov	r1, r8
 8003954:	4638      	mov	r0, r7
 8003956:	47c8      	blx	r9
 8003958:	3001      	adds	r0, #1
 800395a:	d103      	bne.n	8003964 <_printf_common+0xac>
 800395c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003964:	3501      	adds	r5, #1
 8003966:	e7c6      	b.n	80038f6 <_printf_common+0x3e>
 8003968:	18e1      	adds	r1, r4, r3
 800396a:	1c5a      	adds	r2, r3, #1
 800396c:	2030      	movs	r0, #48	@ 0x30
 800396e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003972:	4422      	add	r2, r4
 8003974:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003978:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800397c:	3302      	adds	r3, #2
 800397e:	e7c7      	b.n	8003910 <_printf_common+0x58>
 8003980:	2301      	movs	r3, #1
 8003982:	4622      	mov	r2, r4
 8003984:	4641      	mov	r1, r8
 8003986:	4638      	mov	r0, r7
 8003988:	47c8      	blx	r9
 800398a:	3001      	adds	r0, #1
 800398c:	d0e6      	beq.n	800395c <_printf_common+0xa4>
 800398e:	3601      	adds	r6, #1
 8003990:	e7d9      	b.n	8003946 <_printf_common+0x8e>
	...

08003994 <_printf_i>:
 8003994:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003998:	7e0f      	ldrb	r7, [r1, #24]
 800399a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800399c:	2f78      	cmp	r7, #120	@ 0x78
 800399e:	4691      	mov	r9, r2
 80039a0:	4680      	mov	r8, r0
 80039a2:	460c      	mov	r4, r1
 80039a4:	469a      	mov	sl, r3
 80039a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80039aa:	d807      	bhi.n	80039bc <_printf_i+0x28>
 80039ac:	2f62      	cmp	r7, #98	@ 0x62
 80039ae:	d80a      	bhi.n	80039c6 <_printf_i+0x32>
 80039b0:	2f00      	cmp	r7, #0
 80039b2:	f000 80d1 	beq.w	8003b58 <_printf_i+0x1c4>
 80039b6:	2f58      	cmp	r7, #88	@ 0x58
 80039b8:	f000 80b8 	beq.w	8003b2c <_printf_i+0x198>
 80039bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80039c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80039c4:	e03a      	b.n	8003a3c <_printf_i+0xa8>
 80039c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80039ca:	2b15      	cmp	r3, #21
 80039cc:	d8f6      	bhi.n	80039bc <_printf_i+0x28>
 80039ce:	a101      	add	r1, pc, #4	@ (adr r1, 80039d4 <_printf_i+0x40>)
 80039d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80039d4:	08003a2d 	.word	0x08003a2d
 80039d8:	08003a41 	.word	0x08003a41
 80039dc:	080039bd 	.word	0x080039bd
 80039e0:	080039bd 	.word	0x080039bd
 80039e4:	080039bd 	.word	0x080039bd
 80039e8:	080039bd 	.word	0x080039bd
 80039ec:	08003a41 	.word	0x08003a41
 80039f0:	080039bd 	.word	0x080039bd
 80039f4:	080039bd 	.word	0x080039bd
 80039f8:	080039bd 	.word	0x080039bd
 80039fc:	080039bd 	.word	0x080039bd
 8003a00:	08003b3f 	.word	0x08003b3f
 8003a04:	08003a6b 	.word	0x08003a6b
 8003a08:	08003af9 	.word	0x08003af9
 8003a0c:	080039bd 	.word	0x080039bd
 8003a10:	080039bd 	.word	0x080039bd
 8003a14:	08003b61 	.word	0x08003b61
 8003a18:	080039bd 	.word	0x080039bd
 8003a1c:	08003a6b 	.word	0x08003a6b
 8003a20:	080039bd 	.word	0x080039bd
 8003a24:	080039bd 	.word	0x080039bd
 8003a28:	08003b01 	.word	0x08003b01
 8003a2c:	6833      	ldr	r3, [r6, #0]
 8003a2e:	1d1a      	adds	r2, r3, #4
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	6032      	str	r2, [r6, #0]
 8003a34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003a38:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e09c      	b.n	8003b7a <_printf_i+0x1e6>
 8003a40:	6833      	ldr	r3, [r6, #0]
 8003a42:	6820      	ldr	r0, [r4, #0]
 8003a44:	1d19      	adds	r1, r3, #4
 8003a46:	6031      	str	r1, [r6, #0]
 8003a48:	0606      	lsls	r6, r0, #24
 8003a4a:	d501      	bpl.n	8003a50 <_printf_i+0xbc>
 8003a4c:	681d      	ldr	r5, [r3, #0]
 8003a4e:	e003      	b.n	8003a58 <_printf_i+0xc4>
 8003a50:	0645      	lsls	r5, r0, #25
 8003a52:	d5fb      	bpl.n	8003a4c <_printf_i+0xb8>
 8003a54:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003a58:	2d00      	cmp	r5, #0
 8003a5a:	da03      	bge.n	8003a64 <_printf_i+0xd0>
 8003a5c:	232d      	movs	r3, #45	@ 0x2d
 8003a5e:	426d      	negs	r5, r5
 8003a60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003a64:	4858      	ldr	r0, [pc, #352]	@ (8003bc8 <_printf_i+0x234>)
 8003a66:	230a      	movs	r3, #10
 8003a68:	e011      	b.n	8003a8e <_printf_i+0xfa>
 8003a6a:	6821      	ldr	r1, [r4, #0]
 8003a6c:	6833      	ldr	r3, [r6, #0]
 8003a6e:	0608      	lsls	r0, r1, #24
 8003a70:	f853 5b04 	ldr.w	r5, [r3], #4
 8003a74:	d402      	bmi.n	8003a7c <_printf_i+0xe8>
 8003a76:	0649      	lsls	r1, r1, #25
 8003a78:	bf48      	it	mi
 8003a7a:	b2ad      	uxthmi	r5, r5
 8003a7c:	2f6f      	cmp	r7, #111	@ 0x6f
 8003a7e:	4852      	ldr	r0, [pc, #328]	@ (8003bc8 <_printf_i+0x234>)
 8003a80:	6033      	str	r3, [r6, #0]
 8003a82:	bf14      	ite	ne
 8003a84:	230a      	movne	r3, #10
 8003a86:	2308      	moveq	r3, #8
 8003a88:	2100      	movs	r1, #0
 8003a8a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003a8e:	6866      	ldr	r6, [r4, #4]
 8003a90:	60a6      	str	r6, [r4, #8]
 8003a92:	2e00      	cmp	r6, #0
 8003a94:	db05      	blt.n	8003aa2 <_printf_i+0x10e>
 8003a96:	6821      	ldr	r1, [r4, #0]
 8003a98:	432e      	orrs	r6, r5
 8003a9a:	f021 0104 	bic.w	r1, r1, #4
 8003a9e:	6021      	str	r1, [r4, #0]
 8003aa0:	d04b      	beq.n	8003b3a <_printf_i+0x1a6>
 8003aa2:	4616      	mov	r6, r2
 8003aa4:	fbb5 f1f3 	udiv	r1, r5, r3
 8003aa8:	fb03 5711 	mls	r7, r3, r1, r5
 8003aac:	5dc7      	ldrb	r7, [r0, r7]
 8003aae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003ab2:	462f      	mov	r7, r5
 8003ab4:	42bb      	cmp	r3, r7
 8003ab6:	460d      	mov	r5, r1
 8003ab8:	d9f4      	bls.n	8003aa4 <_printf_i+0x110>
 8003aba:	2b08      	cmp	r3, #8
 8003abc:	d10b      	bne.n	8003ad6 <_printf_i+0x142>
 8003abe:	6823      	ldr	r3, [r4, #0]
 8003ac0:	07df      	lsls	r7, r3, #31
 8003ac2:	d508      	bpl.n	8003ad6 <_printf_i+0x142>
 8003ac4:	6923      	ldr	r3, [r4, #16]
 8003ac6:	6861      	ldr	r1, [r4, #4]
 8003ac8:	4299      	cmp	r1, r3
 8003aca:	bfde      	ittt	le
 8003acc:	2330      	movle	r3, #48	@ 0x30
 8003ace:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003ad2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003ad6:	1b92      	subs	r2, r2, r6
 8003ad8:	6122      	str	r2, [r4, #16]
 8003ada:	f8cd a000 	str.w	sl, [sp]
 8003ade:	464b      	mov	r3, r9
 8003ae0:	aa03      	add	r2, sp, #12
 8003ae2:	4621      	mov	r1, r4
 8003ae4:	4640      	mov	r0, r8
 8003ae6:	f7ff fee7 	bl	80038b8 <_printf_common>
 8003aea:	3001      	adds	r0, #1
 8003aec:	d14a      	bne.n	8003b84 <_printf_i+0x1f0>
 8003aee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003af2:	b004      	add	sp, #16
 8003af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003af8:	6823      	ldr	r3, [r4, #0]
 8003afa:	f043 0320 	orr.w	r3, r3, #32
 8003afe:	6023      	str	r3, [r4, #0]
 8003b00:	4832      	ldr	r0, [pc, #200]	@ (8003bcc <_printf_i+0x238>)
 8003b02:	2778      	movs	r7, #120	@ 0x78
 8003b04:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003b08:	6823      	ldr	r3, [r4, #0]
 8003b0a:	6831      	ldr	r1, [r6, #0]
 8003b0c:	061f      	lsls	r7, r3, #24
 8003b0e:	f851 5b04 	ldr.w	r5, [r1], #4
 8003b12:	d402      	bmi.n	8003b1a <_printf_i+0x186>
 8003b14:	065f      	lsls	r7, r3, #25
 8003b16:	bf48      	it	mi
 8003b18:	b2ad      	uxthmi	r5, r5
 8003b1a:	6031      	str	r1, [r6, #0]
 8003b1c:	07d9      	lsls	r1, r3, #31
 8003b1e:	bf44      	itt	mi
 8003b20:	f043 0320 	orrmi.w	r3, r3, #32
 8003b24:	6023      	strmi	r3, [r4, #0]
 8003b26:	b11d      	cbz	r5, 8003b30 <_printf_i+0x19c>
 8003b28:	2310      	movs	r3, #16
 8003b2a:	e7ad      	b.n	8003a88 <_printf_i+0xf4>
 8003b2c:	4826      	ldr	r0, [pc, #152]	@ (8003bc8 <_printf_i+0x234>)
 8003b2e:	e7e9      	b.n	8003b04 <_printf_i+0x170>
 8003b30:	6823      	ldr	r3, [r4, #0]
 8003b32:	f023 0320 	bic.w	r3, r3, #32
 8003b36:	6023      	str	r3, [r4, #0]
 8003b38:	e7f6      	b.n	8003b28 <_printf_i+0x194>
 8003b3a:	4616      	mov	r6, r2
 8003b3c:	e7bd      	b.n	8003aba <_printf_i+0x126>
 8003b3e:	6833      	ldr	r3, [r6, #0]
 8003b40:	6825      	ldr	r5, [r4, #0]
 8003b42:	6961      	ldr	r1, [r4, #20]
 8003b44:	1d18      	adds	r0, r3, #4
 8003b46:	6030      	str	r0, [r6, #0]
 8003b48:	062e      	lsls	r6, r5, #24
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	d501      	bpl.n	8003b52 <_printf_i+0x1be>
 8003b4e:	6019      	str	r1, [r3, #0]
 8003b50:	e002      	b.n	8003b58 <_printf_i+0x1c4>
 8003b52:	0668      	lsls	r0, r5, #25
 8003b54:	d5fb      	bpl.n	8003b4e <_printf_i+0x1ba>
 8003b56:	8019      	strh	r1, [r3, #0]
 8003b58:	2300      	movs	r3, #0
 8003b5a:	6123      	str	r3, [r4, #16]
 8003b5c:	4616      	mov	r6, r2
 8003b5e:	e7bc      	b.n	8003ada <_printf_i+0x146>
 8003b60:	6833      	ldr	r3, [r6, #0]
 8003b62:	1d1a      	adds	r2, r3, #4
 8003b64:	6032      	str	r2, [r6, #0]
 8003b66:	681e      	ldr	r6, [r3, #0]
 8003b68:	6862      	ldr	r2, [r4, #4]
 8003b6a:	2100      	movs	r1, #0
 8003b6c:	4630      	mov	r0, r6
 8003b6e:	f7fc fb4f 	bl	8000210 <memchr>
 8003b72:	b108      	cbz	r0, 8003b78 <_printf_i+0x1e4>
 8003b74:	1b80      	subs	r0, r0, r6
 8003b76:	6060      	str	r0, [r4, #4]
 8003b78:	6863      	ldr	r3, [r4, #4]
 8003b7a:	6123      	str	r3, [r4, #16]
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003b82:	e7aa      	b.n	8003ada <_printf_i+0x146>
 8003b84:	6923      	ldr	r3, [r4, #16]
 8003b86:	4632      	mov	r2, r6
 8003b88:	4649      	mov	r1, r9
 8003b8a:	4640      	mov	r0, r8
 8003b8c:	47d0      	blx	sl
 8003b8e:	3001      	adds	r0, #1
 8003b90:	d0ad      	beq.n	8003aee <_printf_i+0x15a>
 8003b92:	6823      	ldr	r3, [r4, #0]
 8003b94:	079b      	lsls	r3, r3, #30
 8003b96:	d413      	bmi.n	8003bc0 <_printf_i+0x22c>
 8003b98:	68e0      	ldr	r0, [r4, #12]
 8003b9a:	9b03      	ldr	r3, [sp, #12]
 8003b9c:	4298      	cmp	r0, r3
 8003b9e:	bfb8      	it	lt
 8003ba0:	4618      	movlt	r0, r3
 8003ba2:	e7a6      	b.n	8003af2 <_printf_i+0x15e>
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	4632      	mov	r2, r6
 8003ba8:	4649      	mov	r1, r9
 8003baa:	4640      	mov	r0, r8
 8003bac:	47d0      	blx	sl
 8003bae:	3001      	adds	r0, #1
 8003bb0:	d09d      	beq.n	8003aee <_printf_i+0x15a>
 8003bb2:	3501      	adds	r5, #1
 8003bb4:	68e3      	ldr	r3, [r4, #12]
 8003bb6:	9903      	ldr	r1, [sp, #12]
 8003bb8:	1a5b      	subs	r3, r3, r1
 8003bba:	42ab      	cmp	r3, r5
 8003bbc:	dcf2      	bgt.n	8003ba4 <_printf_i+0x210>
 8003bbe:	e7eb      	b.n	8003b98 <_printf_i+0x204>
 8003bc0:	2500      	movs	r5, #0
 8003bc2:	f104 0619 	add.w	r6, r4, #25
 8003bc6:	e7f5      	b.n	8003bb4 <_printf_i+0x220>
 8003bc8:	08004b19 	.word	0x08004b19
 8003bcc:	08004b2a 	.word	0x08004b2a

08003bd0 <__malloc_lock>:
 8003bd0:	4801      	ldr	r0, [pc, #4]	@ (8003bd8 <__malloc_lock+0x8>)
 8003bd2:	f7ff bc75 	b.w	80034c0 <__retarget_lock_acquire_recursive>
 8003bd6:	bf00      	nop
 8003bd8:	20000664 	.word	0x20000664

08003bdc <__malloc_unlock>:
 8003bdc:	4801      	ldr	r0, [pc, #4]	@ (8003be4 <__malloc_unlock+0x8>)
 8003bde:	f7ff bc70 	b.w	80034c2 <__retarget_lock_release_recursive>
 8003be2:	bf00      	nop
 8003be4:	20000664 	.word	0x20000664

08003be8 <_realloc_r>:
 8003be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bec:	4607      	mov	r7, r0
 8003bee:	4614      	mov	r4, r2
 8003bf0:	460d      	mov	r5, r1
 8003bf2:	b921      	cbnz	r1, 8003bfe <_realloc_r+0x16>
 8003bf4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003bf8:	4611      	mov	r1, r2
 8003bfa:	f7ff bddd 	b.w	80037b8 <_malloc_r>
 8003bfe:	b92a      	cbnz	r2, 8003c0c <_realloc_r+0x24>
 8003c00:	f000 f858 	bl	8003cb4 <_free_r>
 8003c04:	4625      	mov	r5, r4
 8003c06:	4628      	mov	r0, r5
 8003c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c0c:	f000 f89c 	bl	8003d48 <_malloc_usable_size_r>
 8003c10:	4284      	cmp	r4, r0
 8003c12:	4606      	mov	r6, r0
 8003c14:	d802      	bhi.n	8003c1c <_realloc_r+0x34>
 8003c16:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003c1a:	d8f4      	bhi.n	8003c06 <_realloc_r+0x1e>
 8003c1c:	4621      	mov	r1, r4
 8003c1e:	4638      	mov	r0, r7
 8003c20:	f7ff fdca 	bl	80037b8 <_malloc_r>
 8003c24:	4680      	mov	r8, r0
 8003c26:	b908      	cbnz	r0, 8003c2c <_realloc_r+0x44>
 8003c28:	4645      	mov	r5, r8
 8003c2a:	e7ec      	b.n	8003c06 <_realloc_r+0x1e>
 8003c2c:	42b4      	cmp	r4, r6
 8003c2e:	4622      	mov	r2, r4
 8003c30:	4629      	mov	r1, r5
 8003c32:	bf28      	it	cs
 8003c34:	4632      	movcs	r2, r6
 8003c36:	f000 f82f 	bl	8003c98 <memcpy>
 8003c3a:	4629      	mov	r1, r5
 8003c3c:	4638      	mov	r0, r7
 8003c3e:	f000 f839 	bl	8003cb4 <_free_r>
 8003c42:	e7f1      	b.n	8003c28 <_realloc_r+0x40>

08003c44 <memmove>:
 8003c44:	4288      	cmp	r0, r1
 8003c46:	b510      	push	{r4, lr}
 8003c48:	eb01 0402 	add.w	r4, r1, r2
 8003c4c:	d902      	bls.n	8003c54 <memmove+0x10>
 8003c4e:	4284      	cmp	r4, r0
 8003c50:	4623      	mov	r3, r4
 8003c52:	d807      	bhi.n	8003c64 <memmove+0x20>
 8003c54:	1e43      	subs	r3, r0, #1
 8003c56:	42a1      	cmp	r1, r4
 8003c58:	d008      	beq.n	8003c6c <memmove+0x28>
 8003c5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003c62:	e7f8      	b.n	8003c56 <memmove+0x12>
 8003c64:	4402      	add	r2, r0
 8003c66:	4601      	mov	r1, r0
 8003c68:	428a      	cmp	r2, r1
 8003c6a:	d100      	bne.n	8003c6e <memmove+0x2a>
 8003c6c:	bd10      	pop	{r4, pc}
 8003c6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003c72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003c76:	e7f7      	b.n	8003c68 <memmove+0x24>

08003c78 <_sbrk_r>:
 8003c78:	b538      	push	{r3, r4, r5, lr}
 8003c7a:	4d06      	ldr	r5, [pc, #24]	@ (8003c94 <_sbrk_r+0x1c>)
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	4604      	mov	r4, r0
 8003c80:	4608      	mov	r0, r1
 8003c82:	602b      	str	r3, [r5, #0]
 8003c84:	f7fd fa0e 	bl	80010a4 <_sbrk>
 8003c88:	1c43      	adds	r3, r0, #1
 8003c8a:	d102      	bne.n	8003c92 <_sbrk_r+0x1a>
 8003c8c:	682b      	ldr	r3, [r5, #0]
 8003c8e:	b103      	cbz	r3, 8003c92 <_sbrk_r+0x1a>
 8003c90:	6023      	str	r3, [r4, #0]
 8003c92:	bd38      	pop	{r3, r4, r5, pc}
 8003c94:	20000670 	.word	0x20000670

08003c98 <memcpy>:
 8003c98:	440a      	add	r2, r1
 8003c9a:	4291      	cmp	r1, r2
 8003c9c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8003ca0:	d100      	bne.n	8003ca4 <memcpy+0xc>
 8003ca2:	4770      	bx	lr
 8003ca4:	b510      	push	{r4, lr}
 8003ca6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003caa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003cae:	4291      	cmp	r1, r2
 8003cb0:	d1f9      	bne.n	8003ca6 <memcpy+0xe>
 8003cb2:	bd10      	pop	{r4, pc}

08003cb4 <_free_r>:
 8003cb4:	b538      	push	{r3, r4, r5, lr}
 8003cb6:	4605      	mov	r5, r0
 8003cb8:	2900      	cmp	r1, #0
 8003cba:	d041      	beq.n	8003d40 <_free_r+0x8c>
 8003cbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003cc0:	1f0c      	subs	r4, r1, #4
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	bfb8      	it	lt
 8003cc6:	18e4      	addlt	r4, r4, r3
 8003cc8:	f7ff ff82 	bl	8003bd0 <__malloc_lock>
 8003ccc:	4a1d      	ldr	r2, [pc, #116]	@ (8003d44 <_free_r+0x90>)
 8003cce:	6813      	ldr	r3, [r2, #0]
 8003cd0:	b933      	cbnz	r3, 8003ce0 <_free_r+0x2c>
 8003cd2:	6063      	str	r3, [r4, #4]
 8003cd4:	6014      	str	r4, [r2, #0]
 8003cd6:	4628      	mov	r0, r5
 8003cd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003cdc:	f7ff bf7e 	b.w	8003bdc <__malloc_unlock>
 8003ce0:	42a3      	cmp	r3, r4
 8003ce2:	d908      	bls.n	8003cf6 <_free_r+0x42>
 8003ce4:	6820      	ldr	r0, [r4, #0]
 8003ce6:	1821      	adds	r1, r4, r0
 8003ce8:	428b      	cmp	r3, r1
 8003cea:	bf01      	itttt	eq
 8003cec:	6819      	ldreq	r1, [r3, #0]
 8003cee:	685b      	ldreq	r3, [r3, #4]
 8003cf0:	1809      	addeq	r1, r1, r0
 8003cf2:	6021      	streq	r1, [r4, #0]
 8003cf4:	e7ed      	b.n	8003cd2 <_free_r+0x1e>
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	b10b      	cbz	r3, 8003d00 <_free_r+0x4c>
 8003cfc:	42a3      	cmp	r3, r4
 8003cfe:	d9fa      	bls.n	8003cf6 <_free_r+0x42>
 8003d00:	6811      	ldr	r1, [r2, #0]
 8003d02:	1850      	adds	r0, r2, r1
 8003d04:	42a0      	cmp	r0, r4
 8003d06:	d10b      	bne.n	8003d20 <_free_r+0x6c>
 8003d08:	6820      	ldr	r0, [r4, #0]
 8003d0a:	4401      	add	r1, r0
 8003d0c:	1850      	adds	r0, r2, r1
 8003d0e:	4283      	cmp	r3, r0
 8003d10:	6011      	str	r1, [r2, #0]
 8003d12:	d1e0      	bne.n	8003cd6 <_free_r+0x22>
 8003d14:	6818      	ldr	r0, [r3, #0]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	6053      	str	r3, [r2, #4]
 8003d1a:	4408      	add	r0, r1
 8003d1c:	6010      	str	r0, [r2, #0]
 8003d1e:	e7da      	b.n	8003cd6 <_free_r+0x22>
 8003d20:	d902      	bls.n	8003d28 <_free_r+0x74>
 8003d22:	230c      	movs	r3, #12
 8003d24:	602b      	str	r3, [r5, #0]
 8003d26:	e7d6      	b.n	8003cd6 <_free_r+0x22>
 8003d28:	6820      	ldr	r0, [r4, #0]
 8003d2a:	1821      	adds	r1, r4, r0
 8003d2c:	428b      	cmp	r3, r1
 8003d2e:	bf04      	itt	eq
 8003d30:	6819      	ldreq	r1, [r3, #0]
 8003d32:	685b      	ldreq	r3, [r3, #4]
 8003d34:	6063      	str	r3, [r4, #4]
 8003d36:	bf04      	itt	eq
 8003d38:	1809      	addeq	r1, r1, r0
 8003d3a:	6021      	streq	r1, [r4, #0]
 8003d3c:	6054      	str	r4, [r2, #4]
 8003d3e:	e7ca      	b.n	8003cd6 <_free_r+0x22>
 8003d40:	bd38      	pop	{r3, r4, r5, pc}
 8003d42:	bf00      	nop
 8003d44:	2000066c 	.word	0x2000066c

08003d48 <_malloc_usable_size_r>:
 8003d48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003d4c:	1f18      	subs	r0, r3, #4
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	bfbc      	itt	lt
 8003d52:	580b      	ldrlt	r3, [r1, r0]
 8003d54:	18c0      	addlt	r0, r0, r3
 8003d56:	4770      	bx	lr

08003d58 <_init>:
 8003d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d5a:	bf00      	nop
 8003d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d5e:	bc08      	pop	{r3}
 8003d60:	469e      	mov	lr, r3
 8003d62:	4770      	bx	lr

08003d64 <_fini>:
 8003d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d66:	bf00      	nop
 8003d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d6a:	bc08      	pop	{r3}
 8003d6c:	469e      	mov	lr, r3
 8003d6e:	4770      	bx	lr
