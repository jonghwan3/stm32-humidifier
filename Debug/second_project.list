
second_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074cc  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000111c  080076a0  080076a0  000086a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080087bc  080087bc  0000a1dc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080087bc  080087bc  000097bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080087c4  080087c4  0000a1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080087c4  080087c4  000097c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080087c8  080087c8  000097c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  080087cc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000614  200001dc  080089a8  0000a1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007f0  080089a8  0000a7f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cb15  00000000  00000000  0000a20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002030  00000000  00000000  00016d21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b70  00000000  00000000  00018d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008e2  00000000  00000000  000198c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022ac7  00000000  00000000  0001a1aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f21b  00000000  00000000  0003cc71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd159  00000000  00000000  0004be8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00118fe5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004038  00000000  00000000  00119028  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0011d060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007684 	.word	0x08007684

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e0 	.word	0x200001e0
 800020c:	08007684 	.word	0x08007684

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bfc:	f000 b988 	b.w	8000f10 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	468e      	mov	lr, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	4688      	mov	r8, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d962      	bls.n	8000cf4 <__udivmoddi4+0xdc>
 8000c2e:	fab2 f682 	clz	r6, r2
 8000c32:	b14e      	cbz	r6, 8000c48 <__udivmoddi4+0x30>
 8000c34:	f1c6 0320 	rsb	r3, r6, #32
 8000c38:	fa01 f806 	lsl.w	r8, r1, r6
 8000c3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c40:	40b7      	lsls	r7, r6
 8000c42:	ea43 0808 	orr.w	r8, r3, r8
 8000c46:	40b4      	lsls	r4, r6
 8000c48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c4c:	fa1f fc87 	uxth.w	ip, r7
 8000c50:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c54:	0c23      	lsrs	r3, r4, #16
 8000c56:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c5a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c6c:	f080 80ea 	bcs.w	8000e44 <__udivmoddi4+0x22c>
 8000c70:	429a      	cmp	r2, r3
 8000c72:	f240 80e7 	bls.w	8000e44 <__udivmoddi4+0x22c>
 8000c76:	3902      	subs	r1, #2
 8000c78:	443b      	add	r3, r7
 8000c7a:	1a9a      	subs	r2, r3, r2
 8000c7c:	b2a3      	uxth	r3, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c8a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8e:	459c      	cmp	ip, r3
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0x8e>
 8000c92:	18fb      	adds	r3, r7, r3
 8000c94:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000c98:	f080 80d6 	bcs.w	8000e48 <__udivmoddi4+0x230>
 8000c9c:	459c      	cmp	ip, r3
 8000c9e:	f240 80d3 	bls.w	8000e48 <__udivmoddi4+0x230>
 8000ca2:	443b      	add	r3, r7
 8000ca4:	3802      	subs	r0, #2
 8000ca6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000caa:	eba3 030c 	sub.w	r3, r3, ip
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11d      	cbz	r5, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40f3      	lsrs	r3, r6
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d905      	bls.n	8000cce <__udivmoddi4+0xb6>
 8000cc2:	b10d      	cbz	r5, 8000cc8 <__udivmoddi4+0xb0>
 8000cc4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4608      	mov	r0, r1
 8000ccc:	e7f5      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cce:	fab3 f183 	clz	r1, r3
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	d146      	bne.n	8000d64 <__udivmoddi4+0x14c>
 8000cd6:	4573      	cmp	r3, lr
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xc8>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 8105 	bhi.w	8000eea <__udivmoddi4+0x2d2>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	4690      	mov	r8, r2
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	d0e5      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cee:	e9c5 4800 	strd	r4, r8, [r5]
 8000cf2:	e7e2      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	f000 8090 	beq.w	8000e1a <__udivmoddi4+0x202>
 8000cfa:	fab2 f682 	clz	r6, r2
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	f040 80a4 	bne.w	8000e4c <__udivmoddi4+0x234>
 8000d04:	1a8a      	subs	r2, r1, r2
 8000d06:	0c03      	lsrs	r3, r0, #16
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	b280      	uxth	r0, r0
 8000d0e:	b2bc      	uxth	r4, r7
 8000d10:	2101      	movs	r1, #1
 8000d12:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d16:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d1e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x11e>
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x11c>
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	f200 80e0 	bhi.w	8000ef4 <__udivmoddi4+0x2dc>
 8000d34:	46c4      	mov	ip, r8
 8000d36:	1a9b      	subs	r3, r3, r2
 8000d38:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d3c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d40:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d44:	fb02 f404 	mul.w	r4, r2, r4
 8000d48:	429c      	cmp	r4, r3
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x144>
 8000d4c:	18fb      	adds	r3, r7, r3
 8000d4e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x142>
 8000d54:	429c      	cmp	r4, r3
 8000d56:	f200 80ca 	bhi.w	8000eee <__udivmoddi4+0x2d6>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	1b1b      	subs	r3, r3, r4
 8000d5e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d62:	e7a5      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d64:	f1c1 0620 	rsb	r6, r1, #32
 8000d68:	408b      	lsls	r3, r1
 8000d6a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d6e:	431f      	orrs	r7, r3
 8000d70:	fa0e f401 	lsl.w	r4, lr, r1
 8000d74:	fa20 f306 	lsr.w	r3, r0, r6
 8000d78:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d7c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d80:	4323      	orrs	r3, r4
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	fa1f fc87 	uxth.w	ip, r7
 8000d8a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d8e:	0c1c      	lsrs	r4, r3, #16
 8000d90:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d94:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d98:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000da2:	d909      	bls.n	8000db8 <__udivmoddi4+0x1a0>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000daa:	f080 809c 	bcs.w	8000ee6 <__udivmoddi4+0x2ce>
 8000dae:	45a6      	cmp	lr, r4
 8000db0:	f240 8099 	bls.w	8000ee6 <__udivmoddi4+0x2ce>
 8000db4:	3802      	subs	r0, #2
 8000db6:	443c      	add	r4, r7
 8000db8:	eba4 040e 	sub.w	r4, r4, lr
 8000dbc:	fa1f fe83 	uxth.w	lr, r3
 8000dc0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dcc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd0:	45a4      	cmp	ip, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x1ce>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000dda:	f080 8082 	bcs.w	8000ee2 <__udivmoddi4+0x2ca>
 8000dde:	45a4      	cmp	ip, r4
 8000de0:	d97f      	bls.n	8000ee2 <__udivmoddi4+0x2ca>
 8000de2:	3b02      	subs	r3, #2
 8000de4:	443c      	add	r4, r7
 8000de6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dea:	eba4 040c 	sub.w	r4, r4, ip
 8000dee:	fba0 ec02 	umull	lr, ip, r0, r2
 8000df2:	4564      	cmp	r4, ip
 8000df4:	4673      	mov	r3, lr
 8000df6:	46e1      	mov	r9, ip
 8000df8:	d362      	bcc.n	8000ec0 <__udivmoddi4+0x2a8>
 8000dfa:	d05f      	beq.n	8000ebc <__udivmoddi4+0x2a4>
 8000dfc:	b15d      	cbz	r5, 8000e16 <__udivmoddi4+0x1fe>
 8000dfe:	ebb8 0203 	subs.w	r2, r8, r3
 8000e02:	eb64 0409 	sbc.w	r4, r4, r9
 8000e06:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e0e:	431e      	orrs	r6, r3
 8000e10:	40cc      	lsrs	r4, r1
 8000e12:	e9c5 6400 	strd	r6, r4, [r5]
 8000e16:	2100      	movs	r1, #0
 8000e18:	e74f      	b.n	8000cba <__udivmoddi4+0xa2>
 8000e1a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e1e:	0c01      	lsrs	r1, r0, #16
 8000e20:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e24:	b280      	uxth	r0, r0
 8000e26:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	4638      	mov	r0, r7
 8000e2e:	463c      	mov	r4, r7
 8000e30:	46b8      	mov	r8, r7
 8000e32:	46be      	mov	lr, r7
 8000e34:	2620      	movs	r6, #32
 8000e36:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e3a:	eba2 0208 	sub.w	r2, r2, r8
 8000e3e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e42:	e766      	b.n	8000d12 <__udivmoddi4+0xfa>
 8000e44:	4601      	mov	r1, r0
 8000e46:	e718      	b.n	8000c7a <__udivmoddi4+0x62>
 8000e48:	4610      	mov	r0, r2
 8000e4a:	e72c      	b.n	8000ca6 <__udivmoddi4+0x8e>
 8000e4c:	f1c6 0220 	rsb	r2, r6, #32
 8000e50:	fa2e f302 	lsr.w	r3, lr, r2
 8000e54:	40b7      	lsls	r7, r6
 8000e56:	40b1      	lsls	r1, r6
 8000e58:	fa20 f202 	lsr.w	r2, r0, r2
 8000e5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e60:	430a      	orrs	r2, r1
 8000e62:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e66:	b2bc      	uxth	r4, r7
 8000e68:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e6c:	0c11      	lsrs	r1, r2, #16
 8000e6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e72:	fb08 f904 	mul.w	r9, r8, r4
 8000e76:	40b0      	lsls	r0, r6
 8000e78:	4589      	cmp	r9, r1
 8000e7a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e7e:	b280      	uxth	r0, r0
 8000e80:	d93e      	bls.n	8000f00 <__udivmoddi4+0x2e8>
 8000e82:	1879      	adds	r1, r7, r1
 8000e84:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000e88:	d201      	bcs.n	8000e8e <__udivmoddi4+0x276>
 8000e8a:	4589      	cmp	r9, r1
 8000e8c:	d81f      	bhi.n	8000ece <__udivmoddi4+0x2b6>
 8000e8e:	eba1 0109 	sub.w	r1, r1, r9
 8000e92:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e96:	fb09 f804 	mul.w	r8, r9, r4
 8000e9a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e9e:	b292      	uxth	r2, r2
 8000ea0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ea4:	4542      	cmp	r2, r8
 8000ea6:	d229      	bcs.n	8000efc <__udivmoddi4+0x2e4>
 8000ea8:	18ba      	adds	r2, r7, r2
 8000eaa:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000eae:	d2c4      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d2c2      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb4:	f1a9 0102 	sub.w	r1, r9, #2
 8000eb8:	443a      	add	r2, r7
 8000eba:	e7be      	b.n	8000e3a <__udivmoddi4+0x222>
 8000ebc:	45f0      	cmp	r8, lr
 8000ebe:	d29d      	bcs.n	8000dfc <__udivmoddi4+0x1e4>
 8000ec0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ec4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ec8:	3801      	subs	r0, #1
 8000eca:	46e1      	mov	r9, ip
 8000ecc:	e796      	b.n	8000dfc <__udivmoddi4+0x1e4>
 8000ece:	eba7 0909 	sub.w	r9, r7, r9
 8000ed2:	4449      	add	r1, r9
 8000ed4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ed8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000edc:	fb09 f804 	mul.w	r8, r9, r4
 8000ee0:	e7db      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ee2:	4673      	mov	r3, lr
 8000ee4:	e77f      	b.n	8000de6 <__udivmoddi4+0x1ce>
 8000ee6:	4650      	mov	r0, sl
 8000ee8:	e766      	b.n	8000db8 <__udivmoddi4+0x1a0>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e6fd      	b.n	8000cea <__udivmoddi4+0xd2>
 8000eee:	443b      	add	r3, r7
 8000ef0:	3a02      	subs	r2, #2
 8000ef2:	e733      	b.n	8000d5c <__udivmoddi4+0x144>
 8000ef4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef8:	443b      	add	r3, r7
 8000efa:	e71c      	b.n	8000d36 <__udivmoddi4+0x11e>
 8000efc:	4649      	mov	r1, r9
 8000efe:	e79c      	b.n	8000e3a <__udivmoddi4+0x222>
 8000f00:	eba1 0109 	sub.w	r1, r1, r9
 8000f04:	46c4      	mov	ip, r8
 8000f06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f0a:	fb09 f804 	mul.w	r8, r9, r4
 8000f0e:	e7c4      	b.n	8000e9a <__udivmoddi4+0x282>

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <_write>:
I2C_HandleTypeDef hi2c1;

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
int _write(int file, char *p, int len){
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)p, len, 10);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	b29a      	uxth	r2, r3
 8000f24:	230a      	movs	r3, #10
 8000f26:	68b9      	ldr	r1, [r7, #8]
 8000f28:	4803      	ldr	r0, [pc, #12]	@ (8000f38 <_write+0x24>)
 8000f2a:	f003 f991 	bl	8004250 <HAL_UART_Transmit>
	return len;
 8000f2e:	687b      	ldr	r3, [r7, #4]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3710      	adds	r7, #16
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	2000024c 	.word	0x2000024c

08000f3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b094      	sub	sp, #80	@ 0x50
 8000f40:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f42:	f000 ff69 	bl	8001e18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f46:	f000 f8e3 	bl	8001110 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f4a:	f000 f999 	bl	8001280 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f4e:	f000 f96d 	bl	800122c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000f52:	f000 f93d 	bl	80011d0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
//  char msg[] = "Hello from STM32!\n";
  SSD1306_Init();
 8000f56:	f000 facb 	bl	80014f0 <SSD1306_Init>
//  SSD1306_Puts("Tem: 30°C", &Font_11x18, 1);
//  SSD1306_GotoXY(0, 18);
  int set_hum = 65;
 8000f5a:	2341      	movs	r3, #65	@ 0x41
 8000f5c:	647b      	str	r3, [r7, #68]	@ 0x44
  char msg[20] = {0};
 8000f5e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
 8000f68:	609a      	str	r2, [r3, #8]
 8000f6a:	60da      	str	r2, [r3, #12]
 8000f6c:	611a      	str	r2, [r3, #16]
  char buf[32];
  float temp, hum;

  uint32_t last_update = 0;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	643b      	str	r3, [r7, #64]	@ 0x40
  SSD1306_Puts("Set: 58%", &Font_11x18, 1);
 8000f72:	2201      	movs	r2, #1
 8000f74:	495f      	ldr	r1, [pc, #380]	@ (80010f4 <main+0x1b8>)
 8000f76:	4860      	ldr	r0, [pc, #384]	@ (80010f8 <main+0x1bc>)
 8000f78:	f000 fcb8 	bl	80018ec <SSD1306_Puts>
  SSD1306_GotoXY(0, 22);
 8000f7c:	2116      	movs	r1, #22
 8000f7e:	2000      	movs	r0, #0
 8000f80:	f000 fc20 	bl	80017c4 <SSD1306_GotoXY>
  SSD1306_Puts("Cur: 50%", &Font_11x18, 1);
 8000f84:	2201      	movs	r2, #1
 8000f86:	495b      	ldr	r1, [pc, #364]	@ (80010f4 <main+0x1b8>)
 8000f88:	485c      	ldr	r0, [pc, #368]	@ (80010fc <main+0x1c0>)
 8000f8a:	f000 fcaf 	bl	80018ec <SSD1306_Puts>
//  SSD1306_Puts("Tem: 30°C, Hum: 65%", &Font_7x10, 1);
//  SSD1306_GotoXY(0, 20);
//  SSD1306_Puts("HUMI:65%", &Font_7x10, 1);
  SSD1306_UpdateScreen();
 8000f8e:	f000 fb73 	bl	8001678 <SSD1306_UpdateScreen>
//	  HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), 2000);
//	  i++;
//	  printf("i = %d\r\n", i);
//	  HAL_Delay(1000);

	  if (SHT31_ReadTempHum(&temp, &hum) == 0) {
 8000f92:	1d3a      	adds	r2, r7, #4
 8000f94:	f107 0308 	add.w	r3, r7, #8
 8000f98:	4611      	mov	r1, r2
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 f9e4 	bl	8001368 <SHT31_ReadTempHum>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d1f5      	bne.n	8000f92 <main+0x56>
	          SSD1306_Clear();
 8000fa6:	f000 fcc6 	bl	8001936 <SSD1306_Clear>
			  snprintf(msg, sizeof(msg), "Set: %d%%", set_hum);
 8000faa:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8000fae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000fb0:	4a53      	ldr	r2, [pc, #332]	@ (8001100 <main+0x1c4>)
 8000fb2:	2114      	movs	r1, #20
 8000fb4:	f004 f95e 	bl	8005274 <sniprintf>
	          SSD1306_GotoXY(0, 0);
 8000fb8:	2100      	movs	r1, #0
 8000fba:	2000      	movs	r0, #0
 8000fbc:	f000 fc02 	bl	80017c4 <SSD1306_GotoXY>
	          SSD1306_Puts(msg, &Font_11x18, 1);
 8000fc0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	494b      	ldr	r1, [pc, #300]	@ (80010f4 <main+0x1b8>)
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f000 fc8f 	bl	80018ec <SSD1306_Puts>
	          snprintf(buf, sizeof(buf), "Cur: %.1f %%", hum);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff fad9 	bl	8000588 <__aeabi_f2d>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	460b      	mov	r3, r1
 8000fda:	f107 000c 	add.w	r0, r7, #12
 8000fde:	e9cd 2300 	strd	r2, r3, [sp]
 8000fe2:	4a48      	ldr	r2, [pc, #288]	@ (8001104 <main+0x1c8>)
 8000fe4:	2120      	movs	r1, #32
 8000fe6:	f004 f945 	bl	8005274 <sniprintf>
			  SSD1306_GotoXY(0, 22);
 8000fea:	2116      	movs	r1, #22
 8000fec:	2000      	movs	r0, #0
 8000fee:	f000 fbe9 	bl	80017c4 <SSD1306_GotoXY>
	          SSD1306_Puts(buf, &Font_11x18, 1);
 8000ff2:	f107 030c 	add.w	r3, r7, #12
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	493e      	ldr	r1, [pc, #248]	@ (80010f4 <main+0x1b8>)
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 fc76 	bl	80018ec <SSD1306_Puts>
	          SSD1306_UpdateScreen();
 8001000:	f000 fb3a 	bl	8001678 <SSD1306_UpdateScreen>

	          while (1) {
	              // check buttons and update display here
	              if (!HAL_GPIO_ReadPin(GPIO_SW_GPIO_Port, GPIO_SW_Pin)) {
 8001004:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001008:	483f      	ldr	r0, [pc, #252]	@ (8001108 <main+0x1cc>)
 800100a:	f001 fa15 	bl	8002438 <HAL_GPIO_ReadPin>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d12d      	bne.n	8001070 <main+0x134>
	                  // increment logic
	            	  set_hum++;
 8001014:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001016:	3301      	adds	r3, #1
 8001018:	647b      	str	r3, [r7, #68]	@ 0x44
					  snprintf(msg, sizeof(msg), "Set: %d%%", set_hum);
 800101a:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 800101e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001020:	4a37      	ldr	r2, [pc, #220]	@ (8001100 <main+0x1c4>)
 8001022:	2114      	movs	r1, #20
 8001024:	f004 f926 	bl	8005274 <sniprintf>
					  SSD1306_Clear();
 8001028:	f000 fc85 	bl	8001936 <SSD1306_Clear>
					  SSD1306_GotoXY(0, 0);
 800102c:	2100      	movs	r1, #0
 800102e:	2000      	movs	r0, #0
 8001030:	f000 fbc8 	bl	80017c4 <SSD1306_GotoXY>
					  SSD1306_Puts(msg, &Font_11x18, 1);
 8001034:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001038:	2201      	movs	r2, #1
 800103a:	492e      	ldr	r1, [pc, #184]	@ (80010f4 <main+0x1b8>)
 800103c:	4618      	mov	r0, r3
 800103e:	f000 fc55 	bl	80018ec <SSD1306_Puts>
					  SSD1306_GotoXY(0, 22);
 8001042:	2116      	movs	r1, #22
 8001044:	2000      	movs	r0, #0
 8001046:	f000 fbbd 	bl	80017c4 <SSD1306_GotoXY>
			          snprintf(buf, sizeof(buf), "Cur: %.1f %%", hum);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff fa9b 	bl	8000588 <__aeabi_f2d>
 8001052:	4602      	mov	r2, r0
 8001054:	460b      	mov	r3, r1
 8001056:	f107 000c 	add.w	r0, r7, #12
 800105a:	e9cd 2300 	strd	r2, r3, [sp]
 800105e:	4a29      	ldr	r2, [pc, #164]	@ (8001104 <main+0x1c8>)
 8001060:	2120      	movs	r1, #32
 8001062:	f004 f907 	bl	8005274 <sniprintf>
					  SSD1306_UpdateScreen();
 8001066:	f000 fb07 	bl	8001678 <SSD1306_UpdateScreen>
					  HAL_Delay(100);
 800106a:	2064      	movs	r0, #100	@ 0x64
 800106c:	f000 ff46 	bl	8001efc <HAL_Delay>
	              }
	              if (!HAL_GPIO_ReadPin(GPIO_SW_D_GPIO_Port, GPIO_SW_D_Pin)) {
 8001070:	2101      	movs	r1, #1
 8001072:	4826      	ldr	r0, [pc, #152]	@ (800110c <main+0x1d0>)
 8001074:	f001 f9e0 	bl	8002438 <HAL_GPIO_ReadPin>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d12d      	bne.n	80010da <main+0x19e>
	                  // decrement logic
	            	  set_hum--;
 800107e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001080:	3b01      	subs	r3, #1
 8001082:	647b      	str	r3, [r7, #68]	@ 0x44
					  snprintf(msg, sizeof(msg), "Set: %d%%", set_hum);
 8001084:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8001088:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800108a:	4a1d      	ldr	r2, [pc, #116]	@ (8001100 <main+0x1c4>)
 800108c:	2114      	movs	r1, #20
 800108e:	f004 f8f1 	bl	8005274 <sniprintf>
					  SSD1306_Clear();
 8001092:	f000 fc50 	bl	8001936 <SSD1306_Clear>
					  SSD1306_GotoXY(0, 0);
 8001096:	2100      	movs	r1, #0
 8001098:	2000      	movs	r0, #0
 800109a:	f000 fb93 	bl	80017c4 <SSD1306_GotoXY>
					  SSD1306_Puts(msg, &Font_11x18, 1);
 800109e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80010a2:	2201      	movs	r2, #1
 80010a4:	4913      	ldr	r1, [pc, #76]	@ (80010f4 <main+0x1b8>)
 80010a6:	4618      	mov	r0, r3
 80010a8:	f000 fc20 	bl	80018ec <SSD1306_Puts>
					  SSD1306_GotoXY(0, 22);
 80010ac:	2116      	movs	r1, #22
 80010ae:	2000      	movs	r0, #0
 80010b0:	f000 fb88 	bl	80017c4 <SSD1306_GotoXY>
			          snprintf(buf, sizeof(buf), "Cur: %.1f %%", hum);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff fa66 	bl	8000588 <__aeabi_f2d>
 80010bc:	4602      	mov	r2, r0
 80010be:	460b      	mov	r3, r1
 80010c0:	f107 000c 	add.w	r0, r7, #12
 80010c4:	e9cd 2300 	strd	r2, r3, [sp]
 80010c8:	4a0e      	ldr	r2, [pc, #56]	@ (8001104 <main+0x1c8>)
 80010ca:	2120      	movs	r1, #32
 80010cc:	f004 f8d2 	bl	8005274 <sniprintf>
					  SSD1306_UpdateScreen();
 80010d0:	f000 fad2 	bl	8001678 <SSD1306_UpdateScreen>
					  HAL_Delay(100);
 80010d4:	2064      	movs	r0, #100	@ 0x64
 80010d6:	f000 ff11 	bl	8001efc <HAL_Delay>
	              }

	              // check if 2000ms passed
	              if (HAL_GetTick() - last_update >= 2000) {
 80010da:	f000 ff03 	bl	8001ee4 <HAL_GetTick>
 80010de:	4602      	mov	r2, r0
 80010e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80010e2:	1ad3      	subs	r3, r2, r3
 80010e4:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80010e8:	d38c      	bcc.n	8001004 <main+0xc8>
	                  last_update = HAL_GetTick();
 80010ea:	f000 fefb 	bl	8001ee4 <HAL_GetTick>
 80010ee:	6438      	str	r0, [r7, #64]	@ 0x40
	                  break;
 80010f0:	bf00      	nop
	  if (SHT31_ReadTempHum(&temp, &hum) == 0) {
 80010f2:	e74e      	b.n	8000f92 <main+0x56>
 80010f4:	20000000 	.word	0x20000000
 80010f8:	080076a0 	.word	0x080076a0
 80010fc:	080076ac 	.word	0x080076ac
 8001100:	080076b8 	.word	0x080076b8
 8001104:	080076c4 	.word	0x080076c4
 8001108:	40020800 	.word	0x40020800
 800110c:	40020400 	.word	0x40020400

08001110 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b094      	sub	sp, #80	@ 0x50
 8001114:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001116:	f107 031c 	add.w	r3, r7, #28
 800111a:	2234      	movs	r2, #52	@ 0x34
 800111c:	2100      	movs	r1, #0
 800111e:	4618      	mov	r0, r3
 8001120:	f004 f9a0 	bl	8005464 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001124:	f107 0308 	add.w	r3, r7, #8
 8001128:	2200      	movs	r2, #0
 800112a:	601a      	str	r2, [r3, #0]
 800112c:	605a      	str	r2, [r3, #4]
 800112e:	609a      	str	r2, [r3, #8]
 8001130:	60da      	str	r2, [r3, #12]
 8001132:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001134:	2300      	movs	r3, #0
 8001136:	607b      	str	r3, [r7, #4]
 8001138:	4b23      	ldr	r3, [pc, #140]	@ (80011c8 <SystemClock_Config+0xb8>)
 800113a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800113c:	4a22      	ldr	r2, [pc, #136]	@ (80011c8 <SystemClock_Config+0xb8>)
 800113e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001142:	6413      	str	r3, [r2, #64]	@ 0x40
 8001144:	4b20      	ldr	r3, [pc, #128]	@ (80011c8 <SystemClock_Config+0xb8>)
 8001146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001148:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800114c:	607b      	str	r3, [r7, #4]
 800114e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001150:	2300      	movs	r3, #0
 8001152:	603b      	str	r3, [r7, #0]
 8001154:	4b1d      	ldr	r3, [pc, #116]	@ (80011cc <SystemClock_Config+0xbc>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800115c:	4a1b      	ldr	r2, [pc, #108]	@ (80011cc <SystemClock_Config+0xbc>)
 800115e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001162:	6013      	str	r3, [r2, #0]
 8001164:	4b19      	ldr	r3, [pc, #100]	@ (80011cc <SystemClock_Config+0xbc>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800116c:	603b      	str	r3, [r7, #0]
 800116e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001170:	2302      	movs	r3, #2
 8001172:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001174:	2301      	movs	r3, #1
 8001176:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001178:	2310      	movs	r3, #16
 800117a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800117c:	2300      	movs	r3, #0
 800117e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001180:	f107 031c 	add.w	r3, r7, #28
 8001184:	4618      	mov	r0, r3
 8001186:	f002 fd75 	bl	8003c74 <HAL_RCC_OscConfig>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001190:	f000 f8e4 	bl	800135c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001194:	230f      	movs	r3, #15
 8001196:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001198:	2300      	movs	r3, #0
 800119a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800119c:	2300      	movs	r3, #0
 800119e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011a4:	2300      	movs	r3, #0
 80011a6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011a8:	f107 0308 	add.w	r3, r7, #8
 80011ac:	2100      	movs	r1, #0
 80011ae:	4618      	mov	r0, r3
 80011b0:	f002 fa9c 	bl	80036ec <HAL_RCC_ClockConfig>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <SystemClock_Config+0xae>
  {
    Error_Handler();
 80011ba:	f000 f8cf 	bl	800135c <Error_Handler>
  }
}
 80011be:	bf00      	nop
 80011c0:	3750      	adds	r7, #80	@ 0x50
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	40023800 	.word	0x40023800
 80011cc:	40007000 	.word	0x40007000

080011d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011d4:	4b12      	ldr	r3, [pc, #72]	@ (8001220 <MX_I2C1_Init+0x50>)
 80011d6:	4a13      	ldr	r2, [pc, #76]	@ (8001224 <MX_I2C1_Init+0x54>)
 80011d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80011da:	4b11      	ldr	r3, [pc, #68]	@ (8001220 <MX_I2C1_Init+0x50>)
 80011dc:	4a12      	ldr	r2, [pc, #72]	@ (8001228 <MX_I2C1_Init+0x58>)
 80011de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001220 <MX_I2C1_Init+0x50>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001220 <MX_I2C1_Init+0x50>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001220 <MX_I2C1_Init+0x50>)
 80011ee:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80011f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011f4:	4b0a      	ldr	r3, [pc, #40]	@ (8001220 <MX_I2C1_Init+0x50>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011fa:	4b09      	ldr	r3, [pc, #36]	@ (8001220 <MX_I2C1_Init+0x50>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001200:	4b07      	ldr	r3, [pc, #28]	@ (8001220 <MX_I2C1_Init+0x50>)
 8001202:	2200      	movs	r2, #0
 8001204:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001206:	4b06      	ldr	r3, [pc, #24]	@ (8001220 <MX_I2C1_Init+0x50>)
 8001208:	2200      	movs	r2, #0
 800120a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800120c:	4804      	ldr	r0, [pc, #16]	@ (8001220 <MX_I2C1_Init+0x50>)
 800120e:	f001 f945 	bl	800249c <HAL_I2C_Init>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001218:	f000 f8a0 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800121c:	bf00      	nop
 800121e:	bd80      	pop	{r7, pc}
 8001220:	200001f8 	.word	0x200001f8
 8001224:	40005400 	.word	0x40005400
 8001228:	00061a80 	.word	0x00061a80

0800122c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001230:	4b11      	ldr	r3, [pc, #68]	@ (8001278 <MX_USART2_UART_Init+0x4c>)
 8001232:	4a12      	ldr	r2, [pc, #72]	@ (800127c <MX_USART2_UART_Init+0x50>)
 8001234:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001236:	4b10      	ldr	r3, [pc, #64]	@ (8001278 <MX_USART2_UART_Init+0x4c>)
 8001238:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800123c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800123e:	4b0e      	ldr	r3, [pc, #56]	@ (8001278 <MX_USART2_UART_Init+0x4c>)
 8001240:	2200      	movs	r2, #0
 8001242:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001244:	4b0c      	ldr	r3, [pc, #48]	@ (8001278 <MX_USART2_UART_Init+0x4c>)
 8001246:	2200      	movs	r2, #0
 8001248:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800124a:	4b0b      	ldr	r3, [pc, #44]	@ (8001278 <MX_USART2_UART_Init+0x4c>)
 800124c:	2200      	movs	r2, #0
 800124e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001250:	4b09      	ldr	r3, [pc, #36]	@ (8001278 <MX_USART2_UART_Init+0x4c>)
 8001252:	220c      	movs	r2, #12
 8001254:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001256:	4b08      	ldr	r3, [pc, #32]	@ (8001278 <MX_USART2_UART_Init+0x4c>)
 8001258:	2200      	movs	r2, #0
 800125a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800125c:	4b06      	ldr	r3, [pc, #24]	@ (8001278 <MX_USART2_UART_Init+0x4c>)
 800125e:	2200      	movs	r2, #0
 8001260:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001262:	4805      	ldr	r0, [pc, #20]	@ (8001278 <MX_USART2_UART_Init+0x4c>)
 8001264:	f002 ffa4 	bl	80041b0 <HAL_UART_Init>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800126e:	f000 f875 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	2000024c 	.word	0x2000024c
 800127c:	40004400 	.word	0x40004400

08001280 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b088      	sub	sp, #32
 8001284:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001286:	f107 030c 	add.w	r3, r7, #12
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	605a      	str	r2, [r3, #4]
 8001290:	609a      	str	r2, [r3, #8]
 8001292:	60da      	str	r2, [r3, #12]
 8001294:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	60bb      	str	r3, [r7, #8]
 800129a:	4b2c      	ldr	r3, [pc, #176]	@ (800134c <MX_GPIO_Init+0xcc>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129e:	4a2b      	ldr	r2, [pc, #172]	@ (800134c <MX_GPIO_Init+0xcc>)
 80012a0:	f043 0304 	orr.w	r3, r3, #4
 80012a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012a6:	4b29      	ldr	r3, [pc, #164]	@ (800134c <MX_GPIO_Init+0xcc>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012aa:	f003 0304 	and.w	r3, r3, #4
 80012ae:	60bb      	str	r3, [r7, #8]
 80012b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	607b      	str	r3, [r7, #4]
 80012b6:	4b25      	ldr	r3, [pc, #148]	@ (800134c <MX_GPIO_Init+0xcc>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ba:	4a24      	ldr	r2, [pc, #144]	@ (800134c <MX_GPIO_Init+0xcc>)
 80012bc:	f043 0301 	orr.w	r3, r3, #1
 80012c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012c2:	4b22      	ldr	r3, [pc, #136]	@ (800134c <MX_GPIO_Init+0xcc>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	607b      	str	r3, [r7, #4]
 80012cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	603b      	str	r3, [r7, #0]
 80012d2:	4b1e      	ldr	r3, [pc, #120]	@ (800134c <MX_GPIO_Init+0xcc>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d6:	4a1d      	ldr	r2, [pc, #116]	@ (800134c <MX_GPIO_Init+0xcc>)
 80012d8:	f043 0302 	orr.w	r3, r3, #2
 80012dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012de:	4b1b      	ldr	r3, [pc, #108]	@ (800134c <MX_GPIO_Init+0xcc>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	603b      	str	r3, [r7, #0]
 80012e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_LED_GPIO_Port, GPIO_LED_Pin, GPIO_PIN_RESET);
 80012ea:	2200      	movs	r2, #0
 80012ec:	2120      	movs	r1, #32
 80012ee:	4818      	ldr	r0, [pc, #96]	@ (8001350 <MX_GPIO_Init+0xd0>)
 80012f0:	f001 f8ba 	bl	8002468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPIO_SW_Pin */
  GPIO_InitStruct.Pin = GPIO_SW_Pin;
 80012f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80012f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012fa:	2300      	movs	r3, #0
 80012fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012fe:	2301      	movs	r3, #1
 8001300:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIO_SW_GPIO_Port, &GPIO_InitStruct);
 8001302:	f107 030c 	add.w	r3, r7, #12
 8001306:	4619      	mov	r1, r3
 8001308:	4812      	ldr	r0, [pc, #72]	@ (8001354 <MX_GPIO_Init+0xd4>)
 800130a:	f000 ff01 	bl	8002110 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_LED_Pin */
  GPIO_InitStruct.Pin = GPIO_LED_Pin;
 800130e:	2320      	movs	r3, #32
 8001310:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001312:	2301      	movs	r3, #1
 8001314:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131a:	2300      	movs	r3, #0
 800131c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIO_LED_GPIO_Port, &GPIO_InitStruct);
 800131e:	f107 030c 	add.w	r3, r7, #12
 8001322:	4619      	mov	r1, r3
 8001324:	480a      	ldr	r0, [pc, #40]	@ (8001350 <MX_GPIO_Init+0xd0>)
 8001326:	f000 fef3 	bl	8002110 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_SW_D_Pin */
  GPIO_InitStruct.Pin = GPIO_SW_D_Pin;
 800132a:	2301      	movs	r3, #1
 800132c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800132e:	2300      	movs	r3, #0
 8001330:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001332:	2301      	movs	r3, #1
 8001334:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIO_SW_D_GPIO_Port, &GPIO_InitStruct);
 8001336:	f107 030c 	add.w	r3, r7, #12
 800133a:	4619      	mov	r1, r3
 800133c:	4806      	ldr	r0, [pc, #24]	@ (8001358 <MX_GPIO_Init+0xd8>)
 800133e:	f000 fee7 	bl	8002110 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001342:	bf00      	nop
 8001344:	3720      	adds	r7, #32
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40023800 	.word	0x40023800
 8001350:	40020000 	.word	0x40020000
 8001354:	40020800 	.word	0x40020800
 8001358:	40020400 	.word	0x40020400

0800135c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001360:	b672      	cpsid	i
}
 8001362:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001364:	bf00      	nop
 8001366:	e7fd      	b.n	8001364 <Error_Handler+0x8>

08001368 <SHT31_ReadTempHum>:
#include "sht31d.h"

extern I2C_HandleTypeDef hi2c1;
#define SHT31D_I2C &hi2c1

int SHT31_ReadTempHum(float *temperature, float *humidity) {
 8001368:	b580      	push	{r7, lr}
 800136a:	b088      	sub	sp, #32
 800136c:	af02      	add	r7, sp, #8
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
    uint8_t cmd[2] = {0x24, 0x00};   // high repeatability, no clock stretching
 8001372:	2324      	movs	r3, #36	@ 0x24
 8001374:	823b      	strh	r3, [r7, #16]
    uint8_t data[6];

    if (HAL_I2C_Master_Transmit(&hi2c1, SHT31D_I2C_ADDR, cmd, 2, HAL_MAX_DELAY) != HAL_OK)
 8001376:	f107 0210 	add.w	r2, r7, #16
 800137a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800137e:	9300      	str	r3, [sp, #0]
 8001380:	2302      	movs	r3, #2
 8001382:	2188      	movs	r1, #136	@ 0x88
 8001384:	4838      	ldr	r0, [pc, #224]	@ (8001468 <SHT31_ReadTempHum+0x100>)
 8001386:	f001 f9cd 	bl	8002724 <HAL_I2C_Master_Transmit>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d002      	beq.n	8001396 <SHT31_ReadTempHum+0x2e>
        return -1;
 8001390:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001394:	e063      	b.n	800145e <SHT31_ReadTempHum+0xf6>

    HAL_Delay(20); // wait ≥15ms per datasheet
 8001396:	2014      	movs	r0, #20
 8001398:	f000 fdb0 	bl	8001efc <HAL_Delay>

    if (HAL_I2C_Master_Receive(&hi2c1, SHT31D_I2C_ADDR, data, 6, HAL_MAX_DELAY) != HAL_OK)
 800139c:	f107 0208 	add.w	r2, r7, #8
 80013a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80013a4:	9300      	str	r3, [sp, #0]
 80013a6:	2306      	movs	r3, #6
 80013a8:	2188      	movs	r1, #136	@ 0x88
 80013aa:	482f      	ldr	r0, [pc, #188]	@ (8001468 <SHT31_ReadTempHum+0x100>)
 80013ac:	f001 fab8 	bl	8002920 <HAL_I2C_Master_Receive>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d002      	beq.n	80013bc <SHT31_ReadTempHum+0x54>
        return -2;
 80013b6:	f06f 0301 	mvn.w	r3, #1
 80013ba:	e050      	b.n	800145e <SHT31_ReadTempHum+0xf6>

    if (SHT31_CRC8(data, 2) != data[2] || SHT31_CRC8(data+3, 2) != data[5])
 80013bc:	f107 0308 	add.w	r3, r7, #8
 80013c0:	2102      	movs	r1, #2
 80013c2:	4618      	mov	r0, r3
 80013c4:	f000 f85a 	bl	800147c <SHT31_CRC8>
 80013c8:	4603      	mov	r3, r0
 80013ca:	461a      	mov	r2, r3
 80013cc:	7abb      	ldrb	r3, [r7, #10]
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d10b      	bne.n	80013ea <SHT31_ReadTempHum+0x82>
 80013d2:	f107 0308 	add.w	r3, r7, #8
 80013d6:	3303      	adds	r3, #3
 80013d8:	2102      	movs	r1, #2
 80013da:	4618      	mov	r0, r3
 80013dc:	f000 f84e 	bl	800147c <SHT31_CRC8>
 80013e0:	4603      	mov	r3, r0
 80013e2:	461a      	mov	r2, r3
 80013e4:	7b7b      	ldrb	r3, [r7, #13]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d002      	beq.n	80013f0 <SHT31_ReadTempHum+0x88>
        return -3;
 80013ea:	f06f 0302 	mvn.w	r3, #2
 80013ee:	e036      	b.n	800145e <SHT31_ReadTempHum+0xf6>

    uint16_t rawT  = (data[0] << 8) | data[1];
 80013f0:	7a3b      	ldrb	r3, [r7, #8]
 80013f2:	b21b      	sxth	r3, r3
 80013f4:	021b      	lsls	r3, r3, #8
 80013f6:	b21a      	sxth	r2, r3
 80013f8:	7a7b      	ldrb	r3, [r7, #9]
 80013fa:	b21b      	sxth	r3, r3
 80013fc:	4313      	orrs	r3, r2
 80013fe:	b21b      	sxth	r3, r3
 8001400:	82fb      	strh	r3, [r7, #22]
    uint16_t rawRH = (data[3] << 8) | data[4];
 8001402:	7afb      	ldrb	r3, [r7, #11]
 8001404:	b21b      	sxth	r3, r3
 8001406:	021b      	lsls	r3, r3, #8
 8001408:	b21a      	sxth	r2, r3
 800140a:	7b3b      	ldrb	r3, [r7, #12]
 800140c:	b21b      	sxth	r3, r3
 800140e:	4313      	orrs	r3, r2
 8001410:	b21b      	sxth	r3, r3
 8001412:	82bb      	strh	r3, [r7, #20]

    *temperature = -45.0f + 175.0f * ((float) rawT / 65535.0f);
 8001414:	8afb      	ldrh	r3, [r7, #22]
 8001416:	ee07 3a90 	vmov	s15, r3
 800141a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800141e:	eddf 6a13 	vldr	s13, [pc, #76]	@ 800146c <SHT31_ReadTempHum+0x104>
 8001422:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001426:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8001470 <SHT31_ReadTempHum+0x108>
 800142a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800142e:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001474 <SHT31_ReadTempHum+0x10c>
 8001432:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	edc3 7a00 	vstr	s15, [r3]
    *humidity    = 100.0f * ((float) rawRH / 65535.0f);
 800143c:	8abb      	ldrh	r3, [r7, #20]
 800143e:	ee07 3a90 	vmov	s15, r3
 8001442:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001446:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800146c <SHT31_ReadTempHum+0x104>
 800144a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800144e:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8001478 <SHT31_ReadTempHum+0x110>
 8001452:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	edc3 7a00 	vstr	s15, [r3]

    return 0; // success
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	3718      	adds	r7, #24
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	200001f8 	.word	0x200001f8
 800146c:	477fff00 	.word	0x477fff00
 8001470:	432f0000 	.word	0x432f0000
 8001474:	42340000 	.word	0x42340000
 8001478:	42c80000 	.word	0x42c80000

0800147c <SHT31_CRC8>:

uint8_t SHT31_CRC8(const uint8_t *data, int len) {
 800147c:	b480      	push	{r7}
 800147e:	b087      	sub	sp, #28
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
    uint8_t crc = 0xFF;
 8001486:	23ff      	movs	r3, #255	@ 0xff
 8001488:	75fb      	strb	r3, [r7, #23]
    for (int i = 0; i < len; i++) {
 800148a:	2300      	movs	r3, #0
 800148c:	613b      	str	r3, [r7, #16]
 800148e:	e023      	b.n	80014d8 <SHT31_CRC8+0x5c>
        crc ^= data[i];
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	4413      	add	r3, r2
 8001496:	781a      	ldrb	r2, [r3, #0]
 8001498:	7dfb      	ldrb	r3, [r7, #23]
 800149a:	4053      	eors	r3, r2
 800149c:	75fb      	strb	r3, [r7, #23]
        for (int b = 0; b < 8; b++) {
 800149e:	2300      	movs	r3, #0
 80014a0:	60fb      	str	r3, [r7, #12]
 80014a2:	e013      	b.n	80014cc <SHT31_CRC8+0x50>
            crc = (crc & 0x80) ? (crc << 1) ^ 0x31 : (crc << 1);
 80014a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	da08      	bge.n	80014be <SHT31_CRC8+0x42>
 80014ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	b25b      	sxtb	r3, r3
 80014b4:	f083 0331 	eor.w	r3, r3, #49	@ 0x31
 80014b8:	b25b      	sxtb	r3, r3
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	e002      	b.n	80014c4 <SHT31_CRC8+0x48>
 80014be:	7dfb      	ldrb	r3, [r7, #23]
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	75fb      	strb	r3, [r7, #23]
        for (int b = 0; b < 8; b++) {
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	3301      	adds	r3, #1
 80014ca:	60fb      	str	r3, [r7, #12]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	2b07      	cmp	r3, #7
 80014d0:	dde8      	ble.n	80014a4 <SHT31_CRC8+0x28>
    for (int i = 0; i < len; i++) {
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	3301      	adds	r3, #1
 80014d6:	613b      	str	r3, [r7, #16]
 80014d8:	693a      	ldr	r2, [r7, #16]
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	429a      	cmp	r2, r3
 80014de:	dbd7      	blt.n	8001490 <SHT31_CRC8+0x14>
        }
    }
    return crc;
 80014e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	371c      	adds	r7, #28
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
	...

080014f0 <SSD1306_Init>:

/* Private variable */
static SSD1306_t SSD1306;


uint8_t SSD1306_Init(void) {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80014f6:	f000 fa27 	bl	8001948 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80014fa:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80014fe:	2201      	movs	r2, #1
 8001500:	2178      	movs	r1, #120	@ 0x78
 8001502:	485b      	ldr	r0, [pc, #364]	@ (8001670 <SSD1306_Init+0x180>)
 8001504:	f001 fc3e 	bl	8002d84 <HAL_I2C_IsDeviceReady>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800150e:	2300      	movs	r3, #0
 8001510:	e0a9      	b.n	8001666 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001512:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8001516:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001518:	e002      	b.n	8001520 <SSD1306_Init+0x30>
		p--;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	3b01      	subs	r3, #1
 800151e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d1f9      	bne.n	800151a <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001526:	22ae      	movs	r2, #174	@ 0xae
 8001528:	2100      	movs	r1, #0
 800152a:	2078      	movs	r0, #120	@ 0x78
 800152c:	f000 fa88 	bl	8001a40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001530:	2220      	movs	r2, #32
 8001532:	2100      	movs	r1, #0
 8001534:	2078      	movs	r0, #120	@ 0x78
 8001536:	f000 fa83 	bl	8001a40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800153a:	2210      	movs	r2, #16
 800153c:	2100      	movs	r1, #0
 800153e:	2078      	movs	r0, #120	@ 0x78
 8001540:	f000 fa7e 	bl	8001a40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001544:	22b0      	movs	r2, #176	@ 0xb0
 8001546:	2100      	movs	r1, #0
 8001548:	2078      	movs	r0, #120	@ 0x78
 800154a:	f000 fa79 	bl	8001a40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800154e:	22c8      	movs	r2, #200	@ 0xc8
 8001550:	2100      	movs	r1, #0
 8001552:	2078      	movs	r0, #120	@ 0x78
 8001554:	f000 fa74 	bl	8001a40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001558:	2200      	movs	r2, #0
 800155a:	2100      	movs	r1, #0
 800155c:	2078      	movs	r0, #120	@ 0x78
 800155e:	f000 fa6f 	bl	8001a40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001562:	2210      	movs	r2, #16
 8001564:	2100      	movs	r1, #0
 8001566:	2078      	movs	r0, #120	@ 0x78
 8001568:	f000 fa6a 	bl	8001a40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 800156c:	2240      	movs	r2, #64	@ 0x40
 800156e:	2100      	movs	r1, #0
 8001570:	2078      	movs	r0, #120	@ 0x78
 8001572:	f000 fa65 	bl	8001a40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001576:	2281      	movs	r2, #129	@ 0x81
 8001578:	2100      	movs	r1, #0
 800157a:	2078      	movs	r0, #120	@ 0x78
 800157c:	f000 fa60 	bl	8001a40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001580:	22ff      	movs	r2, #255	@ 0xff
 8001582:	2100      	movs	r1, #0
 8001584:	2078      	movs	r0, #120	@ 0x78
 8001586:	f000 fa5b 	bl	8001a40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800158a:	22a1      	movs	r2, #161	@ 0xa1
 800158c:	2100      	movs	r1, #0
 800158e:	2078      	movs	r0, #120	@ 0x78
 8001590:	f000 fa56 	bl	8001a40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001594:	22a6      	movs	r2, #166	@ 0xa6
 8001596:	2100      	movs	r1, #0
 8001598:	2078      	movs	r0, #120	@ 0x78
 800159a:	f000 fa51 	bl	8001a40 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
	SSD1306_WRITECOMMAND(0xFF);
#else
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800159e:	22a8      	movs	r2, #168	@ 0xa8
 80015a0:	2100      	movs	r1, #0
 80015a2:	2078      	movs	r0, #120	@ 0x78
 80015a4:	f000 fa4c 	bl	8001a40 <ssd1306_I2C_Write>
#endif

#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x1F); //
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x3F); //
 80015a8:	223f      	movs	r2, #63	@ 0x3f
 80015aa:	2100      	movs	r1, #0
 80015ac:	2078      	movs	r0, #120	@ 0x78
 80015ae:	f000 fa47 	bl	8001a40 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x3F); // Seems to work for 128px high displays too.
#endif
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80015b2:	22a4      	movs	r2, #164	@ 0xa4
 80015b4:	2100      	movs	r1, #0
 80015b6:	2078      	movs	r0, #120	@ 0x78
 80015b8:	f000 fa42 	bl	8001a40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80015bc:	22d3      	movs	r2, #211	@ 0xd3
 80015be:	2100      	movs	r1, #0
 80015c0:	2078      	movs	r0, #120	@ 0x78
 80015c2:	f000 fa3d 	bl	8001a40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80015c6:	2200      	movs	r2, #0
 80015c8:	2100      	movs	r1, #0
 80015ca:	2078      	movs	r0, #120	@ 0x78
 80015cc:	f000 fa38 	bl	8001a40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80015d0:	22d5      	movs	r2, #213	@ 0xd5
 80015d2:	2100      	movs	r1, #0
 80015d4:	2078      	movs	r0, #120	@ 0x78
 80015d6:	f000 fa33 	bl	8001a40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80015da:	22f0      	movs	r2, #240	@ 0xf0
 80015dc:	2100      	movs	r1, #0
 80015de:	2078      	movs	r0, #120	@ 0x78
 80015e0:	f000 fa2e 	bl	8001a40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80015e4:	22d9      	movs	r2, #217	@ 0xd9
 80015e6:	2100      	movs	r1, #0
 80015e8:	2078      	movs	r0, #120	@ 0x78
 80015ea:	f000 fa29 	bl	8001a40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80015ee:	2222      	movs	r2, #34	@ 0x22
 80015f0:	2100      	movs	r1, #0
 80015f2:	2078      	movs	r0, #120	@ 0x78
 80015f4:	f000 fa24 	bl	8001a40 <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80015f8:	22da      	movs	r2, #218	@ 0xda
 80015fa:	2100      	movs	r1, #0
 80015fc:	2078      	movs	r0, #120	@ 0x78
 80015fe:	f000 fa1f 	bl	8001a40 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x02);
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x12);
 8001602:	2212      	movs	r2, #18
 8001604:	2100      	movs	r1, #0
 8001606:	2078      	movs	r0, #120	@ 0x78
 8001608:	f000 fa1a 	bl	8001a40 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x12);
#endif

	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800160c:	22db      	movs	r2, #219	@ 0xdb
 800160e:	2100      	movs	r1, #0
 8001610:	2078      	movs	r0, #120	@ 0x78
 8001612:	f000 fa15 	bl	8001a40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001616:	2220      	movs	r2, #32
 8001618:	2100      	movs	r1, #0
 800161a:	2078      	movs	r0, #120	@ 0x78
 800161c:	f000 fa10 	bl	8001a40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001620:	228d      	movs	r2, #141	@ 0x8d
 8001622:	2100      	movs	r1, #0
 8001624:	2078      	movs	r0, #120	@ 0x78
 8001626:	f000 fa0b 	bl	8001a40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800162a:	2214      	movs	r2, #20
 800162c:	2100      	movs	r1, #0
 800162e:	2078      	movs	r0, #120	@ 0x78
 8001630:	f000 fa06 	bl	8001a40 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001634:	22af      	movs	r2, #175	@ 0xaf
 8001636:	2100      	movs	r1, #0
 8001638:	2078      	movs	r0, #120	@ 0x78
 800163a:	f000 fa01 	bl	8001a40 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800163e:	222e      	movs	r2, #46	@ 0x2e
 8001640:	2100      	movs	r1, #0
 8001642:	2078      	movs	r0, #120	@ 0x78
 8001644:	f000 f9fc 	bl	8001a40 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001648:	2000      	movs	r0, #0
 800164a:	f000 f843 	bl	80016d4 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800164e:	f000 f813 	bl	8001678 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001652:	4b08      	ldr	r3, [pc, #32]	@ (8001674 <SSD1306_Init+0x184>)
 8001654:	2200      	movs	r2, #0
 8001656:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001658:	4b06      	ldr	r3, [pc, #24]	@ (8001674 <SSD1306_Init+0x184>)
 800165a:	2200      	movs	r2, #0
 800165c:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800165e:	4b05      	ldr	r3, [pc, #20]	@ (8001674 <SSD1306_Init+0x184>)
 8001660:	2201      	movs	r2, #1
 8001662:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001664:	2301      	movs	r3, #1
}
 8001666:	4618      	mov	r0, r3
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	200001f8 	.word	0x200001f8
 8001674:	20000694 	.word	0x20000694

08001678 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800167e:	2300      	movs	r3, #0
 8001680:	71fb      	strb	r3, [r7, #7]
 8001682:	e01d      	b.n	80016c0 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001684:	79fb      	ldrb	r3, [r7, #7]
 8001686:	3b50      	subs	r3, #80	@ 0x50
 8001688:	b2db      	uxtb	r3, r3
 800168a:	461a      	mov	r2, r3
 800168c:	2100      	movs	r1, #0
 800168e:	2078      	movs	r0, #120	@ 0x78
 8001690:	f000 f9d6 	bl	8001a40 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001694:	2200      	movs	r2, #0
 8001696:	2100      	movs	r1, #0
 8001698:	2078      	movs	r0, #120	@ 0x78
 800169a:	f000 f9d1 	bl	8001a40 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800169e:	2210      	movs	r2, #16
 80016a0:	2100      	movs	r1, #0
 80016a2:	2078      	movs	r0, #120	@ 0x78
 80016a4:	f000 f9cc 	bl	8001a40 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80016a8:	79fb      	ldrb	r3, [r7, #7]
 80016aa:	01db      	lsls	r3, r3, #7
 80016ac:	4a08      	ldr	r2, [pc, #32]	@ (80016d0 <SSD1306_UpdateScreen+0x58>)
 80016ae:	441a      	add	r2, r3
 80016b0:	2380      	movs	r3, #128	@ 0x80
 80016b2:	2140      	movs	r1, #64	@ 0x40
 80016b4:	2078      	movs	r0, #120	@ 0x78
 80016b6:	f000 f95d 	bl	8001974 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80016ba:	79fb      	ldrb	r3, [r7, #7]
 80016bc:	3301      	adds	r3, #1
 80016be:	71fb      	strb	r3, [r7, #7]
 80016c0:	79fb      	ldrb	r3, [r7, #7]
 80016c2:	2b07      	cmp	r3, #7
 80016c4:	d9de      	bls.n	8001684 <SSD1306_UpdateScreen+0xc>
	}
}
 80016c6:	bf00      	nop
 80016c8:	bf00      	nop
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	20000294 	.word	0x20000294

080016d4 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	4603      	mov	r3, r0
 80016dc:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80016de:	79fb      	ldrb	r3, [r7, #7]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d101      	bne.n	80016e8 <SSD1306_Fill+0x14>
 80016e4:	2300      	movs	r3, #0
 80016e6:	e000      	b.n	80016ea <SSD1306_Fill+0x16>
 80016e8:	23ff      	movs	r3, #255	@ 0xff
 80016ea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016ee:	4619      	mov	r1, r3
 80016f0:	4803      	ldr	r0, [pc, #12]	@ (8001700 <SSD1306_Fill+0x2c>)
 80016f2:	f003 feb7 	bl	8005464 <memset>
}
 80016f6:	bf00      	nop
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000294 	.word	0x20000294

08001704 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	80fb      	strh	r3, [r7, #6]
 800170e:	460b      	mov	r3, r1
 8001710:	80bb      	strh	r3, [r7, #4]
 8001712:	4613      	mov	r3, r2
 8001714:	70fb      	strb	r3, [r7, #3]
	if (
 8001716:	88fb      	ldrh	r3, [r7, #6]
 8001718:	2b7f      	cmp	r3, #127	@ 0x7f
 800171a:	d848      	bhi.n	80017ae <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 800171c:	88bb      	ldrh	r3, [r7, #4]
 800171e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001720:	d845      	bhi.n	80017ae <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001722:	4b26      	ldr	r3, [pc, #152]	@ (80017bc <SSD1306_DrawPixel+0xb8>)
 8001724:	791b      	ldrb	r3, [r3, #4]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d006      	beq.n	8001738 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800172a:	78fb      	ldrb	r3, [r7, #3]
 800172c:	2b00      	cmp	r3, #0
 800172e:	bf0c      	ite	eq
 8001730:	2301      	moveq	r3, #1
 8001732:	2300      	movne	r3, #0
 8001734:	b2db      	uxtb	r3, r3
 8001736:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001738:	78fb      	ldrb	r3, [r7, #3]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d11a      	bne.n	8001774 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800173e:	88fa      	ldrh	r2, [r7, #6]
 8001740:	88bb      	ldrh	r3, [r7, #4]
 8001742:	08db      	lsrs	r3, r3, #3
 8001744:	b298      	uxth	r0, r3
 8001746:	4603      	mov	r3, r0
 8001748:	01db      	lsls	r3, r3, #7
 800174a:	4413      	add	r3, r2
 800174c:	4a1c      	ldr	r2, [pc, #112]	@ (80017c0 <SSD1306_DrawPixel+0xbc>)
 800174e:	5cd3      	ldrb	r3, [r2, r3]
 8001750:	b25a      	sxtb	r2, r3
 8001752:	88bb      	ldrh	r3, [r7, #4]
 8001754:	f003 0307 	and.w	r3, r3, #7
 8001758:	2101      	movs	r1, #1
 800175a:	fa01 f303 	lsl.w	r3, r1, r3
 800175e:	b25b      	sxtb	r3, r3
 8001760:	4313      	orrs	r3, r2
 8001762:	b259      	sxtb	r1, r3
 8001764:	88fa      	ldrh	r2, [r7, #6]
 8001766:	4603      	mov	r3, r0
 8001768:	01db      	lsls	r3, r3, #7
 800176a:	4413      	add	r3, r2
 800176c:	b2c9      	uxtb	r1, r1
 800176e:	4a14      	ldr	r2, [pc, #80]	@ (80017c0 <SSD1306_DrawPixel+0xbc>)
 8001770:	54d1      	strb	r1, [r2, r3]
 8001772:	e01d      	b.n	80017b0 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001774:	88fa      	ldrh	r2, [r7, #6]
 8001776:	88bb      	ldrh	r3, [r7, #4]
 8001778:	08db      	lsrs	r3, r3, #3
 800177a:	b298      	uxth	r0, r3
 800177c:	4603      	mov	r3, r0
 800177e:	01db      	lsls	r3, r3, #7
 8001780:	4413      	add	r3, r2
 8001782:	4a0f      	ldr	r2, [pc, #60]	@ (80017c0 <SSD1306_DrawPixel+0xbc>)
 8001784:	5cd3      	ldrb	r3, [r2, r3]
 8001786:	b25a      	sxtb	r2, r3
 8001788:	88bb      	ldrh	r3, [r7, #4]
 800178a:	f003 0307 	and.w	r3, r3, #7
 800178e:	2101      	movs	r1, #1
 8001790:	fa01 f303 	lsl.w	r3, r1, r3
 8001794:	b25b      	sxtb	r3, r3
 8001796:	43db      	mvns	r3, r3
 8001798:	b25b      	sxtb	r3, r3
 800179a:	4013      	ands	r3, r2
 800179c:	b259      	sxtb	r1, r3
 800179e:	88fa      	ldrh	r2, [r7, #6]
 80017a0:	4603      	mov	r3, r0
 80017a2:	01db      	lsls	r3, r3, #7
 80017a4:	4413      	add	r3, r2
 80017a6:	b2c9      	uxtb	r1, r1
 80017a8:	4a05      	ldr	r2, [pc, #20]	@ (80017c0 <SSD1306_DrawPixel+0xbc>)
 80017aa:	54d1      	strb	r1, [r2, r3]
 80017ac:	e000      	b.n	80017b0 <SSD1306_DrawPixel+0xac>
		return;
 80017ae:	bf00      	nop
	}
}
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	20000694 	.word	0x20000694
 80017c0:	20000294 	.word	0x20000294

080017c4 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	460a      	mov	r2, r1
 80017ce:	80fb      	strh	r3, [r7, #6]
 80017d0:	4613      	mov	r3, r2
 80017d2:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80017d4:	4a05      	ldr	r2, [pc, #20]	@ (80017ec <SSD1306_GotoXY+0x28>)
 80017d6:	88fb      	ldrh	r3, [r7, #6]
 80017d8:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80017da:	4a04      	ldr	r2, [pc, #16]	@ (80017ec <SSD1306_GotoXY+0x28>)
 80017dc:	88bb      	ldrh	r3, [r7, #4]
 80017de:	8053      	strh	r3, [r2, #2]
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	20000694 	.word	0x20000694

080017f0 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	6039      	str	r1, [r7, #0]
 80017fa:	71fb      	strb	r3, [r7, #7]
 80017fc:	4613      	mov	r3, r2
 80017fe:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001800:	4b39      	ldr	r3, [pc, #228]	@ (80018e8 <SSD1306_Putc+0xf8>)
 8001802:	881b      	ldrh	r3, [r3, #0]
 8001804:	461a      	mov	r2, r3
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	4413      	add	r3, r2
	if (
 800180c:	2b7f      	cmp	r3, #127	@ 0x7f
 800180e:	dc07      	bgt.n	8001820 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001810:	4b35      	ldr	r3, [pc, #212]	@ (80018e8 <SSD1306_Putc+0xf8>)
 8001812:	885b      	ldrh	r3, [r3, #2]
 8001814:	461a      	mov	r2, r3
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	785b      	ldrb	r3, [r3, #1]
 800181a:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800181c:	2b3f      	cmp	r3, #63	@ 0x3f
 800181e:	dd01      	ble.n	8001824 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001820:	2300      	movs	r3, #0
 8001822:	e05d      	b.n	80018e0 <SSD1306_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001824:	2300      	movs	r3, #0
 8001826:	617b      	str	r3, [r7, #20]
 8001828:	e04b      	b.n	80018c2 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685a      	ldr	r2, [r3, #4]
 800182e:	79fb      	ldrb	r3, [r7, #7]
 8001830:	3b20      	subs	r3, #32
 8001832:	6839      	ldr	r1, [r7, #0]
 8001834:	7849      	ldrb	r1, [r1, #1]
 8001836:	fb01 f303 	mul.w	r3, r1, r3
 800183a:	4619      	mov	r1, r3
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	440b      	add	r3, r1
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	4413      	add	r3, r2
 8001844:	881b      	ldrh	r3, [r3, #0]
 8001846:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001848:	2300      	movs	r3, #0
 800184a:	613b      	str	r3, [r7, #16]
 800184c:	e030      	b.n	80018b0 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800184e:	68fa      	ldr	r2, [r7, #12]
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d010      	beq.n	8001880 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800185e:	4b22      	ldr	r3, [pc, #136]	@ (80018e8 <SSD1306_Putc+0xf8>)
 8001860:	881a      	ldrh	r2, [r3, #0]
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	b29b      	uxth	r3, r3
 8001866:	4413      	add	r3, r2
 8001868:	b298      	uxth	r0, r3
 800186a:	4b1f      	ldr	r3, [pc, #124]	@ (80018e8 <SSD1306_Putc+0xf8>)
 800186c:	885a      	ldrh	r2, [r3, #2]
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	b29b      	uxth	r3, r3
 8001872:	4413      	add	r3, r2
 8001874:	b29b      	uxth	r3, r3
 8001876:	79ba      	ldrb	r2, [r7, #6]
 8001878:	4619      	mov	r1, r3
 800187a:	f7ff ff43 	bl	8001704 <SSD1306_DrawPixel>
 800187e:	e014      	b.n	80018aa <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001880:	4b19      	ldr	r3, [pc, #100]	@ (80018e8 <SSD1306_Putc+0xf8>)
 8001882:	881a      	ldrh	r2, [r3, #0]
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	b29b      	uxth	r3, r3
 8001888:	4413      	add	r3, r2
 800188a:	b298      	uxth	r0, r3
 800188c:	4b16      	ldr	r3, [pc, #88]	@ (80018e8 <SSD1306_Putc+0xf8>)
 800188e:	885a      	ldrh	r2, [r3, #2]
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	b29b      	uxth	r3, r3
 8001894:	4413      	add	r3, r2
 8001896:	b299      	uxth	r1, r3
 8001898:	79bb      	ldrb	r3, [r7, #6]
 800189a:	2b00      	cmp	r3, #0
 800189c:	bf0c      	ite	eq
 800189e:	2301      	moveq	r3, #1
 80018a0:	2300      	movne	r3, #0
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	461a      	mov	r2, r3
 80018a6:	f7ff ff2d 	bl	8001704 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	3301      	adds	r3, #1
 80018ae:	613b      	str	r3, [r7, #16]
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	461a      	mov	r2, r3
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d3c8      	bcc.n	800184e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	3301      	adds	r3, #1
 80018c0:	617b      	str	r3, [r7, #20]
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	785b      	ldrb	r3, [r3, #1]
 80018c6:	461a      	mov	r2, r3
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d3ad      	bcc.n	800182a <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80018ce:	4b06      	ldr	r3, [pc, #24]	@ (80018e8 <SSD1306_Putc+0xf8>)
 80018d0:	881b      	ldrh	r3, [r3, #0]
 80018d2:	683a      	ldr	r2, [r7, #0]
 80018d4:	7812      	ldrb	r2, [r2, #0]
 80018d6:	4413      	add	r3, r2
 80018d8:	b29a      	uxth	r2, r3
 80018da:	4b03      	ldr	r3, [pc, #12]	@ (80018e8 <SSD1306_Putc+0xf8>)
 80018dc:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80018de:	79fb      	ldrb	r3, [r7, #7]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3718      	adds	r7, #24
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	20000694 	.word	0x20000694

080018ec <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	4613      	mov	r3, r2
 80018f8:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80018fa:	e012      	b.n	8001922 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	79fa      	ldrb	r2, [r7, #7]
 8001902:	68b9      	ldr	r1, [r7, #8]
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff ff73 	bl	80017f0 <SSD1306_Putc>
 800190a:	4603      	mov	r3, r0
 800190c:	461a      	mov	r2, r3
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	429a      	cmp	r2, r3
 8001914:	d002      	beq.n	800191c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	e008      	b.n	800192e <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	3301      	adds	r3, #1
 8001920:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d1e8      	bne.n	80018fc <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	781b      	ldrb	r3, [r3, #0]
}
 800192e:	4618      	mov	r0, r3
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <SSD1306_Clear>:
        }
    }
}

void SSD1306_Clear (void)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800193a:	2000      	movs	r0, #0
 800193c:	f7ff feca 	bl	80016d4 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001940:	f7ff fe9a 	bl	8001678 <SSD1306_UpdateScreen>
}
 8001944:	bf00      	nop
 8001946:	bd80      	pop	{r7, pc}

08001948 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800194e:	4b08      	ldr	r3, [pc, #32]	@ (8001970 <ssd1306_I2C_Init+0x28>)
 8001950:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001952:	e002      	b.n	800195a <ssd1306_I2C_Init+0x12>
		p--;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	3b01      	subs	r3, #1
 8001958:	607b      	str	r3, [r7, #4]
	while(p>0)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d1f9      	bne.n	8001954 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001960:	bf00      	nop
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	0003d090 	.word	0x0003d090

08001974 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001974:	b590      	push	{r4, r7, lr}
 8001976:	b0c7      	sub	sp, #284	@ 0x11c
 8001978:	af02      	add	r7, sp, #8
 800197a:	4604      	mov	r4, r0
 800197c:	4608      	mov	r0, r1
 800197e:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8001982:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8001986:	600a      	str	r2, [r1, #0]
 8001988:	4619      	mov	r1, r3
 800198a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800198e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001992:	4622      	mov	r2, r4
 8001994:	701a      	strb	r2, [r3, #0]
 8001996:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800199a:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800199e:	4602      	mov	r2, r0
 80019a0:	701a      	strb	r2, [r3, #0]
 80019a2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80019a6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80019aa:	460a      	mov	r2, r1
 80019ac:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80019ae:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80019b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80019b6:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80019ba:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 80019be:	7812      	ldrb	r2, [r2, #0]
 80019c0:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80019c2:	2300      	movs	r3, #0
 80019c4:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80019c8:	e015      	b.n	80019f6 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80019ca:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80019ce:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80019d2:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80019d6:	6812      	ldr	r2, [r2, #0]
 80019d8:	441a      	add	r2, r3
 80019da:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80019de:	3301      	adds	r3, #1
 80019e0:	7811      	ldrb	r1, [r2, #0]
 80019e2:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80019e6:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 80019ea:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80019ec:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80019f0:	3301      	adds	r3, #1
 80019f2:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80019f6:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80019fa:	b29b      	uxth	r3, r3
 80019fc:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001a00:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001a04:	8812      	ldrh	r2, [r2, #0]
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d8df      	bhi.n	80019ca <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, count+1, 10);
 8001a0a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001a0e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	b299      	uxth	r1, r3
 8001a16:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001a1a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001a1e:	881b      	ldrh	r3, [r3, #0]
 8001a20:	3301      	adds	r3, #1
 8001a22:	b29b      	uxth	r3, r3
 8001a24:	f107 020c 	add.w	r2, r7, #12
 8001a28:	200a      	movs	r0, #10
 8001a2a:	9000      	str	r0, [sp, #0]
 8001a2c:	4803      	ldr	r0, [pc, #12]	@ (8001a3c <ssd1306_I2C_WriteMulti+0xc8>)
 8001a2e:	f000 fe79 	bl	8002724 <HAL_I2C_Master_Transmit>
}
 8001a32:	bf00      	nop
 8001a34:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd90      	pop	{r4, r7, pc}
 8001a3c:	200001f8 	.word	0x200001f8

08001a40 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af02      	add	r7, sp, #8
 8001a46:	4603      	mov	r3, r0
 8001a48:	71fb      	strb	r3, [r7, #7]
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	71bb      	strb	r3, [r7, #6]
 8001a4e:	4613      	mov	r3, r2
 8001a50:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001a52:	79bb      	ldrb	r3, [r7, #6]
 8001a54:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001a56:	797b      	ldrb	r3, [r7, #5]
 8001a58:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, 2, 10);
 8001a5a:	79fb      	ldrb	r3, [r7, #7]
 8001a5c:	b299      	uxth	r1, r3
 8001a5e:	f107 020c 	add.w	r2, r7, #12
 8001a62:	230a      	movs	r3, #10
 8001a64:	9300      	str	r3, [sp, #0]
 8001a66:	2302      	movs	r3, #2
 8001a68:	4803      	ldr	r0, [pc, #12]	@ (8001a78 <ssd1306_I2C_Write+0x38>)
 8001a6a:	f000 fe5b 	bl	8002724 <HAL_I2C_Master_Transmit>
}
 8001a6e:	bf00      	nop
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	200001f8 	.word	0x200001f8

08001a7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	607b      	str	r3, [r7, #4]
 8001a86:	4b10      	ldr	r3, [pc, #64]	@ (8001ac8 <HAL_MspInit+0x4c>)
 8001a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a8a:	4a0f      	ldr	r2, [pc, #60]	@ (8001ac8 <HAL_MspInit+0x4c>)
 8001a8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a90:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a92:	4b0d      	ldr	r3, [pc, #52]	@ (8001ac8 <HAL_MspInit+0x4c>)
 8001a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a9a:	607b      	str	r3, [r7, #4]
 8001a9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	603b      	str	r3, [r7, #0]
 8001aa2:	4b09      	ldr	r3, [pc, #36]	@ (8001ac8 <HAL_MspInit+0x4c>)
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa6:	4a08      	ldr	r2, [pc, #32]	@ (8001ac8 <HAL_MspInit+0x4c>)
 8001aa8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001aac:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aae:	4b06      	ldr	r3, [pc, #24]	@ (8001ac8 <HAL_MspInit+0x4c>)
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ab6:	603b      	str	r3, [r7, #0]
 8001ab8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aba:	bf00      	nop
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	40023800 	.word	0x40023800

08001acc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b08a      	sub	sp, #40	@ 0x28
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad4:	f107 0314 	add.w	r3, r7, #20
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	605a      	str	r2, [r3, #4]
 8001ade:	609a      	str	r2, [r3, #8]
 8001ae0:	60da      	str	r2, [r3, #12]
 8001ae2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a19      	ldr	r2, [pc, #100]	@ (8001b50 <HAL_I2C_MspInit+0x84>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d12c      	bne.n	8001b48 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	613b      	str	r3, [r7, #16]
 8001af2:	4b18      	ldr	r3, [pc, #96]	@ (8001b54 <HAL_I2C_MspInit+0x88>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af6:	4a17      	ldr	r2, [pc, #92]	@ (8001b54 <HAL_I2C_MspInit+0x88>)
 8001af8:	f043 0302 	orr.w	r3, r3, #2
 8001afc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001afe:	4b15      	ldr	r3, [pc, #84]	@ (8001b54 <HAL_I2C_MspInit+0x88>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	613b      	str	r3, [r7, #16]
 8001b08:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b0a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001b0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b10:	2312      	movs	r3, #18
 8001b12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b14:	2300      	movs	r3, #0
 8001b16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b1c:	2304      	movs	r3, #4
 8001b1e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b20:	f107 0314 	add.w	r3, r7, #20
 8001b24:	4619      	mov	r1, r3
 8001b26:	480c      	ldr	r0, [pc, #48]	@ (8001b58 <HAL_I2C_MspInit+0x8c>)
 8001b28:	f000 faf2 	bl	8002110 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	4b08      	ldr	r3, [pc, #32]	@ (8001b54 <HAL_I2C_MspInit+0x88>)
 8001b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b34:	4a07      	ldr	r2, [pc, #28]	@ (8001b54 <HAL_I2C_MspInit+0x88>)
 8001b36:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001b3a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b3c:	4b05      	ldr	r3, [pc, #20]	@ (8001b54 <HAL_I2C_MspInit+0x88>)
 8001b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b44:	60fb      	str	r3, [r7, #12]
 8001b46:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001b48:	bf00      	nop
 8001b4a:	3728      	adds	r7, #40	@ 0x28
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40005400 	.word	0x40005400
 8001b54:	40023800 	.word	0x40023800
 8001b58:	40020400 	.word	0x40020400

08001b5c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b08a      	sub	sp, #40	@ 0x28
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b64:	f107 0314 	add.w	r3, r7, #20
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	605a      	str	r2, [r3, #4]
 8001b6e:	609a      	str	r2, [r3, #8]
 8001b70:	60da      	str	r2, [r3, #12]
 8001b72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a19      	ldr	r2, [pc, #100]	@ (8001be0 <HAL_UART_MspInit+0x84>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d12b      	bne.n	8001bd6 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	613b      	str	r3, [r7, #16]
 8001b82:	4b18      	ldr	r3, [pc, #96]	@ (8001be4 <HAL_UART_MspInit+0x88>)
 8001b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b86:	4a17      	ldr	r2, [pc, #92]	@ (8001be4 <HAL_UART_MspInit+0x88>)
 8001b88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b8e:	4b15      	ldr	r3, [pc, #84]	@ (8001be4 <HAL_UART_MspInit+0x88>)
 8001b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b96:	613b      	str	r3, [r7, #16]
 8001b98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	4b11      	ldr	r3, [pc, #68]	@ (8001be4 <HAL_UART_MspInit+0x88>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba2:	4a10      	ldr	r2, [pc, #64]	@ (8001be4 <HAL_UART_MspInit+0x88>)
 8001ba4:	f043 0301 	orr.w	r3, r3, #1
 8001ba8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001baa:	4b0e      	ldr	r3, [pc, #56]	@ (8001be4 <HAL_UART_MspInit+0x88>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001bb6:	230c      	movs	r3, #12
 8001bb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bc6:	2307      	movs	r3, #7
 8001bc8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bca:	f107 0314 	add.w	r3, r7, #20
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4805      	ldr	r0, [pc, #20]	@ (8001be8 <HAL_UART_MspInit+0x8c>)
 8001bd2:	f000 fa9d 	bl	8002110 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001bd6:	bf00      	nop
 8001bd8:	3728      	adds	r7, #40	@ 0x28
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40004400 	.word	0x40004400
 8001be4:	40023800 	.word	0x40023800
 8001be8:	40020000 	.word	0x40020000

08001bec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bf0:	bf00      	nop
 8001bf2:	e7fd      	b.n	8001bf0 <NMI_Handler+0x4>

08001bf4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bf8:	bf00      	nop
 8001bfa:	e7fd      	b.n	8001bf8 <HardFault_Handler+0x4>

08001bfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c00:	bf00      	nop
 8001c02:	e7fd      	b.n	8001c00 <MemManage_Handler+0x4>

08001c04 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c08:	bf00      	nop
 8001c0a:	e7fd      	b.n	8001c08 <BusFault_Handler+0x4>

08001c0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c10:	bf00      	nop
 8001c12:	e7fd      	b.n	8001c10 <UsageFault_Handler+0x4>

08001c14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c18:	bf00      	nop
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c22:	b480      	push	{r7}
 8001c24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c26:	bf00      	nop
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c34:	bf00      	nop
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr

08001c3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c42:	f000 f93b 	bl	8001ebc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c46:	bf00      	nop
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	af00      	add	r7, sp, #0
  return 1;
 8001c4e:	2301      	movs	r3, #1
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr

08001c5a <_kill>:

int _kill(int pid, int sig)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b082      	sub	sp, #8
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
 8001c62:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c64:	f003 fc06 	bl	8005474 <__errno>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2216      	movs	r2, #22
 8001c6c:	601a      	str	r2, [r3, #0]
  return -1;
 8001c6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <_exit>:

void _exit (int status)
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b082      	sub	sp, #8
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c82:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f7ff ffe7 	bl	8001c5a <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c8c:	bf00      	nop
 8001c8e:	e7fd      	b.n	8001c8c <_exit+0x12>

08001c90 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b086      	sub	sp, #24
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	617b      	str	r3, [r7, #20]
 8001ca0:	e00a      	b.n	8001cb8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ca2:	f3af 8000 	nop.w
 8001ca6:	4601      	mov	r1, r0
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	1c5a      	adds	r2, r3, #1
 8001cac:	60ba      	str	r2, [r7, #8]
 8001cae:	b2ca      	uxtb	r2, r1
 8001cb0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	617b      	str	r3, [r7, #20]
 8001cb8:	697a      	ldr	r2, [r7, #20]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	dbf0      	blt.n	8001ca2 <_read+0x12>
  }

  return len;
 8001cc0:	687b      	ldr	r3, [r7, #4]
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3718      	adds	r7, #24
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <_close>:
  }
  return len;
}

int _close(int file)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	b083      	sub	sp, #12
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cd2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr

08001ce2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	b083      	sub	sp, #12
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
 8001cea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cf2:	605a      	str	r2, [r3, #4]
  return 0;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	370c      	adds	r7, #12
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr

08001d02 <_isatty>:

int _isatty(int file)
{
 8001d02:	b480      	push	{r7}
 8001d04:	b083      	sub	sp, #12
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d0a:	2301      	movs	r3, #1
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3714      	adds	r7, #20
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
	...

08001d34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d3c:	4a14      	ldr	r2, [pc, #80]	@ (8001d90 <_sbrk+0x5c>)
 8001d3e:	4b15      	ldr	r3, [pc, #84]	@ (8001d94 <_sbrk+0x60>)
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d48:	4b13      	ldr	r3, [pc, #76]	@ (8001d98 <_sbrk+0x64>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d102      	bne.n	8001d56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d50:	4b11      	ldr	r3, [pc, #68]	@ (8001d98 <_sbrk+0x64>)
 8001d52:	4a12      	ldr	r2, [pc, #72]	@ (8001d9c <_sbrk+0x68>)
 8001d54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d56:	4b10      	ldr	r3, [pc, #64]	@ (8001d98 <_sbrk+0x64>)
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d207      	bcs.n	8001d74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d64:	f003 fb86 	bl	8005474 <__errno>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	220c      	movs	r2, #12
 8001d6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d72:	e009      	b.n	8001d88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d74:	4b08      	ldr	r3, [pc, #32]	@ (8001d98 <_sbrk+0x64>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d7a:	4b07      	ldr	r3, [pc, #28]	@ (8001d98 <_sbrk+0x64>)
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4413      	add	r3, r2
 8001d82:	4a05      	ldr	r2, [pc, #20]	@ (8001d98 <_sbrk+0x64>)
 8001d84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d86:	68fb      	ldr	r3, [r7, #12]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3718      	adds	r7, #24
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	20020000 	.word	0x20020000
 8001d94:	00000400 	.word	0x00000400
 8001d98:	2000069c 	.word	0x2000069c
 8001d9c:	200007f0 	.word	0x200007f0

08001da0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001da4:	4b06      	ldr	r3, [pc, #24]	@ (8001dc0 <SystemInit+0x20>)
 8001da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001daa:	4a05      	ldr	r2, [pc, #20]	@ (8001dc0 <SystemInit+0x20>)
 8001dac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001db0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001db4:	bf00      	nop
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
 8001dbe:	bf00      	nop
 8001dc0:	e000ed00 	.word	0xe000ed00

08001dc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001dc4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001dfc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001dc8:	f7ff ffea 	bl	8001da0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001dcc:	480c      	ldr	r0, [pc, #48]	@ (8001e00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001dce:	490d      	ldr	r1, [pc, #52]	@ (8001e04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001dd0:	4a0d      	ldr	r2, [pc, #52]	@ (8001e08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001dd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dd4:	e002      	b.n	8001ddc <LoopCopyDataInit>

08001dd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dda:	3304      	adds	r3, #4

08001ddc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ddc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001de0:	d3f9      	bcc.n	8001dd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001de2:	4a0a      	ldr	r2, [pc, #40]	@ (8001e0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001de4:	4c0a      	ldr	r4, [pc, #40]	@ (8001e10 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001de6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001de8:	e001      	b.n	8001dee <LoopFillZerobss>

08001dea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dec:	3204      	adds	r2, #4

08001dee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001df0:	d3fb      	bcc.n	8001dea <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001df2:	f003 fb45 	bl	8005480 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001df6:	f7ff f8a1 	bl	8000f3c <main>
  bx  lr    
 8001dfa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001dfc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e04:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001e08:	080087cc 	.word	0x080087cc
  ldr r2, =_sbss
 8001e0c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001e10:	200007f0 	.word	0x200007f0

08001e14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e14:	e7fe      	b.n	8001e14 <ADC_IRQHandler>
	...

08001e18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e1c:	4b0e      	ldr	r3, [pc, #56]	@ (8001e58 <HAL_Init+0x40>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a0d      	ldr	r2, [pc, #52]	@ (8001e58 <HAL_Init+0x40>)
 8001e22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e28:	4b0b      	ldr	r3, [pc, #44]	@ (8001e58 <HAL_Init+0x40>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a0a      	ldr	r2, [pc, #40]	@ (8001e58 <HAL_Init+0x40>)
 8001e2e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e34:	4b08      	ldr	r3, [pc, #32]	@ (8001e58 <HAL_Init+0x40>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a07      	ldr	r2, [pc, #28]	@ (8001e58 <HAL_Init+0x40>)
 8001e3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e40:	2003      	movs	r0, #3
 8001e42:	f000 f931 	bl	80020a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e46:	200f      	movs	r0, #15
 8001e48:	f000 f808 	bl	8001e5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e4c:	f7ff fe16 	bl	8001a7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	40023c00 	.word	0x40023c00

08001e5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e64:	4b12      	ldr	r3, [pc, #72]	@ (8001eb0 <HAL_InitTick+0x54>)
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	4b12      	ldr	r3, [pc, #72]	@ (8001eb4 <HAL_InitTick+0x58>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e72:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f000 f93b 	bl	80020f6 <HAL_SYSTICK_Config>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e00e      	b.n	8001ea8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2b0f      	cmp	r3, #15
 8001e8e:	d80a      	bhi.n	8001ea6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e90:	2200      	movs	r2, #0
 8001e92:	6879      	ldr	r1, [r7, #4]
 8001e94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001e98:	f000 f911 	bl	80020be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e9c:	4a06      	ldr	r2, [pc, #24]	@ (8001eb8 <HAL_InitTick+0x5c>)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	e000      	b.n	8001ea8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3708      	adds	r7, #8
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	20000008 	.word	0x20000008
 8001eb4:	20000010 	.word	0x20000010
 8001eb8:	2000000c 	.word	0x2000000c

08001ebc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ec0:	4b06      	ldr	r3, [pc, #24]	@ (8001edc <HAL_IncTick+0x20>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	4b06      	ldr	r3, [pc, #24]	@ (8001ee0 <HAL_IncTick+0x24>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4413      	add	r3, r2
 8001ecc:	4a04      	ldr	r2, [pc, #16]	@ (8001ee0 <HAL_IncTick+0x24>)
 8001ece:	6013      	str	r3, [r2, #0]
}
 8001ed0:	bf00      	nop
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	20000010 	.word	0x20000010
 8001ee0:	200006a0 	.word	0x200006a0

08001ee4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ee8:	4b03      	ldr	r3, [pc, #12]	@ (8001ef8 <HAL_GetTick+0x14>)
 8001eea:	681b      	ldr	r3, [r3, #0]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	200006a0 	.word	0x200006a0

08001efc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f04:	f7ff ffee 	bl	8001ee4 <HAL_GetTick>
 8001f08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001f14:	d005      	beq.n	8001f22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f16:	4b0a      	ldr	r3, [pc, #40]	@ (8001f40 <HAL_Delay+0x44>)
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	4413      	add	r3, r2
 8001f20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f22:	bf00      	nop
 8001f24:	f7ff ffde 	bl	8001ee4 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	68fa      	ldr	r2, [r7, #12]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d8f7      	bhi.n	8001f24 <HAL_Delay+0x28>
  {
  }
}
 8001f34:	bf00      	nop
 8001f36:	bf00      	nop
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	20000010 	.word	0x20000010

08001f44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f003 0307 	and.w	r3, r3, #7
 8001f52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f54:	4b0c      	ldr	r3, [pc, #48]	@ (8001f88 <__NVIC_SetPriorityGrouping+0x44>)
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f5a:	68ba      	ldr	r2, [r7, #8]
 8001f5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f60:	4013      	ands	r3, r2
 8001f62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f76:	4a04      	ldr	r2, [pc, #16]	@ (8001f88 <__NVIC_SetPriorityGrouping+0x44>)
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	60d3      	str	r3, [r2, #12]
}
 8001f7c:	bf00      	nop
 8001f7e:	3714      	adds	r7, #20
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	e000ed00 	.word	0xe000ed00

08001f8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f90:	4b04      	ldr	r3, [pc, #16]	@ (8001fa4 <__NVIC_GetPriorityGrouping+0x18>)
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	0a1b      	lsrs	r3, r3, #8
 8001f96:	f003 0307 	and.w	r3, r3, #7
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr
 8001fa4:	e000ed00 	.word	0xe000ed00

08001fa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	4603      	mov	r3, r0
 8001fb0:	6039      	str	r1, [r7, #0]
 8001fb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	db0a      	blt.n	8001fd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	b2da      	uxtb	r2, r3
 8001fc0:	490c      	ldr	r1, [pc, #48]	@ (8001ff4 <__NVIC_SetPriority+0x4c>)
 8001fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc6:	0112      	lsls	r2, r2, #4
 8001fc8:	b2d2      	uxtb	r2, r2
 8001fca:	440b      	add	r3, r1
 8001fcc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fd0:	e00a      	b.n	8001fe8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	b2da      	uxtb	r2, r3
 8001fd6:	4908      	ldr	r1, [pc, #32]	@ (8001ff8 <__NVIC_SetPriority+0x50>)
 8001fd8:	79fb      	ldrb	r3, [r7, #7]
 8001fda:	f003 030f 	and.w	r3, r3, #15
 8001fde:	3b04      	subs	r3, #4
 8001fe0:	0112      	lsls	r2, r2, #4
 8001fe2:	b2d2      	uxtb	r2, r2
 8001fe4:	440b      	add	r3, r1
 8001fe6:	761a      	strb	r2, [r3, #24]
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr
 8001ff4:	e000e100 	.word	0xe000e100
 8001ff8:	e000ed00 	.word	0xe000ed00

08001ffc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b089      	sub	sp, #36	@ 0x24
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f003 0307 	and.w	r3, r3, #7
 800200e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	f1c3 0307 	rsb	r3, r3, #7
 8002016:	2b04      	cmp	r3, #4
 8002018:	bf28      	it	cs
 800201a:	2304      	movcs	r3, #4
 800201c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	3304      	adds	r3, #4
 8002022:	2b06      	cmp	r3, #6
 8002024:	d902      	bls.n	800202c <NVIC_EncodePriority+0x30>
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	3b03      	subs	r3, #3
 800202a:	e000      	b.n	800202e <NVIC_EncodePriority+0x32>
 800202c:	2300      	movs	r3, #0
 800202e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002030:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	fa02 f303 	lsl.w	r3, r2, r3
 800203a:	43da      	mvns	r2, r3
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	401a      	ands	r2, r3
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002044:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	fa01 f303 	lsl.w	r3, r1, r3
 800204e:	43d9      	mvns	r1, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002054:	4313      	orrs	r3, r2
         );
}
 8002056:	4618      	mov	r0, r3
 8002058:	3724      	adds	r7, #36	@ 0x24
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
	...

08002064 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3b01      	subs	r3, #1
 8002070:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002074:	d301      	bcc.n	800207a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002076:	2301      	movs	r3, #1
 8002078:	e00f      	b.n	800209a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800207a:	4a0a      	ldr	r2, [pc, #40]	@ (80020a4 <SysTick_Config+0x40>)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	3b01      	subs	r3, #1
 8002080:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002082:	210f      	movs	r1, #15
 8002084:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002088:	f7ff ff8e 	bl	8001fa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800208c:	4b05      	ldr	r3, [pc, #20]	@ (80020a4 <SysTick_Config+0x40>)
 800208e:	2200      	movs	r2, #0
 8002090:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002092:	4b04      	ldr	r3, [pc, #16]	@ (80020a4 <SysTick_Config+0x40>)
 8002094:	2207      	movs	r2, #7
 8002096:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3708      	adds	r7, #8
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	e000e010 	.word	0xe000e010

080020a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f7ff ff47 	bl	8001f44 <__NVIC_SetPriorityGrouping>
}
 80020b6:	bf00      	nop
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020be:	b580      	push	{r7, lr}
 80020c0:	b086      	sub	sp, #24
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	4603      	mov	r3, r0
 80020c6:	60b9      	str	r1, [r7, #8]
 80020c8:	607a      	str	r2, [r7, #4]
 80020ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020cc:	2300      	movs	r3, #0
 80020ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020d0:	f7ff ff5c 	bl	8001f8c <__NVIC_GetPriorityGrouping>
 80020d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	68b9      	ldr	r1, [r7, #8]
 80020da:	6978      	ldr	r0, [r7, #20]
 80020dc:	f7ff ff8e 	bl	8001ffc <NVIC_EncodePriority>
 80020e0:	4602      	mov	r2, r0
 80020e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020e6:	4611      	mov	r1, r2
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff ff5d 	bl	8001fa8 <__NVIC_SetPriority>
}
 80020ee:	bf00      	nop
 80020f0:	3718      	adds	r7, #24
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b082      	sub	sp, #8
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f7ff ffb0 	bl	8002064 <SysTick_Config>
 8002104:	4603      	mov	r3, r0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
	...

08002110 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002110:	b480      	push	{r7}
 8002112:	b089      	sub	sp, #36	@ 0x24
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800211a:	2300      	movs	r3, #0
 800211c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800211e:	2300      	movs	r3, #0
 8002120:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002122:	2300      	movs	r3, #0
 8002124:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002126:	2300      	movs	r3, #0
 8002128:	61fb      	str	r3, [r7, #28]
 800212a:	e165      	b.n	80023f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800212c:	2201      	movs	r2, #1
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	697a      	ldr	r2, [r7, #20]
 800213c:	4013      	ands	r3, r2
 800213e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002140:	693a      	ldr	r2, [r7, #16]
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	429a      	cmp	r2, r3
 8002146:	f040 8154 	bne.w	80023f2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f003 0303 	and.w	r3, r3, #3
 8002152:	2b01      	cmp	r3, #1
 8002154:	d005      	beq.n	8002162 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800215e:	2b02      	cmp	r3, #2
 8002160:	d130      	bne.n	80021c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	2203      	movs	r2, #3
 800216e:	fa02 f303 	lsl.w	r3, r2, r3
 8002172:	43db      	mvns	r3, r3
 8002174:	69ba      	ldr	r2, [r7, #24]
 8002176:	4013      	ands	r3, r2
 8002178:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	68da      	ldr	r2, [r3, #12]
 800217e:	69fb      	ldr	r3, [r7, #28]
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	fa02 f303 	lsl.w	r3, r2, r3
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	4313      	orrs	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002198:	2201      	movs	r2, #1
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	fa02 f303 	lsl.w	r3, r2, r3
 80021a0:	43db      	mvns	r3, r3
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	4013      	ands	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	091b      	lsrs	r3, r3, #4
 80021ae:	f003 0201 	and.w	r2, r3, #1
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	69ba      	ldr	r2, [r7, #24]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f003 0303 	and.w	r3, r3, #3
 80021cc:	2b03      	cmp	r3, #3
 80021ce:	d017      	beq.n	8002200 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	2203      	movs	r2, #3
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	43db      	mvns	r3, r3
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	4013      	ands	r3, r2
 80021e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	689a      	ldr	r2, [r3, #8]
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	005b      	lsls	r3, r3, #1
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f003 0303 	and.w	r3, r3, #3
 8002208:	2b02      	cmp	r3, #2
 800220a:	d123      	bne.n	8002254 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	08da      	lsrs	r2, r3, #3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	3208      	adds	r2, #8
 8002214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002218:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	f003 0307 	and.w	r3, r3, #7
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	220f      	movs	r2, #15
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	43db      	mvns	r3, r3
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	4013      	ands	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	691a      	ldr	r2, [r3, #16]
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	f003 0307 	and.w	r3, r3, #7
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	4313      	orrs	r3, r2
 8002244:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	08da      	lsrs	r2, r3, #3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	3208      	adds	r2, #8
 800224e:	69b9      	ldr	r1, [r7, #24]
 8002250:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	2203      	movs	r2, #3
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	43db      	mvns	r3, r3
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	4013      	ands	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f003 0203 	and.w	r2, r3, #3
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4313      	orrs	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002290:	2b00      	cmp	r3, #0
 8002292:	f000 80ae 	beq.w	80023f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002296:	2300      	movs	r3, #0
 8002298:	60fb      	str	r3, [r7, #12]
 800229a:	4b5d      	ldr	r3, [pc, #372]	@ (8002410 <HAL_GPIO_Init+0x300>)
 800229c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800229e:	4a5c      	ldr	r2, [pc, #368]	@ (8002410 <HAL_GPIO_Init+0x300>)
 80022a0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80022a6:	4b5a      	ldr	r3, [pc, #360]	@ (8002410 <HAL_GPIO_Init+0x300>)
 80022a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022ae:	60fb      	str	r3, [r7, #12]
 80022b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022b2:	4a58      	ldr	r2, [pc, #352]	@ (8002414 <HAL_GPIO_Init+0x304>)
 80022b4:	69fb      	ldr	r3, [r7, #28]
 80022b6:	089b      	lsrs	r3, r3, #2
 80022b8:	3302      	adds	r3, #2
 80022ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	f003 0303 	and.w	r3, r3, #3
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	220f      	movs	r2, #15
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	43db      	mvns	r3, r3
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	4013      	ands	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a4f      	ldr	r2, [pc, #316]	@ (8002418 <HAL_GPIO_Init+0x308>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d025      	beq.n	800232a <HAL_GPIO_Init+0x21a>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a4e      	ldr	r2, [pc, #312]	@ (800241c <HAL_GPIO_Init+0x30c>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d01f      	beq.n	8002326 <HAL_GPIO_Init+0x216>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a4d      	ldr	r2, [pc, #308]	@ (8002420 <HAL_GPIO_Init+0x310>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d019      	beq.n	8002322 <HAL_GPIO_Init+0x212>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a4c      	ldr	r2, [pc, #304]	@ (8002424 <HAL_GPIO_Init+0x314>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d013      	beq.n	800231e <HAL_GPIO_Init+0x20e>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a4b      	ldr	r2, [pc, #300]	@ (8002428 <HAL_GPIO_Init+0x318>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d00d      	beq.n	800231a <HAL_GPIO_Init+0x20a>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a4a      	ldr	r2, [pc, #296]	@ (800242c <HAL_GPIO_Init+0x31c>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d007      	beq.n	8002316 <HAL_GPIO_Init+0x206>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a49      	ldr	r2, [pc, #292]	@ (8002430 <HAL_GPIO_Init+0x320>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d101      	bne.n	8002312 <HAL_GPIO_Init+0x202>
 800230e:	2306      	movs	r3, #6
 8002310:	e00c      	b.n	800232c <HAL_GPIO_Init+0x21c>
 8002312:	2307      	movs	r3, #7
 8002314:	e00a      	b.n	800232c <HAL_GPIO_Init+0x21c>
 8002316:	2305      	movs	r3, #5
 8002318:	e008      	b.n	800232c <HAL_GPIO_Init+0x21c>
 800231a:	2304      	movs	r3, #4
 800231c:	e006      	b.n	800232c <HAL_GPIO_Init+0x21c>
 800231e:	2303      	movs	r3, #3
 8002320:	e004      	b.n	800232c <HAL_GPIO_Init+0x21c>
 8002322:	2302      	movs	r3, #2
 8002324:	e002      	b.n	800232c <HAL_GPIO_Init+0x21c>
 8002326:	2301      	movs	r3, #1
 8002328:	e000      	b.n	800232c <HAL_GPIO_Init+0x21c>
 800232a:	2300      	movs	r3, #0
 800232c:	69fa      	ldr	r2, [r7, #28]
 800232e:	f002 0203 	and.w	r2, r2, #3
 8002332:	0092      	lsls	r2, r2, #2
 8002334:	4093      	lsls	r3, r2
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	4313      	orrs	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800233c:	4935      	ldr	r1, [pc, #212]	@ (8002414 <HAL_GPIO_Init+0x304>)
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	089b      	lsrs	r3, r3, #2
 8002342:	3302      	adds	r3, #2
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800234a:	4b3a      	ldr	r3, [pc, #232]	@ (8002434 <HAL_GPIO_Init+0x324>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	43db      	mvns	r3, r3
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	4013      	ands	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d003      	beq.n	800236e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	4313      	orrs	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800236e:	4a31      	ldr	r2, [pc, #196]	@ (8002434 <HAL_GPIO_Init+0x324>)
 8002370:	69bb      	ldr	r3, [r7, #24]
 8002372:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002374:	4b2f      	ldr	r3, [pc, #188]	@ (8002434 <HAL_GPIO_Init+0x324>)
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	43db      	mvns	r3, r3
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	4013      	ands	r3, r2
 8002382:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d003      	beq.n	8002398 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	4313      	orrs	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002398:	4a26      	ldr	r2, [pc, #152]	@ (8002434 <HAL_GPIO_Init+0x324>)
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800239e:	4b25      	ldr	r3, [pc, #148]	@ (8002434 <HAL_GPIO_Init+0x324>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	43db      	mvns	r3, r3
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	4013      	ands	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d003      	beq.n	80023c2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	4313      	orrs	r3, r2
 80023c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023c2:	4a1c      	ldr	r2, [pc, #112]	@ (8002434 <HAL_GPIO_Init+0x324>)
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023c8:	4b1a      	ldr	r3, [pc, #104]	@ (8002434 <HAL_GPIO_Init+0x324>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	43db      	mvns	r3, r3
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	4013      	ands	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d003      	beq.n	80023ec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023ec:	4a11      	ldr	r2, [pc, #68]	@ (8002434 <HAL_GPIO_Init+0x324>)
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	3301      	adds	r3, #1
 80023f6:	61fb      	str	r3, [r7, #28]
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	2b0f      	cmp	r3, #15
 80023fc:	f67f ae96 	bls.w	800212c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002400:	bf00      	nop
 8002402:	bf00      	nop
 8002404:	3724      	adds	r7, #36	@ 0x24
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	40023800 	.word	0x40023800
 8002414:	40013800 	.word	0x40013800
 8002418:	40020000 	.word	0x40020000
 800241c:	40020400 	.word	0x40020400
 8002420:	40020800 	.word	0x40020800
 8002424:	40020c00 	.word	0x40020c00
 8002428:	40021000 	.word	0x40021000
 800242c:	40021400 	.word	0x40021400
 8002430:	40021800 	.word	0x40021800
 8002434:	40013c00 	.word	0x40013c00

08002438 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	460b      	mov	r3, r1
 8002442:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	691a      	ldr	r2, [r3, #16]
 8002448:	887b      	ldrh	r3, [r7, #2]
 800244a:	4013      	ands	r3, r2
 800244c:	2b00      	cmp	r3, #0
 800244e:	d002      	beq.n	8002456 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002450:	2301      	movs	r3, #1
 8002452:	73fb      	strb	r3, [r7, #15]
 8002454:	e001      	b.n	800245a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002456:	2300      	movs	r3, #0
 8002458:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800245a:	7bfb      	ldrb	r3, [r7, #15]
}
 800245c:	4618      	mov	r0, r3
 800245e:	3714      	adds	r7, #20
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	460b      	mov	r3, r1
 8002472:	807b      	strh	r3, [r7, #2]
 8002474:	4613      	mov	r3, r2
 8002476:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002478:	787b      	ldrb	r3, [r7, #1]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d003      	beq.n	8002486 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800247e:	887a      	ldrh	r2, [r7, #2]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002484:	e003      	b.n	800248e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002486:	887b      	ldrh	r3, [r7, #2]
 8002488:	041a      	lsls	r2, r3, #16
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	619a      	str	r2, [r3, #24]
}
 800248e:	bf00      	nop
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
	...

0800249c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e12b      	b.n	8002706 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d106      	bne.n	80024c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f7ff fb02 	bl	8001acc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2224      	movs	r2, #36	@ 0x24
 80024cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f022 0201 	bic.w	r2, r2, #1
 80024de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80024ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80024fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002500:	f001 f9e6 	bl	80038d0 <HAL_RCC_GetPCLK1Freq>
 8002504:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	4a81      	ldr	r2, [pc, #516]	@ (8002710 <HAL_I2C_Init+0x274>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d807      	bhi.n	8002520 <HAL_I2C_Init+0x84>
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	4a80      	ldr	r2, [pc, #512]	@ (8002714 <HAL_I2C_Init+0x278>)
 8002514:	4293      	cmp	r3, r2
 8002516:	bf94      	ite	ls
 8002518:	2301      	movls	r3, #1
 800251a:	2300      	movhi	r3, #0
 800251c:	b2db      	uxtb	r3, r3
 800251e:	e006      	b.n	800252e <HAL_I2C_Init+0x92>
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	4a7d      	ldr	r2, [pc, #500]	@ (8002718 <HAL_I2C_Init+0x27c>)
 8002524:	4293      	cmp	r3, r2
 8002526:	bf94      	ite	ls
 8002528:	2301      	movls	r3, #1
 800252a:	2300      	movhi	r3, #0
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e0e7      	b.n	8002706 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	4a78      	ldr	r2, [pc, #480]	@ (800271c <HAL_I2C_Init+0x280>)
 800253a:	fba2 2303 	umull	r2, r3, r2, r3
 800253e:	0c9b      	lsrs	r3, r3, #18
 8002540:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	68ba      	ldr	r2, [r7, #8]
 8002552:	430a      	orrs	r2, r1
 8002554:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	6a1b      	ldr	r3, [r3, #32]
 800255c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	4a6a      	ldr	r2, [pc, #424]	@ (8002710 <HAL_I2C_Init+0x274>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d802      	bhi.n	8002570 <HAL_I2C_Init+0xd4>
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	3301      	adds	r3, #1
 800256e:	e009      	b.n	8002584 <HAL_I2C_Init+0xe8>
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002576:	fb02 f303 	mul.w	r3, r2, r3
 800257a:	4a69      	ldr	r2, [pc, #420]	@ (8002720 <HAL_I2C_Init+0x284>)
 800257c:	fba2 2303 	umull	r2, r3, r2, r3
 8002580:	099b      	lsrs	r3, r3, #6
 8002582:	3301      	adds	r3, #1
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	6812      	ldr	r2, [r2, #0]
 8002588:	430b      	orrs	r3, r1
 800258a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	69db      	ldr	r3, [r3, #28]
 8002592:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002596:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	495c      	ldr	r1, [pc, #368]	@ (8002710 <HAL_I2C_Init+0x274>)
 80025a0:	428b      	cmp	r3, r1
 80025a2:	d819      	bhi.n	80025d8 <HAL_I2C_Init+0x13c>
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	1e59      	subs	r1, r3, #1
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80025b2:	1c59      	adds	r1, r3, #1
 80025b4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80025b8:	400b      	ands	r3, r1
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00a      	beq.n	80025d4 <HAL_I2C_Init+0x138>
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	1e59      	subs	r1, r3, #1
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	005b      	lsls	r3, r3, #1
 80025c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80025cc:	3301      	adds	r3, #1
 80025ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025d2:	e051      	b.n	8002678 <HAL_I2C_Init+0x1dc>
 80025d4:	2304      	movs	r3, #4
 80025d6:	e04f      	b.n	8002678 <HAL_I2C_Init+0x1dc>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d111      	bne.n	8002604 <HAL_I2C_Init+0x168>
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	1e58      	subs	r0, r3, #1
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6859      	ldr	r1, [r3, #4]
 80025e8:	460b      	mov	r3, r1
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	440b      	add	r3, r1
 80025ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80025f2:	3301      	adds	r3, #1
 80025f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	bf0c      	ite	eq
 80025fc:	2301      	moveq	r3, #1
 80025fe:	2300      	movne	r3, #0
 8002600:	b2db      	uxtb	r3, r3
 8002602:	e012      	b.n	800262a <HAL_I2C_Init+0x18e>
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	1e58      	subs	r0, r3, #1
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6859      	ldr	r1, [r3, #4]
 800260c:	460b      	mov	r3, r1
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	440b      	add	r3, r1
 8002612:	0099      	lsls	r1, r3, #2
 8002614:	440b      	add	r3, r1
 8002616:	fbb0 f3f3 	udiv	r3, r0, r3
 800261a:	3301      	adds	r3, #1
 800261c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002620:	2b00      	cmp	r3, #0
 8002622:	bf0c      	ite	eq
 8002624:	2301      	moveq	r3, #1
 8002626:	2300      	movne	r3, #0
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <HAL_I2C_Init+0x196>
 800262e:	2301      	movs	r3, #1
 8002630:	e022      	b.n	8002678 <HAL_I2C_Init+0x1dc>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d10e      	bne.n	8002658 <HAL_I2C_Init+0x1bc>
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	1e58      	subs	r0, r3, #1
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6859      	ldr	r1, [r3, #4]
 8002642:	460b      	mov	r3, r1
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	440b      	add	r3, r1
 8002648:	fbb0 f3f3 	udiv	r3, r0, r3
 800264c:	3301      	adds	r3, #1
 800264e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002652:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002656:	e00f      	b.n	8002678 <HAL_I2C_Init+0x1dc>
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	1e58      	subs	r0, r3, #1
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6859      	ldr	r1, [r3, #4]
 8002660:	460b      	mov	r3, r1
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	440b      	add	r3, r1
 8002666:	0099      	lsls	r1, r3, #2
 8002668:	440b      	add	r3, r1
 800266a:	fbb0 f3f3 	udiv	r3, r0, r3
 800266e:	3301      	adds	r3, #1
 8002670:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002674:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002678:	6879      	ldr	r1, [r7, #4]
 800267a:	6809      	ldr	r1, [r1, #0]
 800267c:	4313      	orrs	r3, r2
 800267e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	69da      	ldr	r2, [r3, #28]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a1b      	ldr	r3, [r3, #32]
 8002692:	431a      	orrs	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	430a      	orrs	r2, r1
 800269a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80026a6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	6911      	ldr	r1, [r2, #16]
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	68d2      	ldr	r2, [r2, #12]
 80026b2:	4311      	orrs	r1, r2
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	6812      	ldr	r2, [r2, #0]
 80026b8:	430b      	orrs	r3, r1
 80026ba:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	695a      	ldr	r2, [r3, #20]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	699b      	ldr	r3, [r3, #24]
 80026ce:	431a      	orrs	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	430a      	orrs	r2, r1
 80026d6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f042 0201 	orr.w	r2, r2, #1
 80026e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2220      	movs	r2, #32
 80026f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	3710      	adds	r7, #16
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	000186a0 	.word	0x000186a0
 8002714:	001e847f 	.word	0x001e847f
 8002718:	003d08ff 	.word	0x003d08ff
 800271c:	431bde83 	.word	0x431bde83
 8002720:	10624dd3 	.word	0x10624dd3

08002724 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b088      	sub	sp, #32
 8002728:	af02      	add	r7, sp, #8
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	607a      	str	r2, [r7, #4]
 800272e:	461a      	mov	r2, r3
 8002730:	460b      	mov	r3, r1
 8002732:	817b      	strh	r3, [r7, #10]
 8002734:	4613      	mov	r3, r2
 8002736:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002738:	f7ff fbd4 	bl	8001ee4 <HAL_GetTick>
 800273c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b20      	cmp	r3, #32
 8002748:	f040 80e0 	bne.w	800290c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	9300      	str	r3, [sp, #0]
 8002750:	2319      	movs	r3, #25
 8002752:	2201      	movs	r2, #1
 8002754:	4970      	ldr	r1, [pc, #448]	@ (8002918 <HAL_I2C_Master_Transmit+0x1f4>)
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f000 fd92 	bl	8003280 <I2C_WaitOnFlagUntilTimeout>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002762:	2302      	movs	r3, #2
 8002764:	e0d3      	b.n	800290e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800276c:	2b01      	cmp	r3, #1
 800276e:	d101      	bne.n	8002774 <HAL_I2C_Master_Transmit+0x50>
 8002770:	2302      	movs	r3, #2
 8002772:	e0cc      	b.n	800290e <HAL_I2C_Master_Transmit+0x1ea>
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	2b01      	cmp	r3, #1
 8002788:	d007      	beq.n	800279a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f042 0201 	orr.w	r2, r2, #1
 8002798:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027a8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2221      	movs	r2, #33	@ 0x21
 80027ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2210      	movs	r2, #16
 80027b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2200      	movs	r2, #0
 80027be:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	893a      	ldrh	r2, [r7, #8]
 80027ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027d0:	b29a      	uxth	r2, r3
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	4a50      	ldr	r2, [pc, #320]	@ (800291c <HAL_I2C_Master_Transmit+0x1f8>)
 80027da:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80027dc:	8979      	ldrh	r1, [r7, #10]
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	6a3a      	ldr	r2, [r7, #32]
 80027e2:	68f8      	ldr	r0, [r7, #12]
 80027e4:	f000 fbfc 	bl	8002fe0 <I2C_MasterRequestWrite>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e08d      	b.n	800290e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027f2:	2300      	movs	r3, #0
 80027f4:	613b      	str	r3, [r7, #16]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	695b      	ldr	r3, [r3, #20]
 80027fc:	613b      	str	r3, [r7, #16]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	613b      	str	r3, [r7, #16]
 8002806:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002808:	e066      	b.n	80028d8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800280a:	697a      	ldr	r2, [r7, #20]
 800280c:	6a39      	ldr	r1, [r7, #32]
 800280e:	68f8      	ldr	r0, [r7, #12]
 8002810:	f000 fe50 	bl	80034b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d00d      	beq.n	8002836 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800281e:	2b04      	cmp	r3, #4
 8002820:	d107      	bne.n	8002832 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002830:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e06b      	b.n	800290e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800283a:	781a      	ldrb	r2, [r3, #0]
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002846:	1c5a      	adds	r2, r3, #1
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002850:	b29b      	uxth	r3, r3
 8002852:	3b01      	subs	r3, #1
 8002854:	b29a      	uxth	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800285e:	3b01      	subs	r3, #1
 8002860:	b29a      	uxth	r2, r3
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	695b      	ldr	r3, [r3, #20]
 800286c:	f003 0304 	and.w	r3, r3, #4
 8002870:	2b04      	cmp	r3, #4
 8002872:	d11b      	bne.n	80028ac <HAL_I2C_Master_Transmit+0x188>
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002878:	2b00      	cmp	r3, #0
 800287a:	d017      	beq.n	80028ac <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002880:	781a      	ldrb	r2, [r3, #0]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800288c:	1c5a      	adds	r2, r3, #1
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002896:	b29b      	uxth	r3, r3
 8002898:	3b01      	subs	r3, #1
 800289a:	b29a      	uxth	r2, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028a4:	3b01      	subs	r3, #1
 80028a6:	b29a      	uxth	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028ac:	697a      	ldr	r2, [r7, #20]
 80028ae:	6a39      	ldr	r1, [r7, #32]
 80028b0:	68f8      	ldr	r0, [r7, #12]
 80028b2:	f000 fe47 	bl	8003544 <I2C_WaitOnBTFFlagUntilTimeout>
 80028b6:	4603      	mov	r3, r0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d00d      	beq.n	80028d8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c0:	2b04      	cmp	r3, #4
 80028c2:	d107      	bne.n	80028d4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028d2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e01a      	b.n	800290e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d194      	bne.n	800280a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2220      	movs	r2, #32
 80028f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2200      	movs	r2, #0
 80028fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002908:	2300      	movs	r3, #0
 800290a:	e000      	b.n	800290e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800290c:	2302      	movs	r3, #2
  }
}
 800290e:	4618      	mov	r0, r3
 8002910:	3718      	adds	r7, #24
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	00100002 	.word	0x00100002
 800291c:	ffff0000 	.word	0xffff0000

08002920 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b08c      	sub	sp, #48	@ 0x30
 8002924:	af02      	add	r7, sp, #8
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	607a      	str	r2, [r7, #4]
 800292a:	461a      	mov	r2, r3
 800292c:	460b      	mov	r3, r1
 800292e:	817b      	strh	r3, [r7, #10]
 8002930:	4613      	mov	r3, r2
 8002932:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002934:	f7ff fad6 	bl	8001ee4 <HAL_GetTick>
 8002938:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b20      	cmp	r3, #32
 8002944:	f040 8217 	bne.w	8002d76 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800294a:	9300      	str	r3, [sp, #0]
 800294c:	2319      	movs	r3, #25
 800294e:	2201      	movs	r2, #1
 8002950:	497c      	ldr	r1, [pc, #496]	@ (8002b44 <HAL_I2C_Master_Receive+0x224>)
 8002952:	68f8      	ldr	r0, [r7, #12]
 8002954:	f000 fc94 	bl	8003280 <I2C_WaitOnFlagUntilTimeout>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800295e:	2302      	movs	r3, #2
 8002960:	e20a      	b.n	8002d78 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002968:	2b01      	cmp	r3, #1
 800296a:	d101      	bne.n	8002970 <HAL_I2C_Master_Receive+0x50>
 800296c:	2302      	movs	r3, #2
 800296e:	e203      	b.n	8002d78 <HAL_I2C_Master_Receive+0x458>
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	2b01      	cmp	r3, #1
 8002984:	d007      	beq.n	8002996 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f042 0201 	orr.w	r2, r2, #1
 8002994:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029a4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2222      	movs	r2, #34	@ 0x22
 80029aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2210      	movs	r2, #16
 80029b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2200      	movs	r2, #0
 80029ba:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	893a      	ldrh	r2, [r7, #8]
 80029c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029cc:	b29a      	uxth	r2, r3
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	4a5c      	ldr	r2, [pc, #368]	@ (8002b48 <HAL_I2C_Master_Receive+0x228>)
 80029d6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80029d8:	8979      	ldrh	r1, [r7, #10]
 80029da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80029de:	68f8      	ldr	r0, [r7, #12]
 80029e0:	f000 fb80 	bl	80030e4 <I2C_MasterRequestRead>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e1c4      	b.n	8002d78 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d113      	bne.n	8002a1e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029f6:	2300      	movs	r3, #0
 80029f8:	623b      	str	r3, [r7, #32]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	695b      	ldr	r3, [r3, #20]
 8002a00:	623b      	str	r3, [r7, #32]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	699b      	ldr	r3, [r3, #24]
 8002a08:	623b      	str	r3, [r7, #32]
 8002a0a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	e198      	b.n	8002d50 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d11b      	bne.n	8002a5e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a34:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a36:	2300      	movs	r3, #0
 8002a38:	61fb      	str	r3, [r7, #28]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	695b      	ldr	r3, [r3, #20]
 8002a40:	61fb      	str	r3, [r7, #28]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	699b      	ldr	r3, [r3, #24]
 8002a48:	61fb      	str	r3, [r7, #28]
 8002a4a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	e178      	b.n	8002d50 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d11b      	bne.n	8002a9e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002a74:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002a84:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a86:	2300      	movs	r3, #0
 8002a88:	61bb      	str	r3, [r7, #24]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	695b      	ldr	r3, [r3, #20]
 8002a90:	61bb      	str	r3, [r7, #24]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	61bb      	str	r3, [r7, #24]
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	e158      	b.n	8002d50 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002aac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aae:	2300      	movs	r3, #0
 8002ab0:	617b      	str	r3, [r7, #20]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	695b      	ldr	r3, [r3, #20]
 8002ab8:	617b      	str	r3, [r7, #20]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	617b      	str	r3, [r7, #20]
 8002ac2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002ac4:	e144      	b.n	8002d50 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aca:	2b03      	cmp	r3, #3
 8002acc:	f200 80f1 	bhi.w	8002cb2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d123      	bne.n	8002b20 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ad8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ada:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002adc:	68f8      	ldr	r0, [r7, #12]
 8002ade:	f000 fd79 	bl	80035d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d001      	beq.n	8002aec <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e145      	b.n	8002d78 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	691a      	ldr	r2, [r3, #16]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af6:	b2d2      	uxtb	r2, r2
 8002af8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002afe:	1c5a      	adds	r2, r3, #1
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b08:	3b01      	subs	r3, #1
 8002b0a:	b29a      	uxth	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	3b01      	subs	r3, #1
 8002b18:	b29a      	uxth	r2, r3
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002b1e:	e117      	b.n	8002d50 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d14e      	bne.n	8002bc6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b2a:	9300      	str	r3, [sp, #0]
 8002b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b2e:	2200      	movs	r2, #0
 8002b30:	4906      	ldr	r1, [pc, #24]	@ (8002b4c <HAL_I2C_Master_Receive+0x22c>)
 8002b32:	68f8      	ldr	r0, [r7, #12]
 8002b34:	f000 fba4 	bl	8003280 <I2C_WaitOnFlagUntilTimeout>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d008      	beq.n	8002b50 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e11a      	b.n	8002d78 <HAL_I2C_Master_Receive+0x458>
 8002b42:	bf00      	nop
 8002b44:	00100002 	.word	0x00100002
 8002b48:	ffff0000 	.word	0xffff0000
 8002b4c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	691a      	ldr	r2, [r3, #16]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b6a:	b2d2      	uxtb	r2, r2
 8002b6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b72:	1c5a      	adds	r2, r3, #1
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	b29a      	uxth	r2, r3
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	b29a      	uxth	r2, r3
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	691a      	ldr	r2, [r3, #16]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b9c:	b2d2      	uxtb	r2, r2
 8002b9e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba4:	1c5a      	adds	r2, r3, #1
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bae:	3b01      	subs	r3, #1
 8002bb0:	b29a      	uxth	r2, r3
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bba:	b29b      	uxth	r3, r3
 8002bbc:	3b01      	subs	r3, #1
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002bc4:	e0c4      	b.n	8002d50 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc8:	9300      	str	r3, [sp, #0]
 8002bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bcc:	2200      	movs	r2, #0
 8002bce:	496c      	ldr	r1, [pc, #432]	@ (8002d80 <HAL_I2C_Master_Receive+0x460>)
 8002bd0:	68f8      	ldr	r0, [r7, #12]
 8002bd2:	f000 fb55 	bl	8003280 <I2C_WaitOnFlagUntilTimeout>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d001      	beq.n	8002be0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e0cb      	b.n	8002d78 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	691a      	ldr	r2, [r3, #16]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bfa:	b2d2      	uxtb	r2, r2
 8002bfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c02:	1c5a      	adds	r2, r3, #1
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	b29a      	uxth	r2, r3
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c24:	9300      	str	r3, [sp, #0]
 8002c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c28:	2200      	movs	r2, #0
 8002c2a:	4955      	ldr	r1, [pc, #340]	@ (8002d80 <HAL_I2C_Master_Receive+0x460>)
 8002c2c:	68f8      	ldr	r0, [r7, #12]
 8002c2e:	f000 fb27 	bl	8003280 <I2C_WaitOnFlagUntilTimeout>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e09d      	b.n	8002d78 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	691a      	ldr	r2, [r3, #16]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c56:	b2d2      	uxtb	r2, r2
 8002c58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c5e:	1c5a      	adds	r2, r3, #1
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c68:	3b01      	subs	r3, #1
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	3b01      	subs	r3, #1
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	691a      	ldr	r2, [r3, #16]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c88:	b2d2      	uxtb	r2, r2
 8002c8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c90:	1c5a      	adds	r2, r3, #1
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	b29a      	uxth	r2, r3
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	3b01      	subs	r3, #1
 8002caa:	b29a      	uxth	r2, r3
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002cb0:	e04e      	b.n	8002d50 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cb4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	f000 fc8c 	bl	80035d4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d001      	beq.n	8002cc6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e058      	b.n	8002d78 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	691a      	ldr	r2, [r3, #16]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd0:	b2d2      	uxtb	r2, r2
 8002cd2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd8:	1c5a      	adds	r2, r3, #1
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	b29a      	uxth	r2, r3
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	b29a      	uxth	r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	695b      	ldr	r3, [r3, #20]
 8002cfe:	f003 0304 	and.w	r3, r3, #4
 8002d02:	2b04      	cmp	r3, #4
 8002d04:	d124      	bne.n	8002d50 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d0a:	2b03      	cmp	r3, #3
 8002d0c:	d107      	bne.n	8002d1e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d1c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	691a      	ldr	r2, [r3, #16]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d28:	b2d2      	uxtb	r2, r2
 8002d2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d30:	1c5a      	adds	r2, r3, #1
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	3b01      	subs	r3, #1
 8002d4a:	b29a      	uxth	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f47f aeb6 	bne.w	8002ac6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2220      	movs	r2, #32
 8002d5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002d72:	2300      	movs	r3, #0
 8002d74:	e000      	b.n	8002d78 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002d76:	2302      	movs	r3, #2
  }
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3728      	adds	r7, #40	@ 0x28
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	00010004 	.word	0x00010004

08002d84 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b08a      	sub	sp, #40	@ 0x28
 8002d88:	af02      	add	r7, sp, #8
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	607a      	str	r2, [r7, #4]
 8002d8e:	603b      	str	r3, [r7, #0]
 8002d90:	460b      	mov	r3, r1
 8002d92:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002d94:	f7ff f8a6 	bl	8001ee4 <HAL_GetTick>
 8002d98:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b20      	cmp	r3, #32
 8002da8:	f040 8111 	bne.w	8002fce <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	9300      	str	r3, [sp, #0]
 8002db0:	2319      	movs	r3, #25
 8002db2:	2201      	movs	r2, #1
 8002db4:	4988      	ldr	r1, [pc, #544]	@ (8002fd8 <HAL_I2C_IsDeviceReady+0x254>)
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f000 fa62 	bl	8003280 <I2C_WaitOnFlagUntilTimeout>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002dc2:	2302      	movs	r3, #2
 8002dc4:	e104      	b.n	8002fd0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d101      	bne.n	8002dd4 <HAL_I2C_IsDeviceReady+0x50>
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	e0fd      	b.n	8002fd0 <HAL_I2C_IsDeviceReady+0x24c>
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d007      	beq.n	8002dfa <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f042 0201 	orr.w	r2, r2, #1
 8002df8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e08:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2224      	movs	r2, #36	@ 0x24
 8002e0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2200      	movs	r2, #0
 8002e16:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	4a70      	ldr	r2, [pc, #448]	@ (8002fdc <HAL_I2C_IsDeviceReady+0x258>)
 8002e1c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e2c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	9300      	str	r3, [sp, #0]
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002e3a:	68f8      	ldr	r0, [r7, #12]
 8002e3c:	f000 fa20 	bl	8003280 <I2C_WaitOnFlagUntilTimeout>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00d      	beq.n	8002e62 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e54:	d103      	bne.n	8002e5e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e5c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e0b6      	b.n	8002fd0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e62:	897b      	ldrh	r3, [r7, #10]
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	461a      	mov	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002e70:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002e72:	f7ff f837 	bl	8001ee4 <HAL_GetTick>
 8002e76:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	695b      	ldr	r3, [r3, #20]
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	bf0c      	ite	eq
 8002e86:	2301      	moveq	r3, #1
 8002e88:	2300      	movne	r3, #0
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	695b      	ldr	r3, [r3, #20]
 8002e94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e9c:	bf0c      	ite	eq
 8002e9e:	2301      	moveq	r3, #1
 8002ea0:	2300      	movne	r3, #0
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002ea6:	e025      	b.n	8002ef4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002ea8:	f7ff f81c 	bl	8001ee4 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	683a      	ldr	r2, [r7, #0]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d302      	bcc.n	8002ebe <HAL_I2C_IsDeviceReady+0x13a>
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d103      	bne.n	8002ec6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	22a0      	movs	r2, #160	@ 0xa0
 8002ec2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	695b      	ldr	r3, [r3, #20]
 8002ecc:	f003 0302 	and.w	r3, r3, #2
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	bf0c      	ite	eq
 8002ed4:	2301      	moveq	r3, #1
 8002ed6:	2300      	movne	r3, #0
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ee6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002eea:	bf0c      	ite	eq
 8002eec:	2301      	moveq	r3, #1
 8002eee:	2300      	movne	r3, #0
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	2ba0      	cmp	r3, #160	@ 0xa0
 8002efe:	d005      	beq.n	8002f0c <HAL_I2C_IsDeviceReady+0x188>
 8002f00:	7dfb      	ldrb	r3, [r7, #23]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d102      	bne.n	8002f0c <HAL_I2C_IsDeviceReady+0x188>
 8002f06:	7dbb      	ldrb	r3, [r7, #22]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d0cd      	beq.n	8002ea8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2220      	movs	r2, #32
 8002f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d129      	bne.n	8002f76 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f30:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f32:	2300      	movs	r3, #0
 8002f34:	613b      	str	r3, [r7, #16]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	695b      	ldr	r3, [r3, #20]
 8002f3c:	613b      	str	r3, [r7, #16]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	613b      	str	r3, [r7, #16]
 8002f46:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	9300      	str	r3, [sp, #0]
 8002f4c:	2319      	movs	r3, #25
 8002f4e:	2201      	movs	r2, #1
 8002f50:	4921      	ldr	r1, [pc, #132]	@ (8002fd8 <HAL_I2C_IsDeviceReady+0x254>)
 8002f52:	68f8      	ldr	r0, [r7, #12]
 8002f54:	f000 f994 	bl	8003280 <I2C_WaitOnFlagUntilTimeout>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e036      	b.n	8002fd0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2220      	movs	r2, #32
 8002f66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002f72:	2300      	movs	r3, #0
 8002f74:	e02c      	b.n	8002fd0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f84:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002f8e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	9300      	str	r3, [sp, #0]
 8002f94:	2319      	movs	r3, #25
 8002f96:	2201      	movs	r2, #1
 8002f98:	490f      	ldr	r1, [pc, #60]	@ (8002fd8 <HAL_I2C_IsDeviceReady+0x254>)
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f000 f970 	bl	8003280 <I2C_WaitOnFlagUntilTimeout>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e012      	b.n	8002fd0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	3301      	adds	r3, #1
 8002fae:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	f4ff af32 	bcc.w	8002e1e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2220      	movs	r2, #32
 8002fbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e000      	b.n	8002fd0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002fce:	2302      	movs	r3, #2
  }
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3720      	adds	r7, #32
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	00100002 	.word	0x00100002
 8002fdc:	ffff0000 	.word	0xffff0000

08002fe0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b088      	sub	sp, #32
 8002fe4:	af02      	add	r7, sp, #8
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	607a      	str	r2, [r7, #4]
 8002fea:	603b      	str	r3, [r7, #0]
 8002fec:	460b      	mov	r3, r1
 8002fee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ff4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	2b08      	cmp	r3, #8
 8002ffa:	d006      	beq.n	800300a <I2C_MasterRequestWrite+0x2a>
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d003      	beq.n	800300a <I2C_MasterRequestWrite+0x2a>
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003008:	d108      	bne.n	800301c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003018:	601a      	str	r2, [r3, #0]
 800301a:	e00b      	b.n	8003034 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003020:	2b12      	cmp	r3, #18
 8003022:	d107      	bne.n	8003034 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003032:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	9300      	str	r3, [sp, #0]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2200      	movs	r2, #0
 800303c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003040:	68f8      	ldr	r0, [r7, #12]
 8003042:	f000 f91d 	bl	8003280 <I2C_WaitOnFlagUntilTimeout>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00d      	beq.n	8003068 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003056:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800305a:	d103      	bne.n	8003064 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003062:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e035      	b.n	80030d4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003070:	d108      	bne.n	8003084 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003072:	897b      	ldrh	r3, [r7, #10]
 8003074:	b2db      	uxtb	r3, r3
 8003076:	461a      	mov	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003080:	611a      	str	r2, [r3, #16]
 8003082:	e01b      	b.n	80030bc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003084:	897b      	ldrh	r3, [r7, #10]
 8003086:	11db      	asrs	r3, r3, #7
 8003088:	b2db      	uxtb	r3, r3
 800308a:	f003 0306 	and.w	r3, r3, #6
 800308e:	b2db      	uxtb	r3, r3
 8003090:	f063 030f 	orn	r3, r3, #15
 8003094:	b2da      	uxtb	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	490e      	ldr	r1, [pc, #56]	@ (80030dc <I2C_MasterRequestWrite+0xfc>)
 80030a2:	68f8      	ldr	r0, [r7, #12]
 80030a4:	f000 f966 	bl	8003374 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e010      	b.n	80030d4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80030b2:	897b      	ldrh	r3, [r7, #10]
 80030b4:	b2da      	uxtb	r2, r3
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	4907      	ldr	r1, [pc, #28]	@ (80030e0 <I2C_MasterRequestWrite+0x100>)
 80030c2:	68f8      	ldr	r0, [r7, #12]
 80030c4:	f000 f956 	bl	8003374 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d001      	beq.n	80030d2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e000      	b.n	80030d4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80030d2:	2300      	movs	r3, #0
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	3718      	adds	r7, #24
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	00010008 	.word	0x00010008
 80030e0:	00010002 	.word	0x00010002

080030e4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b088      	sub	sp, #32
 80030e8:	af02      	add	r7, sp, #8
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	607a      	str	r2, [r7, #4]
 80030ee:	603b      	str	r3, [r7, #0]
 80030f0:	460b      	mov	r3, r1
 80030f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030f8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003108:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	2b08      	cmp	r3, #8
 800310e:	d006      	beq.n	800311e <I2C_MasterRequestRead+0x3a>
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d003      	beq.n	800311e <I2C_MasterRequestRead+0x3a>
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800311c:	d108      	bne.n	8003130 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800312c:	601a      	str	r2, [r3, #0]
 800312e:	e00b      	b.n	8003148 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003134:	2b11      	cmp	r3, #17
 8003136:	d107      	bne.n	8003148 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003146:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	9300      	str	r3, [sp, #0]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003154:	68f8      	ldr	r0, [r7, #12]
 8003156:	f000 f893 	bl	8003280 <I2C_WaitOnFlagUntilTimeout>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d00d      	beq.n	800317c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800316a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800316e:	d103      	bne.n	8003178 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003176:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003178:	2303      	movs	r3, #3
 800317a:	e079      	b.n	8003270 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	691b      	ldr	r3, [r3, #16]
 8003180:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003184:	d108      	bne.n	8003198 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003186:	897b      	ldrh	r3, [r7, #10]
 8003188:	b2db      	uxtb	r3, r3
 800318a:	f043 0301 	orr.w	r3, r3, #1
 800318e:	b2da      	uxtb	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	611a      	str	r2, [r3, #16]
 8003196:	e05f      	b.n	8003258 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003198:	897b      	ldrh	r3, [r7, #10]
 800319a:	11db      	asrs	r3, r3, #7
 800319c:	b2db      	uxtb	r3, r3
 800319e:	f003 0306 	and.w	r3, r3, #6
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	f063 030f 	orn	r3, r3, #15
 80031a8:	b2da      	uxtb	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	4930      	ldr	r1, [pc, #192]	@ (8003278 <I2C_MasterRequestRead+0x194>)
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f000 f8dc 	bl	8003374 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e054      	b.n	8003270 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80031c6:	897b      	ldrh	r3, [r7, #10]
 80031c8:	b2da      	uxtb	r2, r3
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	4929      	ldr	r1, [pc, #164]	@ (800327c <I2C_MasterRequestRead+0x198>)
 80031d6:	68f8      	ldr	r0, [r7, #12]
 80031d8:	f000 f8cc 	bl	8003374 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d001      	beq.n	80031e6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e044      	b.n	8003270 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031e6:	2300      	movs	r3, #0
 80031e8:	613b      	str	r3, [r7, #16]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	695b      	ldr	r3, [r3, #20]
 80031f0:	613b      	str	r3, [r7, #16]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	699b      	ldr	r3, [r3, #24]
 80031f8:	613b      	str	r3, [r7, #16]
 80031fa:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800320a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	9300      	str	r3, [sp, #0]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003218:	68f8      	ldr	r0, [r7, #12]
 800321a:	f000 f831 	bl	8003280 <I2C_WaitOnFlagUntilTimeout>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d00d      	beq.n	8003240 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800322e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003232:	d103      	bne.n	800323c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800323a:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e017      	b.n	8003270 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003240:	897b      	ldrh	r3, [r7, #10]
 8003242:	11db      	asrs	r3, r3, #7
 8003244:	b2db      	uxtb	r3, r3
 8003246:	f003 0306 	and.w	r3, r3, #6
 800324a:	b2db      	uxtb	r3, r3
 800324c:	f063 030e 	orn	r3, r3, #14
 8003250:	b2da      	uxtb	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	4907      	ldr	r1, [pc, #28]	@ (800327c <I2C_MasterRequestRead+0x198>)
 800325e:	68f8      	ldr	r0, [r7, #12]
 8003260:	f000 f888 	bl	8003374 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003264:	4603      	mov	r3, r0
 8003266:	2b00      	cmp	r3, #0
 8003268:	d001      	beq.n	800326e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e000      	b.n	8003270 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800326e:	2300      	movs	r3, #0
}
 8003270:	4618      	mov	r0, r3
 8003272:	3718      	adds	r7, #24
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	00010008 	.word	0x00010008
 800327c:	00010002 	.word	0x00010002

08003280 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	603b      	str	r3, [r7, #0]
 800328c:	4613      	mov	r3, r2
 800328e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003290:	e048      	b.n	8003324 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003298:	d044      	beq.n	8003324 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800329a:	f7fe fe23 	bl	8001ee4 <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	683a      	ldr	r2, [r7, #0]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d302      	bcc.n	80032b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d139      	bne.n	8003324 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	0c1b      	lsrs	r3, r3, #16
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d10d      	bne.n	80032d6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	695b      	ldr	r3, [r3, #20]
 80032c0:	43da      	mvns	r2, r3
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	4013      	ands	r3, r2
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	bf0c      	ite	eq
 80032cc:	2301      	moveq	r3, #1
 80032ce:	2300      	movne	r3, #0
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	461a      	mov	r2, r3
 80032d4:	e00c      	b.n	80032f0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	699b      	ldr	r3, [r3, #24]
 80032dc:	43da      	mvns	r2, r3
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	4013      	ands	r3, r2
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	bf0c      	ite	eq
 80032e8:	2301      	moveq	r3, #1
 80032ea:	2300      	movne	r3, #0
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	461a      	mov	r2, r3
 80032f0:	79fb      	ldrb	r3, [r7, #7]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d116      	bne.n	8003324 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2200      	movs	r2, #0
 80032fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2220      	movs	r2, #32
 8003300:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003310:	f043 0220 	orr.w	r2, r3, #32
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e023      	b.n	800336c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	0c1b      	lsrs	r3, r3, #16
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b01      	cmp	r3, #1
 800332c:	d10d      	bne.n	800334a <I2C_WaitOnFlagUntilTimeout+0xca>
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	695b      	ldr	r3, [r3, #20]
 8003334:	43da      	mvns	r2, r3
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	4013      	ands	r3, r2
 800333a:	b29b      	uxth	r3, r3
 800333c:	2b00      	cmp	r3, #0
 800333e:	bf0c      	ite	eq
 8003340:	2301      	moveq	r3, #1
 8003342:	2300      	movne	r3, #0
 8003344:	b2db      	uxtb	r3, r3
 8003346:	461a      	mov	r2, r3
 8003348:	e00c      	b.n	8003364 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	699b      	ldr	r3, [r3, #24]
 8003350:	43da      	mvns	r2, r3
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	4013      	ands	r3, r2
 8003356:	b29b      	uxth	r3, r3
 8003358:	2b00      	cmp	r3, #0
 800335a:	bf0c      	ite	eq
 800335c:	2301      	moveq	r3, #1
 800335e:	2300      	movne	r3, #0
 8003360:	b2db      	uxtb	r3, r3
 8003362:	461a      	mov	r2, r3
 8003364:	79fb      	ldrb	r3, [r7, #7]
 8003366:	429a      	cmp	r2, r3
 8003368:	d093      	beq.n	8003292 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	3710      	adds	r7, #16
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	607a      	str	r2, [r7, #4]
 8003380:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003382:	e071      	b.n	8003468 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	695b      	ldr	r3, [r3, #20]
 800338a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800338e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003392:	d123      	bne.n	80033dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033a2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80033ac:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2200      	movs	r2, #0
 80033b2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2220      	movs	r2, #32
 80033b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c8:	f043 0204 	orr.w	r2, r3, #4
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e067      	b.n	80034ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80033e2:	d041      	beq.n	8003468 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033e4:	f7fe fd7e 	bl	8001ee4 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d302      	bcc.n	80033fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d136      	bne.n	8003468 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	0c1b      	lsrs	r3, r3, #16
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	2b01      	cmp	r3, #1
 8003402:	d10c      	bne.n	800341e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	695b      	ldr	r3, [r3, #20]
 800340a:	43da      	mvns	r2, r3
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	4013      	ands	r3, r2
 8003410:	b29b      	uxth	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	bf14      	ite	ne
 8003416:	2301      	movne	r3, #1
 8003418:	2300      	moveq	r3, #0
 800341a:	b2db      	uxtb	r3, r3
 800341c:	e00b      	b.n	8003436 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	43da      	mvns	r2, r3
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	4013      	ands	r3, r2
 800342a:	b29b      	uxth	r3, r3
 800342c:	2b00      	cmp	r3, #0
 800342e:	bf14      	ite	ne
 8003430:	2301      	movne	r3, #1
 8003432:	2300      	moveq	r3, #0
 8003434:	b2db      	uxtb	r3, r3
 8003436:	2b00      	cmp	r3, #0
 8003438:	d016      	beq.n	8003468 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2220      	movs	r2, #32
 8003444:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2200      	movs	r2, #0
 800344c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003454:	f043 0220 	orr.w	r2, r3, #32
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e021      	b.n	80034ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	0c1b      	lsrs	r3, r3, #16
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b01      	cmp	r3, #1
 8003470:	d10c      	bne.n	800348c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	695b      	ldr	r3, [r3, #20]
 8003478:	43da      	mvns	r2, r3
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	4013      	ands	r3, r2
 800347e:	b29b      	uxth	r3, r3
 8003480:	2b00      	cmp	r3, #0
 8003482:	bf14      	ite	ne
 8003484:	2301      	movne	r3, #1
 8003486:	2300      	moveq	r3, #0
 8003488:	b2db      	uxtb	r3, r3
 800348a:	e00b      	b.n	80034a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	43da      	mvns	r2, r3
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	4013      	ands	r3, r2
 8003498:	b29b      	uxth	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	bf14      	ite	ne
 800349e:	2301      	movne	r3, #1
 80034a0:	2300      	moveq	r3, #0
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f47f af6d 	bne.w	8003384 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80034aa:	2300      	movs	r3, #0
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3710      	adds	r7, #16
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034c0:	e034      	b.n	800352c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80034c2:	68f8      	ldr	r0, [r7, #12]
 80034c4:	f000 f8e3 	bl	800368e <I2C_IsAcknowledgeFailed>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d001      	beq.n	80034d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e034      	b.n	800353c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80034d8:	d028      	beq.n	800352c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034da:	f7fe fd03 	bl	8001ee4 <HAL_GetTick>
 80034de:	4602      	mov	r2, r0
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	68ba      	ldr	r2, [r7, #8]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d302      	bcc.n	80034f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d11d      	bne.n	800352c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034fa:	2b80      	cmp	r3, #128	@ 0x80
 80034fc:	d016      	beq.n	800352c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2200      	movs	r2, #0
 8003502:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2220      	movs	r2, #32
 8003508:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2200      	movs	r2, #0
 8003510:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003518:	f043 0220 	orr.w	r2, r3, #32
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e007      	b.n	800353c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003536:	2b80      	cmp	r3, #128	@ 0x80
 8003538:	d1c3      	bne.n	80034c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800353a:	2300      	movs	r3, #0
}
 800353c:	4618      	mov	r0, r3
 800353e:	3710      	adds	r7, #16
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003550:	e034      	b.n	80035bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003552:	68f8      	ldr	r0, [r7, #12]
 8003554:	f000 f89b 	bl	800368e <I2C_IsAcknowledgeFailed>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d001      	beq.n	8003562 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e034      	b.n	80035cc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003568:	d028      	beq.n	80035bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800356a:	f7fe fcbb 	bl	8001ee4 <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	68ba      	ldr	r2, [r7, #8]
 8003576:	429a      	cmp	r2, r3
 8003578:	d302      	bcc.n	8003580 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d11d      	bne.n	80035bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	f003 0304 	and.w	r3, r3, #4
 800358a:	2b04      	cmp	r3, #4
 800358c:	d016      	beq.n	80035bc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2200      	movs	r2, #0
 8003592:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2220      	movs	r2, #32
 8003598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a8:	f043 0220 	orr.w	r2, r3, #32
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e007      	b.n	80035cc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	695b      	ldr	r3, [r3, #20]
 80035c2:	f003 0304 	and.w	r3, r3, #4
 80035c6:	2b04      	cmp	r3, #4
 80035c8:	d1c3      	bne.n	8003552 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80035ca:	2300      	movs	r3, #0
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3710      	adds	r7, #16
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80035e0:	e049      	b.n	8003676 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	695b      	ldr	r3, [r3, #20]
 80035e8:	f003 0310 	and.w	r3, r3, #16
 80035ec:	2b10      	cmp	r3, #16
 80035ee:	d119      	bne.n	8003624 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f06f 0210 	mvn.w	r2, #16
 80035f8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2200      	movs	r2, #0
 80035fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2220      	movs	r2, #32
 8003604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2200      	movs	r2, #0
 800360c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e030      	b.n	8003686 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003624:	f7fe fc5e 	bl	8001ee4 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	68ba      	ldr	r2, [r7, #8]
 8003630:	429a      	cmp	r2, r3
 8003632:	d302      	bcc.n	800363a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d11d      	bne.n	8003676 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	695b      	ldr	r3, [r3, #20]
 8003640:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003644:	2b40      	cmp	r3, #64	@ 0x40
 8003646:	d016      	beq.n	8003676 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2220      	movs	r2, #32
 8003652:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003662:	f043 0220 	orr.w	r2, r3, #32
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e007      	b.n	8003686 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	695b      	ldr	r3, [r3, #20]
 800367c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003680:	2b40      	cmp	r3, #64	@ 0x40
 8003682:	d1ae      	bne.n	80035e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3710      	adds	r7, #16
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}

0800368e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800368e:	b480      	push	{r7}
 8003690:	b083      	sub	sp, #12
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	695b      	ldr	r3, [r3, #20]
 800369c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036a4:	d11b      	bne.n	80036de <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80036ae:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2220      	movs	r2, #32
 80036ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ca:	f043 0204 	orr.w	r2, r3, #4
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e000      	b.n	80036e0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d101      	bne.n	8003700 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e0cc      	b.n	800389a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003700:	4b68      	ldr	r3, [pc, #416]	@ (80038a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 030f 	and.w	r3, r3, #15
 8003708:	683a      	ldr	r2, [r7, #0]
 800370a:	429a      	cmp	r2, r3
 800370c:	d90c      	bls.n	8003728 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800370e:	4b65      	ldr	r3, [pc, #404]	@ (80038a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003710:	683a      	ldr	r2, [r7, #0]
 8003712:	b2d2      	uxtb	r2, r2
 8003714:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003716:	4b63      	ldr	r3, [pc, #396]	@ (80038a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 030f 	and.w	r3, r3, #15
 800371e:	683a      	ldr	r2, [r7, #0]
 8003720:	429a      	cmp	r2, r3
 8003722:	d001      	beq.n	8003728 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e0b8      	b.n	800389a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0302 	and.w	r3, r3, #2
 8003730:	2b00      	cmp	r3, #0
 8003732:	d020      	beq.n	8003776 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0304 	and.w	r3, r3, #4
 800373c:	2b00      	cmp	r3, #0
 800373e:	d005      	beq.n	800374c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003740:	4b59      	ldr	r3, [pc, #356]	@ (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	4a58      	ldr	r2, [pc, #352]	@ (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003746:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800374a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0308 	and.w	r3, r3, #8
 8003754:	2b00      	cmp	r3, #0
 8003756:	d005      	beq.n	8003764 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003758:	4b53      	ldr	r3, [pc, #332]	@ (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	4a52      	ldr	r2, [pc, #328]	@ (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 800375e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003762:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003764:	4b50      	ldr	r3, [pc, #320]	@ (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	494d      	ldr	r1, [pc, #308]	@ (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003772:	4313      	orrs	r3, r2
 8003774:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b00      	cmp	r3, #0
 8003780:	d044      	beq.n	800380c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	2b01      	cmp	r3, #1
 8003788:	d107      	bne.n	800379a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800378a:	4b47      	ldr	r3, [pc, #284]	@ (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d119      	bne.n	80037ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e07f      	b.n	800389a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d003      	beq.n	80037aa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037a6:	2b03      	cmp	r3, #3
 80037a8:	d107      	bne.n	80037ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037aa:	4b3f      	ldr	r3, [pc, #252]	@ (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d109      	bne.n	80037ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e06f      	b.n	800389a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ba:	4b3b      	ldr	r3, [pc, #236]	@ (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d101      	bne.n	80037ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e067      	b.n	800389a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037ca:	4b37      	ldr	r3, [pc, #220]	@ (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f023 0203 	bic.w	r2, r3, #3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	4934      	ldr	r1, [pc, #208]	@ (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037dc:	f7fe fb82 	bl	8001ee4 <HAL_GetTick>
 80037e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037e2:	e00a      	b.n	80037fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037e4:	f7fe fb7e 	bl	8001ee4 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d901      	bls.n	80037fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e04f      	b.n	800389a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037fa:	4b2b      	ldr	r3, [pc, #172]	@ (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f003 020c 	and.w	r2, r3, #12
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	429a      	cmp	r2, r3
 800380a:	d1eb      	bne.n	80037e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800380c:	4b25      	ldr	r3, [pc, #148]	@ (80038a4 <HAL_RCC_ClockConfig+0x1b8>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 030f 	and.w	r3, r3, #15
 8003814:	683a      	ldr	r2, [r7, #0]
 8003816:	429a      	cmp	r2, r3
 8003818:	d20c      	bcs.n	8003834 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800381a:	4b22      	ldr	r3, [pc, #136]	@ (80038a4 <HAL_RCC_ClockConfig+0x1b8>)
 800381c:	683a      	ldr	r2, [r7, #0]
 800381e:	b2d2      	uxtb	r2, r2
 8003820:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003822:	4b20      	ldr	r3, [pc, #128]	@ (80038a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 030f 	and.w	r3, r3, #15
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	429a      	cmp	r2, r3
 800382e:	d001      	beq.n	8003834 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e032      	b.n	800389a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0304 	and.w	r3, r3, #4
 800383c:	2b00      	cmp	r3, #0
 800383e:	d008      	beq.n	8003852 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003840:	4b19      	ldr	r3, [pc, #100]	@ (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	4916      	ldr	r1, [pc, #88]	@ (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 800384e:	4313      	orrs	r3, r2
 8003850:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0308 	and.w	r3, r3, #8
 800385a:	2b00      	cmp	r3, #0
 800385c:	d009      	beq.n	8003872 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800385e:	4b12      	ldr	r3, [pc, #72]	@ (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	00db      	lsls	r3, r3, #3
 800386c:	490e      	ldr	r1, [pc, #56]	@ (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 800386e:	4313      	orrs	r3, r2
 8003870:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003872:	f000 f855 	bl	8003920 <HAL_RCC_GetSysClockFreq>
 8003876:	4602      	mov	r2, r0
 8003878:	4b0b      	ldr	r3, [pc, #44]	@ (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	091b      	lsrs	r3, r3, #4
 800387e:	f003 030f 	and.w	r3, r3, #15
 8003882:	490a      	ldr	r1, [pc, #40]	@ (80038ac <HAL_RCC_ClockConfig+0x1c0>)
 8003884:	5ccb      	ldrb	r3, [r1, r3]
 8003886:	fa22 f303 	lsr.w	r3, r2, r3
 800388a:	4a09      	ldr	r2, [pc, #36]	@ (80038b0 <HAL_RCC_ClockConfig+0x1c4>)
 800388c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800388e:	4b09      	ldr	r3, [pc, #36]	@ (80038b4 <HAL_RCC_ClockConfig+0x1c8>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4618      	mov	r0, r3
 8003894:	f7fe fae2 	bl	8001e5c <HAL_InitTick>

  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	40023c00 	.word	0x40023c00
 80038a8:	40023800 	.word	0x40023800
 80038ac:	08008430 	.word	0x08008430
 80038b0:	20000008 	.word	0x20000008
 80038b4:	2000000c 	.word	0x2000000c

080038b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038b8:	b480      	push	{r7}
 80038ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038bc:	4b03      	ldr	r3, [pc, #12]	@ (80038cc <HAL_RCC_GetHCLKFreq+0x14>)
 80038be:	681b      	ldr	r3, [r3, #0]
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	20000008 	.word	0x20000008

080038d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80038d4:	f7ff fff0 	bl	80038b8 <HAL_RCC_GetHCLKFreq>
 80038d8:	4602      	mov	r2, r0
 80038da:	4b05      	ldr	r3, [pc, #20]	@ (80038f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	0a9b      	lsrs	r3, r3, #10
 80038e0:	f003 0307 	and.w	r3, r3, #7
 80038e4:	4903      	ldr	r1, [pc, #12]	@ (80038f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038e6:	5ccb      	ldrb	r3, [r1, r3]
 80038e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	40023800 	.word	0x40023800
 80038f4:	08008440 	.word	0x08008440

080038f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80038fc:	f7ff ffdc 	bl	80038b8 <HAL_RCC_GetHCLKFreq>
 8003900:	4602      	mov	r2, r0
 8003902:	4b05      	ldr	r3, [pc, #20]	@ (8003918 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	0b5b      	lsrs	r3, r3, #13
 8003908:	f003 0307 	and.w	r3, r3, #7
 800390c:	4903      	ldr	r1, [pc, #12]	@ (800391c <HAL_RCC_GetPCLK2Freq+0x24>)
 800390e:	5ccb      	ldrb	r3, [r1, r3]
 8003910:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003914:	4618      	mov	r0, r3
 8003916:	bd80      	pop	{r7, pc}
 8003918:	40023800 	.word	0x40023800
 800391c:	08008440 	.word	0x08008440

08003920 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003920:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003924:	b0a6      	sub	sp, #152	@ 0x98
 8003926:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003928:	2300      	movs	r3, #0
 800392a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 800392e:	2300      	movs	r3, #0
 8003930:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8003934:	2300      	movs	r3, #0
 8003936:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 800393a:	2300      	movs	r3, #0
 800393c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8003940:	2300      	movs	r3, #0
 8003942:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003946:	4bc8      	ldr	r3, [pc, #800]	@ (8003c68 <HAL_RCC_GetSysClockFreq+0x348>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f003 030c 	and.w	r3, r3, #12
 800394e:	2b0c      	cmp	r3, #12
 8003950:	f200 817e 	bhi.w	8003c50 <HAL_RCC_GetSysClockFreq+0x330>
 8003954:	a201      	add	r2, pc, #4	@ (adr r2, 800395c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800395a:	bf00      	nop
 800395c:	08003991 	.word	0x08003991
 8003960:	08003c51 	.word	0x08003c51
 8003964:	08003c51 	.word	0x08003c51
 8003968:	08003c51 	.word	0x08003c51
 800396c:	08003999 	.word	0x08003999
 8003970:	08003c51 	.word	0x08003c51
 8003974:	08003c51 	.word	0x08003c51
 8003978:	08003c51 	.word	0x08003c51
 800397c:	080039a1 	.word	0x080039a1
 8003980:	08003c51 	.word	0x08003c51
 8003984:	08003c51 	.word	0x08003c51
 8003988:	08003c51 	.word	0x08003c51
 800398c:	08003b0b 	.word	0x08003b0b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003990:	4bb6      	ldr	r3, [pc, #728]	@ (8003c6c <HAL_RCC_GetSysClockFreq+0x34c>)
 8003992:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003996:	e15f      	b.n	8003c58 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003998:	4bb5      	ldr	r3, [pc, #724]	@ (8003c70 <HAL_RCC_GetSysClockFreq+0x350>)
 800399a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800399e:	e15b      	b.n	8003c58 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039a0:	4bb1      	ldr	r3, [pc, #708]	@ (8003c68 <HAL_RCC_GetSysClockFreq+0x348>)
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80039a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039ac:	4bae      	ldr	r3, [pc, #696]	@ (8003c68 <HAL_RCC_GetSysClockFreq+0x348>)
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d031      	beq.n	8003a1c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039b8:	4bab      	ldr	r3, [pc, #684]	@ (8003c68 <HAL_RCC_GetSysClockFreq+0x348>)
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	099b      	lsrs	r3, r3, #6
 80039be:	2200      	movs	r2, #0
 80039c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80039c2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80039c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80039c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039ca:	663b      	str	r3, [r7, #96]	@ 0x60
 80039cc:	2300      	movs	r3, #0
 80039ce:	667b      	str	r3, [r7, #100]	@ 0x64
 80039d0:	4ba7      	ldr	r3, [pc, #668]	@ (8003c70 <HAL_RCC_GetSysClockFreq+0x350>)
 80039d2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80039d6:	462a      	mov	r2, r5
 80039d8:	fb03 f202 	mul.w	r2, r3, r2
 80039dc:	2300      	movs	r3, #0
 80039de:	4621      	mov	r1, r4
 80039e0:	fb01 f303 	mul.w	r3, r1, r3
 80039e4:	4413      	add	r3, r2
 80039e6:	4aa2      	ldr	r2, [pc, #648]	@ (8003c70 <HAL_RCC_GetSysClockFreq+0x350>)
 80039e8:	4621      	mov	r1, r4
 80039ea:	fba1 1202 	umull	r1, r2, r1, r2
 80039ee:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80039f0:	460a      	mov	r2, r1
 80039f2:	67ba      	str	r2, [r7, #120]	@ 0x78
 80039f4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80039f6:	4413      	add	r3, r2
 80039f8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80039fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039fe:	2200      	movs	r2, #0
 8003a00:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003a02:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003a04:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003a08:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8003a0c:	f7fd f8ec 	bl	8000be8 <__aeabi_uldivmod>
 8003a10:	4602      	mov	r2, r0
 8003a12:	460b      	mov	r3, r1
 8003a14:	4613      	mov	r3, r2
 8003a16:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003a1a:	e064      	b.n	8003ae6 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a1c:	4b92      	ldr	r3, [pc, #584]	@ (8003c68 <HAL_RCC_GetSysClockFreq+0x348>)
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	099b      	lsrs	r3, r3, #6
 8003a22:	2200      	movs	r2, #0
 8003a24:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a26:	657a      	str	r2, [r7, #84]	@ 0x54
 8003a28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a30:	2300      	movs	r3, #0
 8003a32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a34:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8003a38:	4622      	mov	r2, r4
 8003a3a:	462b      	mov	r3, r5
 8003a3c:	f04f 0000 	mov.w	r0, #0
 8003a40:	f04f 0100 	mov.w	r1, #0
 8003a44:	0159      	lsls	r1, r3, #5
 8003a46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a4a:	0150      	lsls	r0, r2, #5
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	460b      	mov	r3, r1
 8003a50:	4621      	mov	r1, r4
 8003a52:	1a51      	subs	r1, r2, r1
 8003a54:	6139      	str	r1, [r7, #16]
 8003a56:	4629      	mov	r1, r5
 8003a58:	eb63 0301 	sbc.w	r3, r3, r1
 8003a5c:	617b      	str	r3, [r7, #20]
 8003a5e:	f04f 0200 	mov.w	r2, #0
 8003a62:	f04f 0300 	mov.w	r3, #0
 8003a66:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003a6a:	4659      	mov	r1, fp
 8003a6c:	018b      	lsls	r3, r1, #6
 8003a6e:	4651      	mov	r1, sl
 8003a70:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a74:	4651      	mov	r1, sl
 8003a76:	018a      	lsls	r2, r1, #6
 8003a78:	4651      	mov	r1, sl
 8003a7a:	ebb2 0801 	subs.w	r8, r2, r1
 8003a7e:	4659      	mov	r1, fp
 8003a80:	eb63 0901 	sbc.w	r9, r3, r1
 8003a84:	f04f 0200 	mov.w	r2, #0
 8003a88:	f04f 0300 	mov.w	r3, #0
 8003a8c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a90:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a94:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a98:	4690      	mov	r8, r2
 8003a9a:	4699      	mov	r9, r3
 8003a9c:	4623      	mov	r3, r4
 8003a9e:	eb18 0303 	adds.w	r3, r8, r3
 8003aa2:	60bb      	str	r3, [r7, #8]
 8003aa4:	462b      	mov	r3, r5
 8003aa6:	eb49 0303 	adc.w	r3, r9, r3
 8003aaa:	60fb      	str	r3, [r7, #12]
 8003aac:	f04f 0200 	mov.w	r2, #0
 8003ab0:	f04f 0300 	mov.w	r3, #0
 8003ab4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003ab8:	4629      	mov	r1, r5
 8003aba:	028b      	lsls	r3, r1, #10
 8003abc:	4621      	mov	r1, r4
 8003abe:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ac2:	4621      	mov	r1, r4
 8003ac4:	028a      	lsls	r2, r1, #10
 8003ac6:	4610      	mov	r0, r2
 8003ac8:	4619      	mov	r1, r3
 8003aca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ace:	2200      	movs	r2, #0
 8003ad0:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ad2:	647a      	str	r2, [r7, #68]	@ 0x44
 8003ad4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003ad8:	f7fd f886 	bl	8000be8 <__aeabi_uldivmod>
 8003adc:	4602      	mov	r2, r0
 8003ade:	460b      	mov	r3, r1
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003ae6:	4b60      	ldr	r3, [pc, #384]	@ (8003c68 <HAL_RCC_GetSysClockFreq+0x348>)
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	0c1b      	lsrs	r3, r3, #16
 8003aec:	f003 0303 	and.w	r3, r3, #3
 8003af0:	3301      	adds	r3, #1
 8003af2:	005b      	lsls	r3, r3, #1
 8003af4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8003af8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003afc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b04:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003b08:	e0a6      	b.n	8003c58 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b0a:	4b57      	ldr	r3, [pc, #348]	@ (8003c68 <HAL_RCC_GetSysClockFreq+0x348>)
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b12:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b16:	4b54      	ldr	r3, [pc, #336]	@ (8003c68 <HAL_RCC_GetSysClockFreq+0x348>)
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d02a      	beq.n	8003b78 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b22:	4b51      	ldr	r3, [pc, #324]	@ (8003c68 <HAL_RCC_GetSysClockFreq+0x348>)
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	099b      	lsrs	r3, r3, #6
 8003b28:	2200      	movs	r2, #0
 8003b2a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b2c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003b2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b30:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003b34:	2100      	movs	r1, #0
 8003b36:	4b4e      	ldr	r3, [pc, #312]	@ (8003c70 <HAL_RCC_GetSysClockFreq+0x350>)
 8003b38:	fb03 f201 	mul.w	r2, r3, r1
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	fb00 f303 	mul.w	r3, r0, r3
 8003b42:	4413      	add	r3, r2
 8003b44:	4a4a      	ldr	r2, [pc, #296]	@ (8003c70 <HAL_RCC_GetSysClockFreq+0x350>)
 8003b46:	fba0 1202 	umull	r1, r2, r0, r2
 8003b4a:	677a      	str	r2, [r7, #116]	@ 0x74
 8003b4c:	460a      	mov	r2, r1
 8003b4e:	673a      	str	r2, [r7, #112]	@ 0x70
 8003b50:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003b52:	4413      	add	r3, r2
 8003b54:	677b      	str	r3, [r7, #116]	@ 0x74
 8003b56:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b5e:	637a      	str	r2, [r7, #52]	@ 0x34
 8003b60:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003b64:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003b68:	f7fd f83e 	bl	8000be8 <__aeabi_uldivmod>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	460b      	mov	r3, r1
 8003b70:	4613      	mov	r3, r2
 8003b72:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003b76:	e05b      	b.n	8003c30 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b78:	4b3b      	ldr	r3, [pc, #236]	@ (8003c68 <HAL_RCC_GetSysClockFreq+0x348>)
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	099b      	lsrs	r3, r3, #6
 8003b7e:	2200      	movs	r2, #0
 8003b80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b8a:	623b      	str	r3, [r7, #32]
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b90:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b94:	4642      	mov	r2, r8
 8003b96:	464b      	mov	r3, r9
 8003b98:	f04f 0000 	mov.w	r0, #0
 8003b9c:	f04f 0100 	mov.w	r1, #0
 8003ba0:	0159      	lsls	r1, r3, #5
 8003ba2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ba6:	0150      	lsls	r0, r2, #5
 8003ba8:	4602      	mov	r2, r0
 8003baa:	460b      	mov	r3, r1
 8003bac:	4641      	mov	r1, r8
 8003bae:	ebb2 0a01 	subs.w	sl, r2, r1
 8003bb2:	4649      	mov	r1, r9
 8003bb4:	eb63 0b01 	sbc.w	fp, r3, r1
 8003bb8:	f04f 0200 	mov.w	r2, #0
 8003bbc:	f04f 0300 	mov.w	r3, #0
 8003bc0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003bc4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003bc8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003bcc:	ebb2 040a 	subs.w	r4, r2, sl
 8003bd0:	eb63 050b 	sbc.w	r5, r3, fp
 8003bd4:	f04f 0200 	mov.w	r2, #0
 8003bd8:	f04f 0300 	mov.w	r3, #0
 8003bdc:	00eb      	lsls	r3, r5, #3
 8003bde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003be2:	00e2      	lsls	r2, r4, #3
 8003be4:	4614      	mov	r4, r2
 8003be6:	461d      	mov	r5, r3
 8003be8:	4643      	mov	r3, r8
 8003bea:	18e3      	adds	r3, r4, r3
 8003bec:	603b      	str	r3, [r7, #0]
 8003bee:	464b      	mov	r3, r9
 8003bf0:	eb45 0303 	adc.w	r3, r5, r3
 8003bf4:	607b      	str	r3, [r7, #4]
 8003bf6:	f04f 0200 	mov.w	r2, #0
 8003bfa:	f04f 0300 	mov.w	r3, #0
 8003bfe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c02:	4629      	mov	r1, r5
 8003c04:	028b      	lsls	r3, r1, #10
 8003c06:	4621      	mov	r1, r4
 8003c08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c0c:	4621      	mov	r1, r4
 8003c0e:	028a      	lsls	r2, r1, #10
 8003c10:	4610      	mov	r0, r2
 8003c12:	4619      	mov	r1, r3
 8003c14:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c18:	2200      	movs	r2, #0
 8003c1a:	61bb      	str	r3, [r7, #24]
 8003c1c:	61fa      	str	r2, [r7, #28]
 8003c1e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c22:	f7fc ffe1 	bl	8000be8 <__aeabi_uldivmod>
 8003c26:	4602      	mov	r2, r0
 8003c28:	460b      	mov	r3, r1
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003c30:	4b0d      	ldr	r3, [pc, #52]	@ (8003c68 <HAL_RCC_GetSysClockFreq+0x348>)
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	0f1b      	lsrs	r3, r3, #28
 8003c36:	f003 0307 	and.w	r3, r3, #7
 8003c3a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8003c3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003c42:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c4a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003c4e:	e003      	b.n	8003c58 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c50:	4b06      	ldr	r3, [pc, #24]	@ (8003c6c <HAL_RCC_GetSysClockFreq+0x34c>)
 8003c52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003c56:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c58:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3798      	adds	r7, #152	@ 0x98
 8003c60:	46bd      	mov	sp, r7
 8003c62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c66:	bf00      	nop
 8003c68:	40023800 	.word	0x40023800
 8003c6c:	00f42400 	.word	0x00f42400
 8003c70:	017d7840 	.word	0x017d7840

08003c74 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b086      	sub	sp, #24
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d101      	bne.n	8003c86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e28d      	b.n	80041a2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0301 	and.w	r3, r3, #1
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	f000 8083 	beq.w	8003d9a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003c94:	4b94      	ldr	r3, [pc, #592]	@ (8003ee8 <HAL_RCC_OscConfig+0x274>)
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f003 030c 	and.w	r3, r3, #12
 8003c9c:	2b04      	cmp	r3, #4
 8003c9e:	d019      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003ca0:	4b91      	ldr	r3, [pc, #580]	@ (8003ee8 <HAL_RCC_OscConfig+0x274>)
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f003 030c 	and.w	r3, r3, #12
        || \
 8003ca8:	2b08      	cmp	r3, #8
 8003caa:	d106      	bne.n	8003cba <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003cac:	4b8e      	ldr	r3, [pc, #568]	@ (8003ee8 <HAL_RCC_OscConfig+0x274>)
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cb4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003cb8:	d00c      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cba:	4b8b      	ldr	r3, [pc, #556]	@ (8003ee8 <HAL_RCC_OscConfig+0x274>)
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003cc2:	2b0c      	cmp	r3, #12
 8003cc4:	d112      	bne.n	8003cec <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cc6:	4b88      	ldr	r3, [pc, #544]	@ (8003ee8 <HAL_RCC_OscConfig+0x274>)
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003cd2:	d10b      	bne.n	8003cec <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cd4:	4b84      	ldr	r3, [pc, #528]	@ (8003ee8 <HAL_RCC_OscConfig+0x274>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d05b      	beq.n	8003d98 <HAL_RCC_OscConfig+0x124>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d157      	bne.n	8003d98 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e25a      	b.n	80041a2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cf4:	d106      	bne.n	8003d04 <HAL_RCC_OscConfig+0x90>
 8003cf6:	4b7c      	ldr	r3, [pc, #496]	@ (8003ee8 <HAL_RCC_OscConfig+0x274>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a7b      	ldr	r2, [pc, #492]	@ (8003ee8 <HAL_RCC_OscConfig+0x274>)
 8003cfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d00:	6013      	str	r3, [r2, #0]
 8003d02:	e01d      	b.n	8003d40 <HAL_RCC_OscConfig+0xcc>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d0c:	d10c      	bne.n	8003d28 <HAL_RCC_OscConfig+0xb4>
 8003d0e:	4b76      	ldr	r3, [pc, #472]	@ (8003ee8 <HAL_RCC_OscConfig+0x274>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a75      	ldr	r2, [pc, #468]	@ (8003ee8 <HAL_RCC_OscConfig+0x274>)
 8003d14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d18:	6013      	str	r3, [r2, #0]
 8003d1a:	4b73      	ldr	r3, [pc, #460]	@ (8003ee8 <HAL_RCC_OscConfig+0x274>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a72      	ldr	r2, [pc, #456]	@ (8003ee8 <HAL_RCC_OscConfig+0x274>)
 8003d20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d24:	6013      	str	r3, [r2, #0]
 8003d26:	e00b      	b.n	8003d40 <HAL_RCC_OscConfig+0xcc>
 8003d28:	4b6f      	ldr	r3, [pc, #444]	@ (8003ee8 <HAL_RCC_OscConfig+0x274>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a6e      	ldr	r2, [pc, #440]	@ (8003ee8 <HAL_RCC_OscConfig+0x274>)
 8003d2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d32:	6013      	str	r3, [r2, #0]
 8003d34:	4b6c      	ldr	r3, [pc, #432]	@ (8003ee8 <HAL_RCC_OscConfig+0x274>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a6b      	ldr	r2, [pc, #428]	@ (8003ee8 <HAL_RCC_OscConfig+0x274>)
 8003d3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d013      	beq.n	8003d70 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d48:	f7fe f8cc 	bl	8001ee4 <HAL_GetTick>
 8003d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d4e:	e008      	b.n	8003d62 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d50:	f7fe f8c8 	bl	8001ee4 <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	2b64      	cmp	r3, #100	@ 0x64
 8003d5c:	d901      	bls.n	8003d62 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e21f      	b.n	80041a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d62:	4b61      	ldr	r3, [pc, #388]	@ (8003ee8 <HAL_RCC_OscConfig+0x274>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d0f0      	beq.n	8003d50 <HAL_RCC_OscConfig+0xdc>
 8003d6e:	e014      	b.n	8003d9a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d70:	f7fe f8b8 	bl	8001ee4 <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d76:	e008      	b.n	8003d8a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d78:	f7fe f8b4 	bl	8001ee4 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b64      	cmp	r3, #100	@ 0x64
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e20b      	b.n	80041a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d8a:	4b57      	ldr	r3, [pc, #348]	@ (8003ee8 <HAL_RCC_OscConfig+0x274>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1f0      	bne.n	8003d78 <HAL_RCC_OscConfig+0x104>
 8003d96:	e000      	b.n	8003d9a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d06f      	beq.n	8003e86 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003da6:	4b50      	ldr	r3, [pc, #320]	@ (8003ee8 <HAL_RCC_OscConfig+0x274>)
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f003 030c 	and.w	r3, r3, #12
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d017      	beq.n	8003de2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003db2:	4b4d      	ldr	r3, [pc, #308]	@ (8003ee8 <HAL_RCC_OscConfig+0x274>)
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f003 030c 	and.w	r3, r3, #12
        || \
 8003dba:	2b08      	cmp	r3, #8
 8003dbc:	d105      	bne.n	8003dca <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003dbe:	4b4a      	ldr	r3, [pc, #296]	@ (8003ee8 <HAL_RCC_OscConfig+0x274>)
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00b      	beq.n	8003de2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dca:	4b47      	ldr	r3, [pc, #284]	@ (8003ee8 <HAL_RCC_OscConfig+0x274>)
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003dd2:	2b0c      	cmp	r3, #12
 8003dd4:	d11c      	bne.n	8003e10 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003dd6:	4b44      	ldr	r3, [pc, #272]	@ (8003ee8 <HAL_RCC_OscConfig+0x274>)
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d116      	bne.n	8003e10 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003de2:	4b41      	ldr	r3, [pc, #260]	@ (8003ee8 <HAL_RCC_OscConfig+0x274>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0302 	and.w	r3, r3, #2
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d005      	beq.n	8003dfa <HAL_RCC_OscConfig+0x186>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d001      	beq.n	8003dfa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e1d3      	b.n	80041a2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dfa:	4b3b      	ldr	r3, [pc, #236]	@ (8003ee8 <HAL_RCC_OscConfig+0x274>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	691b      	ldr	r3, [r3, #16]
 8003e06:	00db      	lsls	r3, r3, #3
 8003e08:	4937      	ldr	r1, [pc, #220]	@ (8003ee8 <HAL_RCC_OscConfig+0x274>)
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e0e:	e03a      	b.n	8003e86 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d020      	beq.n	8003e5a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e18:	4b34      	ldr	r3, [pc, #208]	@ (8003eec <HAL_RCC_OscConfig+0x278>)
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e1e:	f7fe f861 	bl	8001ee4 <HAL_GetTick>
 8003e22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e24:	e008      	b.n	8003e38 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e26:	f7fe f85d 	bl	8001ee4 <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d901      	bls.n	8003e38 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e1b4      	b.n	80041a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e38:	4b2b      	ldr	r3, [pc, #172]	@ (8003ee8 <HAL_RCC_OscConfig+0x274>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0302 	and.w	r3, r3, #2
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d0f0      	beq.n	8003e26 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e44:	4b28      	ldr	r3, [pc, #160]	@ (8003ee8 <HAL_RCC_OscConfig+0x274>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	00db      	lsls	r3, r3, #3
 8003e52:	4925      	ldr	r1, [pc, #148]	@ (8003ee8 <HAL_RCC_OscConfig+0x274>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	600b      	str	r3, [r1, #0]
 8003e58:	e015      	b.n	8003e86 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e5a:	4b24      	ldr	r3, [pc, #144]	@ (8003eec <HAL_RCC_OscConfig+0x278>)
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e60:	f7fe f840 	bl	8001ee4 <HAL_GetTick>
 8003e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e66:	e008      	b.n	8003e7a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e68:	f7fe f83c 	bl	8001ee4 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d901      	bls.n	8003e7a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e193      	b.n	80041a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e7a:	4b1b      	ldr	r3, [pc, #108]	@ (8003ee8 <HAL_RCC_OscConfig+0x274>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d1f0      	bne.n	8003e68 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0308 	and.w	r3, r3, #8
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d036      	beq.n	8003f00 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	695b      	ldr	r3, [r3, #20]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d016      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e9a:	4b15      	ldr	r3, [pc, #84]	@ (8003ef0 <HAL_RCC_OscConfig+0x27c>)
 8003e9c:	2201      	movs	r2, #1
 8003e9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ea0:	f7fe f820 	bl	8001ee4 <HAL_GetTick>
 8003ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ea6:	e008      	b.n	8003eba <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ea8:	f7fe f81c 	bl	8001ee4 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d901      	bls.n	8003eba <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e173      	b.n	80041a2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eba:	4b0b      	ldr	r3, [pc, #44]	@ (8003ee8 <HAL_RCC_OscConfig+0x274>)
 8003ebc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ebe:	f003 0302 	and.w	r3, r3, #2
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d0f0      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x234>
 8003ec6:	e01b      	b.n	8003f00 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ec8:	4b09      	ldr	r3, [pc, #36]	@ (8003ef0 <HAL_RCC_OscConfig+0x27c>)
 8003eca:	2200      	movs	r2, #0
 8003ecc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ece:	f7fe f809 	bl	8001ee4 <HAL_GetTick>
 8003ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ed4:	e00e      	b.n	8003ef4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ed6:	f7fe f805 	bl	8001ee4 <HAL_GetTick>
 8003eda:	4602      	mov	r2, r0
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	d907      	bls.n	8003ef4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003ee4:	2303      	movs	r3, #3
 8003ee6:	e15c      	b.n	80041a2 <HAL_RCC_OscConfig+0x52e>
 8003ee8:	40023800 	.word	0x40023800
 8003eec:	42470000 	.word	0x42470000
 8003ef0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ef4:	4b8a      	ldr	r3, [pc, #552]	@ (8004120 <HAL_RCC_OscConfig+0x4ac>)
 8003ef6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ef8:	f003 0302 	and.w	r3, r3, #2
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d1ea      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0304 	and.w	r3, r3, #4
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	f000 8097 	beq.w	800403c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f12:	4b83      	ldr	r3, [pc, #524]	@ (8004120 <HAL_RCC_OscConfig+0x4ac>)
 8003f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d10f      	bne.n	8003f3e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f1e:	2300      	movs	r3, #0
 8003f20:	60bb      	str	r3, [r7, #8]
 8003f22:	4b7f      	ldr	r3, [pc, #508]	@ (8004120 <HAL_RCC_OscConfig+0x4ac>)
 8003f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f26:	4a7e      	ldr	r2, [pc, #504]	@ (8004120 <HAL_RCC_OscConfig+0x4ac>)
 8003f28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f2e:	4b7c      	ldr	r3, [pc, #496]	@ (8004120 <HAL_RCC_OscConfig+0x4ac>)
 8003f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f36:	60bb      	str	r3, [r7, #8]
 8003f38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f3e:	4b79      	ldr	r3, [pc, #484]	@ (8004124 <HAL_RCC_OscConfig+0x4b0>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d118      	bne.n	8003f7c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f4a:	4b76      	ldr	r3, [pc, #472]	@ (8004124 <HAL_RCC_OscConfig+0x4b0>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a75      	ldr	r2, [pc, #468]	@ (8004124 <HAL_RCC_OscConfig+0x4b0>)
 8003f50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f56:	f7fd ffc5 	bl	8001ee4 <HAL_GetTick>
 8003f5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f5c:	e008      	b.n	8003f70 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f5e:	f7fd ffc1 	bl	8001ee4 <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d901      	bls.n	8003f70 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003f6c:	2303      	movs	r3, #3
 8003f6e:	e118      	b.n	80041a2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f70:	4b6c      	ldr	r3, [pc, #432]	@ (8004124 <HAL_RCC_OscConfig+0x4b0>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d0f0      	beq.n	8003f5e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d106      	bne.n	8003f92 <HAL_RCC_OscConfig+0x31e>
 8003f84:	4b66      	ldr	r3, [pc, #408]	@ (8004120 <HAL_RCC_OscConfig+0x4ac>)
 8003f86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f88:	4a65      	ldr	r2, [pc, #404]	@ (8004120 <HAL_RCC_OscConfig+0x4ac>)
 8003f8a:	f043 0301 	orr.w	r3, r3, #1
 8003f8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f90:	e01c      	b.n	8003fcc <HAL_RCC_OscConfig+0x358>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	2b05      	cmp	r3, #5
 8003f98:	d10c      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x340>
 8003f9a:	4b61      	ldr	r3, [pc, #388]	@ (8004120 <HAL_RCC_OscConfig+0x4ac>)
 8003f9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f9e:	4a60      	ldr	r2, [pc, #384]	@ (8004120 <HAL_RCC_OscConfig+0x4ac>)
 8003fa0:	f043 0304 	orr.w	r3, r3, #4
 8003fa4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fa6:	4b5e      	ldr	r3, [pc, #376]	@ (8004120 <HAL_RCC_OscConfig+0x4ac>)
 8003fa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003faa:	4a5d      	ldr	r2, [pc, #372]	@ (8004120 <HAL_RCC_OscConfig+0x4ac>)
 8003fac:	f043 0301 	orr.w	r3, r3, #1
 8003fb0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fb2:	e00b      	b.n	8003fcc <HAL_RCC_OscConfig+0x358>
 8003fb4:	4b5a      	ldr	r3, [pc, #360]	@ (8004120 <HAL_RCC_OscConfig+0x4ac>)
 8003fb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fb8:	4a59      	ldr	r2, [pc, #356]	@ (8004120 <HAL_RCC_OscConfig+0x4ac>)
 8003fba:	f023 0301 	bic.w	r3, r3, #1
 8003fbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fc0:	4b57      	ldr	r3, [pc, #348]	@ (8004120 <HAL_RCC_OscConfig+0x4ac>)
 8003fc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fc4:	4a56      	ldr	r2, [pc, #344]	@ (8004120 <HAL_RCC_OscConfig+0x4ac>)
 8003fc6:	f023 0304 	bic.w	r3, r3, #4
 8003fca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d015      	beq.n	8004000 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fd4:	f7fd ff86 	bl	8001ee4 <HAL_GetTick>
 8003fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fda:	e00a      	b.n	8003ff2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fdc:	f7fd ff82 	bl	8001ee4 <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d901      	bls.n	8003ff2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e0d7      	b.n	80041a2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ff2:	4b4b      	ldr	r3, [pc, #300]	@ (8004120 <HAL_RCC_OscConfig+0x4ac>)
 8003ff4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ff6:	f003 0302 	and.w	r3, r3, #2
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d0ee      	beq.n	8003fdc <HAL_RCC_OscConfig+0x368>
 8003ffe:	e014      	b.n	800402a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004000:	f7fd ff70 	bl	8001ee4 <HAL_GetTick>
 8004004:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004006:	e00a      	b.n	800401e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004008:	f7fd ff6c 	bl	8001ee4 <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004016:	4293      	cmp	r3, r2
 8004018:	d901      	bls.n	800401e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e0c1      	b.n	80041a2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800401e:	4b40      	ldr	r3, [pc, #256]	@ (8004120 <HAL_RCC_OscConfig+0x4ac>)
 8004020:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004022:	f003 0302 	and.w	r3, r3, #2
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1ee      	bne.n	8004008 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800402a:	7dfb      	ldrb	r3, [r7, #23]
 800402c:	2b01      	cmp	r3, #1
 800402e:	d105      	bne.n	800403c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004030:	4b3b      	ldr	r3, [pc, #236]	@ (8004120 <HAL_RCC_OscConfig+0x4ac>)
 8004032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004034:	4a3a      	ldr	r2, [pc, #232]	@ (8004120 <HAL_RCC_OscConfig+0x4ac>)
 8004036:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800403a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	699b      	ldr	r3, [r3, #24]
 8004040:	2b00      	cmp	r3, #0
 8004042:	f000 80ad 	beq.w	80041a0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004046:	4b36      	ldr	r3, [pc, #216]	@ (8004120 <HAL_RCC_OscConfig+0x4ac>)
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	f003 030c 	and.w	r3, r3, #12
 800404e:	2b08      	cmp	r3, #8
 8004050:	d060      	beq.n	8004114 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	2b02      	cmp	r3, #2
 8004058:	d145      	bne.n	80040e6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800405a:	4b33      	ldr	r3, [pc, #204]	@ (8004128 <HAL_RCC_OscConfig+0x4b4>)
 800405c:	2200      	movs	r2, #0
 800405e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004060:	f7fd ff40 	bl	8001ee4 <HAL_GetTick>
 8004064:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004066:	e008      	b.n	800407a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004068:	f7fd ff3c 	bl	8001ee4 <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	2b02      	cmp	r3, #2
 8004074:	d901      	bls.n	800407a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e093      	b.n	80041a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800407a:	4b29      	ldr	r3, [pc, #164]	@ (8004120 <HAL_RCC_OscConfig+0x4ac>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1f0      	bne.n	8004068 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	69da      	ldr	r2, [r3, #28]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a1b      	ldr	r3, [r3, #32]
 800408e:	431a      	orrs	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004094:	019b      	lsls	r3, r3, #6
 8004096:	431a      	orrs	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800409c:	085b      	lsrs	r3, r3, #1
 800409e:	3b01      	subs	r3, #1
 80040a0:	041b      	lsls	r3, r3, #16
 80040a2:	431a      	orrs	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040a8:	061b      	lsls	r3, r3, #24
 80040aa:	431a      	orrs	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040b0:	071b      	lsls	r3, r3, #28
 80040b2:	491b      	ldr	r1, [pc, #108]	@ (8004120 <HAL_RCC_OscConfig+0x4ac>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040b8:	4b1b      	ldr	r3, [pc, #108]	@ (8004128 <HAL_RCC_OscConfig+0x4b4>)
 80040ba:	2201      	movs	r2, #1
 80040bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040be:	f7fd ff11 	bl	8001ee4 <HAL_GetTick>
 80040c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040c4:	e008      	b.n	80040d8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040c6:	f7fd ff0d 	bl	8001ee4 <HAL_GetTick>
 80040ca:	4602      	mov	r2, r0
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d901      	bls.n	80040d8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	e064      	b.n	80041a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040d8:	4b11      	ldr	r3, [pc, #68]	@ (8004120 <HAL_RCC_OscConfig+0x4ac>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d0f0      	beq.n	80040c6 <HAL_RCC_OscConfig+0x452>
 80040e4:	e05c      	b.n	80041a0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040e6:	4b10      	ldr	r3, [pc, #64]	@ (8004128 <HAL_RCC_OscConfig+0x4b4>)
 80040e8:	2200      	movs	r2, #0
 80040ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ec:	f7fd fefa 	bl	8001ee4 <HAL_GetTick>
 80040f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040f2:	e008      	b.n	8004106 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040f4:	f7fd fef6 	bl	8001ee4 <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d901      	bls.n	8004106 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e04d      	b.n	80041a2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004106:	4b06      	ldr	r3, [pc, #24]	@ (8004120 <HAL_RCC_OscConfig+0x4ac>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d1f0      	bne.n	80040f4 <HAL_RCC_OscConfig+0x480>
 8004112:	e045      	b.n	80041a0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	2b01      	cmp	r3, #1
 800411a:	d107      	bne.n	800412c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e040      	b.n	80041a2 <HAL_RCC_OscConfig+0x52e>
 8004120:	40023800 	.word	0x40023800
 8004124:	40007000 	.word	0x40007000
 8004128:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800412c:	4b1f      	ldr	r3, [pc, #124]	@ (80041ac <HAL_RCC_OscConfig+0x538>)
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	2b01      	cmp	r3, #1
 8004138:	d030      	beq.n	800419c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004144:	429a      	cmp	r2, r3
 8004146:	d129      	bne.n	800419c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004152:	429a      	cmp	r2, r3
 8004154:	d122      	bne.n	800419c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004156:	68fa      	ldr	r2, [r7, #12]
 8004158:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800415c:	4013      	ands	r3, r2
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004162:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004164:	4293      	cmp	r3, r2
 8004166:	d119      	bne.n	800419c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004172:	085b      	lsrs	r3, r3, #1
 8004174:	3b01      	subs	r3, #1
 8004176:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004178:	429a      	cmp	r2, r3
 800417a:	d10f      	bne.n	800419c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004186:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004188:	429a      	cmp	r2, r3
 800418a:	d107      	bne.n	800419c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004196:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004198:	429a      	cmp	r2, r3
 800419a:	d001      	beq.n	80041a0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e000      	b.n	80041a2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3718      	adds	r7, #24
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	40023800 	.word	0x40023800

080041b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d101      	bne.n	80041c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e042      	b.n	8004248 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d106      	bne.n	80041dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f7fd fcc0 	bl	8001b5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2224      	movs	r2, #36	@ 0x24
 80041e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68da      	ldr	r2, [r3, #12]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80041f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f000 f973 	bl	80044e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	691a      	ldr	r2, [r3, #16]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004208:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	695a      	ldr	r2, [r3, #20]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004218:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68da      	ldr	r2, [r3, #12]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004228:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2220      	movs	r2, #32
 8004234:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2220      	movs	r2, #32
 800423c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004246:	2300      	movs	r3, #0
}
 8004248:	4618      	mov	r0, r3
 800424a:	3708      	adds	r7, #8
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b08a      	sub	sp, #40	@ 0x28
 8004254:	af02      	add	r7, sp, #8
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	603b      	str	r3, [r7, #0]
 800425c:	4613      	mov	r3, r2
 800425e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004260:	2300      	movs	r3, #0
 8004262:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800426a:	b2db      	uxtb	r3, r3
 800426c:	2b20      	cmp	r3, #32
 800426e:	d175      	bne.n	800435c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d002      	beq.n	800427c <HAL_UART_Transmit+0x2c>
 8004276:	88fb      	ldrh	r3, [r7, #6]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d101      	bne.n	8004280 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e06e      	b.n	800435e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2200      	movs	r2, #0
 8004284:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2221      	movs	r2, #33	@ 0x21
 800428a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800428e:	f7fd fe29 	bl	8001ee4 <HAL_GetTick>
 8004292:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	88fa      	ldrh	r2, [r7, #6]
 8004298:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	88fa      	ldrh	r2, [r7, #6]
 800429e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042a8:	d108      	bne.n	80042bc <HAL_UART_Transmit+0x6c>
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d104      	bne.n	80042bc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80042b2:	2300      	movs	r3, #0
 80042b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	61bb      	str	r3, [r7, #24]
 80042ba:	e003      	b.n	80042c4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042c0:	2300      	movs	r3, #0
 80042c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80042c4:	e02e      	b.n	8004324 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	9300      	str	r3, [sp, #0]
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	2200      	movs	r2, #0
 80042ce:	2180      	movs	r1, #128	@ 0x80
 80042d0:	68f8      	ldr	r0, [r7, #12]
 80042d2:	f000 f848 	bl	8004366 <UART_WaitOnFlagUntilTimeout>
 80042d6:	4603      	mov	r3, r0
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d005      	beq.n	80042e8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2220      	movs	r2, #32
 80042e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e03a      	b.n	800435e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d10b      	bne.n	8004306 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	881b      	ldrh	r3, [r3, #0]
 80042f2:	461a      	mov	r2, r3
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	3302      	adds	r3, #2
 8004302:	61bb      	str	r3, [r7, #24]
 8004304:	e007      	b.n	8004316 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	781a      	ldrb	r2, [r3, #0]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	3301      	adds	r3, #1
 8004314:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800431a:	b29b      	uxth	r3, r3
 800431c:	3b01      	subs	r3, #1
 800431e:	b29a      	uxth	r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004328:	b29b      	uxth	r3, r3
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1cb      	bne.n	80042c6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	9300      	str	r3, [sp, #0]
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	2200      	movs	r2, #0
 8004336:	2140      	movs	r1, #64	@ 0x40
 8004338:	68f8      	ldr	r0, [r7, #12]
 800433a:	f000 f814 	bl	8004366 <UART_WaitOnFlagUntilTimeout>
 800433e:	4603      	mov	r3, r0
 8004340:	2b00      	cmp	r3, #0
 8004342:	d005      	beq.n	8004350 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2220      	movs	r2, #32
 8004348:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e006      	b.n	800435e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2220      	movs	r2, #32
 8004354:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004358:	2300      	movs	r3, #0
 800435a:	e000      	b.n	800435e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800435c:	2302      	movs	r3, #2
  }
}
 800435e:	4618      	mov	r0, r3
 8004360:	3720      	adds	r7, #32
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}

08004366 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004366:	b580      	push	{r7, lr}
 8004368:	b086      	sub	sp, #24
 800436a:	af00      	add	r7, sp, #0
 800436c:	60f8      	str	r0, [r7, #12]
 800436e:	60b9      	str	r1, [r7, #8]
 8004370:	603b      	str	r3, [r7, #0]
 8004372:	4613      	mov	r3, r2
 8004374:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004376:	e03b      	b.n	80043f0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004378:	6a3b      	ldr	r3, [r7, #32]
 800437a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800437e:	d037      	beq.n	80043f0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004380:	f7fd fdb0 	bl	8001ee4 <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	6a3a      	ldr	r2, [r7, #32]
 800438c:	429a      	cmp	r2, r3
 800438e:	d302      	bcc.n	8004396 <UART_WaitOnFlagUntilTimeout+0x30>
 8004390:	6a3b      	ldr	r3, [r7, #32]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d101      	bne.n	800439a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e03a      	b.n	8004410 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	f003 0304 	and.w	r3, r3, #4
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d023      	beq.n	80043f0 <UART_WaitOnFlagUntilTimeout+0x8a>
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	2b80      	cmp	r3, #128	@ 0x80
 80043ac:	d020      	beq.n	80043f0 <UART_WaitOnFlagUntilTimeout+0x8a>
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	2b40      	cmp	r3, #64	@ 0x40
 80043b2:	d01d      	beq.n	80043f0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0308 	and.w	r3, r3, #8
 80043be:	2b08      	cmp	r3, #8
 80043c0:	d116      	bne.n	80043f0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80043c2:	2300      	movs	r3, #0
 80043c4:	617b      	str	r3, [r7, #20]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	617b      	str	r3, [r7, #20]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	617b      	str	r3, [r7, #20]
 80043d6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80043d8:	68f8      	ldr	r0, [r7, #12]
 80043da:	f000 f81d 	bl	8004418 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2208      	movs	r2, #8
 80043e2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e00f      	b.n	8004410 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	4013      	ands	r3, r2
 80043fa:	68ba      	ldr	r2, [r7, #8]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	bf0c      	ite	eq
 8004400:	2301      	moveq	r3, #1
 8004402:	2300      	movne	r3, #0
 8004404:	b2db      	uxtb	r3, r3
 8004406:	461a      	mov	r2, r3
 8004408:	79fb      	ldrb	r3, [r7, #7]
 800440a:	429a      	cmp	r2, r3
 800440c:	d0b4      	beq.n	8004378 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800440e:	2300      	movs	r3, #0
}
 8004410:	4618      	mov	r0, r3
 8004412:	3718      	adds	r7, #24
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004418:	b480      	push	{r7}
 800441a:	b095      	sub	sp, #84	@ 0x54
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	330c      	adds	r3, #12
 8004426:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004428:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800442a:	e853 3f00 	ldrex	r3, [r3]
 800442e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004432:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004436:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	330c      	adds	r3, #12
 800443e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004440:	643a      	str	r2, [r7, #64]	@ 0x40
 8004442:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004444:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004446:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004448:	e841 2300 	strex	r3, r2, [r1]
 800444c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800444e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004450:	2b00      	cmp	r3, #0
 8004452:	d1e5      	bne.n	8004420 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	3314      	adds	r3, #20
 800445a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800445c:	6a3b      	ldr	r3, [r7, #32]
 800445e:	e853 3f00 	ldrex	r3, [r3]
 8004462:	61fb      	str	r3, [r7, #28]
   return(result);
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	f023 0301 	bic.w	r3, r3, #1
 800446a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	3314      	adds	r3, #20
 8004472:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004474:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004476:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004478:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800447a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800447c:	e841 2300 	strex	r3, r2, [r1]
 8004480:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004484:	2b00      	cmp	r3, #0
 8004486:	d1e5      	bne.n	8004454 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800448c:	2b01      	cmp	r3, #1
 800448e:	d119      	bne.n	80044c4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	330c      	adds	r3, #12
 8004496:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	e853 3f00 	ldrex	r3, [r3]
 800449e:	60bb      	str	r3, [r7, #8]
   return(result);
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	f023 0310 	bic.w	r3, r3, #16
 80044a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	330c      	adds	r3, #12
 80044ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80044b0:	61ba      	str	r2, [r7, #24]
 80044b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b4:	6979      	ldr	r1, [r7, #20]
 80044b6:	69ba      	ldr	r2, [r7, #24]
 80044b8:	e841 2300 	strex	r3, r2, [r1]
 80044bc:	613b      	str	r3, [r7, #16]
   return(result);
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d1e5      	bne.n	8004490 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2220      	movs	r2, #32
 80044c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80044d2:	bf00      	nop
 80044d4:	3754      	adds	r7, #84	@ 0x54
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
	...

080044e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044e4:	b0c0      	sub	sp, #256	@ 0x100
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	691b      	ldr	r3, [r3, #16]
 80044f4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80044f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044fc:	68d9      	ldr	r1, [r3, #12]
 80044fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	ea40 0301 	orr.w	r3, r0, r1
 8004508:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800450a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800450e:	689a      	ldr	r2, [r3, #8]
 8004510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	431a      	orrs	r2, r3
 8004518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800451c:	695b      	ldr	r3, [r3, #20]
 800451e:	431a      	orrs	r2, r3
 8004520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004524:	69db      	ldr	r3, [r3, #28]
 8004526:	4313      	orrs	r3, r2
 8004528:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800452c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004538:	f021 010c 	bic.w	r1, r1, #12
 800453c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004546:	430b      	orrs	r3, r1
 8004548:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800454a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	695b      	ldr	r3, [r3, #20]
 8004552:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800455a:	6999      	ldr	r1, [r3, #24]
 800455c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	ea40 0301 	orr.w	r3, r0, r1
 8004566:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	4b8f      	ldr	r3, [pc, #572]	@ (80047ac <UART_SetConfig+0x2cc>)
 8004570:	429a      	cmp	r2, r3
 8004572:	d005      	beq.n	8004580 <UART_SetConfig+0xa0>
 8004574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	4b8d      	ldr	r3, [pc, #564]	@ (80047b0 <UART_SetConfig+0x2d0>)
 800457c:	429a      	cmp	r2, r3
 800457e:	d104      	bne.n	800458a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004580:	f7ff f9ba 	bl	80038f8 <HAL_RCC_GetPCLK2Freq>
 8004584:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004588:	e003      	b.n	8004592 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800458a:	f7ff f9a1 	bl	80038d0 <HAL_RCC_GetPCLK1Freq>
 800458e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004596:	69db      	ldr	r3, [r3, #28]
 8004598:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800459c:	f040 810c 	bne.w	80047b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80045a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045a4:	2200      	movs	r2, #0
 80045a6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80045aa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80045ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80045b2:	4622      	mov	r2, r4
 80045b4:	462b      	mov	r3, r5
 80045b6:	1891      	adds	r1, r2, r2
 80045b8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80045ba:	415b      	adcs	r3, r3
 80045bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80045be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80045c2:	4621      	mov	r1, r4
 80045c4:	eb12 0801 	adds.w	r8, r2, r1
 80045c8:	4629      	mov	r1, r5
 80045ca:	eb43 0901 	adc.w	r9, r3, r1
 80045ce:	f04f 0200 	mov.w	r2, #0
 80045d2:	f04f 0300 	mov.w	r3, #0
 80045d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045e2:	4690      	mov	r8, r2
 80045e4:	4699      	mov	r9, r3
 80045e6:	4623      	mov	r3, r4
 80045e8:	eb18 0303 	adds.w	r3, r8, r3
 80045ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80045f0:	462b      	mov	r3, r5
 80045f2:	eb49 0303 	adc.w	r3, r9, r3
 80045f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80045fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004606:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800460a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800460e:	460b      	mov	r3, r1
 8004610:	18db      	adds	r3, r3, r3
 8004612:	653b      	str	r3, [r7, #80]	@ 0x50
 8004614:	4613      	mov	r3, r2
 8004616:	eb42 0303 	adc.w	r3, r2, r3
 800461a:	657b      	str	r3, [r7, #84]	@ 0x54
 800461c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004620:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004624:	f7fc fae0 	bl	8000be8 <__aeabi_uldivmod>
 8004628:	4602      	mov	r2, r0
 800462a:	460b      	mov	r3, r1
 800462c:	4b61      	ldr	r3, [pc, #388]	@ (80047b4 <UART_SetConfig+0x2d4>)
 800462e:	fba3 2302 	umull	r2, r3, r3, r2
 8004632:	095b      	lsrs	r3, r3, #5
 8004634:	011c      	lsls	r4, r3, #4
 8004636:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800463a:	2200      	movs	r2, #0
 800463c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004640:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004644:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004648:	4642      	mov	r2, r8
 800464a:	464b      	mov	r3, r9
 800464c:	1891      	adds	r1, r2, r2
 800464e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004650:	415b      	adcs	r3, r3
 8004652:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004654:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004658:	4641      	mov	r1, r8
 800465a:	eb12 0a01 	adds.w	sl, r2, r1
 800465e:	4649      	mov	r1, r9
 8004660:	eb43 0b01 	adc.w	fp, r3, r1
 8004664:	f04f 0200 	mov.w	r2, #0
 8004668:	f04f 0300 	mov.w	r3, #0
 800466c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004670:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004674:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004678:	4692      	mov	sl, r2
 800467a:	469b      	mov	fp, r3
 800467c:	4643      	mov	r3, r8
 800467e:	eb1a 0303 	adds.w	r3, sl, r3
 8004682:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004686:	464b      	mov	r3, r9
 8004688:	eb4b 0303 	adc.w	r3, fp, r3
 800468c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800469c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80046a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80046a4:	460b      	mov	r3, r1
 80046a6:	18db      	adds	r3, r3, r3
 80046a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80046aa:	4613      	mov	r3, r2
 80046ac:	eb42 0303 	adc.w	r3, r2, r3
 80046b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80046b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80046b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80046ba:	f7fc fa95 	bl	8000be8 <__aeabi_uldivmod>
 80046be:	4602      	mov	r2, r0
 80046c0:	460b      	mov	r3, r1
 80046c2:	4611      	mov	r1, r2
 80046c4:	4b3b      	ldr	r3, [pc, #236]	@ (80047b4 <UART_SetConfig+0x2d4>)
 80046c6:	fba3 2301 	umull	r2, r3, r3, r1
 80046ca:	095b      	lsrs	r3, r3, #5
 80046cc:	2264      	movs	r2, #100	@ 0x64
 80046ce:	fb02 f303 	mul.w	r3, r2, r3
 80046d2:	1acb      	subs	r3, r1, r3
 80046d4:	00db      	lsls	r3, r3, #3
 80046d6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80046da:	4b36      	ldr	r3, [pc, #216]	@ (80047b4 <UART_SetConfig+0x2d4>)
 80046dc:	fba3 2302 	umull	r2, r3, r3, r2
 80046e0:	095b      	lsrs	r3, r3, #5
 80046e2:	005b      	lsls	r3, r3, #1
 80046e4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80046e8:	441c      	add	r4, r3
 80046ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046ee:	2200      	movs	r2, #0
 80046f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80046f4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80046f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80046fc:	4642      	mov	r2, r8
 80046fe:	464b      	mov	r3, r9
 8004700:	1891      	adds	r1, r2, r2
 8004702:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004704:	415b      	adcs	r3, r3
 8004706:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004708:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800470c:	4641      	mov	r1, r8
 800470e:	1851      	adds	r1, r2, r1
 8004710:	6339      	str	r1, [r7, #48]	@ 0x30
 8004712:	4649      	mov	r1, r9
 8004714:	414b      	adcs	r3, r1
 8004716:	637b      	str	r3, [r7, #52]	@ 0x34
 8004718:	f04f 0200 	mov.w	r2, #0
 800471c:	f04f 0300 	mov.w	r3, #0
 8004720:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004724:	4659      	mov	r1, fp
 8004726:	00cb      	lsls	r3, r1, #3
 8004728:	4651      	mov	r1, sl
 800472a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800472e:	4651      	mov	r1, sl
 8004730:	00ca      	lsls	r2, r1, #3
 8004732:	4610      	mov	r0, r2
 8004734:	4619      	mov	r1, r3
 8004736:	4603      	mov	r3, r0
 8004738:	4642      	mov	r2, r8
 800473a:	189b      	adds	r3, r3, r2
 800473c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004740:	464b      	mov	r3, r9
 8004742:	460a      	mov	r2, r1
 8004744:	eb42 0303 	adc.w	r3, r2, r3
 8004748:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800474c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004758:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800475c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004760:	460b      	mov	r3, r1
 8004762:	18db      	adds	r3, r3, r3
 8004764:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004766:	4613      	mov	r3, r2
 8004768:	eb42 0303 	adc.w	r3, r2, r3
 800476c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800476e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004772:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004776:	f7fc fa37 	bl	8000be8 <__aeabi_uldivmod>
 800477a:	4602      	mov	r2, r0
 800477c:	460b      	mov	r3, r1
 800477e:	4b0d      	ldr	r3, [pc, #52]	@ (80047b4 <UART_SetConfig+0x2d4>)
 8004780:	fba3 1302 	umull	r1, r3, r3, r2
 8004784:	095b      	lsrs	r3, r3, #5
 8004786:	2164      	movs	r1, #100	@ 0x64
 8004788:	fb01 f303 	mul.w	r3, r1, r3
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	00db      	lsls	r3, r3, #3
 8004790:	3332      	adds	r3, #50	@ 0x32
 8004792:	4a08      	ldr	r2, [pc, #32]	@ (80047b4 <UART_SetConfig+0x2d4>)
 8004794:	fba2 2303 	umull	r2, r3, r2, r3
 8004798:	095b      	lsrs	r3, r3, #5
 800479a:	f003 0207 	and.w	r2, r3, #7
 800479e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4422      	add	r2, r4
 80047a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80047a8:	e106      	b.n	80049b8 <UART_SetConfig+0x4d8>
 80047aa:	bf00      	nop
 80047ac:	40011000 	.word	0x40011000
 80047b0:	40011400 	.word	0x40011400
 80047b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047bc:	2200      	movs	r2, #0
 80047be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80047c2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80047c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80047ca:	4642      	mov	r2, r8
 80047cc:	464b      	mov	r3, r9
 80047ce:	1891      	adds	r1, r2, r2
 80047d0:	6239      	str	r1, [r7, #32]
 80047d2:	415b      	adcs	r3, r3
 80047d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80047d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80047da:	4641      	mov	r1, r8
 80047dc:	1854      	adds	r4, r2, r1
 80047de:	4649      	mov	r1, r9
 80047e0:	eb43 0501 	adc.w	r5, r3, r1
 80047e4:	f04f 0200 	mov.w	r2, #0
 80047e8:	f04f 0300 	mov.w	r3, #0
 80047ec:	00eb      	lsls	r3, r5, #3
 80047ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047f2:	00e2      	lsls	r2, r4, #3
 80047f4:	4614      	mov	r4, r2
 80047f6:	461d      	mov	r5, r3
 80047f8:	4643      	mov	r3, r8
 80047fa:	18e3      	adds	r3, r4, r3
 80047fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004800:	464b      	mov	r3, r9
 8004802:	eb45 0303 	adc.w	r3, r5, r3
 8004806:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800480a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	2200      	movs	r2, #0
 8004812:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004816:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800481a:	f04f 0200 	mov.w	r2, #0
 800481e:	f04f 0300 	mov.w	r3, #0
 8004822:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004826:	4629      	mov	r1, r5
 8004828:	008b      	lsls	r3, r1, #2
 800482a:	4621      	mov	r1, r4
 800482c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004830:	4621      	mov	r1, r4
 8004832:	008a      	lsls	r2, r1, #2
 8004834:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004838:	f7fc f9d6 	bl	8000be8 <__aeabi_uldivmod>
 800483c:	4602      	mov	r2, r0
 800483e:	460b      	mov	r3, r1
 8004840:	4b60      	ldr	r3, [pc, #384]	@ (80049c4 <UART_SetConfig+0x4e4>)
 8004842:	fba3 2302 	umull	r2, r3, r3, r2
 8004846:	095b      	lsrs	r3, r3, #5
 8004848:	011c      	lsls	r4, r3, #4
 800484a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800484e:	2200      	movs	r2, #0
 8004850:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004854:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004858:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800485c:	4642      	mov	r2, r8
 800485e:	464b      	mov	r3, r9
 8004860:	1891      	adds	r1, r2, r2
 8004862:	61b9      	str	r1, [r7, #24]
 8004864:	415b      	adcs	r3, r3
 8004866:	61fb      	str	r3, [r7, #28]
 8004868:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800486c:	4641      	mov	r1, r8
 800486e:	1851      	adds	r1, r2, r1
 8004870:	6139      	str	r1, [r7, #16]
 8004872:	4649      	mov	r1, r9
 8004874:	414b      	adcs	r3, r1
 8004876:	617b      	str	r3, [r7, #20]
 8004878:	f04f 0200 	mov.w	r2, #0
 800487c:	f04f 0300 	mov.w	r3, #0
 8004880:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004884:	4659      	mov	r1, fp
 8004886:	00cb      	lsls	r3, r1, #3
 8004888:	4651      	mov	r1, sl
 800488a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800488e:	4651      	mov	r1, sl
 8004890:	00ca      	lsls	r2, r1, #3
 8004892:	4610      	mov	r0, r2
 8004894:	4619      	mov	r1, r3
 8004896:	4603      	mov	r3, r0
 8004898:	4642      	mov	r2, r8
 800489a:	189b      	adds	r3, r3, r2
 800489c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80048a0:	464b      	mov	r3, r9
 80048a2:	460a      	mov	r2, r1
 80048a4:	eb42 0303 	adc.w	r3, r2, r3
 80048a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80048ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80048b6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80048b8:	f04f 0200 	mov.w	r2, #0
 80048bc:	f04f 0300 	mov.w	r3, #0
 80048c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80048c4:	4649      	mov	r1, r9
 80048c6:	008b      	lsls	r3, r1, #2
 80048c8:	4641      	mov	r1, r8
 80048ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048ce:	4641      	mov	r1, r8
 80048d0:	008a      	lsls	r2, r1, #2
 80048d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80048d6:	f7fc f987 	bl	8000be8 <__aeabi_uldivmod>
 80048da:	4602      	mov	r2, r0
 80048dc:	460b      	mov	r3, r1
 80048de:	4611      	mov	r1, r2
 80048e0:	4b38      	ldr	r3, [pc, #224]	@ (80049c4 <UART_SetConfig+0x4e4>)
 80048e2:	fba3 2301 	umull	r2, r3, r3, r1
 80048e6:	095b      	lsrs	r3, r3, #5
 80048e8:	2264      	movs	r2, #100	@ 0x64
 80048ea:	fb02 f303 	mul.w	r3, r2, r3
 80048ee:	1acb      	subs	r3, r1, r3
 80048f0:	011b      	lsls	r3, r3, #4
 80048f2:	3332      	adds	r3, #50	@ 0x32
 80048f4:	4a33      	ldr	r2, [pc, #204]	@ (80049c4 <UART_SetConfig+0x4e4>)
 80048f6:	fba2 2303 	umull	r2, r3, r2, r3
 80048fa:	095b      	lsrs	r3, r3, #5
 80048fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004900:	441c      	add	r4, r3
 8004902:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004906:	2200      	movs	r2, #0
 8004908:	673b      	str	r3, [r7, #112]	@ 0x70
 800490a:	677a      	str	r2, [r7, #116]	@ 0x74
 800490c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004910:	4642      	mov	r2, r8
 8004912:	464b      	mov	r3, r9
 8004914:	1891      	adds	r1, r2, r2
 8004916:	60b9      	str	r1, [r7, #8]
 8004918:	415b      	adcs	r3, r3
 800491a:	60fb      	str	r3, [r7, #12]
 800491c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004920:	4641      	mov	r1, r8
 8004922:	1851      	adds	r1, r2, r1
 8004924:	6039      	str	r1, [r7, #0]
 8004926:	4649      	mov	r1, r9
 8004928:	414b      	adcs	r3, r1
 800492a:	607b      	str	r3, [r7, #4]
 800492c:	f04f 0200 	mov.w	r2, #0
 8004930:	f04f 0300 	mov.w	r3, #0
 8004934:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004938:	4659      	mov	r1, fp
 800493a:	00cb      	lsls	r3, r1, #3
 800493c:	4651      	mov	r1, sl
 800493e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004942:	4651      	mov	r1, sl
 8004944:	00ca      	lsls	r2, r1, #3
 8004946:	4610      	mov	r0, r2
 8004948:	4619      	mov	r1, r3
 800494a:	4603      	mov	r3, r0
 800494c:	4642      	mov	r2, r8
 800494e:	189b      	adds	r3, r3, r2
 8004950:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004952:	464b      	mov	r3, r9
 8004954:	460a      	mov	r2, r1
 8004956:	eb42 0303 	adc.w	r3, r2, r3
 800495a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800495c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	663b      	str	r3, [r7, #96]	@ 0x60
 8004966:	667a      	str	r2, [r7, #100]	@ 0x64
 8004968:	f04f 0200 	mov.w	r2, #0
 800496c:	f04f 0300 	mov.w	r3, #0
 8004970:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004974:	4649      	mov	r1, r9
 8004976:	008b      	lsls	r3, r1, #2
 8004978:	4641      	mov	r1, r8
 800497a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800497e:	4641      	mov	r1, r8
 8004980:	008a      	lsls	r2, r1, #2
 8004982:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004986:	f7fc f92f 	bl	8000be8 <__aeabi_uldivmod>
 800498a:	4602      	mov	r2, r0
 800498c:	460b      	mov	r3, r1
 800498e:	4b0d      	ldr	r3, [pc, #52]	@ (80049c4 <UART_SetConfig+0x4e4>)
 8004990:	fba3 1302 	umull	r1, r3, r3, r2
 8004994:	095b      	lsrs	r3, r3, #5
 8004996:	2164      	movs	r1, #100	@ 0x64
 8004998:	fb01 f303 	mul.w	r3, r1, r3
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	011b      	lsls	r3, r3, #4
 80049a0:	3332      	adds	r3, #50	@ 0x32
 80049a2:	4a08      	ldr	r2, [pc, #32]	@ (80049c4 <UART_SetConfig+0x4e4>)
 80049a4:	fba2 2303 	umull	r2, r3, r2, r3
 80049a8:	095b      	lsrs	r3, r3, #5
 80049aa:	f003 020f 	and.w	r2, r3, #15
 80049ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4422      	add	r2, r4
 80049b6:	609a      	str	r2, [r3, #8]
}
 80049b8:	bf00      	nop
 80049ba:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80049be:	46bd      	mov	sp, r7
 80049c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049c4:	51eb851f 	.word	0x51eb851f

080049c8 <__cvt>:
 80049c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049cc:	ec57 6b10 	vmov	r6, r7, d0
 80049d0:	2f00      	cmp	r7, #0
 80049d2:	460c      	mov	r4, r1
 80049d4:	4619      	mov	r1, r3
 80049d6:	463b      	mov	r3, r7
 80049d8:	bfbb      	ittet	lt
 80049da:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80049de:	461f      	movlt	r7, r3
 80049e0:	2300      	movge	r3, #0
 80049e2:	232d      	movlt	r3, #45	@ 0x2d
 80049e4:	700b      	strb	r3, [r1, #0]
 80049e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80049e8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80049ec:	4691      	mov	r9, r2
 80049ee:	f023 0820 	bic.w	r8, r3, #32
 80049f2:	bfbc      	itt	lt
 80049f4:	4632      	movlt	r2, r6
 80049f6:	4616      	movlt	r6, r2
 80049f8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80049fc:	d005      	beq.n	8004a0a <__cvt+0x42>
 80049fe:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004a02:	d100      	bne.n	8004a06 <__cvt+0x3e>
 8004a04:	3401      	adds	r4, #1
 8004a06:	2102      	movs	r1, #2
 8004a08:	e000      	b.n	8004a0c <__cvt+0x44>
 8004a0a:	2103      	movs	r1, #3
 8004a0c:	ab03      	add	r3, sp, #12
 8004a0e:	9301      	str	r3, [sp, #4]
 8004a10:	ab02      	add	r3, sp, #8
 8004a12:	9300      	str	r3, [sp, #0]
 8004a14:	ec47 6b10 	vmov	d0, r6, r7
 8004a18:	4653      	mov	r3, sl
 8004a1a:	4622      	mov	r2, r4
 8004a1c:	f000 fde4 	bl	80055e8 <_dtoa_r>
 8004a20:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004a24:	4605      	mov	r5, r0
 8004a26:	d119      	bne.n	8004a5c <__cvt+0x94>
 8004a28:	f019 0f01 	tst.w	r9, #1
 8004a2c:	d00e      	beq.n	8004a4c <__cvt+0x84>
 8004a2e:	eb00 0904 	add.w	r9, r0, r4
 8004a32:	2200      	movs	r2, #0
 8004a34:	2300      	movs	r3, #0
 8004a36:	4630      	mov	r0, r6
 8004a38:	4639      	mov	r1, r7
 8004a3a:	f7fc f865 	bl	8000b08 <__aeabi_dcmpeq>
 8004a3e:	b108      	cbz	r0, 8004a44 <__cvt+0x7c>
 8004a40:	f8cd 900c 	str.w	r9, [sp, #12]
 8004a44:	2230      	movs	r2, #48	@ 0x30
 8004a46:	9b03      	ldr	r3, [sp, #12]
 8004a48:	454b      	cmp	r3, r9
 8004a4a:	d31e      	bcc.n	8004a8a <__cvt+0xc2>
 8004a4c:	9b03      	ldr	r3, [sp, #12]
 8004a4e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004a50:	1b5b      	subs	r3, r3, r5
 8004a52:	4628      	mov	r0, r5
 8004a54:	6013      	str	r3, [r2, #0]
 8004a56:	b004      	add	sp, #16
 8004a58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a5c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004a60:	eb00 0904 	add.w	r9, r0, r4
 8004a64:	d1e5      	bne.n	8004a32 <__cvt+0x6a>
 8004a66:	7803      	ldrb	r3, [r0, #0]
 8004a68:	2b30      	cmp	r3, #48	@ 0x30
 8004a6a:	d10a      	bne.n	8004a82 <__cvt+0xba>
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	2300      	movs	r3, #0
 8004a70:	4630      	mov	r0, r6
 8004a72:	4639      	mov	r1, r7
 8004a74:	f7fc f848 	bl	8000b08 <__aeabi_dcmpeq>
 8004a78:	b918      	cbnz	r0, 8004a82 <__cvt+0xba>
 8004a7a:	f1c4 0401 	rsb	r4, r4, #1
 8004a7e:	f8ca 4000 	str.w	r4, [sl]
 8004a82:	f8da 3000 	ldr.w	r3, [sl]
 8004a86:	4499      	add	r9, r3
 8004a88:	e7d3      	b.n	8004a32 <__cvt+0x6a>
 8004a8a:	1c59      	adds	r1, r3, #1
 8004a8c:	9103      	str	r1, [sp, #12]
 8004a8e:	701a      	strb	r2, [r3, #0]
 8004a90:	e7d9      	b.n	8004a46 <__cvt+0x7e>

08004a92 <__exponent>:
 8004a92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a94:	2900      	cmp	r1, #0
 8004a96:	bfba      	itte	lt
 8004a98:	4249      	neglt	r1, r1
 8004a9a:	232d      	movlt	r3, #45	@ 0x2d
 8004a9c:	232b      	movge	r3, #43	@ 0x2b
 8004a9e:	2909      	cmp	r1, #9
 8004aa0:	7002      	strb	r2, [r0, #0]
 8004aa2:	7043      	strb	r3, [r0, #1]
 8004aa4:	dd29      	ble.n	8004afa <__exponent+0x68>
 8004aa6:	f10d 0307 	add.w	r3, sp, #7
 8004aaa:	461d      	mov	r5, r3
 8004aac:	270a      	movs	r7, #10
 8004aae:	461a      	mov	r2, r3
 8004ab0:	fbb1 f6f7 	udiv	r6, r1, r7
 8004ab4:	fb07 1416 	mls	r4, r7, r6, r1
 8004ab8:	3430      	adds	r4, #48	@ 0x30
 8004aba:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004abe:	460c      	mov	r4, r1
 8004ac0:	2c63      	cmp	r4, #99	@ 0x63
 8004ac2:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8004ac6:	4631      	mov	r1, r6
 8004ac8:	dcf1      	bgt.n	8004aae <__exponent+0x1c>
 8004aca:	3130      	adds	r1, #48	@ 0x30
 8004acc:	1e94      	subs	r4, r2, #2
 8004ace:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004ad2:	1c41      	adds	r1, r0, #1
 8004ad4:	4623      	mov	r3, r4
 8004ad6:	42ab      	cmp	r3, r5
 8004ad8:	d30a      	bcc.n	8004af0 <__exponent+0x5e>
 8004ada:	f10d 0309 	add.w	r3, sp, #9
 8004ade:	1a9b      	subs	r3, r3, r2
 8004ae0:	42ac      	cmp	r4, r5
 8004ae2:	bf88      	it	hi
 8004ae4:	2300      	movhi	r3, #0
 8004ae6:	3302      	adds	r3, #2
 8004ae8:	4403      	add	r3, r0
 8004aea:	1a18      	subs	r0, r3, r0
 8004aec:	b003      	add	sp, #12
 8004aee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004af0:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004af4:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004af8:	e7ed      	b.n	8004ad6 <__exponent+0x44>
 8004afa:	2330      	movs	r3, #48	@ 0x30
 8004afc:	3130      	adds	r1, #48	@ 0x30
 8004afe:	7083      	strb	r3, [r0, #2]
 8004b00:	70c1      	strb	r1, [r0, #3]
 8004b02:	1d03      	adds	r3, r0, #4
 8004b04:	e7f1      	b.n	8004aea <__exponent+0x58>
	...

08004b08 <_printf_float>:
 8004b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b0c:	b08d      	sub	sp, #52	@ 0x34
 8004b0e:	460c      	mov	r4, r1
 8004b10:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004b14:	4616      	mov	r6, r2
 8004b16:	461f      	mov	r7, r3
 8004b18:	4605      	mov	r5, r0
 8004b1a:	f000 fcd9 	bl	80054d0 <_localeconv_r>
 8004b1e:	6803      	ldr	r3, [r0, #0]
 8004b20:	9304      	str	r3, [sp, #16]
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7fb fbc4 	bl	80002b0 <strlen>
 8004b28:	2300      	movs	r3, #0
 8004b2a:	930a      	str	r3, [sp, #40]	@ 0x28
 8004b2c:	f8d8 3000 	ldr.w	r3, [r8]
 8004b30:	9005      	str	r0, [sp, #20]
 8004b32:	3307      	adds	r3, #7
 8004b34:	f023 0307 	bic.w	r3, r3, #7
 8004b38:	f103 0208 	add.w	r2, r3, #8
 8004b3c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004b40:	f8d4 b000 	ldr.w	fp, [r4]
 8004b44:	f8c8 2000 	str.w	r2, [r8]
 8004b48:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004b4c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004b50:	9307      	str	r3, [sp, #28]
 8004b52:	f8cd 8018 	str.w	r8, [sp, #24]
 8004b56:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004b5a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b5e:	4b9c      	ldr	r3, [pc, #624]	@ (8004dd0 <_printf_float+0x2c8>)
 8004b60:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004b64:	f7fc f802 	bl	8000b6c <__aeabi_dcmpun>
 8004b68:	bb70      	cbnz	r0, 8004bc8 <_printf_float+0xc0>
 8004b6a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b6e:	4b98      	ldr	r3, [pc, #608]	@ (8004dd0 <_printf_float+0x2c8>)
 8004b70:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004b74:	f7fb ffdc 	bl	8000b30 <__aeabi_dcmple>
 8004b78:	bb30      	cbnz	r0, 8004bc8 <_printf_float+0xc0>
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	4640      	mov	r0, r8
 8004b80:	4649      	mov	r1, r9
 8004b82:	f7fb ffcb 	bl	8000b1c <__aeabi_dcmplt>
 8004b86:	b110      	cbz	r0, 8004b8e <_printf_float+0x86>
 8004b88:	232d      	movs	r3, #45	@ 0x2d
 8004b8a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b8e:	4a91      	ldr	r2, [pc, #580]	@ (8004dd4 <_printf_float+0x2cc>)
 8004b90:	4b91      	ldr	r3, [pc, #580]	@ (8004dd8 <_printf_float+0x2d0>)
 8004b92:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004b96:	bf8c      	ite	hi
 8004b98:	4690      	movhi	r8, r2
 8004b9a:	4698      	movls	r8, r3
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	6123      	str	r3, [r4, #16]
 8004ba0:	f02b 0304 	bic.w	r3, fp, #4
 8004ba4:	6023      	str	r3, [r4, #0]
 8004ba6:	f04f 0900 	mov.w	r9, #0
 8004baa:	9700      	str	r7, [sp, #0]
 8004bac:	4633      	mov	r3, r6
 8004bae:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004bb0:	4621      	mov	r1, r4
 8004bb2:	4628      	mov	r0, r5
 8004bb4:	f000 f9d2 	bl	8004f5c <_printf_common>
 8004bb8:	3001      	adds	r0, #1
 8004bba:	f040 808d 	bne.w	8004cd8 <_printf_float+0x1d0>
 8004bbe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004bc2:	b00d      	add	sp, #52	@ 0x34
 8004bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bc8:	4642      	mov	r2, r8
 8004bca:	464b      	mov	r3, r9
 8004bcc:	4640      	mov	r0, r8
 8004bce:	4649      	mov	r1, r9
 8004bd0:	f7fb ffcc 	bl	8000b6c <__aeabi_dcmpun>
 8004bd4:	b140      	cbz	r0, 8004be8 <_printf_float+0xe0>
 8004bd6:	464b      	mov	r3, r9
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	bfbc      	itt	lt
 8004bdc:	232d      	movlt	r3, #45	@ 0x2d
 8004bde:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004be2:	4a7e      	ldr	r2, [pc, #504]	@ (8004ddc <_printf_float+0x2d4>)
 8004be4:	4b7e      	ldr	r3, [pc, #504]	@ (8004de0 <_printf_float+0x2d8>)
 8004be6:	e7d4      	b.n	8004b92 <_printf_float+0x8a>
 8004be8:	6863      	ldr	r3, [r4, #4]
 8004bea:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004bee:	9206      	str	r2, [sp, #24]
 8004bf0:	1c5a      	adds	r2, r3, #1
 8004bf2:	d13b      	bne.n	8004c6c <_printf_float+0x164>
 8004bf4:	2306      	movs	r3, #6
 8004bf6:	6063      	str	r3, [r4, #4]
 8004bf8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	6022      	str	r2, [r4, #0]
 8004c00:	9303      	str	r3, [sp, #12]
 8004c02:	ab0a      	add	r3, sp, #40	@ 0x28
 8004c04:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004c08:	ab09      	add	r3, sp, #36	@ 0x24
 8004c0a:	9300      	str	r3, [sp, #0]
 8004c0c:	6861      	ldr	r1, [r4, #4]
 8004c0e:	ec49 8b10 	vmov	d0, r8, r9
 8004c12:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004c16:	4628      	mov	r0, r5
 8004c18:	f7ff fed6 	bl	80049c8 <__cvt>
 8004c1c:	9b06      	ldr	r3, [sp, #24]
 8004c1e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004c20:	2b47      	cmp	r3, #71	@ 0x47
 8004c22:	4680      	mov	r8, r0
 8004c24:	d129      	bne.n	8004c7a <_printf_float+0x172>
 8004c26:	1cc8      	adds	r0, r1, #3
 8004c28:	db02      	blt.n	8004c30 <_printf_float+0x128>
 8004c2a:	6863      	ldr	r3, [r4, #4]
 8004c2c:	4299      	cmp	r1, r3
 8004c2e:	dd41      	ble.n	8004cb4 <_printf_float+0x1ac>
 8004c30:	f1aa 0a02 	sub.w	sl, sl, #2
 8004c34:	fa5f fa8a 	uxtb.w	sl, sl
 8004c38:	3901      	subs	r1, #1
 8004c3a:	4652      	mov	r2, sl
 8004c3c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004c40:	9109      	str	r1, [sp, #36]	@ 0x24
 8004c42:	f7ff ff26 	bl	8004a92 <__exponent>
 8004c46:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004c48:	1813      	adds	r3, r2, r0
 8004c4a:	2a01      	cmp	r2, #1
 8004c4c:	4681      	mov	r9, r0
 8004c4e:	6123      	str	r3, [r4, #16]
 8004c50:	dc02      	bgt.n	8004c58 <_printf_float+0x150>
 8004c52:	6822      	ldr	r2, [r4, #0]
 8004c54:	07d2      	lsls	r2, r2, #31
 8004c56:	d501      	bpl.n	8004c5c <_printf_float+0x154>
 8004c58:	3301      	adds	r3, #1
 8004c5a:	6123      	str	r3, [r4, #16]
 8004c5c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d0a2      	beq.n	8004baa <_printf_float+0xa2>
 8004c64:	232d      	movs	r3, #45	@ 0x2d
 8004c66:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c6a:	e79e      	b.n	8004baa <_printf_float+0xa2>
 8004c6c:	9a06      	ldr	r2, [sp, #24]
 8004c6e:	2a47      	cmp	r2, #71	@ 0x47
 8004c70:	d1c2      	bne.n	8004bf8 <_printf_float+0xf0>
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d1c0      	bne.n	8004bf8 <_printf_float+0xf0>
 8004c76:	2301      	movs	r3, #1
 8004c78:	e7bd      	b.n	8004bf6 <_printf_float+0xee>
 8004c7a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004c7e:	d9db      	bls.n	8004c38 <_printf_float+0x130>
 8004c80:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004c84:	d118      	bne.n	8004cb8 <_printf_float+0x1b0>
 8004c86:	2900      	cmp	r1, #0
 8004c88:	6863      	ldr	r3, [r4, #4]
 8004c8a:	dd0b      	ble.n	8004ca4 <_printf_float+0x19c>
 8004c8c:	6121      	str	r1, [r4, #16]
 8004c8e:	b913      	cbnz	r3, 8004c96 <_printf_float+0x18e>
 8004c90:	6822      	ldr	r2, [r4, #0]
 8004c92:	07d0      	lsls	r0, r2, #31
 8004c94:	d502      	bpl.n	8004c9c <_printf_float+0x194>
 8004c96:	3301      	adds	r3, #1
 8004c98:	440b      	add	r3, r1
 8004c9a:	6123      	str	r3, [r4, #16]
 8004c9c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004c9e:	f04f 0900 	mov.w	r9, #0
 8004ca2:	e7db      	b.n	8004c5c <_printf_float+0x154>
 8004ca4:	b913      	cbnz	r3, 8004cac <_printf_float+0x1a4>
 8004ca6:	6822      	ldr	r2, [r4, #0]
 8004ca8:	07d2      	lsls	r2, r2, #31
 8004caa:	d501      	bpl.n	8004cb0 <_printf_float+0x1a8>
 8004cac:	3302      	adds	r3, #2
 8004cae:	e7f4      	b.n	8004c9a <_printf_float+0x192>
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e7f2      	b.n	8004c9a <_printf_float+0x192>
 8004cb4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004cb8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004cba:	4299      	cmp	r1, r3
 8004cbc:	db05      	blt.n	8004cca <_printf_float+0x1c2>
 8004cbe:	6823      	ldr	r3, [r4, #0]
 8004cc0:	6121      	str	r1, [r4, #16]
 8004cc2:	07d8      	lsls	r0, r3, #31
 8004cc4:	d5ea      	bpl.n	8004c9c <_printf_float+0x194>
 8004cc6:	1c4b      	adds	r3, r1, #1
 8004cc8:	e7e7      	b.n	8004c9a <_printf_float+0x192>
 8004cca:	2900      	cmp	r1, #0
 8004ccc:	bfd4      	ite	le
 8004cce:	f1c1 0202 	rsble	r2, r1, #2
 8004cd2:	2201      	movgt	r2, #1
 8004cd4:	4413      	add	r3, r2
 8004cd6:	e7e0      	b.n	8004c9a <_printf_float+0x192>
 8004cd8:	6823      	ldr	r3, [r4, #0]
 8004cda:	055a      	lsls	r2, r3, #21
 8004cdc:	d407      	bmi.n	8004cee <_printf_float+0x1e6>
 8004cde:	6923      	ldr	r3, [r4, #16]
 8004ce0:	4642      	mov	r2, r8
 8004ce2:	4631      	mov	r1, r6
 8004ce4:	4628      	mov	r0, r5
 8004ce6:	47b8      	blx	r7
 8004ce8:	3001      	adds	r0, #1
 8004cea:	d12b      	bne.n	8004d44 <_printf_float+0x23c>
 8004cec:	e767      	b.n	8004bbe <_printf_float+0xb6>
 8004cee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004cf2:	f240 80dd 	bls.w	8004eb0 <_printf_float+0x3a8>
 8004cf6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	f7fb ff03 	bl	8000b08 <__aeabi_dcmpeq>
 8004d02:	2800      	cmp	r0, #0
 8004d04:	d033      	beq.n	8004d6e <_printf_float+0x266>
 8004d06:	4a37      	ldr	r2, [pc, #220]	@ (8004de4 <_printf_float+0x2dc>)
 8004d08:	2301      	movs	r3, #1
 8004d0a:	4631      	mov	r1, r6
 8004d0c:	4628      	mov	r0, r5
 8004d0e:	47b8      	blx	r7
 8004d10:	3001      	adds	r0, #1
 8004d12:	f43f af54 	beq.w	8004bbe <_printf_float+0xb6>
 8004d16:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004d1a:	4543      	cmp	r3, r8
 8004d1c:	db02      	blt.n	8004d24 <_printf_float+0x21c>
 8004d1e:	6823      	ldr	r3, [r4, #0]
 8004d20:	07d8      	lsls	r0, r3, #31
 8004d22:	d50f      	bpl.n	8004d44 <_printf_float+0x23c>
 8004d24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d28:	4631      	mov	r1, r6
 8004d2a:	4628      	mov	r0, r5
 8004d2c:	47b8      	blx	r7
 8004d2e:	3001      	adds	r0, #1
 8004d30:	f43f af45 	beq.w	8004bbe <_printf_float+0xb6>
 8004d34:	f04f 0900 	mov.w	r9, #0
 8004d38:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8004d3c:	f104 0a1a 	add.w	sl, r4, #26
 8004d40:	45c8      	cmp	r8, r9
 8004d42:	dc09      	bgt.n	8004d58 <_printf_float+0x250>
 8004d44:	6823      	ldr	r3, [r4, #0]
 8004d46:	079b      	lsls	r3, r3, #30
 8004d48:	f100 8103 	bmi.w	8004f52 <_printf_float+0x44a>
 8004d4c:	68e0      	ldr	r0, [r4, #12]
 8004d4e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004d50:	4298      	cmp	r0, r3
 8004d52:	bfb8      	it	lt
 8004d54:	4618      	movlt	r0, r3
 8004d56:	e734      	b.n	8004bc2 <_printf_float+0xba>
 8004d58:	2301      	movs	r3, #1
 8004d5a:	4652      	mov	r2, sl
 8004d5c:	4631      	mov	r1, r6
 8004d5e:	4628      	mov	r0, r5
 8004d60:	47b8      	blx	r7
 8004d62:	3001      	adds	r0, #1
 8004d64:	f43f af2b 	beq.w	8004bbe <_printf_float+0xb6>
 8004d68:	f109 0901 	add.w	r9, r9, #1
 8004d6c:	e7e8      	b.n	8004d40 <_printf_float+0x238>
 8004d6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	dc39      	bgt.n	8004de8 <_printf_float+0x2e0>
 8004d74:	4a1b      	ldr	r2, [pc, #108]	@ (8004de4 <_printf_float+0x2dc>)
 8004d76:	2301      	movs	r3, #1
 8004d78:	4631      	mov	r1, r6
 8004d7a:	4628      	mov	r0, r5
 8004d7c:	47b8      	blx	r7
 8004d7e:	3001      	adds	r0, #1
 8004d80:	f43f af1d 	beq.w	8004bbe <_printf_float+0xb6>
 8004d84:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004d88:	ea59 0303 	orrs.w	r3, r9, r3
 8004d8c:	d102      	bne.n	8004d94 <_printf_float+0x28c>
 8004d8e:	6823      	ldr	r3, [r4, #0]
 8004d90:	07d9      	lsls	r1, r3, #31
 8004d92:	d5d7      	bpl.n	8004d44 <_printf_float+0x23c>
 8004d94:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d98:	4631      	mov	r1, r6
 8004d9a:	4628      	mov	r0, r5
 8004d9c:	47b8      	blx	r7
 8004d9e:	3001      	adds	r0, #1
 8004da0:	f43f af0d 	beq.w	8004bbe <_printf_float+0xb6>
 8004da4:	f04f 0a00 	mov.w	sl, #0
 8004da8:	f104 0b1a 	add.w	fp, r4, #26
 8004dac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004dae:	425b      	negs	r3, r3
 8004db0:	4553      	cmp	r3, sl
 8004db2:	dc01      	bgt.n	8004db8 <_printf_float+0x2b0>
 8004db4:	464b      	mov	r3, r9
 8004db6:	e793      	b.n	8004ce0 <_printf_float+0x1d8>
 8004db8:	2301      	movs	r3, #1
 8004dba:	465a      	mov	r2, fp
 8004dbc:	4631      	mov	r1, r6
 8004dbe:	4628      	mov	r0, r5
 8004dc0:	47b8      	blx	r7
 8004dc2:	3001      	adds	r0, #1
 8004dc4:	f43f aefb 	beq.w	8004bbe <_printf_float+0xb6>
 8004dc8:	f10a 0a01 	add.w	sl, sl, #1
 8004dcc:	e7ee      	b.n	8004dac <_printf_float+0x2a4>
 8004dce:	bf00      	nop
 8004dd0:	7fefffff 	.word	0x7fefffff
 8004dd4:	0800844c 	.word	0x0800844c
 8004dd8:	08008448 	.word	0x08008448
 8004ddc:	08008454 	.word	0x08008454
 8004de0:	08008450 	.word	0x08008450
 8004de4:	08008458 	.word	0x08008458
 8004de8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004dea:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004dee:	4553      	cmp	r3, sl
 8004df0:	bfa8      	it	ge
 8004df2:	4653      	movge	r3, sl
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	4699      	mov	r9, r3
 8004df8:	dc36      	bgt.n	8004e68 <_printf_float+0x360>
 8004dfa:	f04f 0b00 	mov.w	fp, #0
 8004dfe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004e02:	f104 021a 	add.w	r2, r4, #26
 8004e06:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004e08:	9306      	str	r3, [sp, #24]
 8004e0a:	eba3 0309 	sub.w	r3, r3, r9
 8004e0e:	455b      	cmp	r3, fp
 8004e10:	dc31      	bgt.n	8004e76 <_printf_float+0x36e>
 8004e12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e14:	459a      	cmp	sl, r3
 8004e16:	dc3a      	bgt.n	8004e8e <_printf_float+0x386>
 8004e18:	6823      	ldr	r3, [r4, #0]
 8004e1a:	07da      	lsls	r2, r3, #31
 8004e1c:	d437      	bmi.n	8004e8e <_printf_float+0x386>
 8004e1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e20:	ebaa 0903 	sub.w	r9, sl, r3
 8004e24:	9b06      	ldr	r3, [sp, #24]
 8004e26:	ebaa 0303 	sub.w	r3, sl, r3
 8004e2a:	4599      	cmp	r9, r3
 8004e2c:	bfa8      	it	ge
 8004e2e:	4699      	movge	r9, r3
 8004e30:	f1b9 0f00 	cmp.w	r9, #0
 8004e34:	dc33      	bgt.n	8004e9e <_printf_float+0x396>
 8004e36:	f04f 0800 	mov.w	r8, #0
 8004e3a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004e3e:	f104 0b1a 	add.w	fp, r4, #26
 8004e42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e44:	ebaa 0303 	sub.w	r3, sl, r3
 8004e48:	eba3 0309 	sub.w	r3, r3, r9
 8004e4c:	4543      	cmp	r3, r8
 8004e4e:	f77f af79 	ble.w	8004d44 <_printf_float+0x23c>
 8004e52:	2301      	movs	r3, #1
 8004e54:	465a      	mov	r2, fp
 8004e56:	4631      	mov	r1, r6
 8004e58:	4628      	mov	r0, r5
 8004e5a:	47b8      	blx	r7
 8004e5c:	3001      	adds	r0, #1
 8004e5e:	f43f aeae 	beq.w	8004bbe <_printf_float+0xb6>
 8004e62:	f108 0801 	add.w	r8, r8, #1
 8004e66:	e7ec      	b.n	8004e42 <_printf_float+0x33a>
 8004e68:	4642      	mov	r2, r8
 8004e6a:	4631      	mov	r1, r6
 8004e6c:	4628      	mov	r0, r5
 8004e6e:	47b8      	blx	r7
 8004e70:	3001      	adds	r0, #1
 8004e72:	d1c2      	bne.n	8004dfa <_printf_float+0x2f2>
 8004e74:	e6a3      	b.n	8004bbe <_printf_float+0xb6>
 8004e76:	2301      	movs	r3, #1
 8004e78:	4631      	mov	r1, r6
 8004e7a:	4628      	mov	r0, r5
 8004e7c:	9206      	str	r2, [sp, #24]
 8004e7e:	47b8      	blx	r7
 8004e80:	3001      	adds	r0, #1
 8004e82:	f43f ae9c 	beq.w	8004bbe <_printf_float+0xb6>
 8004e86:	9a06      	ldr	r2, [sp, #24]
 8004e88:	f10b 0b01 	add.w	fp, fp, #1
 8004e8c:	e7bb      	b.n	8004e06 <_printf_float+0x2fe>
 8004e8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e92:	4631      	mov	r1, r6
 8004e94:	4628      	mov	r0, r5
 8004e96:	47b8      	blx	r7
 8004e98:	3001      	adds	r0, #1
 8004e9a:	d1c0      	bne.n	8004e1e <_printf_float+0x316>
 8004e9c:	e68f      	b.n	8004bbe <_printf_float+0xb6>
 8004e9e:	9a06      	ldr	r2, [sp, #24]
 8004ea0:	464b      	mov	r3, r9
 8004ea2:	4442      	add	r2, r8
 8004ea4:	4631      	mov	r1, r6
 8004ea6:	4628      	mov	r0, r5
 8004ea8:	47b8      	blx	r7
 8004eaa:	3001      	adds	r0, #1
 8004eac:	d1c3      	bne.n	8004e36 <_printf_float+0x32e>
 8004eae:	e686      	b.n	8004bbe <_printf_float+0xb6>
 8004eb0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004eb4:	f1ba 0f01 	cmp.w	sl, #1
 8004eb8:	dc01      	bgt.n	8004ebe <_printf_float+0x3b6>
 8004eba:	07db      	lsls	r3, r3, #31
 8004ebc:	d536      	bpl.n	8004f2c <_printf_float+0x424>
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	4642      	mov	r2, r8
 8004ec2:	4631      	mov	r1, r6
 8004ec4:	4628      	mov	r0, r5
 8004ec6:	47b8      	blx	r7
 8004ec8:	3001      	adds	r0, #1
 8004eca:	f43f ae78 	beq.w	8004bbe <_printf_float+0xb6>
 8004ece:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ed2:	4631      	mov	r1, r6
 8004ed4:	4628      	mov	r0, r5
 8004ed6:	47b8      	blx	r7
 8004ed8:	3001      	adds	r0, #1
 8004eda:	f43f ae70 	beq.w	8004bbe <_printf_float+0xb6>
 8004ede:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8004eea:	f7fb fe0d 	bl	8000b08 <__aeabi_dcmpeq>
 8004eee:	b9c0      	cbnz	r0, 8004f22 <_printf_float+0x41a>
 8004ef0:	4653      	mov	r3, sl
 8004ef2:	f108 0201 	add.w	r2, r8, #1
 8004ef6:	4631      	mov	r1, r6
 8004ef8:	4628      	mov	r0, r5
 8004efa:	47b8      	blx	r7
 8004efc:	3001      	adds	r0, #1
 8004efe:	d10c      	bne.n	8004f1a <_printf_float+0x412>
 8004f00:	e65d      	b.n	8004bbe <_printf_float+0xb6>
 8004f02:	2301      	movs	r3, #1
 8004f04:	465a      	mov	r2, fp
 8004f06:	4631      	mov	r1, r6
 8004f08:	4628      	mov	r0, r5
 8004f0a:	47b8      	blx	r7
 8004f0c:	3001      	adds	r0, #1
 8004f0e:	f43f ae56 	beq.w	8004bbe <_printf_float+0xb6>
 8004f12:	f108 0801 	add.w	r8, r8, #1
 8004f16:	45d0      	cmp	r8, sl
 8004f18:	dbf3      	blt.n	8004f02 <_printf_float+0x3fa>
 8004f1a:	464b      	mov	r3, r9
 8004f1c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004f20:	e6df      	b.n	8004ce2 <_printf_float+0x1da>
 8004f22:	f04f 0800 	mov.w	r8, #0
 8004f26:	f104 0b1a 	add.w	fp, r4, #26
 8004f2a:	e7f4      	b.n	8004f16 <_printf_float+0x40e>
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	4642      	mov	r2, r8
 8004f30:	e7e1      	b.n	8004ef6 <_printf_float+0x3ee>
 8004f32:	2301      	movs	r3, #1
 8004f34:	464a      	mov	r2, r9
 8004f36:	4631      	mov	r1, r6
 8004f38:	4628      	mov	r0, r5
 8004f3a:	47b8      	blx	r7
 8004f3c:	3001      	adds	r0, #1
 8004f3e:	f43f ae3e 	beq.w	8004bbe <_printf_float+0xb6>
 8004f42:	f108 0801 	add.w	r8, r8, #1
 8004f46:	68e3      	ldr	r3, [r4, #12]
 8004f48:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004f4a:	1a5b      	subs	r3, r3, r1
 8004f4c:	4543      	cmp	r3, r8
 8004f4e:	dcf0      	bgt.n	8004f32 <_printf_float+0x42a>
 8004f50:	e6fc      	b.n	8004d4c <_printf_float+0x244>
 8004f52:	f04f 0800 	mov.w	r8, #0
 8004f56:	f104 0919 	add.w	r9, r4, #25
 8004f5a:	e7f4      	b.n	8004f46 <_printf_float+0x43e>

08004f5c <_printf_common>:
 8004f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f60:	4616      	mov	r6, r2
 8004f62:	4698      	mov	r8, r3
 8004f64:	688a      	ldr	r2, [r1, #8]
 8004f66:	690b      	ldr	r3, [r1, #16]
 8004f68:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	bfb8      	it	lt
 8004f70:	4613      	movlt	r3, r2
 8004f72:	6033      	str	r3, [r6, #0]
 8004f74:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004f78:	4607      	mov	r7, r0
 8004f7a:	460c      	mov	r4, r1
 8004f7c:	b10a      	cbz	r2, 8004f82 <_printf_common+0x26>
 8004f7e:	3301      	adds	r3, #1
 8004f80:	6033      	str	r3, [r6, #0]
 8004f82:	6823      	ldr	r3, [r4, #0]
 8004f84:	0699      	lsls	r1, r3, #26
 8004f86:	bf42      	ittt	mi
 8004f88:	6833      	ldrmi	r3, [r6, #0]
 8004f8a:	3302      	addmi	r3, #2
 8004f8c:	6033      	strmi	r3, [r6, #0]
 8004f8e:	6825      	ldr	r5, [r4, #0]
 8004f90:	f015 0506 	ands.w	r5, r5, #6
 8004f94:	d106      	bne.n	8004fa4 <_printf_common+0x48>
 8004f96:	f104 0a19 	add.w	sl, r4, #25
 8004f9a:	68e3      	ldr	r3, [r4, #12]
 8004f9c:	6832      	ldr	r2, [r6, #0]
 8004f9e:	1a9b      	subs	r3, r3, r2
 8004fa0:	42ab      	cmp	r3, r5
 8004fa2:	dc26      	bgt.n	8004ff2 <_printf_common+0x96>
 8004fa4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004fa8:	6822      	ldr	r2, [r4, #0]
 8004faa:	3b00      	subs	r3, #0
 8004fac:	bf18      	it	ne
 8004fae:	2301      	movne	r3, #1
 8004fb0:	0692      	lsls	r2, r2, #26
 8004fb2:	d42b      	bmi.n	800500c <_printf_common+0xb0>
 8004fb4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004fb8:	4641      	mov	r1, r8
 8004fba:	4638      	mov	r0, r7
 8004fbc:	47c8      	blx	r9
 8004fbe:	3001      	adds	r0, #1
 8004fc0:	d01e      	beq.n	8005000 <_printf_common+0xa4>
 8004fc2:	6823      	ldr	r3, [r4, #0]
 8004fc4:	6922      	ldr	r2, [r4, #16]
 8004fc6:	f003 0306 	and.w	r3, r3, #6
 8004fca:	2b04      	cmp	r3, #4
 8004fcc:	bf02      	ittt	eq
 8004fce:	68e5      	ldreq	r5, [r4, #12]
 8004fd0:	6833      	ldreq	r3, [r6, #0]
 8004fd2:	1aed      	subeq	r5, r5, r3
 8004fd4:	68a3      	ldr	r3, [r4, #8]
 8004fd6:	bf0c      	ite	eq
 8004fd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004fdc:	2500      	movne	r5, #0
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	bfc4      	itt	gt
 8004fe2:	1a9b      	subgt	r3, r3, r2
 8004fe4:	18ed      	addgt	r5, r5, r3
 8004fe6:	2600      	movs	r6, #0
 8004fe8:	341a      	adds	r4, #26
 8004fea:	42b5      	cmp	r5, r6
 8004fec:	d11a      	bne.n	8005024 <_printf_common+0xc8>
 8004fee:	2000      	movs	r0, #0
 8004ff0:	e008      	b.n	8005004 <_printf_common+0xa8>
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	4652      	mov	r2, sl
 8004ff6:	4641      	mov	r1, r8
 8004ff8:	4638      	mov	r0, r7
 8004ffa:	47c8      	blx	r9
 8004ffc:	3001      	adds	r0, #1
 8004ffe:	d103      	bne.n	8005008 <_printf_common+0xac>
 8005000:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005008:	3501      	adds	r5, #1
 800500a:	e7c6      	b.n	8004f9a <_printf_common+0x3e>
 800500c:	18e1      	adds	r1, r4, r3
 800500e:	1c5a      	adds	r2, r3, #1
 8005010:	2030      	movs	r0, #48	@ 0x30
 8005012:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005016:	4422      	add	r2, r4
 8005018:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800501c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005020:	3302      	adds	r3, #2
 8005022:	e7c7      	b.n	8004fb4 <_printf_common+0x58>
 8005024:	2301      	movs	r3, #1
 8005026:	4622      	mov	r2, r4
 8005028:	4641      	mov	r1, r8
 800502a:	4638      	mov	r0, r7
 800502c:	47c8      	blx	r9
 800502e:	3001      	adds	r0, #1
 8005030:	d0e6      	beq.n	8005000 <_printf_common+0xa4>
 8005032:	3601      	adds	r6, #1
 8005034:	e7d9      	b.n	8004fea <_printf_common+0x8e>
	...

08005038 <_printf_i>:
 8005038:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800503c:	7e0f      	ldrb	r7, [r1, #24]
 800503e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005040:	2f78      	cmp	r7, #120	@ 0x78
 8005042:	4691      	mov	r9, r2
 8005044:	4680      	mov	r8, r0
 8005046:	460c      	mov	r4, r1
 8005048:	469a      	mov	sl, r3
 800504a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800504e:	d807      	bhi.n	8005060 <_printf_i+0x28>
 8005050:	2f62      	cmp	r7, #98	@ 0x62
 8005052:	d80a      	bhi.n	800506a <_printf_i+0x32>
 8005054:	2f00      	cmp	r7, #0
 8005056:	f000 80d1 	beq.w	80051fc <_printf_i+0x1c4>
 800505a:	2f58      	cmp	r7, #88	@ 0x58
 800505c:	f000 80b8 	beq.w	80051d0 <_printf_i+0x198>
 8005060:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005064:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005068:	e03a      	b.n	80050e0 <_printf_i+0xa8>
 800506a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800506e:	2b15      	cmp	r3, #21
 8005070:	d8f6      	bhi.n	8005060 <_printf_i+0x28>
 8005072:	a101      	add	r1, pc, #4	@ (adr r1, 8005078 <_printf_i+0x40>)
 8005074:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005078:	080050d1 	.word	0x080050d1
 800507c:	080050e5 	.word	0x080050e5
 8005080:	08005061 	.word	0x08005061
 8005084:	08005061 	.word	0x08005061
 8005088:	08005061 	.word	0x08005061
 800508c:	08005061 	.word	0x08005061
 8005090:	080050e5 	.word	0x080050e5
 8005094:	08005061 	.word	0x08005061
 8005098:	08005061 	.word	0x08005061
 800509c:	08005061 	.word	0x08005061
 80050a0:	08005061 	.word	0x08005061
 80050a4:	080051e3 	.word	0x080051e3
 80050a8:	0800510f 	.word	0x0800510f
 80050ac:	0800519d 	.word	0x0800519d
 80050b0:	08005061 	.word	0x08005061
 80050b4:	08005061 	.word	0x08005061
 80050b8:	08005205 	.word	0x08005205
 80050bc:	08005061 	.word	0x08005061
 80050c0:	0800510f 	.word	0x0800510f
 80050c4:	08005061 	.word	0x08005061
 80050c8:	08005061 	.word	0x08005061
 80050cc:	080051a5 	.word	0x080051a5
 80050d0:	6833      	ldr	r3, [r6, #0]
 80050d2:	1d1a      	adds	r2, r3, #4
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	6032      	str	r2, [r6, #0]
 80050d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80050dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80050e0:	2301      	movs	r3, #1
 80050e2:	e09c      	b.n	800521e <_printf_i+0x1e6>
 80050e4:	6833      	ldr	r3, [r6, #0]
 80050e6:	6820      	ldr	r0, [r4, #0]
 80050e8:	1d19      	adds	r1, r3, #4
 80050ea:	6031      	str	r1, [r6, #0]
 80050ec:	0606      	lsls	r6, r0, #24
 80050ee:	d501      	bpl.n	80050f4 <_printf_i+0xbc>
 80050f0:	681d      	ldr	r5, [r3, #0]
 80050f2:	e003      	b.n	80050fc <_printf_i+0xc4>
 80050f4:	0645      	lsls	r5, r0, #25
 80050f6:	d5fb      	bpl.n	80050f0 <_printf_i+0xb8>
 80050f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80050fc:	2d00      	cmp	r5, #0
 80050fe:	da03      	bge.n	8005108 <_printf_i+0xd0>
 8005100:	232d      	movs	r3, #45	@ 0x2d
 8005102:	426d      	negs	r5, r5
 8005104:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005108:	4858      	ldr	r0, [pc, #352]	@ (800526c <_printf_i+0x234>)
 800510a:	230a      	movs	r3, #10
 800510c:	e011      	b.n	8005132 <_printf_i+0xfa>
 800510e:	6821      	ldr	r1, [r4, #0]
 8005110:	6833      	ldr	r3, [r6, #0]
 8005112:	0608      	lsls	r0, r1, #24
 8005114:	f853 5b04 	ldr.w	r5, [r3], #4
 8005118:	d402      	bmi.n	8005120 <_printf_i+0xe8>
 800511a:	0649      	lsls	r1, r1, #25
 800511c:	bf48      	it	mi
 800511e:	b2ad      	uxthmi	r5, r5
 8005120:	2f6f      	cmp	r7, #111	@ 0x6f
 8005122:	4852      	ldr	r0, [pc, #328]	@ (800526c <_printf_i+0x234>)
 8005124:	6033      	str	r3, [r6, #0]
 8005126:	bf14      	ite	ne
 8005128:	230a      	movne	r3, #10
 800512a:	2308      	moveq	r3, #8
 800512c:	2100      	movs	r1, #0
 800512e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005132:	6866      	ldr	r6, [r4, #4]
 8005134:	60a6      	str	r6, [r4, #8]
 8005136:	2e00      	cmp	r6, #0
 8005138:	db05      	blt.n	8005146 <_printf_i+0x10e>
 800513a:	6821      	ldr	r1, [r4, #0]
 800513c:	432e      	orrs	r6, r5
 800513e:	f021 0104 	bic.w	r1, r1, #4
 8005142:	6021      	str	r1, [r4, #0]
 8005144:	d04b      	beq.n	80051de <_printf_i+0x1a6>
 8005146:	4616      	mov	r6, r2
 8005148:	fbb5 f1f3 	udiv	r1, r5, r3
 800514c:	fb03 5711 	mls	r7, r3, r1, r5
 8005150:	5dc7      	ldrb	r7, [r0, r7]
 8005152:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005156:	462f      	mov	r7, r5
 8005158:	42bb      	cmp	r3, r7
 800515a:	460d      	mov	r5, r1
 800515c:	d9f4      	bls.n	8005148 <_printf_i+0x110>
 800515e:	2b08      	cmp	r3, #8
 8005160:	d10b      	bne.n	800517a <_printf_i+0x142>
 8005162:	6823      	ldr	r3, [r4, #0]
 8005164:	07df      	lsls	r7, r3, #31
 8005166:	d508      	bpl.n	800517a <_printf_i+0x142>
 8005168:	6923      	ldr	r3, [r4, #16]
 800516a:	6861      	ldr	r1, [r4, #4]
 800516c:	4299      	cmp	r1, r3
 800516e:	bfde      	ittt	le
 8005170:	2330      	movle	r3, #48	@ 0x30
 8005172:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005176:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800517a:	1b92      	subs	r2, r2, r6
 800517c:	6122      	str	r2, [r4, #16]
 800517e:	f8cd a000 	str.w	sl, [sp]
 8005182:	464b      	mov	r3, r9
 8005184:	aa03      	add	r2, sp, #12
 8005186:	4621      	mov	r1, r4
 8005188:	4640      	mov	r0, r8
 800518a:	f7ff fee7 	bl	8004f5c <_printf_common>
 800518e:	3001      	adds	r0, #1
 8005190:	d14a      	bne.n	8005228 <_printf_i+0x1f0>
 8005192:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005196:	b004      	add	sp, #16
 8005198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800519c:	6823      	ldr	r3, [r4, #0]
 800519e:	f043 0320 	orr.w	r3, r3, #32
 80051a2:	6023      	str	r3, [r4, #0]
 80051a4:	4832      	ldr	r0, [pc, #200]	@ (8005270 <_printf_i+0x238>)
 80051a6:	2778      	movs	r7, #120	@ 0x78
 80051a8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80051ac:	6823      	ldr	r3, [r4, #0]
 80051ae:	6831      	ldr	r1, [r6, #0]
 80051b0:	061f      	lsls	r7, r3, #24
 80051b2:	f851 5b04 	ldr.w	r5, [r1], #4
 80051b6:	d402      	bmi.n	80051be <_printf_i+0x186>
 80051b8:	065f      	lsls	r7, r3, #25
 80051ba:	bf48      	it	mi
 80051bc:	b2ad      	uxthmi	r5, r5
 80051be:	6031      	str	r1, [r6, #0]
 80051c0:	07d9      	lsls	r1, r3, #31
 80051c2:	bf44      	itt	mi
 80051c4:	f043 0320 	orrmi.w	r3, r3, #32
 80051c8:	6023      	strmi	r3, [r4, #0]
 80051ca:	b11d      	cbz	r5, 80051d4 <_printf_i+0x19c>
 80051cc:	2310      	movs	r3, #16
 80051ce:	e7ad      	b.n	800512c <_printf_i+0xf4>
 80051d0:	4826      	ldr	r0, [pc, #152]	@ (800526c <_printf_i+0x234>)
 80051d2:	e7e9      	b.n	80051a8 <_printf_i+0x170>
 80051d4:	6823      	ldr	r3, [r4, #0]
 80051d6:	f023 0320 	bic.w	r3, r3, #32
 80051da:	6023      	str	r3, [r4, #0]
 80051dc:	e7f6      	b.n	80051cc <_printf_i+0x194>
 80051de:	4616      	mov	r6, r2
 80051e0:	e7bd      	b.n	800515e <_printf_i+0x126>
 80051e2:	6833      	ldr	r3, [r6, #0]
 80051e4:	6825      	ldr	r5, [r4, #0]
 80051e6:	6961      	ldr	r1, [r4, #20]
 80051e8:	1d18      	adds	r0, r3, #4
 80051ea:	6030      	str	r0, [r6, #0]
 80051ec:	062e      	lsls	r6, r5, #24
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	d501      	bpl.n	80051f6 <_printf_i+0x1be>
 80051f2:	6019      	str	r1, [r3, #0]
 80051f4:	e002      	b.n	80051fc <_printf_i+0x1c4>
 80051f6:	0668      	lsls	r0, r5, #25
 80051f8:	d5fb      	bpl.n	80051f2 <_printf_i+0x1ba>
 80051fa:	8019      	strh	r1, [r3, #0]
 80051fc:	2300      	movs	r3, #0
 80051fe:	6123      	str	r3, [r4, #16]
 8005200:	4616      	mov	r6, r2
 8005202:	e7bc      	b.n	800517e <_printf_i+0x146>
 8005204:	6833      	ldr	r3, [r6, #0]
 8005206:	1d1a      	adds	r2, r3, #4
 8005208:	6032      	str	r2, [r6, #0]
 800520a:	681e      	ldr	r6, [r3, #0]
 800520c:	6862      	ldr	r2, [r4, #4]
 800520e:	2100      	movs	r1, #0
 8005210:	4630      	mov	r0, r6
 8005212:	f7fa fffd 	bl	8000210 <memchr>
 8005216:	b108      	cbz	r0, 800521c <_printf_i+0x1e4>
 8005218:	1b80      	subs	r0, r0, r6
 800521a:	6060      	str	r0, [r4, #4]
 800521c:	6863      	ldr	r3, [r4, #4]
 800521e:	6123      	str	r3, [r4, #16]
 8005220:	2300      	movs	r3, #0
 8005222:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005226:	e7aa      	b.n	800517e <_printf_i+0x146>
 8005228:	6923      	ldr	r3, [r4, #16]
 800522a:	4632      	mov	r2, r6
 800522c:	4649      	mov	r1, r9
 800522e:	4640      	mov	r0, r8
 8005230:	47d0      	blx	sl
 8005232:	3001      	adds	r0, #1
 8005234:	d0ad      	beq.n	8005192 <_printf_i+0x15a>
 8005236:	6823      	ldr	r3, [r4, #0]
 8005238:	079b      	lsls	r3, r3, #30
 800523a:	d413      	bmi.n	8005264 <_printf_i+0x22c>
 800523c:	68e0      	ldr	r0, [r4, #12]
 800523e:	9b03      	ldr	r3, [sp, #12]
 8005240:	4298      	cmp	r0, r3
 8005242:	bfb8      	it	lt
 8005244:	4618      	movlt	r0, r3
 8005246:	e7a6      	b.n	8005196 <_printf_i+0x15e>
 8005248:	2301      	movs	r3, #1
 800524a:	4632      	mov	r2, r6
 800524c:	4649      	mov	r1, r9
 800524e:	4640      	mov	r0, r8
 8005250:	47d0      	blx	sl
 8005252:	3001      	adds	r0, #1
 8005254:	d09d      	beq.n	8005192 <_printf_i+0x15a>
 8005256:	3501      	adds	r5, #1
 8005258:	68e3      	ldr	r3, [r4, #12]
 800525a:	9903      	ldr	r1, [sp, #12]
 800525c:	1a5b      	subs	r3, r3, r1
 800525e:	42ab      	cmp	r3, r5
 8005260:	dcf2      	bgt.n	8005248 <_printf_i+0x210>
 8005262:	e7eb      	b.n	800523c <_printf_i+0x204>
 8005264:	2500      	movs	r5, #0
 8005266:	f104 0619 	add.w	r6, r4, #25
 800526a:	e7f5      	b.n	8005258 <_printf_i+0x220>
 800526c:	0800845a 	.word	0x0800845a
 8005270:	0800846b 	.word	0x0800846b

08005274 <sniprintf>:
 8005274:	b40c      	push	{r2, r3}
 8005276:	b530      	push	{r4, r5, lr}
 8005278:	4b18      	ldr	r3, [pc, #96]	@ (80052dc <sniprintf+0x68>)
 800527a:	1e0c      	subs	r4, r1, #0
 800527c:	681d      	ldr	r5, [r3, #0]
 800527e:	b09d      	sub	sp, #116	@ 0x74
 8005280:	da08      	bge.n	8005294 <sniprintf+0x20>
 8005282:	238b      	movs	r3, #139	@ 0x8b
 8005284:	602b      	str	r3, [r5, #0]
 8005286:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800528a:	b01d      	add	sp, #116	@ 0x74
 800528c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005290:	b002      	add	sp, #8
 8005292:	4770      	bx	lr
 8005294:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005298:	f8ad 3014 	strh.w	r3, [sp, #20]
 800529c:	f04f 0300 	mov.w	r3, #0
 80052a0:	931b      	str	r3, [sp, #108]	@ 0x6c
 80052a2:	bf14      	ite	ne
 80052a4:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80052a8:	4623      	moveq	r3, r4
 80052aa:	9304      	str	r3, [sp, #16]
 80052ac:	9307      	str	r3, [sp, #28]
 80052ae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80052b2:	9002      	str	r0, [sp, #8]
 80052b4:	9006      	str	r0, [sp, #24]
 80052b6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80052ba:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80052bc:	ab21      	add	r3, sp, #132	@ 0x84
 80052be:	a902      	add	r1, sp, #8
 80052c0:	4628      	mov	r0, r5
 80052c2:	9301      	str	r3, [sp, #4]
 80052c4:	f000 ffbc 	bl	8006240 <_svfiprintf_r>
 80052c8:	1c43      	adds	r3, r0, #1
 80052ca:	bfbc      	itt	lt
 80052cc:	238b      	movlt	r3, #139	@ 0x8b
 80052ce:	602b      	strlt	r3, [r5, #0]
 80052d0:	2c00      	cmp	r4, #0
 80052d2:	d0da      	beq.n	800528a <sniprintf+0x16>
 80052d4:	9b02      	ldr	r3, [sp, #8]
 80052d6:	2200      	movs	r2, #0
 80052d8:	701a      	strb	r2, [r3, #0]
 80052da:	e7d6      	b.n	800528a <sniprintf+0x16>
 80052dc:	20000020 	.word	0x20000020

080052e0 <std>:
 80052e0:	2300      	movs	r3, #0
 80052e2:	b510      	push	{r4, lr}
 80052e4:	4604      	mov	r4, r0
 80052e6:	e9c0 3300 	strd	r3, r3, [r0]
 80052ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80052ee:	6083      	str	r3, [r0, #8]
 80052f0:	8181      	strh	r1, [r0, #12]
 80052f2:	6643      	str	r3, [r0, #100]	@ 0x64
 80052f4:	81c2      	strh	r2, [r0, #14]
 80052f6:	6183      	str	r3, [r0, #24]
 80052f8:	4619      	mov	r1, r3
 80052fa:	2208      	movs	r2, #8
 80052fc:	305c      	adds	r0, #92	@ 0x5c
 80052fe:	f000 f8b1 	bl	8005464 <memset>
 8005302:	4b0d      	ldr	r3, [pc, #52]	@ (8005338 <std+0x58>)
 8005304:	6263      	str	r3, [r4, #36]	@ 0x24
 8005306:	4b0d      	ldr	r3, [pc, #52]	@ (800533c <std+0x5c>)
 8005308:	62a3      	str	r3, [r4, #40]	@ 0x28
 800530a:	4b0d      	ldr	r3, [pc, #52]	@ (8005340 <std+0x60>)
 800530c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800530e:	4b0d      	ldr	r3, [pc, #52]	@ (8005344 <std+0x64>)
 8005310:	6323      	str	r3, [r4, #48]	@ 0x30
 8005312:	4b0d      	ldr	r3, [pc, #52]	@ (8005348 <std+0x68>)
 8005314:	6224      	str	r4, [r4, #32]
 8005316:	429c      	cmp	r4, r3
 8005318:	d006      	beq.n	8005328 <std+0x48>
 800531a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800531e:	4294      	cmp	r4, r2
 8005320:	d002      	beq.n	8005328 <std+0x48>
 8005322:	33d0      	adds	r3, #208	@ 0xd0
 8005324:	429c      	cmp	r4, r3
 8005326:	d105      	bne.n	8005334 <std+0x54>
 8005328:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800532c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005330:	f000 b8ca 	b.w	80054c8 <__retarget_lock_init_recursive>
 8005334:	bd10      	pop	{r4, pc}
 8005336:	bf00      	nop
 8005338:	08006df1 	.word	0x08006df1
 800533c:	08006e13 	.word	0x08006e13
 8005340:	08006e4b 	.word	0x08006e4b
 8005344:	08006e6f 	.word	0x08006e6f
 8005348:	200006a4 	.word	0x200006a4

0800534c <stdio_exit_handler>:
 800534c:	4a02      	ldr	r2, [pc, #8]	@ (8005358 <stdio_exit_handler+0xc>)
 800534e:	4903      	ldr	r1, [pc, #12]	@ (800535c <stdio_exit_handler+0x10>)
 8005350:	4803      	ldr	r0, [pc, #12]	@ (8005360 <stdio_exit_handler+0x14>)
 8005352:	f000 b869 	b.w	8005428 <_fwalk_sglue>
 8005356:	bf00      	nop
 8005358:	20000014 	.word	0x20000014
 800535c:	08006695 	.word	0x08006695
 8005360:	20000024 	.word	0x20000024

08005364 <cleanup_stdio>:
 8005364:	6841      	ldr	r1, [r0, #4]
 8005366:	4b0c      	ldr	r3, [pc, #48]	@ (8005398 <cleanup_stdio+0x34>)
 8005368:	4299      	cmp	r1, r3
 800536a:	b510      	push	{r4, lr}
 800536c:	4604      	mov	r4, r0
 800536e:	d001      	beq.n	8005374 <cleanup_stdio+0x10>
 8005370:	f001 f990 	bl	8006694 <_fflush_r>
 8005374:	68a1      	ldr	r1, [r4, #8]
 8005376:	4b09      	ldr	r3, [pc, #36]	@ (800539c <cleanup_stdio+0x38>)
 8005378:	4299      	cmp	r1, r3
 800537a:	d002      	beq.n	8005382 <cleanup_stdio+0x1e>
 800537c:	4620      	mov	r0, r4
 800537e:	f001 f989 	bl	8006694 <_fflush_r>
 8005382:	68e1      	ldr	r1, [r4, #12]
 8005384:	4b06      	ldr	r3, [pc, #24]	@ (80053a0 <cleanup_stdio+0x3c>)
 8005386:	4299      	cmp	r1, r3
 8005388:	d004      	beq.n	8005394 <cleanup_stdio+0x30>
 800538a:	4620      	mov	r0, r4
 800538c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005390:	f001 b980 	b.w	8006694 <_fflush_r>
 8005394:	bd10      	pop	{r4, pc}
 8005396:	bf00      	nop
 8005398:	200006a4 	.word	0x200006a4
 800539c:	2000070c 	.word	0x2000070c
 80053a0:	20000774 	.word	0x20000774

080053a4 <global_stdio_init.part.0>:
 80053a4:	b510      	push	{r4, lr}
 80053a6:	4b0b      	ldr	r3, [pc, #44]	@ (80053d4 <global_stdio_init.part.0+0x30>)
 80053a8:	4c0b      	ldr	r4, [pc, #44]	@ (80053d8 <global_stdio_init.part.0+0x34>)
 80053aa:	4a0c      	ldr	r2, [pc, #48]	@ (80053dc <global_stdio_init.part.0+0x38>)
 80053ac:	601a      	str	r2, [r3, #0]
 80053ae:	4620      	mov	r0, r4
 80053b0:	2200      	movs	r2, #0
 80053b2:	2104      	movs	r1, #4
 80053b4:	f7ff ff94 	bl	80052e0 <std>
 80053b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80053bc:	2201      	movs	r2, #1
 80053be:	2109      	movs	r1, #9
 80053c0:	f7ff ff8e 	bl	80052e0 <std>
 80053c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80053c8:	2202      	movs	r2, #2
 80053ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053ce:	2112      	movs	r1, #18
 80053d0:	f7ff bf86 	b.w	80052e0 <std>
 80053d4:	200007dc 	.word	0x200007dc
 80053d8:	200006a4 	.word	0x200006a4
 80053dc:	0800534d 	.word	0x0800534d

080053e0 <__sfp_lock_acquire>:
 80053e0:	4801      	ldr	r0, [pc, #4]	@ (80053e8 <__sfp_lock_acquire+0x8>)
 80053e2:	f000 b872 	b.w	80054ca <__retarget_lock_acquire_recursive>
 80053e6:	bf00      	nop
 80053e8:	200007e1 	.word	0x200007e1

080053ec <__sfp_lock_release>:
 80053ec:	4801      	ldr	r0, [pc, #4]	@ (80053f4 <__sfp_lock_release+0x8>)
 80053ee:	f000 b86d 	b.w	80054cc <__retarget_lock_release_recursive>
 80053f2:	bf00      	nop
 80053f4:	200007e1 	.word	0x200007e1

080053f8 <__sinit>:
 80053f8:	b510      	push	{r4, lr}
 80053fa:	4604      	mov	r4, r0
 80053fc:	f7ff fff0 	bl	80053e0 <__sfp_lock_acquire>
 8005400:	6a23      	ldr	r3, [r4, #32]
 8005402:	b11b      	cbz	r3, 800540c <__sinit+0x14>
 8005404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005408:	f7ff bff0 	b.w	80053ec <__sfp_lock_release>
 800540c:	4b04      	ldr	r3, [pc, #16]	@ (8005420 <__sinit+0x28>)
 800540e:	6223      	str	r3, [r4, #32]
 8005410:	4b04      	ldr	r3, [pc, #16]	@ (8005424 <__sinit+0x2c>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d1f5      	bne.n	8005404 <__sinit+0xc>
 8005418:	f7ff ffc4 	bl	80053a4 <global_stdio_init.part.0>
 800541c:	e7f2      	b.n	8005404 <__sinit+0xc>
 800541e:	bf00      	nop
 8005420:	08005365 	.word	0x08005365
 8005424:	200007dc 	.word	0x200007dc

08005428 <_fwalk_sglue>:
 8005428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800542c:	4607      	mov	r7, r0
 800542e:	4688      	mov	r8, r1
 8005430:	4614      	mov	r4, r2
 8005432:	2600      	movs	r6, #0
 8005434:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005438:	f1b9 0901 	subs.w	r9, r9, #1
 800543c:	d505      	bpl.n	800544a <_fwalk_sglue+0x22>
 800543e:	6824      	ldr	r4, [r4, #0]
 8005440:	2c00      	cmp	r4, #0
 8005442:	d1f7      	bne.n	8005434 <_fwalk_sglue+0xc>
 8005444:	4630      	mov	r0, r6
 8005446:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800544a:	89ab      	ldrh	r3, [r5, #12]
 800544c:	2b01      	cmp	r3, #1
 800544e:	d907      	bls.n	8005460 <_fwalk_sglue+0x38>
 8005450:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005454:	3301      	adds	r3, #1
 8005456:	d003      	beq.n	8005460 <_fwalk_sglue+0x38>
 8005458:	4629      	mov	r1, r5
 800545a:	4638      	mov	r0, r7
 800545c:	47c0      	blx	r8
 800545e:	4306      	orrs	r6, r0
 8005460:	3568      	adds	r5, #104	@ 0x68
 8005462:	e7e9      	b.n	8005438 <_fwalk_sglue+0x10>

08005464 <memset>:
 8005464:	4402      	add	r2, r0
 8005466:	4603      	mov	r3, r0
 8005468:	4293      	cmp	r3, r2
 800546a:	d100      	bne.n	800546e <memset+0xa>
 800546c:	4770      	bx	lr
 800546e:	f803 1b01 	strb.w	r1, [r3], #1
 8005472:	e7f9      	b.n	8005468 <memset+0x4>

08005474 <__errno>:
 8005474:	4b01      	ldr	r3, [pc, #4]	@ (800547c <__errno+0x8>)
 8005476:	6818      	ldr	r0, [r3, #0]
 8005478:	4770      	bx	lr
 800547a:	bf00      	nop
 800547c:	20000020 	.word	0x20000020

08005480 <__libc_init_array>:
 8005480:	b570      	push	{r4, r5, r6, lr}
 8005482:	4d0d      	ldr	r5, [pc, #52]	@ (80054b8 <__libc_init_array+0x38>)
 8005484:	4c0d      	ldr	r4, [pc, #52]	@ (80054bc <__libc_init_array+0x3c>)
 8005486:	1b64      	subs	r4, r4, r5
 8005488:	10a4      	asrs	r4, r4, #2
 800548a:	2600      	movs	r6, #0
 800548c:	42a6      	cmp	r6, r4
 800548e:	d109      	bne.n	80054a4 <__libc_init_array+0x24>
 8005490:	4d0b      	ldr	r5, [pc, #44]	@ (80054c0 <__libc_init_array+0x40>)
 8005492:	4c0c      	ldr	r4, [pc, #48]	@ (80054c4 <__libc_init_array+0x44>)
 8005494:	f002 f8f6 	bl	8007684 <_init>
 8005498:	1b64      	subs	r4, r4, r5
 800549a:	10a4      	asrs	r4, r4, #2
 800549c:	2600      	movs	r6, #0
 800549e:	42a6      	cmp	r6, r4
 80054a0:	d105      	bne.n	80054ae <__libc_init_array+0x2e>
 80054a2:	bd70      	pop	{r4, r5, r6, pc}
 80054a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80054a8:	4798      	blx	r3
 80054aa:	3601      	adds	r6, #1
 80054ac:	e7ee      	b.n	800548c <__libc_init_array+0xc>
 80054ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80054b2:	4798      	blx	r3
 80054b4:	3601      	adds	r6, #1
 80054b6:	e7f2      	b.n	800549e <__libc_init_array+0x1e>
 80054b8:	080087c4 	.word	0x080087c4
 80054bc:	080087c4 	.word	0x080087c4
 80054c0:	080087c4 	.word	0x080087c4
 80054c4:	080087c8 	.word	0x080087c8

080054c8 <__retarget_lock_init_recursive>:
 80054c8:	4770      	bx	lr

080054ca <__retarget_lock_acquire_recursive>:
 80054ca:	4770      	bx	lr

080054cc <__retarget_lock_release_recursive>:
 80054cc:	4770      	bx	lr
	...

080054d0 <_localeconv_r>:
 80054d0:	4800      	ldr	r0, [pc, #0]	@ (80054d4 <_localeconv_r+0x4>)
 80054d2:	4770      	bx	lr
 80054d4:	20000160 	.word	0x20000160

080054d8 <quorem>:
 80054d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054dc:	6903      	ldr	r3, [r0, #16]
 80054de:	690c      	ldr	r4, [r1, #16]
 80054e0:	42a3      	cmp	r3, r4
 80054e2:	4607      	mov	r7, r0
 80054e4:	db7e      	blt.n	80055e4 <quorem+0x10c>
 80054e6:	3c01      	subs	r4, #1
 80054e8:	f101 0814 	add.w	r8, r1, #20
 80054ec:	00a3      	lsls	r3, r4, #2
 80054ee:	f100 0514 	add.w	r5, r0, #20
 80054f2:	9300      	str	r3, [sp, #0]
 80054f4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80054f8:	9301      	str	r3, [sp, #4]
 80054fa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80054fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005502:	3301      	adds	r3, #1
 8005504:	429a      	cmp	r2, r3
 8005506:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800550a:	fbb2 f6f3 	udiv	r6, r2, r3
 800550e:	d32e      	bcc.n	800556e <quorem+0x96>
 8005510:	f04f 0a00 	mov.w	sl, #0
 8005514:	46c4      	mov	ip, r8
 8005516:	46ae      	mov	lr, r5
 8005518:	46d3      	mov	fp, sl
 800551a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800551e:	b298      	uxth	r0, r3
 8005520:	fb06 a000 	mla	r0, r6, r0, sl
 8005524:	0c02      	lsrs	r2, r0, #16
 8005526:	0c1b      	lsrs	r3, r3, #16
 8005528:	fb06 2303 	mla	r3, r6, r3, r2
 800552c:	f8de 2000 	ldr.w	r2, [lr]
 8005530:	b280      	uxth	r0, r0
 8005532:	b292      	uxth	r2, r2
 8005534:	1a12      	subs	r2, r2, r0
 8005536:	445a      	add	r2, fp
 8005538:	f8de 0000 	ldr.w	r0, [lr]
 800553c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005540:	b29b      	uxth	r3, r3
 8005542:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005546:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800554a:	b292      	uxth	r2, r2
 800554c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005550:	45e1      	cmp	r9, ip
 8005552:	f84e 2b04 	str.w	r2, [lr], #4
 8005556:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800555a:	d2de      	bcs.n	800551a <quorem+0x42>
 800555c:	9b00      	ldr	r3, [sp, #0]
 800555e:	58eb      	ldr	r3, [r5, r3]
 8005560:	b92b      	cbnz	r3, 800556e <quorem+0x96>
 8005562:	9b01      	ldr	r3, [sp, #4]
 8005564:	3b04      	subs	r3, #4
 8005566:	429d      	cmp	r5, r3
 8005568:	461a      	mov	r2, r3
 800556a:	d32f      	bcc.n	80055cc <quorem+0xf4>
 800556c:	613c      	str	r4, [r7, #16]
 800556e:	4638      	mov	r0, r7
 8005570:	f001 fb36 	bl	8006be0 <__mcmp>
 8005574:	2800      	cmp	r0, #0
 8005576:	db25      	blt.n	80055c4 <quorem+0xec>
 8005578:	4629      	mov	r1, r5
 800557a:	2000      	movs	r0, #0
 800557c:	f858 2b04 	ldr.w	r2, [r8], #4
 8005580:	f8d1 c000 	ldr.w	ip, [r1]
 8005584:	fa1f fe82 	uxth.w	lr, r2
 8005588:	fa1f f38c 	uxth.w	r3, ip
 800558c:	eba3 030e 	sub.w	r3, r3, lr
 8005590:	4403      	add	r3, r0
 8005592:	0c12      	lsrs	r2, r2, #16
 8005594:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005598:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800559c:	b29b      	uxth	r3, r3
 800559e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80055a2:	45c1      	cmp	r9, r8
 80055a4:	f841 3b04 	str.w	r3, [r1], #4
 80055a8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80055ac:	d2e6      	bcs.n	800557c <quorem+0xa4>
 80055ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80055b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80055b6:	b922      	cbnz	r2, 80055c2 <quorem+0xea>
 80055b8:	3b04      	subs	r3, #4
 80055ba:	429d      	cmp	r5, r3
 80055bc:	461a      	mov	r2, r3
 80055be:	d30b      	bcc.n	80055d8 <quorem+0x100>
 80055c0:	613c      	str	r4, [r7, #16]
 80055c2:	3601      	adds	r6, #1
 80055c4:	4630      	mov	r0, r6
 80055c6:	b003      	add	sp, #12
 80055c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055cc:	6812      	ldr	r2, [r2, #0]
 80055ce:	3b04      	subs	r3, #4
 80055d0:	2a00      	cmp	r2, #0
 80055d2:	d1cb      	bne.n	800556c <quorem+0x94>
 80055d4:	3c01      	subs	r4, #1
 80055d6:	e7c6      	b.n	8005566 <quorem+0x8e>
 80055d8:	6812      	ldr	r2, [r2, #0]
 80055da:	3b04      	subs	r3, #4
 80055dc:	2a00      	cmp	r2, #0
 80055de:	d1ef      	bne.n	80055c0 <quorem+0xe8>
 80055e0:	3c01      	subs	r4, #1
 80055e2:	e7ea      	b.n	80055ba <quorem+0xe2>
 80055e4:	2000      	movs	r0, #0
 80055e6:	e7ee      	b.n	80055c6 <quorem+0xee>

080055e8 <_dtoa_r>:
 80055e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055ec:	69c7      	ldr	r7, [r0, #28]
 80055ee:	b097      	sub	sp, #92	@ 0x5c
 80055f0:	ed8d 0b04 	vstr	d0, [sp, #16]
 80055f4:	ec55 4b10 	vmov	r4, r5, d0
 80055f8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80055fa:	9107      	str	r1, [sp, #28]
 80055fc:	4681      	mov	r9, r0
 80055fe:	920c      	str	r2, [sp, #48]	@ 0x30
 8005600:	9311      	str	r3, [sp, #68]	@ 0x44
 8005602:	b97f      	cbnz	r7, 8005624 <_dtoa_r+0x3c>
 8005604:	2010      	movs	r0, #16
 8005606:	f000 ff17 	bl	8006438 <malloc>
 800560a:	4602      	mov	r2, r0
 800560c:	f8c9 001c 	str.w	r0, [r9, #28]
 8005610:	b920      	cbnz	r0, 800561c <_dtoa_r+0x34>
 8005612:	4ba9      	ldr	r3, [pc, #676]	@ (80058b8 <_dtoa_r+0x2d0>)
 8005614:	21ef      	movs	r1, #239	@ 0xef
 8005616:	48a9      	ldr	r0, [pc, #676]	@ (80058bc <_dtoa_r+0x2d4>)
 8005618:	f001 fcda 	bl	8006fd0 <__assert_func>
 800561c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005620:	6007      	str	r7, [r0, #0]
 8005622:	60c7      	str	r7, [r0, #12]
 8005624:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005628:	6819      	ldr	r1, [r3, #0]
 800562a:	b159      	cbz	r1, 8005644 <_dtoa_r+0x5c>
 800562c:	685a      	ldr	r2, [r3, #4]
 800562e:	604a      	str	r2, [r1, #4]
 8005630:	2301      	movs	r3, #1
 8005632:	4093      	lsls	r3, r2
 8005634:	608b      	str	r3, [r1, #8]
 8005636:	4648      	mov	r0, r9
 8005638:	f001 f8a0 	bl	800677c <_Bfree>
 800563c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005640:	2200      	movs	r2, #0
 8005642:	601a      	str	r2, [r3, #0]
 8005644:	1e2b      	subs	r3, r5, #0
 8005646:	bfb9      	ittee	lt
 8005648:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800564c:	9305      	strlt	r3, [sp, #20]
 800564e:	2300      	movge	r3, #0
 8005650:	6033      	strge	r3, [r6, #0]
 8005652:	9f05      	ldr	r7, [sp, #20]
 8005654:	4b9a      	ldr	r3, [pc, #616]	@ (80058c0 <_dtoa_r+0x2d8>)
 8005656:	bfbc      	itt	lt
 8005658:	2201      	movlt	r2, #1
 800565a:	6032      	strlt	r2, [r6, #0]
 800565c:	43bb      	bics	r3, r7
 800565e:	d112      	bne.n	8005686 <_dtoa_r+0x9e>
 8005660:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005662:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005666:	6013      	str	r3, [r2, #0]
 8005668:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800566c:	4323      	orrs	r3, r4
 800566e:	f000 855a 	beq.w	8006126 <_dtoa_r+0xb3e>
 8005672:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005674:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80058d4 <_dtoa_r+0x2ec>
 8005678:	2b00      	cmp	r3, #0
 800567a:	f000 855c 	beq.w	8006136 <_dtoa_r+0xb4e>
 800567e:	f10a 0303 	add.w	r3, sl, #3
 8005682:	f000 bd56 	b.w	8006132 <_dtoa_r+0xb4a>
 8005686:	ed9d 7b04 	vldr	d7, [sp, #16]
 800568a:	2200      	movs	r2, #0
 800568c:	ec51 0b17 	vmov	r0, r1, d7
 8005690:	2300      	movs	r3, #0
 8005692:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8005696:	f7fb fa37 	bl	8000b08 <__aeabi_dcmpeq>
 800569a:	4680      	mov	r8, r0
 800569c:	b158      	cbz	r0, 80056b6 <_dtoa_r+0xce>
 800569e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80056a0:	2301      	movs	r3, #1
 80056a2:	6013      	str	r3, [r2, #0]
 80056a4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80056a6:	b113      	cbz	r3, 80056ae <_dtoa_r+0xc6>
 80056a8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80056aa:	4b86      	ldr	r3, [pc, #536]	@ (80058c4 <_dtoa_r+0x2dc>)
 80056ac:	6013      	str	r3, [r2, #0]
 80056ae:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80058d8 <_dtoa_r+0x2f0>
 80056b2:	f000 bd40 	b.w	8006136 <_dtoa_r+0xb4e>
 80056b6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80056ba:	aa14      	add	r2, sp, #80	@ 0x50
 80056bc:	a915      	add	r1, sp, #84	@ 0x54
 80056be:	4648      	mov	r0, r9
 80056c0:	f001 fb3e 	bl	8006d40 <__d2b>
 80056c4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80056c8:	9002      	str	r0, [sp, #8]
 80056ca:	2e00      	cmp	r6, #0
 80056cc:	d078      	beq.n	80057c0 <_dtoa_r+0x1d8>
 80056ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80056d0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80056d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80056d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80056dc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80056e0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80056e4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80056e8:	4619      	mov	r1, r3
 80056ea:	2200      	movs	r2, #0
 80056ec:	4b76      	ldr	r3, [pc, #472]	@ (80058c8 <_dtoa_r+0x2e0>)
 80056ee:	f7fa fdeb 	bl	80002c8 <__aeabi_dsub>
 80056f2:	a36b      	add	r3, pc, #428	@ (adr r3, 80058a0 <_dtoa_r+0x2b8>)
 80056f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056f8:	f7fa ff9e 	bl	8000638 <__aeabi_dmul>
 80056fc:	a36a      	add	r3, pc, #424	@ (adr r3, 80058a8 <_dtoa_r+0x2c0>)
 80056fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005702:	f7fa fde3 	bl	80002cc <__adddf3>
 8005706:	4604      	mov	r4, r0
 8005708:	4630      	mov	r0, r6
 800570a:	460d      	mov	r5, r1
 800570c:	f7fa ff2a 	bl	8000564 <__aeabi_i2d>
 8005710:	a367      	add	r3, pc, #412	@ (adr r3, 80058b0 <_dtoa_r+0x2c8>)
 8005712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005716:	f7fa ff8f 	bl	8000638 <__aeabi_dmul>
 800571a:	4602      	mov	r2, r0
 800571c:	460b      	mov	r3, r1
 800571e:	4620      	mov	r0, r4
 8005720:	4629      	mov	r1, r5
 8005722:	f7fa fdd3 	bl	80002cc <__adddf3>
 8005726:	4604      	mov	r4, r0
 8005728:	460d      	mov	r5, r1
 800572a:	f7fb fa35 	bl	8000b98 <__aeabi_d2iz>
 800572e:	2200      	movs	r2, #0
 8005730:	4607      	mov	r7, r0
 8005732:	2300      	movs	r3, #0
 8005734:	4620      	mov	r0, r4
 8005736:	4629      	mov	r1, r5
 8005738:	f7fb f9f0 	bl	8000b1c <__aeabi_dcmplt>
 800573c:	b140      	cbz	r0, 8005750 <_dtoa_r+0x168>
 800573e:	4638      	mov	r0, r7
 8005740:	f7fa ff10 	bl	8000564 <__aeabi_i2d>
 8005744:	4622      	mov	r2, r4
 8005746:	462b      	mov	r3, r5
 8005748:	f7fb f9de 	bl	8000b08 <__aeabi_dcmpeq>
 800574c:	b900      	cbnz	r0, 8005750 <_dtoa_r+0x168>
 800574e:	3f01      	subs	r7, #1
 8005750:	2f16      	cmp	r7, #22
 8005752:	d852      	bhi.n	80057fa <_dtoa_r+0x212>
 8005754:	4b5d      	ldr	r3, [pc, #372]	@ (80058cc <_dtoa_r+0x2e4>)
 8005756:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800575a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800575e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005762:	f7fb f9db 	bl	8000b1c <__aeabi_dcmplt>
 8005766:	2800      	cmp	r0, #0
 8005768:	d049      	beq.n	80057fe <_dtoa_r+0x216>
 800576a:	3f01      	subs	r7, #1
 800576c:	2300      	movs	r3, #0
 800576e:	9310      	str	r3, [sp, #64]	@ 0x40
 8005770:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005772:	1b9b      	subs	r3, r3, r6
 8005774:	1e5a      	subs	r2, r3, #1
 8005776:	bf45      	ittet	mi
 8005778:	f1c3 0301 	rsbmi	r3, r3, #1
 800577c:	9300      	strmi	r3, [sp, #0]
 800577e:	2300      	movpl	r3, #0
 8005780:	2300      	movmi	r3, #0
 8005782:	9206      	str	r2, [sp, #24]
 8005784:	bf54      	ite	pl
 8005786:	9300      	strpl	r3, [sp, #0]
 8005788:	9306      	strmi	r3, [sp, #24]
 800578a:	2f00      	cmp	r7, #0
 800578c:	db39      	blt.n	8005802 <_dtoa_r+0x21a>
 800578e:	9b06      	ldr	r3, [sp, #24]
 8005790:	970d      	str	r7, [sp, #52]	@ 0x34
 8005792:	443b      	add	r3, r7
 8005794:	9306      	str	r3, [sp, #24]
 8005796:	2300      	movs	r3, #0
 8005798:	9308      	str	r3, [sp, #32]
 800579a:	9b07      	ldr	r3, [sp, #28]
 800579c:	2b09      	cmp	r3, #9
 800579e:	d863      	bhi.n	8005868 <_dtoa_r+0x280>
 80057a0:	2b05      	cmp	r3, #5
 80057a2:	bfc4      	itt	gt
 80057a4:	3b04      	subgt	r3, #4
 80057a6:	9307      	strgt	r3, [sp, #28]
 80057a8:	9b07      	ldr	r3, [sp, #28]
 80057aa:	f1a3 0302 	sub.w	r3, r3, #2
 80057ae:	bfcc      	ite	gt
 80057b0:	2400      	movgt	r4, #0
 80057b2:	2401      	movle	r4, #1
 80057b4:	2b03      	cmp	r3, #3
 80057b6:	d863      	bhi.n	8005880 <_dtoa_r+0x298>
 80057b8:	e8df f003 	tbb	[pc, r3]
 80057bc:	2b375452 	.word	0x2b375452
 80057c0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80057c4:	441e      	add	r6, r3
 80057c6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80057ca:	2b20      	cmp	r3, #32
 80057cc:	bfc1      	itttt	gt
 80057ce:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80057d2:	409f      	lslgt	r7, r3
 80057d4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80057d8:	fa24 f303 	lsrgt.w	r3, r4, r3
 80057dc:	bfd6      	itet	le
 80057de:	f1c3 0320 	rsble	r3, r3, #32
 80057e2:	ea47 0003 	orrgt.w	r0, r7, r3
 80057e6:	fa04 f003 	lslle.w	r0, r4, r3
 80057ea:	f7fa feab 	bl	8000544 <__aeabi_ui2d>
 80057ee:	2201      	movs	r2, #1
 80057f0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80057f4:	3e01      	subs	r6, #1
 80057f6:	9212      	str	r2, [sp, #72]	@ 0x48
 80057f8:	e776      	b.n	80056e8 <_dtoa_r+0x100>
 80057fa:	2301      	movs	r3, #1
 80057fc:	e7b7      	b.n	800576e <_dtoa_r+0x186>
 80057fe:	9010      	str	r0, [sp, #64]	@ 0x40
 8005800:	e7b6      	b.n	8005770 <_dtoa_r+0x188>
 8005802:	9b00      	ldr	r3, [sp, #0]
 8005804:	1bdb      	subs	r3, r3, r7
 8005806:	9300      	str	r3, [sp, #0]
 8005808:	427b      	negs	r3, r7
 800580a:	9308      	str	r3, [sp, #32]
 800580c:	2300      	movs	r3, #0
 800580e:	930d      	str	r3, [sp, #52]	@ 0x34
 8005810:	e7c3      	b.n	800579a <_dtoa_r+0x1b2>
 8005812:	2301      	movs	r3, #1
 8005814:	9309      	str	r3, [sp, #36]	@ 0x24
 8005816:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005818:	eb07 0b03 	add.w	fp, r7, r3
 800581c:	f10b 0301 	add.w	r3, fp, #1
 8005820:	2b01      	cmp	r3, #1
 8005822:	9303      	str	r3, [sp, #12]
 8005824:	bfb8      	it	lt
 8005826:	2301      	movlt	r3, #1
 8005828:	e006      	b.n	8005838 <_dtoa_r+0x250>
 800582a:	2301      	movs	r3, #1
 800582c:	9309      	str	r3, [sp, #36]	@ 0x24
 800582e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005830:	2b00      	cmp	r3, #0
 8005832:	dd28      	ble.n	8005886 <_dtoa_r+0x29e>
 8005834:	469b      	mov	fp, r3
 8005836:	9303      	str	r3, [sp, #12]
 8005838:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800583c:	2100      	movs	r1, #0
 800583e:	2204      	movs	r2, #4
 8005840:	f102 0514 	add.w	r5, r2, #20
 8005844:	429d      	cmp	r5, r3
 8005846:	d926      	bls.n	8005896 <_dtoa_r+0x2ae>
 8005848:	6041      	str	r1, [r0, #4]
 800584a:	4648      	mov	r0, r9
 800584c:	f000 ff56 	bl	80066fc <_Balloc>
 8005850:	4682      	mov	sl, r0
 8005852:	2800      	cmp	r0, #0
 8005854:	d142      	bne.n	80058dc <_dtoa_r+0x2f4>
 8005856:	4b1e      	ldr	r3, [pc, #120]	@ (80058d0 <_dtoa_r+0x2e8>)
 8005858:	4602      	mov	r2, r0
 800585a:	f240 11af 	movw	r1, #431	@ 0x1af
 800585e:	e6da      	b.n	8005616 <_dtoa_r+0x2e>
 8005860:	2300      	movs	r3, #0
 8005862:	e7e3      	b.n	800582c <_dtoa_r+0x244>
 8005864:	2300      	movs	r3, #0
 8005866:	e7d5      	b.n	8005814 <_dtoa_r+0x22c>
 8005868:	2401      	movs	r4, #1
 800586a:	2300      	movs	r3, #0
 800586c:	9307      	str	r3, [sp, #28]
 800586e:	9409      	str	r4, [sp, #36]	@ 0x24
 8005870:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8005874:	2200      	movs	r2, #0
 8005876:	f8cd b00c 	str.w	fp, [sp, #12]
 800587a:	2312      	movs	r3, #18
 800587c:	920c      	str	r2, [sp, #48]	@ 0x30
 800587e:	e7db      	b.n	8005838 <_dtoa_r+0x250>
 8005880:	2301      	movs	r3, #1
 8005882:	9309      	str	r3, [sp, #36]	@ 0x24
 8005884:	e7f4      	b.n	8005870 <_dtoa_r+0x288>
 8005886:	f04f 0b01 	mov.w	fp, #1
 800588a:	f8cd b00c 	str.w	fp, [sp, #12]
 800588e:	465b      	mov	r3, fp
 8005890:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8005894:	e7d0      	b.n	8005838 <_dtoa_r+0x250>
 8005896:	3101      	adds	r1, #1
 8005898:	0052      	lsls	r2, r2, #1
 800589a:	e7d1      	b.n	8005840 <_dtoa_r+0x258>
 800589c:	f3af 8000 	nop.w
 80058a0:	636f4361 	.word	0x636f4361
 80058a4:	3fd287a7 	.word	0x3fd287a7
 80058a8:	8b60c8b3 	.word	0x8b60c8b3
 80058ac:	3fc68a28 	.word	0x3fc68a28
 80058b0:	509f79fb 	.word	0x509f79fb
 80058b4:	3fd34413 	.word	0x3fd34413
 80058b8:	08008489 	.word	0x08008489
 80058bc:	080084a0 	.word	0x080084a0
 80058c0:	7ff00000 	.word	0x7ff00000
 80058c4:	08008459 	.word	0x08008459
 80058c8:	3ff80000 	.word	0x3ff80000
 80058cc:	080085f0 	.word	0x080085f0
 80058d0:	080084f8 	.word	0x080084f8
 80058d4:	08008485 	.word	0x08008485
 80058d8:	08008458 	.word	0x08008458
 80058dc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80058e0:	6018      	str	r0, [r3, #0]
 80058e2:	9b03      	ldr	r3, [sp, #12]
 80058e4:	2b0e      	cmp	r3, #14
 80058e6:	f200 80a1 	bhi.w	8005a2c <_dtoa_r+0x444>
 80058ea:	2c00      	cmp	r4, #0
 80058ec:	f000 809e 	beq.w	8005a2c <_dtoa_r+0x444>
 80058f0:	2f00      	cmp	r7, #0
 80058f2:	dd33      	ble.n	800595c <_dtoa_r+0x374>
 80058f4:	4b9c      	ldr	r3, [pc, #624]	@ (8005b68 <_dtoa_r+0x580>)
 80058f6:	f007 020f 	and.w	r2, r7, #15
 80058fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80058fe:	ed93 7b00 	vldr	d7, [r3]
 8005902:	05f8      	lsls	r0, r7, #23
 8005904:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8005908:	ea4f 1427 	mov.w	r4, r7, asr #4
 800590c:	d516      	bpl.n	800593c <_dtoa_r+0x354>
 800590e:	4b97      	ldr	r3, [pc, #604]	@ (8005b6c <_dtoa_r+0x584>)
 8005910:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005914:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005918:	f7fa ffb8 	bl	800088c <__aeabi_ddiv>
 800591c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005920:	f004 040f 	and.w	r4, r4, #15
 8005924:	2603      	movs	r6, #3
 8005926:	4d91      	ldr	r5, [pc, #580]	@ (8005b6c <_dtoa_r+0x584>)
 8005928:	b954      	cbnz	r4, 8005940 <_dtoa_r+0x358>
 800592a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800592e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005932:	f7fa ffab 	bl	800088c <__aeabi_ddiv>
 8005936:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800593a:	e028      	b.n	800598e <_dtoa_r+0x3a6>
 800593c:	2602      	movs	r6, #2
 800593e:	e7f2      	b.n	8005926 <_dtoa_r+0x33e>
 8005940:	07e1      	lsls	r1, r4, #31
 8005942:	d508      	bpl.n	8005956 <_dtoa_r+0x36e>
 8005944:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005948:	e9d5 2300 	ldrd	r2, r3, [r5]
 800594c:	f7fa fe74 	bl	8000638 <__aeabi_dmul>
 8005950:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005954:	3601      	adds	r6, #1
 8005956:	1064      	asrs	r4, r4, #1
 8005958:	3508      	adds	r5, #8
 800595a:	e7e5      	b.n	8005928 <_dtoa_r+0x340>
 800595c:	f000 80af 	beq.w	8005abe <_dtoa_r+0x4d6>
 8005960:	427c      	negs	r4, r7
 8005962:	4b81      	ldr	r3, [pc, #516]	@ (8005b68 <_dtoa_r+0x580>)
 8005964:	4d81      	ldr	r5, [pc, #516]	@ (8005b6c <_dtoa_r+0x584>)
 8005966:	f004 020f 	and.w	r2, r4, #15
 800596a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800596e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005972:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005976:	f7fa fe5f 	bl	8000638 <__aeabi_dmul>
 800597a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800597e:	1124      	asrs	r4, r4, #4
 8005980:	2300      	movs	r3, #0
 8005982:	2602      	movs	r6, #2
 8005984:	2c00      	cmp	r4, #0
 8005986:	f040 808f 	bne.w	8005aa8 <_dtoa_r+0x4c0>
 800598a:	2b00      	cmp	r3, #0
 800598c:	d1d3      	bne.n	8005936 <_dtoa_r+0x34e>
 800598e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005990:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8005994:	2b00      	cmp	r3, #0
 8005996:	f000 8094 	beq.w	8005ac2 <_dtoa_r+0x4da>
 800599a:	4b75      	ldr	r3, [pc, #468]	@ (8005b70 <_dtoa_r+0x588>)
 800599c:	2200      	movs	r2, #0
 800599e:	4620      	mov	r0, r4
 80059a0:	4629      	mov	r1, r5
 80059a2:	f7fb f8bb 	bl	8000b1c <__aeabi_dcmplt>
 80059a6:	2800      	cmp	r0, #0
 80059a8:	f000 808b 	beq.w	8005ac2 <_dtoa_r+0x4da>
 80059ac:	9b03      	ldr	r3, [sp, #12]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	f000 8087 	beq.w	8005ac2 <_dtoa_r+0x4da>
 80059b4:	f1bb 0f00 	cmp.w	fp, #0
 80059b8:	dd34      	ble.n	8005a24 <_dtoa_r+0x43c>
 80059ba:	4620      	mov	r0, r4
 80059bc:	4b6d      	ldr	r3, [pc, #436]	@ (8005b74 <_dtoa_r+0x58c>)
 80059be:	2200      	movs	r2, #0
 80059c0:	4629      	mov	r1, r5
 80059c2:	f7fa fe39 	bl	8000638 <__aeabi_dmul>
 80059c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80059ca:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 80059ce:	3601      	adds	r6, #1
 80059d0:	465c      	mov	r4, fp
 80059d2:	4630      	mov	r0, r6
 80059d4:	f7fa fdc6 	bl	8000564 <__aeabi_i2d>
 80059d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059dc:	f7fa fe2c 	bl	8000638 <__aeabi_dmul>
 80059e0:	4b65      	ldr	r3, [pc, #404]	@ (8005b78 <_dtoa_r+0x590>)
 80059e2:	2200      	movs	r2, #0
 80059e4:	f7fa fc72 	bl	80002cc <__adddf3>
 80059e8:	4605      	mov	r5, r0
 80059ea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80059ee:	2c00      	cmp	r4, #0
 80059f0:	d16a      	bne.n	8005ac8 <_dtoa_r+0x4e0>
 80059f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059f6:	4b61      	ldr	r3, [pc, #388]	@ (8005b7c <_dtoa_r+0x594>)
 80059f8:	2200      	movs	r2, #0
 80059fa:	f7fa fc65 	bl	80002c8 <__aeabi_dsub>
 80059fe:	4602      	mov	r2, r0
 8005a00:	460b      	mov	r3, r1
 8005a02:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005a06:	462a      	mov	r2, r5
 8005a08:	4633      	mov	r3, r6
 8005a0a:	f7fb f8a5 	bl	8000b58 <__aeabi_dcmpgt>
 8005a0e:	2800      	cmp	r0, #0
 8005a10:	f040 8298 	bne.w	8005f44 <_dtoa_r+0x95c>
 8005a14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a18:	462a      	mov	r2, r5
 8005a1a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005a1e:	f7fb f87d 	bl	8000b1c <__aeabi_dcmplt>
 8005a22:	bb38      	cbnz	r0, 8005a74 <_dtoa_r+0x48c>
 8005a24:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8005a28:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005a2c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	f2c0 8157 	blt.w	8005ce2 <_dtoa_r+0x6fa>
 8005a34:	2f0e      	cmp	r7, #14
 8005a36:	f300 8154 	bgt.w	8005ce2 <_dtoa_r+0x6fa>
 8005a3a:	4b4b      	ldr	r3, [pc, #300]	@ (8005b68 <_dtoa_r+0x580>)
 8005a3c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005a40:	ed93 7b00 	vldr	d7, [r3]
 8005a44:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	ed8d 7b00 	vstr	d7, [sp]
 8005a4c:	f280 80e5 	bge.w	8005c1a <_dtoa_r+0x632>
 8005a50:	9b03      	ldr	r3, [sp, #12]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	f300 80e1 	bgt.w	8005c1a <_dtoa_r+0x632>
 8005a58:	d10c      	bne.n	8005a74 <_dtoa_r+0x48c>
 8005a5a:	4b48      	ldr	r3, [pc, #288]	@ (8005b7c <_dtoa_r+0x594>)
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	ec51 0b17 	vmov	r0, r1, d7
 8005a62:	f7fa fde9 	bl	8000638 <__aeabi_dmul>
 8005a66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a6a:	f7fb f86b 	bl	8000b44 <__aeabi_dcmpge>
 8005a6e:	2800      	cmp	r0, #0
 8005a70:	f000 8266 	beq.w	8005f40 <_dtoa_r+0x958>
 8005a74:	2400      	movs	r4, #0
 8005a76:	4625      	mov	r5, r4
 8005a78:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005a7a:	4656      	mov	r6, sl
 8005a7c:	ea6f 0803 	mvn.w	r8, r3
 8005a80:	2700      	movs	r7, #0
 8005a82:	4621      	mov	r1, r4
 8005a84:	4648      	mov	r0, r9
 8005a86:	f000 fe79 	bl	800677c <_Bfree>
 8005a8a:	2d00      	cmp	r5, #0
 8005a8c:	f000 80bd 	beq.w	8005c0a <_dtoa_r+0x622>
 8005a90:	b12f      	cbz	r7, 8005a9e <_dtoa_r+0x4b6>
 8005a92:	42af      	cmp	r7, r5
 8005a94:	d003      	beq.n	8005a9e <_dtoa_r+0x4b6>
 8005a96:	4639      	mov	r1, r7
 8005a98:	4648      	mov	r0, r9
 8005a9a:	f000 fe6f 	bl	800677c <_Bfree>
 8005a9e:	4629      	mov	r1, r5
 8005aa0:	4648      	mov	r0, r9
 8005aa2:	f000 fe6b 	bl	800677c <_Bfree>
 8005aa6:	e0b0      	b.n	8005c0a <_dtoa_r+0x622>
 8005aa8:	07e2      	lsls	r2, r4, #31
 8005aaa:	d505      	bpl.n	8005ab8 <_dtoa_r+0x4d0>
 8005aac:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005ab0:	f7fa fdc2 	bl	8000638 <__aeabi_dmul>
 8005ab4:	3601      	adds	r6, #1
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	1064      	asrs	r4, r4, #1
 8005aba:	3508      	adds	r5, #8
 8005abc:	e762      	b.n	8005984 <_dtoa_r+0x39c>
 8005abe:	2602      	movs	r6, #2
 8005ac0:	e765      	b.n	800598e <_dtoa_r+0x3a6>
 8005ac2:	9c03      	ldr	r4, [sp, #12]
 8005ac4:	46b8      	mov	r8, r7
 8005ac6:	e784      	b.n	80059d2 <_dtoa_r+0x3ea>
 8005ac8:	4b27      	ldr	r3, [pc, #156]	@ (8005b68 <_dtoa_r+0x580>)
 8005aca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005acc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005ad0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005ad4:	4454      	add	r4, sl
 8005ad6:	2900      	cmp	r1, #0
 8005ad8:	d054      	beq.n	8005b84 <_dtoa_r+0x59c>
 8005ada:	4929      	ldr	r1, [pc, #164]	@ (8005b80 <_dtoa_r+0x598>)
 8005adc:	2000      	movs	r0, #0
 8005ade:	f7fa fed5 	bl	800088c <__aeabi_ddiv>
 8005ae2:	4633      	mov	r3, r6
 8005ae4:	462a      	mov	r2, r5
 8005ae6:	f7fa fbef 	bl	80002c8 <__aeabi_dsub>
 8005aea:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005aee:	4656      	mov	r6, sl
 8005af0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005af4:	f7fb f850 	bl	8000b98 <__aeabi_d2iz>
 8005af8:	4605      	mov	r5, r0
 8005afa:	f7fa fd33 	bl	8000564 <__aeabi_i2d>
 8005afe:	4602      	mov	r2, r0
 8005b00:	460b      	mov	r3, r1
 8005b02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b06:	f7fa fbdf 	bl	80002c8 <__aeabi_dsub>
 8005b0a:	3530      	adds	r5, #48	@ 0x30
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	460b      	mov	r3, r1
 8005b10:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005b14:	f806 5b01 	strb.w	r5, [r6], #1
 8005b18:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005b1c:	f7fa fffe 	bl	8000b1c <__aeabi_dcmplt>
 8005b20:	2800      	cmp	r0, #0
 8005b22:	d172      	bne.n	8005c0a <_dtoa_r+0x622>
 8005b24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b28:	4911      	ldr	r1, [pc, #68]	@ (8005b70 <_dtoa_r+0x588>)
 8005b2a:	2000      	movs	r0, #0
 8005b2c:	f7fa fbcc 	bl	80002c8 <__aeabi_dsub>
 8005b30:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005b34:	f7fa fff2 	bl	8000b1c <__aeabi_dcmplt>
 8005b38:	2800      	cmp	r0, #0
 8005b3a:	f040 80b4 	bne.w	8005ca6 <_dtoa_r+0x6be>
 8005b3e:	42a6      	cmp	r6, r4
 8005b40:	f43f af70 	beq.w	8005a24 <_dtoa_r+0x43c>
 8005b44:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005b48:	4b0a      	ldr	r3, [pc, #40]	@ (8005b74 <_dtoa_r+0x58c>)
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f7fa fd74 	bl	8000638 <__aeabi_dmul>
 8005b50:	4b08      	ldr	r3, [pc, #32]	@ (8005b74 <_dtoa_r+0x58c>)
 8005b52:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005b56:	2200      	movs	r2, #0
 8005b58:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b5c:	f7fa fd6c 	bl	8000638 <__aeabi_dmul>
 8005b60:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b64:	e7c4      	b.n	8005af0 <_dtoa_r+0x508>
 8005b66:	bf00      	nop
 8005b68:	080085f0 	.word	0x080085f0
 8005b6c:	080085c8 	.word	0x080085c8
 8005b70:	3ff00000 	.word	0x3ff00000
 8005b74:	40240000 	.word	0x40240000
 8005b78:	401c0000 	.word	0x401c0000
 8005b7c:	40140000 	.word	0x40140000
 8005b80:	3fe00000 	.word	0x3fe00000
 8005b84:	4631      	mov	r1, r6
 8005b86:	4628      	mov	r0, r5
 8005b88:	f7fa fd56 	bl	8000638 <__aeabi_dmul>
 8005b8c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005b90:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005b92:	4656      	mov	r6, sl
 8005b94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b98:	f7fa fffe 	bl	8000b98 <__aeabi_d2iz>
 8005b9c:	4605      	mov	r5, r0
 8005b9e:	f7fa fce1 	bl	8000564 <__aeabi_i2d>
 8005ba2:	4602      	mov	r2, r0
 8005ba4:	460b      	mov	r3, r1
 8005ba6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005baa:	f7fa fb8d 	bl	80002c8 <__aeabi_dsub>
 8005bae:	3530      	adds	r5, #48	@ 0x30
 8005bb0:	f806 5b01 	strb.w	r5, [r6], #1
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	460b      	mov	r3, r1
 8005bb8:	42a6      	cmp	r6, r4
 8005bba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005bbe:	f04f 0200 	mov.w	r2, #0
 8005bc2:	d124      	bne.n	8005c0e <_dtoa_r+0x626>
 8005bc4:	4baf      	ldr	r3, [pc, #700]	@ (8005e84 <_dtoa_r+0x89c>)
 8005bc6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005bca:	f7fa fb7f 	bl	80002cc <__adddf3>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005bd6:	f7fa ffbf 	bl	8000b58 <__aeabi_dcmpgt>
 8005bda:	2800      	cmp	r0, #0
 8005bdc:	d163      	bne.n	8005ca6 <_dtoa_r+0x6be>
 8005bde:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005be2:	49a8      	ldr	r1, [pc, #672]	@ (8005e84 <_dtoa_r+0x89c>)
 8005be4:	2000      	movs	r0, #0
 8005be6:	f7fa fb6f 	bl	80002c8 <__aeabi_dsub>
 8005bea:	4602      	mov	r2, r0
 8005bec:	460b      	mov	r3, r1
 8005bee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005bf2:	f7fa ff93 	bl	8000b1c <__aeabi_dcmplt>
 8005bf6:	2800      	cmp	r0, #0
 8005bf8:	f43f af14 	beq.w	8005a24 <_dtoa_r+0x43c>
 8005bfc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005bfe:	1e73      	subs	r3, r6, #1
 8005c00:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005c02:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005c06:	2b30      	cmp	r3, #48	@ 0x30
 8005c08:	d0f8      	beq.n	8005bfc <_dtoa_r+0x614>
 8005c0a:	4647      	mov	r7, r8
 8005c0c:	e03b      	b.n	8005c86 <_dtoa_r+0x69e>
 8005c0e:	4b9e      	ldr	r3, [pc, #632]	@ (8005e88 <_dtoa_r+0x8a0>)
 8005c10:	f7fa fd12 	bl	8000638 <__aeabi_dmul>
 8005c14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005c18:	e7bc      	b.n	8005b94 <_dtoa_r+0x5ac>
 8005c1a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8005c1e:	4656      	mov	r6, sl
 8005c20:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c24:	4620      	mov	r0, r4
 8005c26:	4629      	mov	r1, r5
 8005c28:	f7fa fe30 	bl	800088c <__aeabi_ddiv>
 8005c2c:	f7fa ffb4 	bl	8000b98 <__aeabi_d2iz>
 8005c30:	4680      	mov	r8, r0
 8005c32:	f7fa fc97 	bl	8000564 <__aeabi_i2d>
 8005c36:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c3a:	f7fa fcfd 	bl	8000638 <__aeabi_dmul>
 8005c3e:	4602      	mov	r2, r0
 8005c40:	460b      	mov	r3, r1
 8005c42:	4620      	mov	r0, r4
 8005c44:	4629      	mov	r1, r5
 8005c46:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005c4a:	f7fa fb3d 	bl	80002c8 <__aeabi_dsub>
 8005c4e:	f806 4b01 	strb.w	r4, [r6], #1
 8005c52:	9d03      	ldr	r5, [sp, #12]
 8005c54:	eba6 040a 	sub.w	r4, r6, sl
 8005c58:	42a5      	cmp	r5, r4
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	460b      	mov	r3, r1
 8005c5e:	d133      	bne.n	8005cc8 <_dtoa_r+0x6e0>
 8005c60:	f7fa fb34 	bl	80002cc <__adddf3>
 8005c64:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c68:	4604      	mov	r4, r0
 8005c6a:	460d      	mov	r5, r1
 8005c6c:	f7fa ff74 	bl	8000b58 <__aeabi_dcmpgt>
 8005c70:	b9c0      	cbnz	r0, 8005ca4 <_dtoa_r+0x6bc>
 8005c72:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c76:	4620      	mov	r0, r4
 8005c78:	4629      	mov	r1, r5
 8005c7a:	f7fa ff45 	bl	8000b08 <__aeabi_dcmpeq>
 8005c7e:	b110      	cbz	r0, 8005c86 <_dtoa_r+0x69e>
 8005c80:	f018 0f01 	tst.w	r8, #1
 8005c84:	d10e      	bne.n	8005ca4 <_dtoa_r+0x6bc>
 8005c86:	9902      	ldr	r1, [sp, #8]
 8005c88:	4648      	mov	r0, r9
 8005c8a:	f000 fd77 	bl	800677c <_Bfree>
 8005c8e:	2300      	movs	r3, #0
 8005c90:	7033      	strb	r3, [r6, #0]
 8005c92:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005c94:	3701      	adds	r7, #1
 8005c96:	601f      	str	r7, [r3, #0]
 8005c98:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	f000 824b 	beq.w	8006136 <_dtoa_r+0xb4e>
 8005ca0:	601e      	str	r6, [r3, #0]
 8005ca2:	e248      	b.n	8006136 <_dtoa_r+0xb4e>
 8005ca4:	46b8      	mov	r8, r7
 8005ca6:	4633      	mov	r3, r6
 8005ca8:	461e      	mov	r6, r3
 8005caa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005cae:	2a39      	cmp	r2, #57	@ 0x39
 8005cb0:	d106      	bne.n	8005cc0 <_dtoa_r+0x6d8>
 8005cb2:	459a      	cmp	sl, r3
 8005cb4:	d1f8      	bne.n	8005ca8 <_dtoa_r+0x6c0>
 8005cb6:	2230      	movs	r2, #48	@ 0x30
 8005cb8:	f108 0801 	add.w	r8, r8, #1
 8005cbc:	f88a 2000 	strb.w	r2, [sl]
 8005cc0:	781a      	ldrb	r2, [r3, #0]
 8005cc2:	3201      	adds	r2, #1
 8005cc4:	701a      	strb	r2, [r3, #0]
 8005cc6:	e7a0      	b.n	8005c0a <_dtoa_r+0x622>
 8005cc8:	4b6f      	ldr	r3, [pc, #444]	@ (8005e88 <_dtoa_r+0x8a0>)
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f7fa fcb4 	bl	8000638 <__aeabi_dmul>
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	4604      	mov	r4, r0
 8005cd6:	460d      	mov	r5, r1
 8005cd8:	f7fa ff16 	bl	8000b08 <__aeabi_dcmpeq>
 8005cdc:	2800      	cmp	r0, #0
 8005cde:	d09f      	beq.n	8005c20 <_dtoa_r+0x638>
 8005ce0:	e7d1      	b.n	8005c86 <_dtoa_r+0x69e>
 8005ce2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ce4:	2a00      	cmp	r2, #0
 8005ce6:	f000 80ea 	beq.w	8005ebe <_dtoa_r+0x8d6>
 8005cea:	9a07      	ldr	r2, [sp, #28]
 8005cec:	2a01      	cmp	r2, #1
 8005cee:	f300 80cd 	bgt.w	8005e8c <_dtoa_r+0x8a4>
 8005cf2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005cf4:	2a00      	cmp	r2, #0
 8005cf6:	f000 80c1 	beq.w	8005e7c <_dtoa_r+0x894>
 8005cfa:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005cfe:	9c08      	ldr	r4, [sp, #32]
 8005d00:	9e00      	ldr	r6, [sp, #0]
 8005d02:	9a00      	ldr	r2, [sp, #0]
 8005d04:	441a      	add	r2, r3
 8005d06:	9200      	str	r2, [sp, #0]
 8005d08:	9a06      	ldr	r2, [sp, #24]
 8005d0a:	2101      	movs	r1, #1
 8005d0c:	441a      	add	r2, r3
 8005d0e:	4648      	mov	r0, r9
 8005d10:	9206      	str	r2, [sp, #24]
 8005d12:	f000 fde7 	bl	80068e4 <__i2b>
 8005d16:	4605      	mov	r5, r0
 8005d18:	b166      	cbz	r6, 8005d34 <_dtoa_r+0x74c>
 8005d1a:	9b06      	ldr	r3, [sp, #24]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	dd09      	ble.n	8005d34 <_dtoa_r+0x74c>
 8005d20:	42b3      	cmp	r3, r6
 8005d22:	9a00      	ldr	r2, [sp, #0]
 8005d24:	bfa8      	it	ge
 8005d26:	4633      	movge	r3, r6
 8005d28:	1ad2      	subs	r2, r2, r3
 8005d2a:	9200      	str	r2, [sp, #0]
 8005d2c:	9a06      	ldr	r2, [sp, #24]
 8005d2e:	1af6      	subs	r6, r6, r3
 8005d30:	1ad3      	subs	r3, r2, r3
 8005d32:	9306      	str	r3, [sp, #24]
 8005d34:	9b08      	ldr	r3, [sp, #32]
 8005d36:	b30b      	cbz	r3, 8005d7c <_dtoa_r+0x794>
 8005d38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	f000 80c6 	beq.w	8005ecc <_dtoa_r+0x8e4>
 8005d40:	2c00      	cmp	r4, #0
 8005d42:	f000 80c0 	beq.w	8005ec6 <_dtoa_r+0x8de>
 8005d46:	4629      	mov	r1, r5
 8005d48:	4622      	mov	r2, r4
 8005d4a:	4648      	mov	r0, r9
 8005d4c:	f000 fe82 	bl	8006a54 <__pow5mult>
 8005d50:	9a02      	ldr	r2, [sp, #8]
 8005d52:	4601      	mov	r1, r0
 8005d54:	4605      	mov	r5, r0
 8005d56:	4648      	mov	r0, r9
 8005d58:	f000 fdda 	bl	8006910 <__multiply>
 8005d5c:	9902      	ldr	r1, [sp, #8]
 8005d5e:	4680      	mov	r8, r0
 8005d60:	4648      	mov	r0, r9
 8005d62:	f000 fd0b 	bl	800677c <_Bfree>
 8005d66:	9b08      	ldr	r3, [sp, #32]
 8005d68:	1b1b      	subs	r3, r3, r4
 8005d6a:	9308      	str	r3, [sp, #32]
 8005d6c:	f000 80b1 	beq.w	8005ed2 <_dtoa_r+0x8ea>
 8005d70:	9a08      	ldr	r2, [sp, #32]
 8005d72:	4641      	mov	r1, r8
 8005d74:	4648      	mov	r0, r9
 8005d76:	f000 fe6d 	bl	8006a54 <__pow5mult>
 8005d7a:	9002      	str	r0, [sp, #8]
 8005d7c:	2101      	movs	r1, #1
 8005d7e:	4648      	mov	r0, r9
 8005d80:	f000 fdb0 	bl	80068e4 <__i2b>
 8005d84:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005d86:	4604      	mov	r4, r0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	f000 81d8 	beq.w	800613e <_dtoa_r+0xb56>
 8005d8e:	461a      	mov	r2, r3
 8005d90:	4601      	mov	r1, r0
 8005d92:	4648      	mov	r0, r9
 8005d94:	f000 fe5e 	bl	8006a54 <__pow5mult>
 8005d98:	9b07      	ldr	r3, [sp, #28]
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	4604      	mov	r4, r0
 8005d9e:	f300 809f 	bgt.w	8005ee0 <_dtoa_r+0x8f8>
 8005da2:	9b04      	ldr	r3, [sp, #16]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	f040 8097 	bne.w	8005ed8 <_dtoa_r+0x8f0>
 8005daa:	9b05      	ldr	r3, [sp, #20]
 8005dac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	f040 8093 	bne.w	8005edc <_dtoa_r+0x8f4>
 8005db6:	9b05      	ldr	r3, [sp, #20]
 8005db8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005dbc:	0d1b      	lsrs	r3, r3, #20
 8005dbe:	051b      	lsls	r3, r3, #20
 8005dc0:	b133      	cbz	r3, 8005dd0 <_dtoa_r+0x7e8>
 8005dc2:	9b00      	ldr	r3, [sp, #0]
 8005dc4:	3301      	adds	r3, #1
 8005dc6:	9300      	str	r3, [sp, #0]
 8005dc8:	9b06      	ldr	r3, [sp, #24]
 8005dca:	3301      	adds	r3, #1
 8005dcc:	9306      	str	r3, [sp, #24]
 8005dce:	2301      	movs	r3, #1
 8005dd0:	9308      	str	r3, [sp, #32]
 8005dd2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	f000 81b8 	beq.w	800614a <_dtoa_r+0xb62>
 8005dda:	6923      	ldr	r3, [r4, #16]
 8005ddc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005de0:	6918      	ldr	r0, [r3, #16]
 8005de2:	f000 fd33 	bl	800684c <__hi0bits>
 8005de6:	f1c0 0020 	rsb	r0, r0, #32
 8005dea:	9b06      	ldr	r3, [sp, #24]
 8005dec:	4418      	add	r0, r3
 8005dee:	f010 001f 	ands.w	r0, r0, #31
 8005df2:	f000 8082 	beq.w	8005efa <_dtoa_r+0x912>
 8005df6:	f1c0 0320 	rsb	r3, r0, #32
 8005dfa:	2b04      	cmp	r3, #4
 8005dfc:	dd73      	ble.n	8005ee6 <_dtoa_r+0x8fe>
 8005dfe:	9b00      	ldr	r3, [sp, #0]
 8005e00:	f1c0 001c 	rsb	r0, r0, #28
 8005e04:	4403      	add	r3, r0
 8005e06:	9300      	str	r3, [sp, #0]
 8005e08:	9b06      	ldr	r3, [sp, #24]
 8005e0a:	4403      	add	r3, r0
 8005e0c:	4406      	add	r6, r0
 8005e0e:	9306      	str	r3, [sp, #24]
 8005e10:	9b00      	ldr	r3, [sp, #0]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	dd05      	ble.n	8005e22 <_dtoa_r+0x83a>
 8005e16:	9902      	ldr	r1, [sp, #8]
 8005e18:	461a      	mov	r2, r3
 8005e1a:	4648      	mov	r0, r9
 8005e1c:	f000 fe74 	bl	8006b08 <__lshift>
 8005e20:	9002      	str	r0, [sp, #8]
 8005e22:	9b06      	ldr	r3, [sp, #24]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	dd05      	ble.n	8005e34 <_dtoa_r+0x84c>
 8005e28:	4621      	mov	r1, r4
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	4648      	mov	r0, r9
 8005e2e:	f000 fe6b 	bl	8006b08 <__lshift>
 8005e32:	4604      	mov	r4, r0
 8005e34:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d061      	beq.n	8005efe <_dtoa_r+0x916>
 8005e3a:	9802      	ldr	r0, [sp, #8]
 8005e3c:	4621      	mov	r1, r4
 8005e3e:	f000 fecf 	bl	8006be0 <__mcmp>
 8005e42:	2800      	cmp	r0, #0
 8005e44:	da5b      	bge.n	8005efe <_dtoa_r+0x916>
 8005e46:	2300      	movs	r3, #0
 8005e48:	9902      	ldr	r1, [sp, #8]
 8005e4a:	220a      	movs	r2, #10
 8005e4c:	4648      	mov	r0, r9
 8005e4e:	f000 fcb7 	bl	80067c0 <__multadd>
 8005e52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e54:	9002      	str	r0, [sp, #8]
 8005e56:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	f000 8177 	beq.w	800614e <_dtoa_r+0xb66>
 8005e60:	4629      	mov	r1, r5
 8005e62:	2300      	movs	r3, #0
 8005e64:	220a      	movs	r2, #10
 8005e66:	4648      	mov	r0, r9
 8005e68:	f000 fcaa 	bl	80067c0 <__multadd>
 8005e6c:	f1bb 0f00 	cmp.w	fp, #0
 8005e70:	4605      	mov	r5, r0
 8005e72:	dc6f      	bgt.n	8005f54 <_dtoa_r+0x96c>
 8005e74:	9b07      	ldr	r3, [sp, #28]
 8005e76:	2b02      	cmp	r3, #2
 8005e78:	dc49      	bgt.n	8005f0e <_dtoa_r+0x926>
 8005e7a:	e06b      	b.n	8005f54 <_dtoa_r+0x96c>
 8005e7c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005e7e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005e82:	e73c      	b.n	8005cfe <_dtoa_r+0x716>
 8005e84:	3fe00000 	.word	0x3fe00000
 8005e88:	40240000 	.word	0x40240000
 8005e8c:	9b03      	ldr	r3, [sp, #12]
 8005e8e:	1e5c      	subs	r4, r3, #1
 8005e90:	9b08      	ldr	r3, [sp, #32]
 8005e92:	42a3      	cmp	r3, r4
 8005e94:	db09      	blt.n	8005eaa <_dtoa_r+0x8c2>
 8005e96:	1b1c      	subs	r4, r3, r4
 8005e98:	9b03      	ldr	r3, [sp, #12]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	f6bf af30 	bge.w	8005d00 <_dtoa_r+0x718>
 8005ea0:	9b00      	ldr	r3, [sp, #0]
 8005ea2:	9a03      	ldr	r2, [sp, #12]
 8005ea4:	1a9e      	subs	r6, r3, r2
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	e72b      	b.n	8005d02 <_dtoa_r+0x71a>
 8005eaa:	9b08      	ldr	r3, [sp, #32]
 8005eac:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005eae:	9408      	str	r4, [sp, #32]
 8005eb0:	1ae3      	subs	r3, r4, r3
 8005eb2:	441a      	add	r2, r3
 8005eb4:	9e00      	ldr	r6, [sp, #0]
 8005eb6:	9b03      	ldr	r3, [sp, #12]
 8005eb8:	920d      	str	r2, [sp, #52]	@ 0x34
 8005eba:	2400      	movs	r4, #0
 8005ebc:	e721      	b.n	8005d02 <_dtoa_r+0x71a>
 8005ebe:	9c08      	ldr	r4, [sp, #32]
 8005ec0:	9e00      	ldr	r6, [sp, #0]
 8005ec2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8005ec4:	e728      	b.n	8005d18 <_dtoa_r+0x730>
 8005ec6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005eca:	e751      	b.n	8005d70 <_dtoa_r+0x788>
 8005ecc:	9a08      	ldr	r2, [sp, #32]
 8005ece:	9902      	ldr	r1, [sp, #8]
 8005ed0:	e750      	b.n	8005d74 <_dtoa_r+0x78c>
 8005ed2:	f8cd 8008 	str.w	r8, [sp, #8]
 8005ed6:	e751      	b.n	8005d7c <_dtoa_r+0x794>
 8005ed8:	2300      	movs	r3, #0
 8005eda:	e779      	b.n	8005dd0 <_dtoa_r+0x7e8>
 8005edc:	9b04      	ldr	r3, [sp, #16]
 8005ede:	e777      	b.n	8005dd0 <_dtoa_r+0x7e8>
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	9308      	str	r3, [sp, #32]
 8005ee4:	e779      	b.n	8005dda <_dtoa_r+0x7f2>
 8005ee6:	d093      	beq.n	8005e10 <_dtoa_r+0x828>
 8005ee8:	9a00      	ldr	r2, [sp, #0]
 8005eea:	331c      	adds	r3, #28
 8005eec:	441a      	add	r2, r3
 8005eee:	9200      	str	r2, [sp, #0]
 8005ef0:	9a06      	ldr	r2, [sp, #24]
 8005ef2:	441a      	add	r2, r3
 8005ef4:	441e      	add	r6, r3
 8005ef6:	9206      	str	r2, [sp, #24]
 8005ef8:	e78a      	b.n	8005e10 <_dtoa_r+0x828>
 8005efa:	4603      	mov	r3, r0
 8005efc:	e7f4      	b.n	8005ee8 <_dtoa_r+0x900>
 8005efe:	9b03      	ldr	r3, [sp, #12]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	46b8      	mov	r8, r7
 8005f04:	dc20      	bgt.n	8005f48 <_dtoa_r+0x960>
 8005f06:	469b      	mov	fp, r3
 8005f08:	9b07      	ldr	r3, [sp, #28]
 8005f0a:	2b02      	cmp	r3, #2
 8005f0c:	dd1e      	ble.n	8005f4c <_dtoa_r+0x964>
 8005f0e:	f1bb 0f00 	cmp.w	fp, #0
 8005f12:	f47f adb1 	bne.w	8005a78 <_dtoa_r+0x490>
 8005f16:	4621      	mov	r1, r4
 8005f18:	465b      	mov	r3, fp
 8005f1a:	2205      	movs	r2, #5
 8005f1c:	4648      	mov	r0, r9
 8005f1e:	f000 fc4f 	bl	80067c0 <__multadd>
 8005f22:	4601      	mov	r1, r0
 8005f24:	4604      	mov	r4, r0
 8005f26:	9802      	ldr	r0, [sp, #8]
 8005f28:	f000 fe5a 	bl	8006be0 <__mcmp>
 8005f2c:	2800      	cmp	r0, #0
 8005f2e:	f77f ada3 	ble.w	8005a78 <_dtoa_r+0x490>
 8005f32:	4656      	mov	r6, sl
 8005f34:	2331      	movs	r3, #49	@ 0x31
 8005f36:	f806 3b01 	strb.w	r3, [r6], #1
 8005f3a:	f108 0801 	add.w	r8, r8, #1
 8005f3e:	e59f      	b.n	8005a80 <_dtoa_r+0x498>
 8005f40:	9c03      	ldr	r4, [sp, #12]
 8005f42:	46b8      	mov	r8, r7
 8005f44:	4625      	mov	r5, r4
 8005f46:	e7f4      	b.n	8005f32 <_dtoa_r+0x94a>
 8005f48:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8005f4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	f000 8101 	beq.w	8006156 <_dtoa_r+0xb6e>
 8005f54:	2e00      	cmp	r6, #0
 8005f56:	dd05      	ble.n	8005f64 <_dtoa_r+0x97c>
 8005f58:	4629      	mov	r1, r5
 8005f5a:	4632      	mov	r2, r6
 8005f5c:	4648      	mov	r0, r9
 8005f5e:	f000 fdd3 	bl	8006b08 <__lshift>
 8005f62:	4605      	mov	r5, r0
 8005f64:	9b08      	ldr	r3, [sp, #32]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d05c      	beq.n	8006024 <_dtoa_r+0xa3c>
 8005f6a:	6869      	ldr	r1, [r5, #4]
 8005f6c:	4648      	mov	r0, r9
 8005f6e:	f000 fbc5 	bl	80066fc <_Balloc>
 8005f72:	4606      	mov	r6, r0
 8005f74:	b928      	cbnz	r0, 8005f82 <_dtoa_r+0x99a>
 8005f76:	4b82      	ldr	r3, [pc, #520]	@ (8006180 <_dtoa_r+0xb98>)
 8005f78:	4602      	mov	r2, r0
 8005f7a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005f7e:	f7ff bb4a 	b.w	8005616 <_dtoa_r+0x2e>
 8005f82:	692a      	ldr	r2, [r5, #16]
 8005f84:	3202      	adds	r2, #2
 8005f86:	0092      	lsls	r2, r2, #2
 8005f88:	f105 010c 	add.w	r1, r5, #12
 8005f8c:	300c      	adds	r0, #12
 8005f8e:	f001 f811 	bl	8006fb4 <memcpy>
 8005f92:	2201      	movs	r2, #1
 8005f94:	4631      	mov	r1, r6
 8005f96:	4648      	mov	r0, r9
 8005f98:	f000 fdb6 	bl	8006b08 <__lshift>
 8005f9c:	f10a 0301 	add.w	r3, sl, #1
 8005fa0:	9300      	str	r3, [sp, #0]
 8005fa2:	eb0a 030b 	add.w	r3, sl, fp
 8005fa6:	9308      	str	r3, [sp, #32]
 8005fa8:	9b04      	ldr	r3, [sp, #16]
 8005faa:	f003 0301 	and.w	r3, r3, #1
 8005fae:	462f      	mov	r7, r5
 8005fb0:	9306      	str	r3, [sp, #24]
 8005fb2:	4605      	mov	r5, r0
 8005fb4:	9b00      	ldr	r3, [sp, #0]
 8005fb6:	9802      	ldr	r0, [sp, #8]
 8005fb8:	4621      	mov	r1, r4
 8005fba:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8005fbe:	f7ff fa8b 	bl	80054d8 <quorem>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	3330      	adds	r3, #48	@ 0x30
 8005fc6:	9003      	str	r0, [sp, #12]
 8005fc8:	4639      	mov	r1, r7
 8005fca:	9802      	ldr	r0, [sp, #8]
 8005fcc:	9309      	str	r3, [sp, #36]	@ 0x24
 8005fce:	f000 fe07 	bl	8006be0 <__mcmp>
 8005fd2:	462a      	mov	r2, r5
 8005fd4:	9004      	str	r0, [sp, #16]
 8005fd6:	4621      	mov	r1, r4
 8005fd8:	4648      	mov	r0, r9
 8005fda:	f000 fe1d 	bl	8006c18 <__mdiff>
 8005fde:	68c2      	ldr	r2, [r0, #12]
 8005fe0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005fe2:	4606      	mov	r6, r0
 8005fe4:	bb02      	cbnz	r2, 8006028 <_dtoa_r+0xa40>
 8005fe6:	4601      	mov	r1, r0
 8005fe8:	9802      	ldr	r0, [sp, #8]
 8005fea:	f000 fdf9 	bl	8006be0 <__mcmp>
 8005fee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ff0:	4602      	mov	r2, r0
 8005ff2:	4631      	mov	r1, r6
 8005ff4:	4648      	mov	r0, r9
 8005ff6:	920c      	str	r2, [sp, #48]	@ 0x30
 8005ff8:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ffa:	f000 fbbf 	bl	800677c <_Bfree>
 8005ffe:	9b07      	ldr	r3, [sp, #28]
 8006000:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006002:	9e00      	ldr	r6, [sp, #0]
 8006004:	ea42 0103 	orr.w	r1, r2, r3
 8006008:	9b06      	ldr	r3, [sp, #24]
 800600a:	4319      	orrs	r1, r3
 800600c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800600e:	d10d      	bne.n	800602c <_dtoa_r+0xa44>
 8006010:	2b39      	cmp	r3, #57	@ 0x39
 8006012:	d027      	beq.n	8006064 <_dtoa_r+0xa7c>
 8006014:	9a04      	ldr	r2, [sp, #16]
 8006016:	2a00      	cmp	r2, #0
 8006018:	dd01      	ble.n	800601e <_dtoa_r+0xa36>
 800601a:	9b03      	ldr	r3, [sp, #12]
 800601c:	3331      	adds	r3, #49	@ 0x31
 800601e:	f88b 3000 	strb.w	r3, [fp]
 8006022:	e52e      	b.n	8005a82 <_dtoa_r+0x49a>
 8006024:	4628      	mov	r0, r5
 8006026:	e7b9      	b.n	8005f9c <_dtoa_r+0x9b4>
 8006028:	2201      	movs	r2, #1
 800602a:	e7e2      	b.n	8005ff2 <_dtoa_r+0xa0a>
 800602c:	9904      	ldr	r1, [sp, #16]
 800602e:	2900      	cmp	r1, #0
 8006030:	db04      	blt.n	800603c <_dtoa_r+0xa54>
 8006032:	9807      	ldr	r0, [sp, #28]
 8006034:	4301      	orrs	r1, r0
 8006036:	9806      	ldr	r0, [sp, #24]
 8006038:	4301      	orrs	r1, r0
 800603a:	d120      	bne.n	800607e <_dtoa_r+0xa96>
 800603c:	2a00      	cmp	r2, #0
 800603e:	ddee      	ble.n	800601e <_dtoa_r+0xa36>
 8006040:	9902      	ldr	r1, [sp, #8]
 8006042:	9300      	str	r3, [sp, #0]
 8006044:	2201      	movs	r2, #1
 8006046:	4648      	mov	r0, r9
 8006048:	f000 fd5e 	bl	8006b08 <__lshift>
 800604c:	4621      	mov	r1, r4
 800604e:	9002      	str	r0, [sp, #8]
 8006050:	f000 fdc6 	bl	8006be0 <__mcmp>
 8006054:	2800      	cmp	r0, #0
 8006056:	9b00      	ldr	r3, [sp, #0]
 8006058:	dc02      	bgt.n	8006060 <_dtoa_r+0xa78>
 800605a:	d1e0      	bne.n	800601e <_dtoa_r+0xa36>
 800605c:	07da      	lsls	r2, r3, #31
 800605e:	d5de      	bpl.n	800601e <_dtoa_r+0xa36>
 8006060:	2b39      	cmp	r3, #57	@ 0x39
 8006062:	d1da      	bne.n	800601a <_dtoa_r+0xa32>
 8006064:	2339      	movs	r3, #57	@ 0x39
 8006066:	f88b 3000 	strb.w	r3, [fp]
 800606a:	4633      	mov	r3, r6
 800606c:	461e      	mov	r6, r3
 800606e:	3b01      	subs	r3, #1
 8006070:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006074:	2a39      	cmp	r2, #57	@ 0x39
 8006076:	d04e      	beq.n	8006116 <_dtoa_r+0xb2e>
 8006078:	3201      	adds	r2, #1
 800607a:	701a      	strb	r2, [r3, #0]
 800607c:	e501      	b.n	8005a82 <_dtoa_r+0x49a>
 800607e:	2a00      	cmp	r2, #0
 8006080:	dd03      	ble.n	800608a <_dtoa_r+0xaa2>
 8006082:	2b39      	cmp	r3, #57	@ 0x39
 8006084:	d0ee      	beq.n	8006064 <_dtoa_r+0xa7c>
 8006086:	3301      	adds	r3, #1
 8006088:	e7c9      	b.n	800601e <_dtoa_r+0xa36>
 800608a:	9a00      	ldr	r2, [sp, #0]
 800608c:	9908      	ldr	r1, [sp, #32]
 800608e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006092:	428a      	cmp	r2, r1
 8006094:	d028      	beq.n	80060e8 <_dtoa_r+0xb00>
 8006096:	9902      	ldr	r1, [sp, #8]
 8006098:	2300      	movs	r3, #0
 800609a:	220a      	movs	r2, #10
 800609c:	4648      	mov	r0, r9
 800609e:	f000 fb8f 	bl	80067c0 <__multadd>
 80060a2:	42af      	cmp	r7, r5
 80060a4:	9002      	str	r0, [sp, #8]
 80060a6:	f04f 0300 	mov.w	r3, #0
 80060aa:	f04f 020a 	mov.w	r2, #10
 80060ae:	4639      	mov	r1, r7
 80060b0:	4648      	mov	r0, r9
 80060b2:	d107      	bne.n	80060c4 <_dtoa_r+0xadc>
 80060b4:	f000 fb84 	bl	80067c0 <__multadd>
 80060b8:	4607      	mov	r7, r0
 80060ba:	4605      	mov	r5, r0
 80060bc:	9b00      	ldr	r3, [sp, #0]
 80060be:	3301      	adds	r3, #1
 80060c0:	9300      	str	r3, [sp, #0]
 80060c2:	e777      	b.n	8005fb4 <_dtoa_r+0x9cc>
 80060c4:	f000 fb7c 	bl	80067c0 <__multadd>
 80060c8:	4629      	mov	r1, r5
 80060ca:	4607      	mov	r7, r0
 80060cc:	2300      	movs	r3, #0
 80060ce:	220a      	movs	r2, #10
 80060d0:	4648      	mov	r0, r9
 80060d2:	f000 fb75 	bl	80067c0 <__multadd>
 80060d6:	4605      	mov	r5, r0
 80060d8:	e7f0      	b.n	80060bc <_dtoa_r+0xad4>
 80060da:	f1bb 0f00 	cmp.w	fp, #0
 80060de:	bfcc      	ite	gt
 80060e0:	465e      	movgt	r6, fp
 80060e2:	2601      	movle	r6, #1
 80060e4:	4456      	add	r6, sl
 80060e6:	2700      	movs	r7, #0
 80060e8:	9902      	ldr	r1, [sp, #8]
 80060ea:	9300      	str	r3, [sp, #0]
 80060ec:	2201      	movs	r2, #1
 80060ee:	4648      	mov	r0, r9
 80060f0:	f000 fd0a 	bl	8006b08 <__lshift>
 80060f4:	4621      	mov	r1, r4
 80060f6:	9002      	str	r0, [sp, #8]
 80060f8:	f000 fd72 	bl	8006be0 <__mcmp>
 80060fc:	2800      	cmp	r0, #0
 80060fe:	dcb4      	bgt.n	800606a <_dtoa_r+0xa82>
 8006100:	d102      	bne.n	8006108 <_dtoa_r+0xb20>
 8006102:	9b00      	ldr	r3, [sp, #0]
 8006104:	07db      	lsls	r3, r3, #31
 8006106:	d4b0      	bmi.n	800606a <_dtoa_r+0xa82>
 8006108:	4633      	mov	r3, r6
 800610a:	461e      	mov	r6, r3
 800610c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006110:	2a30      	cmp	r2, #48	@ 0x30
 8006112:	d0fa      	beq.n	800610a <_dtoa_r+0xb22>
 8006114:	e4b5      	b.n	8005a82 <_dtoa_r+0x49a>
 8006116:	459a      	cmp	sl, r3
 8006118:	d1a8      	bne.n	800606c <_dtoa_r+0xa84>
 800611a:	2331      	movs	r3, #49	@ 0x31
 800611c:	f108 0801 	add.w	r8, r8, #1
 8006120:	f88a 3000 	strb.w	r3, [sl]
 8006124:	e4ad      	b.n	8005a82 <_dtoa_r+0x49a>
 8006126:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006128:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8006184 <_dtoa_r+0xb9c>
 800612c:	b11b      	cbz	r3, 8006136 <_dtoa_r+0xb4e>
 800612e:	f10a 0308 	add.w	r3, sl, #8
 8006132:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006134:	6013      	str	r3, [r2, #0]
 8006136:	4650      	mov	r0, sl
 8006138:	b017      	add	sp, #92	@ 0x5c
 800613a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800613e:	9b07      	ldr	r3, [sp, #28]
 8006140:	2b01      	cmp	r3, #1
 8006142:	f77f ae2e 	ble.w	8005da2 <_dtoa_r+0x7ba>
 8006146:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006148:	9308      	str	r3, [sp, #32]
 800614a:	2001      	movs	r0, #1
 800614c:	e64d      	b.n	8005dea <_dtoa_r+0x802>
 800614e:	f1bb 0f00 	cmp.w	fp, #0
 8006152:	f77f aed9 	ble.w	8005f08 <_dtoa_r+0x920>
 8006156:	4656      	mov	r6, sl
 8006158:	9802      	ldr	r0, [sp, #8]
 800615a:	4621      	mov	r1, r4
 800615c:	f7ff f9bc 	bl	80054d8 <quorem>
 8006160:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8006164:	f806 3b01 	strb.w	r3, [r6], #1
 8006168:	eba6 020a 	sub.w	r2, r6, sl
 800616c:	4593      	cmp	fp, r2
 800616e:	ddb4      	ble.n	80060da <_dtoa_r+0xaf2>
 8006170:	9902      	ldr	r1, [sp, #8]
 8006172:	2300      	movs	r3, #0
 8006174:	220a      	movs	r2, #10
 8006176:	4648      	mov	r0, r9
 8006178:	f000 fb22 	bl	80067c0 <__multadd>
 800617c:	9002      	str	r0, [sp, #8]
 800617e:	e7eb      	b.n	8006158 <_dtoa_r+0xb70>
 8006180:	080084f8 	.word	0x080084f8
 8006184:	0800847c 	.word	0x0800847c

08006188 <__ssputs_r>:
 8006188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800618c:	688e      	ldr	r6, [r1, #8]
 800618e:	461f      	mov	r7, r3
 8006190:	42be      	cmp	r6, r7
 8006192:	680b      	ldr	r3, [r1, #0]
 8006194:	4682      	mov	sl, r0
 8006196:	460c      	mov	r4, r1
 8006198:	4690      	mov	r8, r2
 800619a:	d82d      	bhi.n	80061f8 <__ssputs_r+0x70>
 800619c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80061a0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80061a4:	d026      	beq.n	80061f4 <__ssputs_r+0x6c>
 80061a6:	6965      	ldr	r5, [r4, #20]
 80061a8:	6909      	ldr	r1, [r1, #16]
 80061aa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80061ae:	eba3 0901 	sub.w	r9, r3, r1
 80061b2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80061b6:	1c7b      	adds	r3, r7, #1
 80061b8:	444b      	add	r3, r9
 80061ba:	106d      	asrs	r5, r5, #1
 80061bc:	429d      	cmp	r5, r3
 80061be:	bf38      	it	cc
 80061c0:	461d      	movcc	r5, r3
 80061c2:	0553      	lsls	r3, r2, #21
 80061c4:	d527      	bpl.n	8006216 <__ssputs_r+0x8e>
 80061c6:	4629      	mov	r1, r5
 80061c8:	f000 f960 	bl	800648c <_malloc_r>
 80061cc:	4606      	mov	r6, r0
 80061ce:	b360      	cbz	r0, 800622a <__ssputs_r+0xa2>
 80061d0:	6921      	ldr	r1, [r4, #16]
 80061d2:	464a      	mov	r2, r9
 80061d4:	f000 feee 	bl	8006fb4 <memcpy>
 80061d8:	89a3      	ldrh	r3, [r4, #12]
 80061da:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80061de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061e2:	81a3      	strh	r3, [r4, #12]
 80061e4:	6126      	str	r6, [r4, #16]
 80061e6:	6165      	str	r5, [r4, #20]
 80061e8:	444e      	add	r6, r9
 80061ea:	eba5 0509 	sub.w	r5, r5, r9
 80061ee:	6026      	str	r6, [r4, #0]
 80061f0:	60a5      	str	r5, [r4, #8]
 80061f2:	463e      	mov	r6, r7
 80061f4:	42be      	cmp	r6, r7
 80061f6:	d900      	bls.n	80061fa <__ssputs_r+0x72>
 80061f8:	463e      	mov	r6, r7
 80061fa:	6820      	ldr	r0, [r4, #0]
 80061fc:	4632      	mov	r2, r6
 80061fe:	4641      	mov	r1, r8
 8006200:	f000 fe67 	bl	8006ed2 <memmove>
 8006204:	68a3      	ldr	r3, [r4, #8]
 8006206:	1b9b      	subs	r3, r3, r6
 8006208:	60a3      	str	r3, [r4, #8]
 800620a:	6823      	ldr	r3, [r4, #0]
 800620c:	4433      	add	r3, r6
 800620e:	6023      	str	r3, [r4, #0]
 8006210:	2000      	movs	r0, #0
 8006212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006216:	462a      	mov	r2, r5
 8006218:	f000 fe2d 	bl	8006e76 <_realloc_r>
 800621c:	4606      	mov	r6, r0
 800621e:	2800      	cmp	r0, #0
 8006220:	d1e0      	bne.n	80061e4 <__ssputs_r+0x5c>
 8006222:	6921      	ldr	r1, [r4, #16]
 8006224:	4650      	mov	r0, sl
 8006226:	f000 ff05 	bl	8007034 <_free_r>
 800622a:	230c      	movs	r3, #12
 800622c:	f8ca 3000 	str.w	r3, [sl]
 8006230:	89a3      	ldrh	r3, [r4, #12]
 8006232:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006236:	81a3      	strh	r3, [r4, #12]
 8006238:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800623c:	e7e9      	b.n	8006212 <__ssputs_r+0x8a>
	...

08006240 <_svfiprintf_r>:
 8006240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006244:	4698      	mov	r8, r3
 8006246:	898b      	ldrh	r3, [r1, #12]
 8006248:	061b      	lsls	r3, r3, #24
 800624a:	b09d      	sub	sp, #116	@ 0x74
 800624c:	4607      	mov	r7, r0
 800624e:	460d      	mov	r5, r1
 8006250:	4614      	mov	r4, r2
 8006252:	d510      	bpl.n	8006276 <_svfiprintf_r+0x36>
 8006254:	690b      	ldr	r3, [r1, #16]
 8006256:	b973      	cbnz	r3, 8006276 <_svfiprintf_r+0x36>
 8006258:	2140      	movs	r1, #64	@ 0x40
 800625a:	f000 f917 	bl	800648c <_malloc_r>
 800625e:	6028      	str	r0, [r5, #0]
 8006260:	6128      	str	r0, [r5, #16]
 8006262:	b930      	cbnz	r0, 8006272 <_svfiprintf_r+0x32>
 8006264:	230c      	movs	r3, #12
 8006266:	603b      	str	r3, [r7, #0]
 8006268:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800626c:	b01d      	add	sp, #116	@ 0x74
 800626e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006272:	2340      	movs	r3, #64	@ 0x40
 8006274:	616b      	str	r3, [r5, #20]
 8006276:	2300      	movs	r3, #0
 8006278:	9309      	str	r3, [sp, #36]	@ 0x24
 800627a:	2320      	movs	r3, #32
 800627c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006280:	f8cd 800c 	str.w	r8, [sp, #12]
 8006284:	2330      	movs	r3, #48	@ 0x30
 8006286:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006424 <_svfiprintf_r+0x1e4>
 800628a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800628e:	f04f 0901 	mov.w	r9, #1
 8006292:	4623      	mov	r3, r4
 8006294:	469a      	mov	sl, r3
 8006296:	f813 2b01 	ldrb.w	r2, [r3], #1
 800629a:	b10a      	cbz	r2, 80062a0 <_svfiprintf_r+0x60>
 800629c:	2a25      	cmp	r2, #37	@ 0x25
 800629e:	d1f9      	bne.n	8006294 <_svfiprintf_r+0x54>
 80062a0:	ebba 0b04 	subs.w	fp, sl, r4
 80062a4:	d00b      	beq.n	80062be <_svfiprintf_r+0x7e>
 80062a6:	465b      	mov	r3, fp
 80062a8:	4622      	mov	r2, r4
 80062aa:	4629      	mov	r1, r5
 80062ac:	4638      	mov	r0, r7
 80062ae:	f7ff ff6b 	bl	8006188 <__ssputs_r>
 80062b2:	3001      	adds	r0, #1
 80062b4:	f000 80a7 	beq.w	8006406 <_svfiprintf_r+0x1c6>
 80062b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80062ba:	445a      	add	r2, fp
 80062bc:	9209      	str	r2, [sp, #36]	@ 0x24
 80062be:	f89a 3000 	ldrb.w	r3, [sl]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	f000 809f 	beq.w	8006406 <_svfiprintf_r+0x1c6>
 80062c8:	2300      	movs	r3, #0
 80062ca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80062ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062d2:	f10a 0a01 	add.w	sl, sl, #1
 80062d6:	9304      	str	r3, [sp, #16]
 80062d8:	9307      	str	r3, [sp, #28]
 80062da:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80062de:	931a      	str	r3, [sp, #104]	@ 0x68
 80062e0:	4654      	mov	r4, sl
 80062e2:	2205      	movs	r2, #5
 80062e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062e8:	484e      	ldr	r0, [pc, #312]	@ (8006424 <_svfiprintf_r+0x1e4>)
 80062ea:	f7f9 ff91 	bl	8000210 <memchr>
 80062ee:	9a04      	ldr	r2, [sp, #16]
 80062f0:	b9d8      	cbnz	r0, 800632a <_svfiprintf_r+0xea>
 80062f2:	06d0      	lsls	r0, r2, #27
 80062f4:	bf44      	itt	mi
 80062f6:	2320      	movmi	r3, #32
 80062f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80062fc:	0711      	lsls	r1, r2, #28
 80062fe:	bf44      	itt	mi
 8006300:	232b      	movmi	r3, #43	@ 0x2b
 8006302:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006306:	f89a 3000 	ldrb.w	r3, [sl]
 800630a:	2b2a      	cmp	r3, #42	@ 0x2a
 800630c:	d015      	beq.n	800633a <_svfiprintf_r+0xfa>
 800630e:	9a07      	ldr	r2, [sp, #28]
 8006310:	4654      	mov	r4, sl
 8006312:	2000      	movs	r0, #0
 8006314:	f04f 0c0a 	mov.w	ip, #10
 8006318:	4621      	mov	r1, r4
 800631a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800631e:	3b30      	subs	r3, #48	@ 0x30
 8006320:	2b09      	cmp	r3, #9
 8006322:	d94b      	bls.n	80063bc <_svfiprintf_r+0x17c>
 8006324:	b1b0      	cbz	r0, 8006354 <_svfiprintf_r+0x114>
 8006326:	9207      	str	r2, [sp, #28]
 8006328:	e014      	b.n	8006354 <_svfiprintf_r+0x114>
 800632a:	eba0 0308 	sub.w	r3, r0, r8
 800632e:	fa09 f303 	lsl.w	r3, r9, r3
 8006332:	4313      	orrs	r3, r2
 8006334:	9304      	str	r3, [sp, #16]
 8006336:	46a2      	mov	sl, r4
 8006338:	e7d2      	b.n	80062e0 <_svfiprintf_r+0xa0>
 800633a:	9b03      	ldr	r3, [sp, #12]
 800633c:	1d19      	adds	r1, r3, #4
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	9103      	str	r1, [sp, #12]
 8006342:	2b00      	cmp	r3, #0
 8006344:	bfbb      	ittet	lt
 8006346:	425b      	neglt	r3, r3
 8006348:	f042 0202 	orrlt.w	r2, r2, #2
 800634c:	9307      	strge	r3, [sp, #28]
 800634e:	9307      	strlt	r3, [sp, #28]
 8006350:	bfb8      	it	lt
 8006352:	9204      	strlt	r2, [sp, #16]
 8006354:	7823      	ldrb	r3, [r4, #0]
 8006356:	2b2e      	cmp	r3, #46	@ 0x2e
 8006358:	d10a      	bne.n	8006370 <_svfiprintf_r+0x130>
 800635a:	7863      	ldrb	r3, [r4, #1]
 800635c:	2b2a      	cmp	r3, #42	@ 0x2a
 800635e:	d132      	bne.n	80063c6 <_svfiprintf_r+0x186>
 8006360:	9b03      	ldr	r3, [sp, #12]
 8006362:	1d1a      	adds	r2, r3, #4
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	9203      	str	r2, [sp, #12]
 8006368:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800636c:	3402      	adds	r4, #2
 800636e:	9305      	str	r3, [sp, #20]
 8006370:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006434 <_svfiprintf_r+0x1f4>
 8006374:	7821      	ldrb	r1, [r4, #0]
 8006376:	2203      	movs	r2, #3
 8006378:	4650      	mov	r0, sl
 800637a:	f7f9 ff49 	bl	8000210 <memchr>
 800637e:	b138      	cbz	r0, 8006390 <_svfiprintf_r+0x150>
 8006380:	9b04      	ldr	r3, [sp, #16]
 8006382:	eba0 000a 	sub.w	r0, r0, sl
 8006386:	2240      	movs	r2, #64	@ 0x40
 8006388:	4082      	lsls	r2, r0
 800638a:	4313      	orrs	r3, r2
 800638c:	3401      	adds	r4, #1
 800638e:	9304      	str	r3, [sp, #16]
 8006390:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006394:	4824      	ldr	r0, [pc, #144]	@ (8006428 <_svfiprintf_r+0x1e8>)
 8006396:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800639a:	2206      	movs	r2, #6
 800639c:	f7f9 ff38 	bl	8000210 <memchr>
 80063a0:	2800      	cmp	r0, #0
 80063a2:	d036      	beq.n	8006412 <_svfiprintf_r+0x1d2>
 80063a4:	4b21      	ldr	r3, [pc, #132]	@ (800642c <_svfiprintf_r+0x1ec>)
 80063a6:	bb1b      	cbnz	r3, 80063f0 <_svfiprintf_r+0x1b0>
 80063a8:	9b03      	ldr	r3, [sp, #12]
 80063aa:	3307      	adds	r3, #7
 80063ac:	f023 0307 	bic.w	r3, r3, #7
 80063b0:	3308      	adds	r3, #8
 80063b2:	9303      	str	r3, [sp, #12]
 80063b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063b6:	4433      	add	r3, r6
 80063b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80063ba:	e76a      	b.n	8006292 <_svfiprintf_r+0x52>
 80063bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80063c0:	460c      	mov	r4, r1
 80063c2:	2001      	movs	r0, #1
 80063c4:	e7a8      	b.n	8006318 <_svfiprintf_r+0xd8>
 80063c6:	2300      	movs	r3, #0
 80063c8:	3401      	adds	r4, #1
 80063ca:	9305      	str	r3, [sp, #20]
 80063cc:	4619      	mov	r1, r3
 80063ce:	f04f 0c0a 	mov.w	ip, #10
 80063d2:	4620      	mov	r0, r4
 80063d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063d8:	3a30      	subs	r2, #48	@ 0x30
 80063da:	2a09      	cmp	r2, #9
 80063dc:	d903      	bls.n	80063e6 <_svfiprintf_r+0x1a6>
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d0c6      	beq.n	8006370 <_svfiprintf_r+0x130>
 80063e2:	9105      	str	r1, [sp, #20]
 80063e4:	e7c4      	b.n	8006370 <_svfiprintf_r+0x130>
 80063e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80063ea:	4604      	mov	r4, r0
 80063ec:	2301      	movs	r3, #1
 80063ee:	e7f0      	b.n	80063d2 <_svfiprintf_r+0x192>
 80063f0:	ab03      	add	r3, sp, #12
 80063f2:	9300      	str	r3, [sp, #0]
 80063f4:	462a      	mov	r2, r5
 80063f6:	4b0e      	ldr	r3, [pc, #56]	@ (8006430 <_svfiprintf_r+0x1f0>)
 80063f8:	a904      	add	r1, sp, #16
 80063fa:	4638      	mov	r0, r7
 80063fc:	f7fe fb84 	bl	8004b08 <_printf_float>
 8006400:	1c42      	adds	r2, r0, #1
 8006402:	4606      	mov	r6, r0
 8006404:	d1d6      	bne.n	80063b4 <_svfiprintf_r+0x174>
 8006406:	89ab      	ldrh	r3, [r5, #12]
 8006408:	065b      	lsls	r3, r3, #25
 800640a:	f53f af2d 	bmi.w	8006268 <_svfiprintf_r+0x28>
 800640e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006410:	e72c      	b.n	800626c <_svfiprintf_r+0x2c>
 8006412:	ab03      	add	r3, sp, #12
 8006414:	9300      	str	r3, [sp, #0]
 8006416:	462a      	mov	r2, r5
 8006418:	4b05      	ldr	r3, [pc, #20]	@ (8006430 <_svfiprintf_r+0x1f0>)
 800641a:	a904      	add	r1, sp, #16
 800641c:	4638      	mov	r0, r7
 800641e:	f7fe fe0b 	bl	8005038 <_printf_i>
 8006422:	e7ed      	b.n	8006400 <_svfiprintf_r+0x1c0>
 8006424:	08008509 	.word	0x08008509
 8006428:	08008513 	.word	0x08008513
 800642c:	08004b09 	.word	0x08004b09
 8006430:	08006189 	.word	0x08006189
 8006434:	0800850f 	.word	0x0800850f

08006438 <malloc>:
 8006438:	4b02      	ldr	r3, [pc, #8]	@ (8006444 <malloc+0xc>)
 800643a:	4601      	mov	r1, r0
 800643c:	6818      	ldr	r0, [r3, #0]
 800643e:	f000 b825 	b.w	800648c <_malloc_r>
 8006442:	bf00      	nop
 8006444:	20000020 	.word	0x20000020

08006448 <sbrk_aligned>:
 8006448:	b570      	push	{r4, r5, r6, lr}
 800644a:	4e0f      	ldr	r6, [pc, #60]	@ (8006488 <sbrk_aligned+0x40>)
 800644c:	460c      	mov	r4, r1
 800644e:	6831      	ldr	r1, [r6, #0]
 8006450:	4605      	mov	r5, r0
 8006452:	b911      	cbnz	r1, 800645a <sbrk_aligned+0x12>
 8006454:	f000 fd7c 	bl	8006f50 <_sbrk_r>
 8006458:	6030      	str	r0, [r6, #0]
 800645a:	4621      	mov	r1, r4
 800645c:	4628      	mov	r0, r5
 800645e:	f000 fd77 	bl	8006f50 <_sbrk_r>
 8006462:	1c43      	adds	r3, r0, #1
 8006464:	d103      	bne.n	800646e <sbrk_aligned+0x26>
 8006466:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800646a:	4620      	mov	r0, r4
 800646c:	bd70      	pop	{r4, r5, r6, pc}
 800646e:	1cc4      	adds	r4, r0, #3
 8006470:	f024 0403 	bic.w	r4, r4, #3
 8006474:	42a0      	cmp	r0, r4
 8006476:	d0f8      	beq.n	800646a <sbrk_aligned+0x22>
 8006478:	1a21      	subs	r1, r4, r0
 800647a:	4628      	mov	r0, r5
 800647c:	f000 fd68 	bl	8006f50 <_sbrk_r>
 8006480:	3001      	adds	r0, #1
 8006482:	d1f2      	bne.n	800646a <sbrk_aligned+0x22>
 8006484:	e7ef      	b.n	8006466 <sbrk_aligned+0x1e>
 8006486:	bf00      	nop
 8006488:	200007e4 	.word	0x200007e4

0800648c <_malloc_r>:
 800648c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006490:	1ccd      	adds	r5, r1, #3
 8006492:	f025 0503 	bic.w	r5, r5, #3
 8006496:	3508      	adds	r5, #8
 8006498:	2d0c      	cmp	r5, #12
 800649a:	bf38      	it	cc
 800649c:	250c      	movcc	r5, #12
 800649e:	2d00      	cmp	r5, #0
 80064a0:	4606      	mov	r6, r0
 80064a2:	db01      	blt.n	80064a8 <_malloc_r+0x1c>
 80064a4:	42a9      	cmp	r1, r5
 80064a6:	d904      	bls.n	80064b2 <_malloc_r+0x26>
 80064a8:	230c      	movs	r3, #12
 80064aa:	6033      	str	r3, [r6, #0]
 80064ac:	2000      	movs	r0, #0
 80064ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006588 <_malloc_r+0xfc>
 80064b6:	f000 f915 	bl	80066e4 <__malloc_lock>
 80064ba:	f8d8 3000 	ldr.w	r3, [r8]
 80064be:	461c      	mov	r4, r3
 80064c0:	bb44      	cbnz	r4, 8006514 <_malloc_r+0x88>
 80064c2:	4629      	mov	r1, r5
 80064c4:	4630      	mov	r0, r6
 80064c6:	f7ff ffbf 	bl	8006448 <sbrk_aligned>
 80064ca:	1c43      	adds	r3, r0, #1
 80064cc:	4604      	mov	r4, r0
 80064ce:	d158      	bne.n	8006582 <_malloc_r+0xf6>
 80064d0:	f8d8 4000 	ldr.w	r4, [r8]
 80064d4:	4627      	mov	r7, r4
 80064d6:	2f00      	cmp	r7, #0
 80064d8:	d143      	bne.n	8006562 <_malloc_r+0xd6>
 80064da:	2c00      	cmp	r4, #0
 80064dc:	d04b      	beq.n	8006576 <_malloc_r+0xea>
 80064de:	6823      	ldr	r3, [r4, #0]
 80064e0:	4639      	mov	r1, r7
 80064e2:	4630      	mov	r0, r6
 80064e4:	eb04 0903 	add.w	r9, r4, r3
 80064e8:	f000 fd32 	bl	8006f50 <_sbrk_r>
 80064ec:	4581      	cmp	r9, r0
 80064ee:	d142      	bne.n	8006576 <_malloc_r+0xea>
 80064f0:	6821      	ldr	r1, [r4, #0]
 80064f2:	1a6d      	subs	r5, r5, r1
 80064f4:	4629      	mov	r1, r5
 80064f6:	4630      	mov	r0, r6
 80064f8:	f7ff ffa6 	bl	8006448 <sbrk_aligned>
 80064fc:	3001      	adds	r0, #1
 80064fe:	d03a      	beq.n	8006576 <_malloc_r+0xea>
 8006500:	6823      	ldr	r3, [r4, #0]
 8006502:	442b      	add	r3, r5
 8006504:	6023      	str	r3, [r4, #0]
 8006506:	f8d8 3000 	ldr.w	r3, [r8]
 800650a:	685a      	ldr	r2, [r3, #4]
 800650c:	bb62      	cbnz	r2, 8006568 <_malloc_r+0xdc>
 800650e:	f8c8 7000 	str.w	r7, [r8]
 8006512:	e00f      	b.n	8006534 <_malloc_r+0xa8>
 8006514:	6822      	ldr	r2, [r4, #0]
 8006516:	1b52      	subs	r2, r2, r5
 8006518:	d420      	bmi.n	800655c <_malloc_r+0xd0>
 800651a:	2a0b      	cmp	r2, #11
 800651c:	d917      	bls.n	800654e <_malloc_r+0xc2>
 800651e:	1961      	adds	r1, r4, r5
 8006520:	42a3      	cmp	r3, r4
 8006522:	6025      	str	r5, [r4, #0]
 8006524:	bf18      	it	ne
 8006526:	6059      	strne	r1, [r3, #4]
 8006528:	6863      	ldr	r3, [r4, #4]
 800652a:	bf08      	it	eq
 800652c:	f8c8 1000 	streq.w	r1, [r8]
 8006530:	5162      	str	r2, [r4, r5]
 8006532:	604b      	str	r3, [r1, #4]
 8006534:	4630      	mov	r0, r6
 8006536:	f000 f8db 	bl	80066f0 <__malloc_unlock>
 800653a:	f104 000b 	add.w	r0, r4, #11
 800653e:	1d23      	adds	r3, r4, #4
 8006540:	f020 0007 	bic.w	r0, r0, #7
 8006544:	1ac2      	subs	r2, r0, r3
 8006546:	bf1c      	itt	ne
 8006548:	1a1b      	subne	r3, r3, r0
 800654a:	50a3      	strne	r3, [r4, r2]
 800654c:	e7af      	b.n	80064ae <_malloc_r+0x22>
 800654e:	6862      	ldr	r2, [r4, #4]
 8006550:	42a3      	cmp	r3, r4
 8006552:	bf0c      	ite	eq
 8006554:	f8c8 2000 	streq.w	r2, [r8]
 8006558:	605a      	strne	r2, [r3, #4]
 800655a:	e7eb      	b.n	8006534 <_malloc_r+0xa8>
 800655c:	4623      	mov	r3, r4
 800655e:	6864      	ldr	r4, [r4, #4]
 8006560:	e7ae      	b.n	80064c0 <_malloc_r+0x34>
 8006562:	463c      	mov	r4, r7
 8006564:	687f      	ldr	r7, [r7, #4]
 8006566:	e7b6      	b.n	80064d6 <_malloc_r+0x4a>
 8006568:	461a      	mov	r2, r3
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	42a3      	cmp	r3, r4
 800656e:	d1fb      	bne.n	8006568 <_malloc_r+0xdc>
 8006570:	2300      	movs	r3, #0
 8006572:	6053      	str	r3, [r2, #4]
 8006574:	e7de      	b.n	8006534 <_malloc_r+0xa8>
 8006576:	230c      	movs	r3, #12
 8006578:	6033      	str	r3, [r6, #0]
 800657a:	4630      	mov	r0, r6
 800657c:	f000 f8b8 	bl	80066f0 <__malloc_unlock>
 8006580:	e794      	b.n	80064ac <_malloc_r+0x20>
 8006582:	6005      	str	r5, [r0, #0]
 8006584:	e7d6      	b.n	8006534 <_malloc_r+0xa8>
 8006586:	bf00      	nop
 8006588:	200007e8 	.word	0x200007e8

0800658c <__sflush_r>:
 800658c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006594:	0716      	lsls	r6, r2, #28
 8006596:	4605      	mov	r5, r0
 8006598:	460c      	mov	r4, r1
 800659a:	d454      	bmi.n	8006646 <__sflush_r+0xba>
 800659c:	684b      	ldr	r3, [r1, #4]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	dc02      	bgt.n	80065a8 <__sflush_r+0x1c>
 80065a2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	dd48      	ble.n	800663a <__sflush_r+0xae>
 80065a8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80065aa:	2e00      	cmp	r6, #0
 80065ac:	d045      	beq.n	800663a <__sflush_r+0xae>
 80065ae:	2300      	movs	r3, #0
 80065b0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80065b4:	682f      	ldr	r7, [r5, #0]
 80065b6:	6a21      	ldr	r1, [r4, #32]
 80065b8:	602b      	str	r3, [r5, #0]
 80065ba:	d030      	beq.n	800661e <__sflush_r+0x92>
 80065bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80065be:	89a3      	ldrh	r3, [r4, #12]
 80065c0:	0759      	lsls	r1, r3, #29
 80065c2:	d505      	bpl.n	80065d0 <__sflush_r+0x44>
 80065c4:	6863      	ldr	r3, [r4, #4]
 80065c6:	1ad2      	subs	r2, r2, r3
 80065c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80065ca:	b10b      	cbz	r3, 80065d0 <__sflush_r+0x44>
 80065cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80065ce:	1ad2      	subs	r2, r2, r3
 80065d0:	2300      	movs	r3, #0
 80065d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80065d4:	6a21      	ldr	r1, [r4, #32]
 80065d6:	4628      	mov	r0, r5
 80065d8:	47b0      	blx	r6
 80065da:	1c43      	adds	r3, r0, #1
 80065dc:	89a3      	ldrh	r3, [r4, #12]
 80065de:	d106      	bne.n	80065ee <__sflush_r+0x62>
 80065e0:	6829      	ldr	r1, [r5, #0]
 80065e2:	291d      	cmp	r1, #29
 80065e4:	d82b      	bhi.n	800663e <__sflush_r+0xb2>
 80065e6:	4a2a      	ldr	r2, [pc, #168]	@ (8006690 <__sflush_r+0x104>)
 80065e8:	40ca      	lsrs	r2, r1
 80065ea:	07d6      	lsls	r6, r2, #31
 80065ec:	d527      	bpl.n	800663e <__sflush_r+0xb2>
 80065ee:	2200      	movs	r2, #0
 80065f0:	6062      	str	r2, [r4, #4]
 80065f2:	04d9      	lsls	r1, r3, #19
 80065f4:	6922      	ldr	r2, [r4, #16]
 80065f6:	6022      	str	r2, [r4, #0]
 80065f8:	d504      	bpl.n	8006604 <__sflush_r+0x78>
 80065fa:	1c42      	adds	r2, r0, #1
 80065fc:	d101      	bne.n	8006602 <__sflush_r+0x76>
 80065fe:	682b      	ldr	r3, [r5, #0]
 8006600:	b903      	cbnz	r3, 8006604 <__sflush_r+0x78>
 8006602:	6560      	str	r0, [r4, #84]	@ 0x54
 8006604:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006606:	602f      	str	r7, [r5, #0]
 8006608:	b1b9      	cbz	r1, 800663a <__sflush_r+0xae>
 800660a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800660e:	4299      	cmp	r1, r3
 8006610:	d002      	beq.n	8006618 <__sflush_r+0x8c>
 8006612:	4628      	mov	r0, r5
 8006614:	f000 fd0e 	bl	8007034 <_free_r>
 8006618:	2300      	movs	r3, #0
 800661a:	6363      	str	r3, [r4, #52]	@ 0x34
 800661c:	e00d      	b.n	800663a <__sflush_r+0xae>
 800661e:	2301      	movs	r3, #1
 8006620:	4628      	mov	r0, r5
 8006622:	47b0      	blx	r6
 8006624:	4602      	mov	r2, r0
 8006626:	1c50      	adds	r0, r2, #1
 8006628:	d1c9      	bne.n	80065be <__sflush_r+0x32>
 800662a:	682b      	ldr	r3, [r5, #0]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d0c6      	beq.n	80065be <__sflush_r+0x32>
 8006630:	2b1d      	cmp	r3, #29
 8006632:	d001      	beq.n	8006638 <__sflush_r+0xac>
 8006634:	2b16      	cmp	r3, #22
 8006636:	d11e      	bne.n	8006676 <__sflush_r+0xea>
 8006638:	602f      	str	r7, [r5, #0]
 800663a:	2000      	movs	r0, #0
 800663c:	e022      	b.n	8006684 <__sflush_r+0xf8>
 800663e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006642:	b21b      	sxth	r3, r3
 8006644:	e01b      	b.n	800667e <__sflush_r+0xf2>
 8006646:	690f      	ldr	r7, [r1, #16]
 8006648:	2f00      	cmp	r7, #0
 800664a:	d0f6      	beq.n	800663a <__sflush_r+0xae>
 800664c:	0793      	lsls	r3, r2, #30
 800664e:	680e      	ldr	r6, [r1, #0]
 8006650:	bf08      	it	eq
 8006652:	694b      	ldreq	r3, [r1, #20]
 8006654:	600f      	str	r7, [r1, #0]
 8006656:	bf18      	it	ne
 8006658:	2300      	movne	r3, #0
 800665a:	eba6 0807 	sub.w	r8, r6, r7
 800665e:	608b      	str	r3, [r1, #8]
 8006660:	f1b8 0f00 	cmp.w	r8, #0
 8006664:	dde9      	ble.n	800663a <__sflush_r+0xae>
 8006666:	6a21      	ldr	r1, [r4, #32]
 8006668:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800666a:	4643      	mov	r3, r8
 800666c:	463a      	mov	r2, r7
 800666e:	4628      	mov	r0, r5
 8006670:	47b0      	blx	r6
 8006672:	2800      	cmp	r0, #0
 8006674:	dc08      	bgt.n	8006688 <__sflush_r+0xfc>
 8006676:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800667a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800667e:	81a3      	strh	r3, [r4, #12]
 8006680:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006688:	4407      	add	r7, r0
 800668a:	eba8 0800 	sub.w	r8, r8, r0
 800668e:	e7e7      	b.n	8006660 <__sflush_r+0xd4>
 8006690:	20400001 	.word	0x20400001

08006694 <_fflush_r>:
 8006694:	b538      	push	{r3, r4, r5, lr}
 8006696:	690b      	ldr	r3, [r1, #16]
 8006698:	4605      	mov	r5, r0
 800669a:	460c      	mov	r4, r1
 800669c:	b913      	cbnz	r3, 80066a4 <_fflush_r+0x10>
 800669e:	2500      	movs	r5, #0
 80066a0:	4628      	mov	r0, r5
 80066a2:	bd38      	pop	{r3, r4, r5, pc}
 80066a4:	b118      	cbz	r0, 80066ae <_fflush_r+0x1a>
 80066a6:	6a03      	ldr	r3, [r0, #32]
 80066a8:	b90b      	cbnz	r3, 80066ae <_fflush_r+0x1a>
 80066aa:	f7fe fea5 	bl	80053f8 <__sinit>
 80066ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d0f3      	beq.n	800669e <_fflush_r+0xa>
 80066b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80066b8:	07d0      	lsls	r0, r2, #31
 80066ba:	d404      	bmi.n	80066c6 <_fflush_r+0x32>
 80066bc:	0599      	lsls	r1, r3, #22
 80066be:	d402      	bmi.n	80066c6 <_fflush_r+0x32>
 80066c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80066c2:	f7fe ff02 	bl	80054ca <__retarget_lock_acquire_recursive>
 80066c6:	4628      	mov	r0, r5
 80066c8:	4621      	mov	r1, r4
 80066ca:	f7ff ff5f 	bl	800658c <__sflush_r>
 80066ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80066d0:	07da      	lsls	r2, r3, #31
 80066d2:	4605      	mov	r5, r0
 80066d4:	d4e4      	bmi.n	80066a0 <_fflush_r+0xc>
 80066d6:	89a3      	ldrh	r3, [r4, #12]
 80066d8:	059b      	lsls	r3, r3, #22
 80066da:	d4e1      	bmi.n	80066a0 <_fflush_r+0xc>
 80066dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80066de:	f7fe fef5 	bl	80054cc <__retarget_lock_release_recursive>
 80066e2:	e7dd      	b.n	80066a0 <_fflush_r+0xc>

080066e4 <__malloc_lock>:
 80066e4:	4801      	ldr	r0, [pc, #4]	@ (80066ec <__malloc_lock+0x8>)
 80066e6:	f7fe bef0 	b.w	80054ca <__retarget_lock_acquire_recursive>
 80066ea:	bf00      	nop
 80066ec:	200007e0 	.word	0x200007e0

080066f0 <__malloc_unlock>:
 80066f0:	4801      	ldr	r0, [pc, #4]	@ (80066f8 <__malloc_unlock+0x8>)
 80066f2:	f7fe beeb 	b.w	80054cc <__retarget_lock_release_recursive>
 80066f6:	bf00      	nop
 80066f8:	200007e0 	.word	0x200007e0

080066fc <_Balloc>:
 80066fc:	b570      	push	{r4, r5, r6, lr}
 80066fe:	69c6      	ldr	r6, [r0, #28]
 8006700:	4604      	mov	r4, r0
 8006702:	460d      	mov	r5, r1
 8006704:	b976      	cbnz	r6, 8006724 <_Balloc+0x28>
 8006706:	2010      	movs	r0, #16
 8006708:	f7ff fe96 	bl	8006438 <malloc>
 800670c:	4602      	mov	r2, r0
 800670e:	61e0      	str	r0, [r4, #28]
 8006710:	b920      	cbnz	r0, 800671c <_Balloc+0x20>
 8006712:	4b18      	ldr	r3, [pc, #96]	@ (8006774 <_Balloc+0x78>)
 8006714:	4818      	ldr	r0, [pc, #96]	@ (8006778 <_Balloc+0x7c>)
 8006716:	216b      	movs	r1, #107	@ 0x6b
 8006718:	f000 fc5a 	bl	8006fd0 <__assert_func>
 800671c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006720:	6006      	str	r6, [r0, #0]
 8006722:	60c6      	str	r6, [r0, #12]
 8006724:	69e6      	ldr	r6, [r4, #28]
 8006726:	68f3      	ldr	r3, [r6, #12]
 8006728:	b183      	cbz	r3, 800674c <_Balloc+0x50>
 800672a:	69e3      	ldr	r3, [r4, #28]
 800672c:	68db      	ldr	r3, [r3, #12]
 800672e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006732:	b9b8      	cbnz	r0, 8006764 <_Balloc+0x68>
 8006734:	2101      	movs	r1, #1
 8006736:	fa01 f605 	lsl.w	r6, r1, r5
 800673a:	1d72      	adds	r2, r6, #5
 800673c:	0092      	lsls	r2, r2, #2
 800673e:	4620      	mov	r0, r4
 8006740:	f000 fc64 	bl	800700c <_calloc_r>
 8006744:	b160      	cbz	r0, 8006760 <_Balloc+0x64>
 8006746:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800674a:	e00e      	b.n	800676a <_Balloc+0x6e>
 800674c:	2221      	movs	r2, #33	@ 0x21
 800674e:	2104      	movs	r1, #4
 8006750:	4620      	mov	r0, r4
 8006752:	f000 fc5b 	bl	800700c <_calloc_r>
 8006756:	69e3      	ldr	r3, [r4, #28]
 8006758:	60f0      	str	r0, [r6, #12]
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d1e4      	bne.n	800672a <_Balloc+0x2e>
 8006760:	2000      	movs	r0, #0
 8006762:	bd70      	pop	{r4, r5, r6, pc}
 8006764:	6802      	ldr	r2, [r0, #0]
 8006766:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800676a:	2300      	movs	r3, #0
 800676c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006770:	e7f7      	b.n	8006762 <_Balloc+0x66>
 8006772:	bf00      	nop
 8006774:	08008489 	.word	0x08008489
 8006778:	0800851a 	.word	0x0800851a

0800677c <_Bfree>:
 800677c:	b570      	push	{r4, r5, r6, lr}
 800677e:	69c6      	ldr	r6, [r0, #28]
 8006780:	4605      	mov	r5, r0
 8006782:	460c      	mov	r4, r1
 8006784:	b976      	cbnz	r6, 80067a4 <_Bfree+0x28>
 8006786:	2010      	movs	r0, #16
 8006788:	f7ff fe56 	bl	8006438 <malloc>
 800678c:	4602      	mov	r2, r0
 800678e:	61e8      	str	r0, [r5, #28]
 8006790:	b920      	cbnz	r0, 800679c <_Bfree+0x20>
 8006792:	4b09      	ldr	r3, [pc, #36]	@ (80067b8 <_Bfree+0x3c>)
 8006794:	4809      	ldr	r0, [pc, #36]	@ (80067bc <_Bfree+0x40>)
 8006796:	218f      	movs	r1, #143	@ 0x8f
 8006798:	f000 fc1a 	bl	8006fd0 <__assert_func>
 800679c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80067a0:	6006      	str	r6, [r0, #0]
 80067a2:	60c6      	str	r6, [r0, #12]
 80067a4:	b13c      	cbz	r4, 80067b6 <_Bfree+0x3a>
 80067a6:	69eb      	ldr	r3, [r5, #28]
 80067a8:	6862      	ldr	r2, [r4, #4]
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80067b0:	6021      	str	r1, [r4, #0]
 80067b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80067b6:	bd70      	pop	{r4, r5, r6, pc}
 80067b8:	08008489 	.word	0x08008489
 80067bc:	0800851a 	.word	0x0800851a

080067c0 <__multadd>:
 80067c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067c4:	690d      	ldr	r5, [r1, #16]
 80067c6:	4607      	mov	r7, r0
 80067c8:	460c      	mov	r4, r1
 80067ca:	461e      	mov	r6, r3
 80067cc:	f101 0c14 	add.w	ip, r1, #20
 80067d0:	2000      	movs	r0, #0
 80067d2:	f8dc 3000 	ldr.w	r3, [ip]
 80067d6:	b299      	uxth	r1, r3
 80067d8:	fb02 6101 	mla	r1, r2, r1, r6
 80067dc:	0c1e      	lsrs	r6, r3, #16
 80067de:	0c0b      	lsrs	r3, r1, #16
 80067e0:	fb02 3306 	mla	r3, r2, r6, r3
 80067e4:	b289      	uxth	r1, r1
 80067e6:	3001      	adds	r0, #1
 80067e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80067ec:	4285      	cmp	r5, r0
 80067ee:	f84c 1b04 	str.w	r1, [ip], #4
 80067f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80067f6:	dcec      	bgt.n	80067d2 <__multadd+0x12>
 80067f8:	b30e      	cbz	r6, 800683e <__multadd+0x7e>
 80067fa:	68a3      	ldr	r3, [r4, #8]
 80067fc:	42ab      	cmp	r3, r5
 80067fe:	dc19      	bgt.n	8006834 <__multadd+0x74>
 8006800:	6861      	ldr	r1, [r4, #4]
 8006802:	4638      	mov	r0, r7
 8006804:	3101      	adds	r1, #1
 8006806:	f7ff ff79 	bl	80066fc <_Balloc>
 800680a:	4680      	mov	r8, r0
 800680c:	b928      	cbnz	r0, 800681a <__multadd+0x5a>
 800680e:	4602      	mov	r2, r0
 8006810:	4b0c      	ldr	r3, [pc, #48]	@ (8006844 <__multadd+0x84>)
 8006812:	480d      	ldr	r0, [pc, #52]	@ (8006848 <__multadd+0x88>)
 8006814:	21ba      	movs	r1, #186	@ 0xba
 8006816:	f000 fbdb 	bl	8006fd0 <__assert_func>
 800681a:	6922      	ldr	r2, [r4, #16]
 800681c:	3202      	adds	r2, #2
 800681e:	f104 010c 	add.w	r1, r4, #12
 8006822:	0092      	lsls	r2, r2, #2
 8006824:	300c      	adds	r0, #12
 8006826:	f000 fbc5 	bl	8006fb4 <memcpy>
 800682a:	4621      	mov	r1, r4
 800682c:	4638      	mov	r0, r7
 800682e:	f7ff ffa5 	bl	800677c <_Bfree>
 8006832:	4644      	mov	r4, r8
 8006834:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006838:	3501      	adds	r5, #1
 800683a:	615e      	str	r6, [r3, #20]
 800683c:	6125      	str	r5, [r4, #16]
 800683e:	4620      	mov	r0, r4
 8006840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006844:	080084f8 	.word	0x080084f8
 8006848:	0800851a 	.word	0x0800851a

0800684c <__hi0bits>:
 800684c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006850:	4603      	mov	r3, r0
 8006852:	bf36      	itet	cc
 8006854:	0403      	lslcc	r3, r0, #16
 8006856:	2000      	movcs	r0, #0
 8006858:	2010      	movcc	r0, #16
 800685a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800685e:	bf3c      	itt	cc
 8006860:	021b      	lslcc	r3, r3, #8
 8006862:	3008      	addcc	r0, #8
 8006864:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006868:	bf3c      	itt	cc
 800686a:	011b      	lslcc	r3, r3, #4
 800686c:	3004      	addcc	r0, #4
 800686e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006872:	bf3c      	itt	cc
 8006874:	009b      	lslcc	r3, r3, #2
 8006876:	3002      	addcc	r0, #2
 8006878:	2b00      	cmp	r3, #0
 800687a:	db05      	blt.n	8006888 <__hi0bits+0x3c>
 800687c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006880:	f100 0001 	add.w	r0, r0, #1
 8006884:	bf08      	it	eq
 8006886:	2020      	moveq	r0, #32
 8006888:	4770      	bx	lr

0800688a <__lo0bits>:
 800688a:	6803      	ldr	r3, [r0, #0]
 800688c:	4602      	mov	r2, r0
 800688e:	f013 0007 	ands.w	r0, r3, #7
 8006892:	d00b      	beq.n	80068ac <__lo0bits+0x22>
 8006894:	07d9      	lsls	r1, r3, #31
 8006896:	d421      	bmi.n	80068dc <__lo0bits+0x52>
 8006898:	0798      	lsls	r0, r3, #30
 800689a:	bf49      	itett	mi
 800689c:	085b      	lsrmi	r3, r3, #1
 800689e:	089b      	lsrpl	r3, r3, #2
 80068a0:	2001      	movmi	r0, #1
 80068a2:	6013      	strmi	r3, [r2, #0]
 80068a4:	bf5c      	itt	pl
 80068a6:	6013      	strpl	r3, [r2, #0]
 80068a8:	2002      	movpl	r0, #2
 80068aa:	4770      	bx	lr
 80068ac:	b299      	uxth	r1, r3
 80068ae:	b909      	cbnz	r1, 80068b4 <__lo0bits+0x2a>
 80068b0:	0c1b      	lsrs	r3, r3, #16
 80068b2:	2010      	movs	r0, #16
 80068b4:	b2d9      	uxtb	r1, r3
 80068b6:	b909      	cbnz	r1, 80068bc <__lo0bits+0x32>
 80068b8:	3008      	adds	r0, #8
 80068ba:	0a1b      	lsrs	r3, r3, #8
 80068bc:	0719      	lsls	r1, r3, #28
 80068be:	bf04      	itt	eq
 80068c0:	091b      	lsreq	r3, r3, #4
 80068c2:	3004      	addeq	r0, #4
 80068c4:	0799      	lsls	r1, r3, #30
 80068c6:	bf04      	itt	eq
 80068c8:	089b      	lsreq	r3, r3, #2
 80068ca:	3002      	addeq	r0, #2
 80068cc:	07d9      	lsls	r1, r3, #31
 80068ce:	d403      	bmi.n	80068d8 <__lo0bits+0x4e>
 80068d0:	085b      	lsrs	r3, r3, #1
 80068d2:	f100 0001 	add.w	r0, r0, #1
 80068d6:	d003      	beq.n	80068e0 <__lo0bits+0x56>
 80068d8:	6013      	str	r3, [r2, #0]
 80068da:	4770      	bx	lr
 80068dc:	2000      	movs	r0, #0
 80068de:	4770      	bx	lr
 80068e0:	2020      	movs	r0, #32
 80068e2:	4770      	bx	lr

080068e4 <__i2b>:
 80068e4:	b510      	push	{r4, lr}
 80068e6:	460c      	mov	r4, r1
 80068e8:	2101      	movs	r1, #1
 80068ea:	f7ff ff07 	bl	80066fc <_Balloc>
 80068ee:	4602      	mov	r2, r0
 80068f0:	b928      	cbnz	r0, 80068fe <__i2b+0x1a>
 80068f2:	4b05      	ldr	r3, [pc, #20]	@ (8006908 <__i2b+0x24>)
 80068f4:	4805      	ldr	r0, [pc, #20]	@ (800690c <__i2b+0x28>)
 80068f6:	f240 1145 	movw	r1, #325	@ 0x145
 80068fa:	f000 fb69 	bl	8006fd0 <__assert_func>
 80068fe:	2301      	movs	r3, #1
 8006900:	6144      	str	r4, [r0, #20]
 8006902:	6103      	str	r3, [r0, #16]
 8006904:	bd10      	pop	{r4, pc}
 8006906:	bf00      	nop
 8006908:	080084f8 	.word	0x080084f8
 800690c:	0800851a 	.word	0x0800851a

08006910 <__multiply>:
 8006910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006914:	4617      	mov	r7, r2
 8006916:	690a      	ldr	r2, [r1, #16]
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	429a      	cmp	r2, r3
 800691c:	bfa8      	it	ge
 800691e:	463b      	movge	r3, r7
 8006920:	4689      	mov	r9, r1
 8006922:	bfa4      	itt	ge
 8006924:	460f      	movge	r7, r1
 8006926:	4699      	movge	r9, r3
 8006928:	693d      	ldr	r5, [r7, #16]
 800692a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	6879      	ldr	r1, [r7, #4]
 8006932:	eb05 060a 	add.w	r6, r5, sl
 8006936:	42b3      	cmp	r3, r6
 8006938:	b085      	sub	sp, #20
 800693a:	bfb8      	it	lt
 800693c:	3101      	addlt	r1, #1
 800693e:	f7ff fedd 	bl	80066fc <_Balloc>
 8006942:	b930      	cbnz	r0, 8006952 <__multiply+0x42>
 8006944:	4602      	mov	r2, r0
 8006946:	4b41      	ldr	r3, [pc, #260]	@ (8006a4c <__multiply+0x13c>)
 8006948:	4841      	ldr	r0, [pc, #260]	@ (8006a50 <__multiply+0x140>)
 800694a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800694e:	f000 fb3f 	bl	8006fd0 <__assert_func>
 8006952:	f100 0414 	add.w	r4, r0, #20
 8006956:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800695a:	4623      	mov	r3, r4
 800695c:	2200      	movs	r2, #0
 800695e:	4573      	cmp	r3, lr
 8006960:	d320      	bcc.n	80069a4 <__multiply+0x94>
 8006962:	f107 0814 	add.w	r8, r7, #20
 8006966:	f109 0114 	add.w	r1, r9, #20
 800696a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800696e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8006972:	9302      	str	r3, [sp, #8]
 8006974:	1beb      	subs	r3, r5, r7
 8006976:	3b15      	subs	r3, #21
 8006978:	f023 0303 	bic.w	r3, r3, #3
 800697c:	3304      	adds	r3, #4
 800697e:	3715      	adds	r7, #21
 8006980:	42bd      	cmp	r5, r7
 8006982:	bf38      	it	cc
 8006984:	2304      	movcc	r3, #4
 8006986:	9301      	str	r3, [sp, #4]
 8006988:	9b02      	ldr	r3, [sp, #8]
 800698a:	9103      	str	r1, [sp, #12]
 800698c:	428b      	cmp	r3, r1
 800698e:	d80c      	bhi.n	80069aa <__multiply+0x9a>
 8006990:	2e00      	cmp	r6, #0
 8006992:	dd03      	ble.n	800699c <__multiply+0x8c>
 8006994:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006998:	2b00      	cmp	r3, #0
 800699a:	d055      	beq.n	8006a48 <__multiply+0x138>
 800699c:	6106      	str	r6, [r0, #16]
 800699e:	b005      	add	sp, #20
 80069a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069a4:	f843 2b04 	str.w	r2, [r3], #4
 80069a8:	e7d9      	b.n	800695e <__multiply+0x4e>
 80069aa:	f8b1 a000 	ldrh.w	sl, [r1]
 80069ae:	f1ba 0f00 	cmp.w	sl, #0
 80069b2:	d01f      	beq.n	80069f4 <__multiply+0xe4>
 80069b4:	46c4      	mov	ip, r8
 80069b6:	46a1      	mov	r9, r4
 80069b8:	2700      	movs	r7, #0
 80069ba:	f85c 2b04 	ldr.w	r2, [ip], #4
 80069be:	f8d9 3000 	ldr.w	r3, [r9]
 80069c2:	fa1f fb82 	uxth.w	fp, r2
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	fb0a 330b 	mla	r3, sl, fp, r3
 80069cc:	443b      	add	r3, r7
 80069ce:	f8d9 7000 	ldr.w	r7, [r9]
 80069d2:	0c12      	lsrs	r2, r2, #16
 80069d4:	0c3f      	lsrs	r7, r7, #16
 80069d6:	fb0a 7202 	mla	r2, sl, r2, r7
 80069da:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80069de:	b29b      	uxth	r3, r3
 80069e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80069e4:	4565      	cmp	r5, ip
 80069e6:	f849 3b04 	str.w	r3, [r9], #4
 80069ea:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80069ee:	d8e4      	bhi.n	80069ba <__multiply+0xaa>
 80069f0:	9b01      	ldr	r3, [sp, #4]
 80069f2:	50e7      	str	r7, [r4, r3]
 80069f4:	9b03      	ldr	r3, [sp, #12]
 80069f6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80069fa:	3104      	adds	r1, #4
 80069fc:	f1b9 0f00 	cmp.w	r9, #0
 8006a00:	d020      	beq.n	8006a44 <__multiply+0x134>
 8006a02:	6823      	ldr	r3, [r4, #0]
 8006a04:	4647      	mov	r7, r8
 8006a06:	46a4      	mov	ip, r4
 8006a08:	f04f 0a00 	mov.w	sl, #0
 8006a0c:	f8b7 b000 	ldrh.w	fp, [r7]
 8006a10:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8006a14:	fb09 220b 	mla	r2, r9, fp, r2
 8006a18:	4452      	add	r2, sl
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006a20:	f84c 3b04 	str.w	r3, [ip], #4
 8006a24:	f857 3b04 	ldr.w	r3, [r7], #4
 8006a28:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006a2c:	f8bc 3000 	ldrh.w	r3, [ip]
 8006a30:	fb09 330a 	mla	r3, r9, sl, r3
 8006a34:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006a38:	42bd      	cmp	r5, r7
 8006a3a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006a3e:	d8e5      	bhi.n	8006a0c <__multiply+0xfc>
 8006a40:	9a01      	ldr	r2, [sp, #4]
 8006a42:	50a3      	str	r3, [r4, r2]
 8006a44:	3404      	adds	r4, #4
 8006a46:	e79f      	b.n	8006988 <__multiply+0x78>
 8006a48:	3e01      	subs	r6, #1
 8006a4a:	e7a1      	b.n	8006990 <__multiply+0x80>
 8006a4c:	080084f8 	.word	0x080084f8
 8006a50:	0800851a 	.word	0x0800851a

08006a54 <__pow5mult>:
 8006a54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a58:	4615      	mov	r5, r2
 8006a5a:	f012 0203 	ands.w	r2, r2, #3
 8006a5e:	4607      	mov	r7, r0
 8006a60:	460e      	mov	r6, r1
 8006a62:	d007      	beq.n	8006a74 <__pow5mult+0x20>
 8006a64:	4c25      	ldr	r4, [pc, #148]	@ (8006afc <__pow5mult+0xa8>)
 8006a66:	3a01      	subs	r2, #1
 8006a68:	2300      	movs	r3, #0
 8006a6a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006a6e:	f7ff fea7 	bl	80067c0 <__multadd>
 8006a72:	4606      	mov	r6, r0
 8006a74:	10ad      	asrs	r5, r5, #2
 8006a76:	d03d      	beq.n	8006af4 <__pow5mult+0xa0>
 8006a78:	69fc      	ldr	r4, [r7, #28]
 8006a7a:	b97c      	cbnz	r4, 8006a9c <__pow5mult+0x48>
 8006a7c:	2010      	movs	r0, #16
 8006a7e:	f7ff fcdb 	bl	8006438 <malloc>
 8006a82:	4602      	mov	r2, r0
 8006a84:	61f8      	str	r0, [r7, #28]
 8006a86:	b928      	cbnz	r0, 8006a94 <__pow5mult+0x40>
 8006a88:	4b1d      	ldr	r3, [pc, #116]	@ (8006b00 <__pow5mult+0xac>)
 8006a8a:	481e      	ldr	r0, [pc, #120]	@ (8006b04 <__pow5mult+0xb0>)
 8006a8c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006a90:	f000 fa9e 	bl	8006fd0 <__assert_func>
 8006a94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006a98:	6004      	str	r4, [r0, #0]
 8006a9a:	60c4      	str	r4, [r0, #12]
 8006a9c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006aa0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006aa4:	b94c      	cbnz	r4, 8006aba <__pow5mult+0x66>
 8006aa6:	f240 2171 	movw	r1, #625	@ 0x271
 8006aaa:	4638      	mov	r0, r7
 8006aac:	f7ff ff1a 	bl	80068e4 <__i2b>
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	f8c8 0008 	str.w	r0, [r8, #8]
 8006ab6:	4604      	mov	r4, r0
 8006ab8:	6003      	str	r3, [r0, #0]
 8006aba:	f04f 0900 	mov.w	r9, #0
 8006abe:	07eb      	lsls	r3, r5, #31
 8006ac0:	d50a      	bpl.n	8006ad8 <__pow5mult+0x84>
 8006ac2:	4631      	mov	r1, r6
 8006ac4:	4622      	mov	r2, r4
 8006ac6:	4638      	mov	r0, r7
 8006ac8:	f7ff ff22 	bl	8006910 <__multiply>
 8006acc:	4631      	mov	r1, r6
 8006ace:	4680      	mov	r8, r0
 8006ad0:	4638      	mov	r0, r7
 8006ad2:	f7ff fe53 	bl	800677c <_Bfree>
 8006ad6:	4646      	mov	r6, r8
 8006ad8:	106d      	asrs	r5, r5, #1
 8006ada:	d00b      	beq.n	8006af4 <__pow5mult+0xa0>
 8006adc:	6820      	ldr	r0, [r4, #0]
 8006ade:	b938      	cbnz	r0, 8006af0 <__pow5mult+0x9c>
 8006ae0:	4622      	mov	r2, r4
 8006ae2:	4621      	mov	r1, r4
 8006ae4:	4638      	mov	r0, r7
 8006ae6:	f7ff ff13 	bl	8006910 <__multiply>
 8006aea:	6020      	str	r0, [r4, #0]
 8006aec:	f8c0 9000 	str.w	r9, [r0]
 8006af0:	4604      	mov	r4, r0
 8006af2:	e7e4      	b.n	8006abe <__pow5mult+0x6a>
 8006af4:	4630      	mov	r0, r6
 8006af6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006afa:	bf00      	nop
 8006afc:	080085bc 	.word	0x080085bc
 8006b00:	08008489 	.word	0x08008489
 8006b04:	0800851a 	.word	0x0800851a

08006b08 <__lshift>:
 8006b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b0c:	460c      	mov	r4, r1
 8006b0e:	6849      	ldr	r1, [r1, #4]
 8006b10:	6923      	ldr	r3, [r4, #16]
 8006b12:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006b16:	68a3      	ldr	r3, [r4, #8]
 8006b18:	4607      	mov	r7, r0
 8006b1a:	4691      	mov	r9, r2
 8006b1c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006b20:	f108 0601 	add.w	r6, r8, #1
 8006b24:	42b3      	cmp	r3, r6
 8006b26:	db0b      	blt.n	8006b40 <__lshift+0x38>
 8006b28:	4638      	mov	r0, r7
 8006b2a:	f7ff fde7 	bl	80066fc <_Balloc>
 8006b2e:	4605      	mov	r5, r0
 8006b30:	b948      	cbnz	r0, 8006b46 <__lshift+0x3e>
 8006b32:	4602      	mov	r2, r0
 8006b34:	4b28      	ldr	r3, [pc, #160]	@ (8006bd8 <__lshift+0xd0>)
 8006b36:	4829      	ldr	r0, [pc, #164]	@ (8006bdc <__lshift+0xd4>)
 8006b38:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006b3c:	f000 fa48 	bl	8006fd0 <__assert_func>
 8006b40:	3101      	adds	r1, #1
 8006b42:	005b      	lsls	r3, r3, #1
 8006b44:	e7ee      	b.n	8006b24 <__lshift+0x1c>
 8006b46:	2300      	movs	r3, #0
 8006b48:	f100 0114 	add.w	r1, r0, #20
 8006b4c:	f100 0210 	add.w	r2, r0, #16
 8006b50:	4618      	mov	r0, r3
 8006b52:	4553      	cmp	r3, sl
 8006b54:	db33      	blt.n	8006bbe <__lshift+0xb6>
 8006b56:	6920      	ldr	r0, [r4, #16]
 8006b58:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006b5c:	f104 0314 	add.w	r3, r4, #20
 8006b60:	f019 091f 	ands.w	r9, r9, #31
 8006b64:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006b68:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006b6c:	d02b      	beq.n	8006bc6 <__lshift+0xbe>
 8006b6e:	f1c9 0e20 	rsb	lr, r9, #32
 8006b72:	468a      	mov	sl, r1
 8006b74:	2200      	movs	r2, #0
 8006b76:	6818      	ldr	r0, [r3, #0]
 8006b78:	fa00 f009 	lsl.w	r0, r0, r9
 8006b7c:	4310      	orrs	r0, r2
 8006b7e:	f84a 0b04 	str.w	r0, [sl], #4
 8006b82:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b86:	459c      	cmp	ip, r3
 8006b88:	fa22 f20e 	lsr.w	r2, r2, lr
 8006b8c:	d8f3      	bhi.n	8006b76 <__lshift+0x6e>
 8006b8e:	ebac 0304 	sub.w	r3, ip, r4
 8006b92:	3b15      	subs	r3, #21
 8006b94:	f023 0303 	bic.w	r3, r3, #3
 8006b98:	3304      	adds	r3, #4
 8006b9a:	f104 0015 	add.w	r0, r4, #21
 8006b9e:	4560      	cmp	r0, ip
 8006ba0:	bf88      	it	hi
 8006ba2:	2304      	movhi	r3, #4
 8006ba4:	50ca      	str	r2, [r1, r3]
 8006ba6:	b10a      	cbz	r2, 8006bac <__lshift+0xa4>
 8006ba8:	f108 0602 	add.w	r6, r8, #2
 8006bac:	3e01      	subs	r6, #1
 8006bae:	4638      	mov	r0, r7
 8006bb0:	612e      	str	r6, [r5, #16]
 8006bb2:	4621      	mov	r1, r4
 8006bb4:	f7ff fde2 	bl	800677c <_Bfree>
 8006bb8:	4628      	mov	r0, r5
 8006bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bbe:	f842 0f04 	str.w	r0, [r2, #4]!
 8006bc2:	3301      	adds	r3, #1
 8006bc4:	e7c5      	b.n	8006b52 <__lshift+0x4a>
 8006bc6:	3904      	subs	r1, #4
 8006bc8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bcc:	f841 2f04 	str.w	r2, [r1, #4]!
 8006bd0:	459c      	cmp	ip, r3
 8006bd2:	d8f9      	bhi.n	8006bc8 <__lshift+0xc0>
 8006bd4:	e7ea      	b.n	8006bac <__lshift+0xa4>
 8006bd6:	bf00      	nop
 8006bd8:	080084f8 	.word	0x080084f8
 8006bdc:	0800851a 	.word	0x0800851a

08006be0 <__mcmp>:
 8006be0:	690a      	ldr	r2, [r1, #16]
 8006be2:	4603      	mov	r3, r0
 8006be4:	6900      	ldr	r0, [r0, #16]
 8006be6:	1a80      	subs	r0, r0, r2
 8006be8:	b530      	push	{r4, r5, lr}
 8006bea:	d10e      	bne.n	8006c0a <__mcmp+0x2a>
 8006bec:	3314      	adds	r3, #20
 8006bee:	3114      	adds	r1, #20
 8006bf0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006bf4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006bf8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006bfc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006c00:	4295      	cmp	r5, r2
 8006c02:	d003      	beq.n	8006c0c <__mcmp+0x2c>
 8006c04:	d205      	bcs.n	8006c12 <__mcmp+0x32>
 8006c06:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006c0a:	bd30      	pop	{r4, r5, pc}
 8006c0c:	42a3      	cmp	r3, r4
 8006c0e:	d3f3      	bcc.n	8006bf8 <__mcmp+0x18>
 8006c10:	e7fb      	b.n	8006c0a <__mcmp+0x2a>
 8006c12:	2001      	movs	r0, #1
 8006c14:	e7f9      	b.n	8006c0a <__mcmp+0x2a>
	...

08006c18 <__mdiff>:
 8006c18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c1c:	4689      	mov	r9, r1
 8006c1e:	4606      	mov	r6, r0
 8006c20:	4611      	mov	r1, r2
 8006c22:	4648      	mov	r0, r9
 8006c24:	4614      	mov	r4, r2
 8006c26:	f7ff ffdb 	bl	8006be0 <__mcmp>
 8006c2a:	1e05      	subs	r5, r0, #0
 8006c2c:	d112      	bne.n	8006c54 <__mdiff+0x3c>
 8006c2e:	4629      	mov	r1, r5
 8006c30:	4630      	mov	r0, r6
 8006c32:	f7ff fd63 	bl	80066fc <_Balloc>
 8006c36:	4602      	mov	r2, r0
 8006c38:	b928      	cbnz	r0, 8006c46 <__mdiff+0x2e>
 8006c3a:	4b3f      	ldr	r3, [pc, #252]	@ (8006d38 <__mdiff+0x120>)
 8006c3c:	f240 2137 	movw	r1, #567	@ 0x237
 8006c40:	483e      	ldr	r0, [pc, #248]	@ (8006d3c <__mdiff+0x124>)
 8006c42:	f000 f9c5 	bl	8006fd0 <__assert_func>
 8006c46:	2301      	movs	r3, #1
 8006c48:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006c4c:	4610      	mov	r0, r2
 8006c4e:	b003      	add	sp, #12
 8006c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c54:	bfbc      	itt	lt
 8006c56:	464b      	movlt	r3, r9
 8006c58:	46a1      	movlt	r9, r4
 8006c5a:	4630      	mov	r0, r6
 8006c5c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006c60:	bfba      	itte	lt
 8006c62:	461c      	movlt	r4, r3
 8006c64:	2501      	movlt	r5, #1
 8006c66:	2500      	movge	r5, #0
 8006c68:	f7ff fd48 	bl	80066fc <_Balloc>
 8006c6c:	4602      	mov	r2, r0
 8006c6e:	b918      	cbnz	r0, 8006c78 <__mdiff+0x60>
 8006c70:	4b31      	ldr	r3, [pc, #196]	@ (8006d38 <__mdiff+0x120>)
 8006c72:	f240 2145 	movw	r1, #581	@ 0x245
 8006c76:	e7e3      	b.n	8006c40 <__mdiff+0x28>
 8006c78:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006c7c:	6926      	ldr	r6, [r4, #16]
 8006c7e:	60c5      	str	r5, [r0, #12]
 8006c80:	f109 0310 	add.w	r3, r9, #16
 8006c84:	f109 0514 	add.w	r5, r9, #20
 8006c88:	f104 0e14 	add.w	lr, r4, #20
 8006c8c:	f100 0b14 	add.w	fp, r0, #20
 8006c90:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006c94:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006c98:	9301      	str	r3, [sp, #4]
 8006c9a:	46d9      	mov	r9, fp
 8006c9c:	f04f 0c00 	mov.w	ip, #0
 8006ca0:	9b01      	ldr	r3, [sp, #4]
 8006ca2:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006ca6:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006caa:	9301      	str	r3, [sp, #4]
 8006cac:	fa1f f38a 	uxth.w	r3, sl
 8006cb0:	4619      	mov	r1, r3
 8006cb2:	b283      	uxth	r3, r0
 8006cb4:	1acb      	subs	r3, r1, r3
 8006cb6:	0c00      	lsrs	r0, r0, #16
 8006cb8:	4463      	add	r3, ip
 8006cba:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006cbe:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006cc2:	b29b      	uxth	r3, r3
 8006cc4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006cc8:	4576      	cmp	r6, lr
 8006cca:	f849 3b04 	str.w	r3, [r9], #4
 8006cce:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006cd2:	d8e5      	bhi.n	8006ca0 <__mdiff+0x88>
 8006cd4:	1b33      	subs	r3, r6, r4
 8006cd6:	3b15      	subs	r3, #21
 8006cd8:	f023 0303 	bic.w	r3, r3, #3
 8006cdc:	3415      	adds	r4, #21
 8006cde:	3304      	adds	r3, #4
 8006ce0:	42a6      	cmp	r6, r4
 8006ce2:	bf38      	it	cc
 8006ce4:	2304      	movcc	r3, #4
 8006ce6:	441d      	add	r5, r3
 8006ce8:	445b      	add	r3, fp
 8006cea:	461e      	mov	r6, r3
 8006cec:	462c      	mov	r4, r5
 8006cee:	4544      	cmp	r4, r8
 8006cf0:	d30e      	bcc.n	8006d10 <__mdiff+0xf8>
 8006cf2:	f108 0103 	add.w	r1, r8, #3
 8006cf6:	1b49      	subs	r1, r1, r5
 8006cf8:	f021 0103 	bic.w	r1, r1, #3
 8006cfc:	3d03      	subs	r5, #3
 8006cfe:	45a8      	cmp	r8, r5
 8006d00:	bf38      	it	cc
 8006d02:	2100      	movcc	r1, #0
 8006d04:	440b      	add	r3, r1
 8006d06:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006d0a:	b191      	cbz	r1, 8006d32 <__mdiff+0x11a>
 8006d0c:	6117      	str	r7, [r2, #16]
 8006d0e:	e79d      	b.n	8006c4c <__mdiff+0x34>
 8006d10:	f854 1b04 	ldr.w	r1, [r4], #4
 8006d14:	46e6      	mov	lr, ip
 8006d16:	0c08      	lsrs	r0, r1, #16
 8006d18:	fa1c fc81 	uxtah	ip, ip, r1
 8006d1c:	4471      	add	r1, lr
 8006d1e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006d22:	b289      	uxth	r1, r1
 8006d24:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006d28:	f846 1b04 	str.w	r1, [r6], #4
 8006d2c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006d30:	e7dd      	b.n	8006cee <__mdiff+0xd6>
 8006d32:	3f01      	subs	r7, #1
 8006d34:	e7e7      	b.n	8006d06 <__mdiff+0xee>
 8006d36:	bf00      	nop
 8006d38:	080084f8 	.word	0x080084f8
 8006d3c:	0800851a 	.word	0x0800851a

08006d40 <__d2b>:
 8006d40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006d44:	460f      	mov	r7, r1
 8006d46:	2101      	movs	r1, #1
 8006d48:	ec59 8b10 	vmov	r8, r9, d0
 8006d4c:	4616      	mov	r6, r2
 8006d4e:	f7ff fcd5 	bl	80066fc <_Balloc>
 8006d52:	4604      	mov	r4, r0
 8006d54:	b930      	cbnz	r0, 8006d64 <__d2b+0x24>
 8006d56:	4602      	mov	r2, r0
 8006d58:	4b23      	ldr	r3, [pc, #140]	@ (8006de8 <__d2b+0xa8>)
 8006d5a:	4824      	ldr	r0, [pc, #144]	@ (8006dec <__d2b+0xac>)
 8006d5c:	f240 310f 	movw	r1, #783	@ 0x30f
 8006d60:	f000 f936 	bl	8006fd0 <__assert_func>
 8006d64:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006d68:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006d6c:	b10d      	cbz	r5, 8006d72 <__d2b+0x32>
 8006d6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006d72:	9301      	str	r3, [sp, #4]
 8006d74:	f1b8 0300 	subs.w	r3, r8, #0
 8006d78:	d023      	beq.n	8006dc2 <__d2b+0x82>
 8006d7a:	4668      	mov	r0, sp
 8006d7c:	9300      	str	r3, [sp, #0]
 8006d7e:	f7ff fd84 	bl	800688a <__lo0bits>
 8006d82:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006d86:	b1d0      	cbz	r0, 8006dbe <__d2b+0x7e>
 8006d88:	f1c0 0320 	rsb	r3, r0, #32
 8006d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d90:	430b      	orrs	r3, r1
 8006d92:	40c2      	lsrs	r2, r0
 8006d94:	6163      	str	r3, [r4, #20]
 8006d96:	9201      	str	r2, [sp, #4]
 8006d98:	9b01      	ldr	r3, [sp, #4]
 8006d9a:	61a3      	str	r3, [r4, #24]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	bf0c      	ite	eq
 8006da0:	2201      	moveq	r2, #1
 8006da2:	2202      	movne	r2, #2
 8006da4:	6122      	str	r2, [r4, #16]
 8006da6:	b1a5      	cbz	r5, 8006dd2 <__d2b+0x92>
 8006da8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006dac:	4405      	add	r5, r0
 8006dae:	603d      	str	r5, [r7, #0]
 8006db0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006db4:	6030      	str	r0, [r6, #0]
 8006db6:	4620      	mov	r0, r4
 8006db8:	b003      	add	sp, #12
 8006dba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006dbe:	6161      	str	r1, [r4, #20]
 8006dc0:	e7ea      	b.n	8006d98 <__d2b+0x58>
 8006dc2:	a801      	add	r0, sp, #4
 8006dc4:	f7ff fd61 	bl	800688a <__lo0bits>
 8006dc8:	9b01      	ldr	r3, [sp, #4]
 8006dca:	6163      	str	r3, [r4, #20]
 8006dcc:	3020      	adds	r0, #32
 8006dce:	2201      	movs	r2, #1
 8006dd0:	e7e8      	b.n	8006da4 <__d2b+0x64>
 8006dd2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006dd6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006dda:	6038      	str	r0, [r7, #0]
 8006ddc:	6918      	ldr	r0, [r3, #16]
 8006dde:	f7ff fd35 	bl	800684c <__hi0bits>
 8006de2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006de6:	e7e5      	b.n	8006db4 <__d2b+0x74>
 8006de8:	080084f8 	.word	0x080084f8
 8006dec:	0800851a 	.word	0x0800851a

08006df0 <__sread>:
 8006df0:	b510      	push	{r4, lr}
 8006df2:	460c      	mov	r4, r1
 8006df4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006df8:	f000 f898 	bl	8006f2c <_read_r>
 8006dfc:	2800      	cmp	r0, #0
 8006dfe:	bfab      	itete	ge
 8006e00:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006e02:	89a3      	ldrhlt	r3, [r4, #12]
 8006e04:	181b      	addge	r3, r3, r0
 8006e06:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006e0a:	bfac      	ite	ge
 8006e0c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006e0e:	81a3      	strhlt	r3, [r4, #12]
 8006e10:	bd10      	pop	{r4, pc}

08006e12 <__swrite>:
 8006e12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e16:	461f      	mov	r7, r3
 8006e18:	898b      	ldrh	r3, [r1, #12]
 8006e1a:	05db      	lsls	r3, r3, #23
 8006e1c:	4605      	mov	r5, r0
 8006e1e:	460c      	mov	r4, r1
 8006e20:	4616      	mov	r6, r2
 8006e22:	d505      	bpl.n	8006e30 <__swrite+0x1e>
 8006e24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e28:	2302      	movs	r3, #2
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f000 f86c 	bl	8006f08 <_lseek_r>
 8006e30:	89a3      	ldrh	r3, [r4, #12]
 8006e32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e36:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006e3a:	81a3      	strh	r3, [r4, #12]
 8006e3c:	4632      	mov	r2, r6
 8006e3e:	463b      	mov	r3, r7
 8006e40:	4628      	mov	r0, r5
 8006e42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e46:	f000 b893 	b.w	8006f70 <_write_r>

08006e4a <__sseek>:
 8006e4a:	b510      	push	{r4, lr}
 8006e4c:	460c      	mov	r4, r1
 8006e4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e52:	f000 f859 	bl	8006f08 <_lseek_r>
 8006e56:	1c43      	adds	r3, r0, #1
 8006e58:	89a3      	ldrh	r3, [r4, #12]
 8006e5a:	bf15      	itete	ne
 8006e5c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006e5e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006e62:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006e66:	81a3      	strheq	r3, [r4, #12]
 8006e68:	bf18      	it	ne
 8006e6a:	81a3      	strhne	r3, [r4, #12]
 8006e6c:	bd10      	pop	{r4, pc}

08006e6e <__sclose>:
 8006e6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e72:	f000 b88f 	b.w	8006f94 <_close_r>

08006e76 <_realloc_r>:
 8006e76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e7a:	4607      	mov	r7, r0
 8006e7c:	4614      	mov	r4, r2
 8006e7e:	460d      	mov	r5, r1
 8006e80:	b921      	cbnz	r1, 8006e8c <_realloc_r+0x16>
 8006e82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e86:	4611      	mov	r1, r2
 8006e88:	f7ff bb00 	b.w	800648c <_malloc_r>
 8006e8c:	b92a      	cbnz	r2, 8006e9a <_realloc_r+0x24>
 8006e8e:	f000 f8d1 	bl	8007034 <_free_r>
 8006e92:	4625      	mov	r5, r4
 8006e94:	4628      	mov	r0, r5
 8006e96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e9a:	f000 f927 	bl	80070ec <_malloc_usable_size_r>
 8006e9e:	4284      	cmp	r4, r0
 8006ea0:	4606      	mov	r6, r0
 8006ea2:	d802      	bhi.n	8006eaa <_realloc_r+0x34>
 8006ea4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006ea8:	d8f4      	bhi.n	8006e94 <_realloc_r+0x1e>
 8006eaa:	4621      	mov	r1, r4
 8006eac:	4638      	mov	r0, r7
 8006eae:	f7ff faed 	bl	800648c <_malloc_r>
 8006eb2:	4680      	mov	r8, r0
 8006eb4:	b908      	cbnz	r0, 8006eba <_realloc_r+0x44>
 8006eb6:	4645      	mov	r5, r8
 8006eb8:	e7ec      	b.n	8006e94 <_realloc_r+0x1e>
 8006eba:	42b4      	cmp	r4, r6
 8006ebc:	4622      	mov	r2, r4
 8006ebe:	4629      	mov	r1, r5
 8006ec0:	bf28      	it	cs
 8006ec2:	4632      	movcs	r2, r6
 8006ec4:	f000 f876 	bl	8006fb4 <memcpy>
 8006ec8:	4629      	mov	r1, r5
 8006eca:	4638      	mov	r0, r7
 8006ecc:	f000 f8b2 	bl	8007034 <_free_r>
 8006ed0:	e7f1      	b.n	8006eb6 <_realloc_r+0x40>

08006ed2 <memmove>:
 8006ed2:	4288      	cmp	r0, r1
 8006ed4:	b510      	push	{r4, lr}
 8006ed6:	eb01 0402 	add.w	r4, r1, r2
 8006eda:	d902      	bls.n	8006ee2 <memmove+0x10>
 8006edc:	4284      	cmp	r4, r0
 8006ede:	4623      	mov	r3, r4
 8006ee0:	d807      	bhi.n	8006ef2 <memmove+0x20>
 8006ee2:	1e43      	subs	r3, r0, #1
 8006ee4:	42a1      	cmp	r1, r4
 8006ee6:	d008      	beq.n	8006efa <memmove+0x28>
 8006ee8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006eec:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006ef0:	e7f8      	b.n	8006ee4 <memmove+0x12>
 8006ef2:	4402      	add	r2, r0
 8006ef4:	4601      	mov	r1, r0
 8006ef6:	428a      	cmp	r2, r1
 8006ef8:	d100      	bne.n	8006efc <memmove+0x2a>
 8006efa:	bd10      	pop	{r4, pc}
 8006efc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006f00:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006f04:	e7f7      	b.n	8006ef6 <memmove+0x24>
	...

08006f08 <_lseek_r>:
 8006f08:	b538      	push	{r3, r4, r5, lr}
 8006f0a:	4d07      	ldr	r5, [pc, #28]	@ (8006f28 <_lseek_r+0x20>)
 8006f0c:	4604      	mov	r4, r0
 8006f0e:	4608      	mov	r0, r1
 8006f10:	4611      	mov	r1, r2
 8006f12:	2200      	movs	r2, #0
 8006f14:	602a      	str	r2, [r5, #0]
 8006f16:	461a      	mov	r2, r3
 8006f18:	f7fa fefe 	bl	8001d18 <_lseek>
 8006f1c:	1c43      	adds	r3, r0, #1
 8006f1e:	d102      	bne.n	8006f26 <_lseek_r+0x1e>
 8006f20:	682b      	ldr	r3, [r5, #0]
 8006f22:	b103      	cbz	r3, 8006f26 <_lseek_r+0x1e>
 8006f24:	6023      	str	r3, [r4, #0]
 8006f26:	bd38      	pop	{r3, r4, r5, pc}
 8006f28:	200007ec 	.word	0x200007ec

08006f2c <_read_r>:
 8006f2c:	b538      	push	{r3, r4, r5, lr}
 8006f2e:	4d07      	ldr	r5, [pc, #28]	@ (8006f4c <_read_r+0x20>)
 8006f30:	4604      	mov	r4, r0
 8006f32:	4608      	mov	r0, r1
 8006f34:	4611      	mov	r1, r2
 8006f36:	2200      	movs	r2, #0
 8006f38:	602a      	str	r2, [r5, #0]
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	f7fa fea8 	bl	8001c90 <_read>
 8006f40:	1c43      	adds	r3, r0, #1
 8006f42:	d102      	bne.n	8006f4a <_read_r+0x1e>
 8006f44:	682b      	ldr	r3, [r5, #0]
 8006f46:	b103      	cbz	r3, 8006f4a <_read_r+0x1e>
 8006f48:	6023      	str	r3, [r4, #0]
 8006f4a:	bd38      	pop	{r3, r4, r5, pc}
 8006f4c:	200007ec 	.word	0x200007ec

08006f50 <_sbrk_r>:
 8006f50:	b538      	push	{r3, r4, r5, lr}
 8006f52:	4d06      	ldr	r5, [pc, #24]	@ (8006f6c <_sbrk_r+0x1c>)
 8006f54:	2300      	movs	r3, #0
 8006f56:	4604      	mov	r4, r0
 8006f58:	4608      	mov	r0, r1
 8006f5a:	602b      	str	r3, [r5, #0]
 8006f5c:	f7fa feea 	bl	8001d34 <_sbrk>
 8006f60:	1c43      	adds	r3, r0, #1
 8006f62:	d102      	bne.n	8006f6a <_sbrk_r+0x1a>
 8006f64:	682b      	ldr	r3, [r5, #0]
 8006f66:	b103      	cbz	r3, 8006f6a <_sbrk_r+0x1a>
 8006f68:	6023      	str	r3, [r4, #0]
 8006f6a:	bd38      	pop	{r3, r4, r5, pc}
 8006f6c:	200007ec 	.word	0x200007ec

08006f70 <_write_r>:
 8006f70:	b538      	push	{r3, r4, r5, lr}
 8006f72:	4d07      	ldr	r5, [pc, #28]	@ (8006f90 <_write_r+0x20>)
 8006f74:	4604      	mov	r4, r0
 8006f76:	4608      	mov	r0, r1
 8006f78:	4611      	mov	r1, r2
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	602a      	str	r2, [r5, #0]
 8006f7e:	461a      	mov	r2, r3
 8006f80:	f7f9 ffc8 	bl	8000f14 <_write>
 8006f84:	1c43      	adds	r3, r0, #1
 8006f86:	d102      	bne.n	8006f8e <_write_r+0x1e>
 8006f88:	682b      	ldr	r3, [r5, #0]
 8006f8a:	b103      	cbz	r3, 8006f8e <_write_r+0x1e>
 8006f8c:	6023      	str	r3, [r4, #0]
 8006f8e:	bd38      	pop	{r3, r4, r5, pc}
 8006f90:	200007ec 	.word	0x200007ec

08006f94 <_close_r>:
 8006f94:	b538      	push	{r3, r4, r5, lr}
 8006f96:	4d06      	ldr	r5, [pc, #24]	@ (8006fb0 <_close_r+0x1c>)
 8006f98:	2300      	movs	r3, #0
 8006f9a:	4604      	mov	r4, r0
 8006f9c:	4608      	mov	r0, r1
 8006f9e:	602b      	str	r3, [r5, #0]
 8006fa0:	f7fa fe93 	bl	8001cca <_close>
 8006fa4:	1c43      	adds	r3, r0, #1
 8006fa6:	d102      	bne.n	8006fae <_close_r+0x1a>
 8006fa8:	682b      	ldr	r3, [r5, #0]
 8006faa:	b103      	cbz	r3, 8006fae <_close_r+0x1a>
 8006fac:	6023      	str	r3, [r4, #0]
 8006fae:	bd38      	pop	{r3, r4, r5, pc}
 8006fb0:	200007ec 	.word	0x200007ec

08006fb4 <memcpy>:
 8006fb4:	440a      	add	r2, r1
 8006fb6:	4291      	cmp	r1, r2
 8006fb8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006fbc:	d100      	bne.n	8006fc0 <memcpy+0xc>
 8006fbe:	4770      	bx	lr
 8006fc0:	b510      	push	{r4, lr}
 8006fc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006fca:	4291      	cmp	r1, r2
 8006fcc:	d1f9      	bne.n	8006fc2 <memcpy+0xe>
 8006fce:	bd10      	pop	{r4, pc}

08006fd0 <__assert_func>:
 8006fd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006fd2:	4614      	mov	r4, r2
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	4b09      	ldr	r3, [pc, #36]	@ (8006ffc <__assert_func+0x2c>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4605      	mov	r5, r0
 8006fdc:	68d8      	ldr	r0, [r3, #12]
 8006fde:	b14c      	cbz	r4, 8006ff4 <__assert_func+0x24>
 8006fe0:	4b07      	ldr	r3, [pc, #28]	@ (8007000 <__assert_func+0x30>)
 8006fe2:	9100      	str	r1, [sp, #0]
 8006fe4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006fe8:	4906      	ldr	r1, [pc, #24]	@ (8007004 <__assert_func+0x34>)
 8006fea:	462b      	mov	r3, r5
 8006fec:	f000 f886 	bl	80070fc <fiprintf>
 8006ff0:	f000 f8a3 	bl	800713a <abort>
 8006ff4:	4b04      	ldr	r3, [pc, #16]	@ (8007008 <__assert_func+0x38>)
 8006ff6:	461c      	mov	r4, r3
 8006ff8:	e7f3      	b.n	8006fe2 <__assert_func+0x12>
 8006ffa:	bf00      	nop
 8006ffc:	20000020 	.word	0x20000020
 8007000:	0800857d 	.word	0x0800857d
 8007004:	0800858a 	.word	0x0800858a
 8007008:	080085b8 	.word	0x080085b8

0800700c <_calloc_r>:
 800700c:	b570      	push	{r4, r5, r6, lr}
 800700e:	fba1 5402 	umull	r5, r4, r1, r2
 8007012:	b934      	cbnz	r4, 8007022 <_calloc_r+0x16>
 8007014:	4629      	mov	r1, r5
 8007016:	f7ff fa39 	bl	800648c <_malloc_r>
 800701a:	4606      	mov	r6, r0
 800701c:	b928      	cbnz	r0, 800702a <_calloc_r+0x1e>
 800701e:	4630      	mov	r0, r6
 8007020:	bd70      	pop	{r4, r5, r6, pc}
 8007022:	220c      	movs	r2, #12
 8007024:	6002      	str	r2, [r0, #0]
 8007026:	2600      	movs	r6, #0
 8007028:	e7f9      	b.n	800701e <_calloc_r+0x12>
 800702a:	462a      	mov	r2, r5
 800702c:	4621      	mov	r1, r4
 800702e:	f7fe fa19 	bl	8005464 <memset>
 8007032:	e7f4      	b.n	800701e <_calloc_r+0x12>

08007034 <_free_r>:
 8007034:	b538      	push	{r3, r4, r5, lr}
 8007036:	4605      	mov	r5, r0
 8007038:	2900      	cmp	r1, #0
 800703a:	d041      	beq.n	80070c0 <_free_r+0x8c>
 800703c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007040:	1f0c      	subs	r4, r1, #4
 8007042:	2b00      	cmp	r3, #0
 8007044:	bfb8      	it	lt
 8007046:	18e4      	addlt	r4, r4, r3
 8007048:	f7ff fb4c 	bl	80066e4 <__malloc_lock>
 800704c:	4a1d      	ldr	r2, [pc, #116]	@ (80070c4 <_free_r+0x90>)
 800704e:	6813      	ldr	r3, [r2, #0]
 8007050:	b933      	cbnz	r3, 8007060 <_free_r+0x2c>
 8007052:	6063      	str	r3, [r4, #4]
 8007054:	6014      	str	r4, [r2, #0]
 8007056:	4628      	mov	r0, r5
 8007058:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800705c:	f7ff bb48 	b.w	80066f0 <__malloc_unlock>
 8007060:	42a3      	cmp	r3, r4
 8007062:	d908      	bls.n	8007076 <_free_r+0x42>
 8007064:	6820      	ldr	r0, [r4, #0]
 8007066:	1821      	adds	r1, r4, r0
 8007068:	428b      	cmp	r3, r1
 800706a:	bf01      	itttt	eq
 800706c:	6819      	ldreq	r1, [r3, #0]
 800706e:	685b      	ldreq	r3, [r3, #4]
 8007070:	1809      	addeq	r1, r1, r0
 8007072:	6021      	streq	r1, [r4, #0]
 8007074:	e7ed      	b.n	8007052 <_free_r+0x1e>
 8007076:	461a      	mov	r2, r3
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	b10b      	cbz	r3, 8007080 <_free_r+0x4c>
 800707c:	42a3      	cmp	r3, r4
 800707e:	d9fa      	bls.n	8007076 <_free_r+0x42>
 8007080:	6811      	ldr	r1, [r2, #0]
 8007082:	1850      	adds	r0, r2, r1
 8007084:	42a0      	cmp	r0, r4
 8007086:	d10b      	bne.n	80070a0 <_free_r+0x6c>
 8007088:	6820      	ldr	r0, [r4, #0]
 800708a:	4401      	add	r1, r0
 800708c:	1850      	adds	r0, r2, r1
 800708e:	4283      	cmp	r3, r0
 8007090:	6011      	str	r1, [r2, #0]
 8007092:	d1e0      	bne.n	8007056 <_free_r+0x22>
 8007094:	6818      	ldr	r0, [r3, #0]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	6053      	str	r3, [r2, #4]
 800709a:	4408      	add	r0, r1
 800709c:	6010      	str	r0, [r2, #0]
 800709e:	e7da      	b.n	8007056 <_free_r+0x22>
 80070a0:	d902      	bls.n	80070a8 <_free_r+0x74>
 80070a2:	230c      	movs	r3, #12
 80070a4:	602b      	str	r3, [r5, #0]
 80070a6:	e7d6      	b.n	8007056 <_free_r+0x22>
 80070a8:	6820      	ldr	r0, [r4, #0]
 80070aa:	1821      	adds	r1, r4, r0
 80070ac:	428b      	cmp	r3, r1
 80070ae:	bf04      	itt	eq
 80070b0:	6819      	ldreq	r1, [r3, #0]
 80070b2:	685b      	ldreq	r3, [r3, #4]
 80070b4:	6063      	str	r3, [r4, #4]
 80070b6:	bf04      	itt	eq
 80070b8:	1809      	addeq	r1, r1, r0
 80070ba:	6021      	streq	r1, [r4, #0]
 80070bc:	6054      	str	r4, [r2, #4]
 80070be:	e7ca      	b.n	8007056 <_free_r+0x22>
 80070c0:	bd38      	pop	{r3, r4, r5, pc}
 80070c2:	bf00      	nop
 80070c4:	200007e8 	.word	0x200007e8

080070c8 <__ascii_mbtowc>:
 80070c8:	b082      	sub	sp, #8
 80070ca:	b901      	cbnz	r1, 80070ce <__ascii_mbtowc+0x6>
 80070cc:	a901      	add	r1, sp, #4
 80070ce:	b142      	cbz	r2, 80070e2 <__ascii_mbtowc+0x1a>
 80070d0:	b14b      	cbz	r3, 80070e6 <__ascii_mbtowc+0x1e>
 80070d2:	7813      	ldrb	r3, [r2, #0]
 80070d4:	600b      	str	r3, [r1, #0]
 80070d6:	7812      	ldrb	r2, [r2, #0]
 80070d8:	1e10      	subs	r0, r2, #0
 80070da:	bf18      	it	ne
 80070dc:	2001      	movne	r0, #1
 80070de:	b002      	add	sp, #8
 80070e0:	4770      	bx	lr
 80070e2:	4610      	mov	r0, r2
 80070e4:	e7fb      	b.n	80070de <__ascii_mbtowc+0x16>
 80070e6:	f06f 0001 	mvn.w	r0, #1
 80070ea:	e7f8      	b.n	80070de <__ascii_mbtowc+0x16>

080070ec <_malloc_usable_size_r>:
 80070ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070f0:	1f18      	subs	r0, r3, #4
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	bfbc      	itt	lt
 80070f6:	580b      	ldrlt	r3, [r1, r0]
 80070f8:	18c0      	addlt	r0, r0, r3
 80070fa:	4770      	bx	lr

080070fc <fiprintf>:
 80070fc:	b40e      	push	{r1, r2, r3}
 80070fe:	b503      	push	{r0, r1, lr}
 8007100:	4601      	mov	r1, r0
 8007102:	ab03      	add	r3, sp, #12
 8007104:	4805      	ldr	r0, [pc, #20]	@ (800711c <fiprintf+0x20>)
 8007106:	f853 2b04 	ldr.w	r2, [r3], #4
 800710a:	6800      	ldr	r0, [r0, #0]
 800710c:	9301      	str	r3, [sp, #4]
 800710e:	f000 f845 	bl	800719c <_vfiprintf_r>
 8007112:	b002      	add	sp, #8
 8007114:	f85d eb04 	ldr.w	lr, [sp], #4
 8007118:	b003      	add	sp, #12
 800711a:	4770      	bx	lr
 800711c:	20000020 	.word	0x20000020

08007120 <__ascii_wctomb>:
 8007120:	4603      	mov	r3, r0
 8007122:	4608      	mov	r0, r1
 8007124:	b141      	cbz	r1, 8007138 <__ascii_wctomb+0x18>
 8007126:	2aff      	cmp	r2, #255	@ 0xff
 8007128:	d904      	bls.n	8007134 <__ascii_wctomb+0x14>
 800712a:	228a      	movs	r2, #138	@ 0x8a
 800712c:	601a      	str	r2, [r3, #0]
 800712e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007132:	4770      	bx	lr
 8007134:	700a      	strb	r2, [r1, #0]
 8007136:	2001      	movs	r0, #1
 8007138:	4770      	bx	lr

0800713a <abort>:
 800713a:	b508      	push	{r3, lr}
 800713c:	2006      	movs	r0, #6
 800713e:	f000 fa63 	bl	8007608 <raise>
 8007142:	2001      	movs	r0, #1
 8007144:	f7fa fd99 	bl	8001c7a <_exit>

08007148 <__sfputc_r>:
 8007148:	6893      	ldr	r3, [r2, #8]
 800714a:	3b01      	subs	r3, #1
 800714c:	2b00      	cmp	r3, #0
 800714e:	b410      	push	{r4}
 8007150:	6093      	str	r3, [r2, #8]
 8007152:	da08      	bge.n	8007166 <__sfputc_r+0x1e>
 8007154:	6994      	ldr	r4, [r2, #24]
 8007156:	42a3      	cmp	r3, r4
 8007158:	db01      	blt.n	800715e <__sfputc_r+0x16>
 800715a:	290a      	cmp	r1, #10
 800715c:	d103      	bne.n	8007166 <__sfputc_r+0x1e>
 800715e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007162:	f000 b933 	b.w	80073cc <__swbuf_r>
 8007166:	6813      	ldr	r3, [r2, #0]
 8007168:	1c58      	adds	r0, r3, #1
 800716a:	6010      	str	r0, [r2, #0]
 800716c:	7019      	strb	r1, [r3, #0]
 800716e:	4608      	mov	r0, r1
 8007170:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007174:	4770      	bx	lr

08007176 <__sfputs_r>:
 8007176:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007178:	4606      	mov	r6, r0
 800717a:	460f      	mov	r7, r1
 800717c:	4614      	mov	r4, r2
 800717e:	18d5      	adds	r5, r2, r3
 8007180:	42ac      	cmp	r4, r5
 8007182:	d101      	bne.n	8007188 <__sfputs_r+0x12>
 8007184:	2000      	movs	r0, #0
 8007186:	e007      	b.n	8007198 <__sfputs_r+0x22>
 8007188:	f814 1b01 	ldrb.w	r1, [r4], #1
 800718c:	463a      	mov	r2, r7
 800718e:	4630      	mov	r0, r6
 8007190:	f7ff ffda 	bl	8007148 <__sfputc_r>
 8007194:	1c43      	adds	r3, r0, #1
 8007196:	d1f3      	bne.n	8007180 <__sfputs_r+0xa>
 8007198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800719c <_vfiprintf_r>:
 800719c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071a0:	460d      	mov	r5, r1
 80071a2:	b09d      	sub	sp, #116	@ 0x74
 80071a4:	4614      	mov	r4, r2
 80071a6:	4698      	mov	r8, r3
 80071a8:	4606      	mov	r6, r0
 80071aa:	b118      	cbz	r0, 80071b4 <_vfiprintf_r+0x18>
 80071ac:	6a03      	ldr	r3, [r0, #32]
 80071ae:	b90b      	cbnz	r3, 80071b4 <_vfiprintf_r+0x18>
 80071b0:	f7fe f922 	bl	80053f8 <__sinit>
 80071b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80071b6:	07d9      	lsls	r1, r3, #31
 80071b8:	d405      	bmi.n	80071c6 <_vfiprintf_r+0x2a>
 80071ba:	89ab      	ldrh	r3, [r5, #12]
 80071bc:	059a      	lsls	r2, r3, #22
 80071be:	d402      	bmi.n	80071c6 <_vfiprintf_r+0x2a>
 80071c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80071c2:	f7fe f982 	bl	80054ca <__retarget_lock_acquire_recursive>
 80071c6:	89ab      	ldrh	r3, [r5, #12]
 80071c8:	071b      	lsls	r3, r3, #28
 80071ca:	d501      	bpl.n	80071d0 <_vfiprintf_r+0x34>
 80071cc:	692b      	ldr	r3, [r5, #16]
 80071ce:	b99b      	cbnz	r3, 80071f8 <_vfiprintf_r+0x5c>
 80071d0:	4629      	mov	r1, r5
 80071d2:	4630      	mov	r0, r6
 80071d4:	f000 f938 	bl	8007448 <__swsetup_r>
 80071d8:	b170      	cbz	r0, 80071f8 <_vfiprintf_r+0x5c>
 80071da:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80071dc:	07dc      	lsls	r4, r3, #31
 80071de:	d504      	bpl.n	80071ea <_vfiprintf_r+0x4e>
 80071e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80071e4:	b01d      	add	sp, #116	@ 0x74
 80071e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071ea:	89ab      	ldrh	r3, [r5, #12]
 80071ec:	0598      	lsls	r0, r3, #22
 80071ee:	d4f7      	bmi.n	80071e0 <_vfiprintf_r+0x44>
 80071f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80071f2:	f7fe f96b 	bl	80054cc <__retarget_lock_release_recursive>
 80071f6:	e7f3      	b.n	80071e0 <_vfiprintf_r+0x44>
 80071f8:	2300      	movs	r3, #0
 80071fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80071fc:	2320      	movs	r3, #32
 80071fe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007202:	f8cd 800c 	str.w	r8, [sp, #12]
 8007206:	2330      	movs	r3, #48	@ 0x30
 8007208:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80073b8 <_vfiprintf_r+0x21c>
 800720c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007210:	f04f 0901 	mov.w	r9, #1
 8007214:	4623      	mov	r3, r4
 8007216:	469a      	mov	sl, r3
 8007218:	f813 2b01 	ldrb.w	r2, [r3], #1
 800721c:	b10a      	cbz	r2, 8007222 <_vfiprintf_r+0x86>
 800721e:	2a25      	cmp	r2, #37	@ 0x25
 8007220:	d1f9      	bne.n	8007216 <_vfiprintf_r+0x7a>
 8007222:	ebba 0b04 	subs.w	fp, sl, r4
 8007226:	d00b      	beq.n	8007240 <_vfiprintf_r+0xa4>
 8007228:	465b      	mov	r3, fp
 800722a:	4622      	mov	r2, r4
 800722c:	4629      	mov	r1, r5
 800722e:	4630      	mov	r0, r6
 8007230:	f7ff ffa1 	bl	8007176 <__sfputs_r>
 8007234:	3001      	adds	r0, #1
 8007236:	f000 80a7 	beq.w	8007388 <_vfiprintf_r+0x1ec>
 800723a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800723c:	445a      	add	r2, fp
 800723e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007240:	f89a 3000 	ldrb.w	r3, [sl]
 8007244:	2b00      	cmp	r3, #0
 8007246:	f000 809f 	beq.w	8007388 <_vfiprintf_r+0x1ec>
 800724a:	2300      	movs	r3, #0
 800724c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007250:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007254:	f10a 0a01 	add.w	sl, sl, #1
 8007258:	9304      	str	r3, [sp, #16]
 800725a:	9307      	str	r3, [sp, #28]
 800725c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007260:	931a      	str	r3, [sp, #104]	@ 0x68
 8007262:	4654      	mov	r4, sl
 8007264:	2205      	movs	r2, #5
 8007266:	f814 1b01 	ldrb.w	r1, [r4], #1
 800726a:	4853      	ldr	r0, [pc, #332]	@ (80073b8 <_vfiprintf_r+0x21c>)
 800726c:	f7f8 ffd0 	bl	8000210 <memchr>
 8007270:	9a04      	ldr	r2, [sp, #16]
 8007272:	b9d8      	cbnz	r0, 80072ac <_vfiprintf_r+0x110>
 8007274:	06d1      	lsls	r1, r2, #27
 8007276:	bf44      	itt	mi
 8007278:	2320      	movmi	r3, #32
 800727a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800727e:	0713      	lsls	r3, r2, #28
 8007280:	bf44      	itt	mi
 8007282:	232b      	movmi	r3, #43	@ 0x2b
 8007284:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007288:	f89a 3000 	ldrb.w	r3, [sl]
 800728c:	2b2a      	cmp	r3, #42	@ 0x2a
 800728e:	d015      	beq.n	80072bc <_vfiprintf_r+0x120>
 8007290:	9a07      	ldr	r2, [sp, #28]
 8007292:	4654      	mov	r4, sl
 8007294:	2000      	movs	r0, #0
 8007296:	f04f 0c0a 	mov.w	ip, #10
 800729a:	4621      	mov	r1, r4
 800729c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072a0:	3b30      	subs	r3, #48	@ 0x30
 80072a2:	2b09      	cmp	r3, #9
 80072a4:	d94b      	bls.n	800733e <_vfiprintf_r+0x1a2>
 80072a6:	b1b0      	cbz	r0, 80072d6 <_vfiprintf_r+0x13a>
 80072a8:	9207      	str	r2, [sp, #28]
 80072aa:	e014      	b.n	80072d6 <_vfiprintf_r+0x13a>
 80072ac:	eba0 0308 	sub.w	r3, r0, r8
 80072b0:	fa09 f303 	lsl.w	r3, r9, r3
 80072b4:	4313      	orrs	r3, r2
 80072b6:	9304      	str	r3, [sp, #16]
 80072b8:	46a2      	mov	sl, r4
 80072ba:	e7d2      	b.n	8007262 <_vfiprintf_r+0xc6>
 80072bc:	9b03      	ldr	r3, [sp, #12]
 80072be:	1d19      	adds	r1, r3, #4
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	9103      	str	r1, [sp, #12]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	bfbb      	ittet	lt
 80072c8:	425b      	neglt	r3, r3
 80072ca:	f042 0202 	orrlt.w	r2, r2, #2
 80072ce:	9307      	strge	r3, [sp, #28]
 80072d0:	9307      	strlt	r3, [sp, #28]
 80072d2:	bfb8      	it	lt
 80072d4:	9204      	strlt	r2, [sp, #16]
 80072d6:	7823      	ldrb	r3, [r4, #0]
 80072d8:	2b2e      	cmp	r3, #46	@ 0x2e
 80072da:	d10a      	bne.n	80072f2 <_vfiprintf_r+0x156>
 80072dc:	7863      	ldrb	r3, [r4, #1]
 80072de:	2b2a      	cmp	r3, #42	@ 0x2a
 80072e0:	d132      	bne.n	8007348 <_vfiprintf_r+0x1ac>
 80072e2:	9b03      	ldr	r3, [sp, #12]
 80072e4:	1d1a      	adds	r2, r3, #4
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	9203      	str	r2, [sp, #12]
 80072ea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80072ee:	3402      	adds	r4, #2
 80072f0:	9305      	str	r3, [sp, #20]
 80072f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80073c8 <_vfiprintf_r+0x22c>
 80072f6:	7821      	ldrb	r1, [r4, #0]
 80072f8:	2203      	movs	r2, #3
 80072fa:	4650      	mov	r0, sl
 80072fc:	f7f8 ff88 	bl	8000210 <memchr>
 8007300:	b138      	cbz	r0, 8007312 <_vfiprintf_r+0x176>
 8007302:	9b04      	ldr	r3, [sp, #16]
 8007304:	eba0 000a 	sub.w	r0, r0, sl
 8007308:	2240      	movs	r2, #64	@ 0x40
 800730a:	4082      	lsls	r2, r0
 800730c:	4313      	orrs	r3, r2
 800730e:	3401      	adds	r4, #1
 8007310:	9304      	str	r3, [sp, #16]
 8007312:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007316:	4829      	ldr	r0, [pc, #164]	@ (80073bc <_vfiprintf_r+0x220>)
 8007318:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800731c:	2206      	movs	r2, #6
 800731e:	f7f8 ff77 	bl	8000210 <memchr>
 8007322:	2800      	cmp	r0, #0
 8007324:	d03f      	beq.n	80073a6 <_vfiprintf_r+0x20a>
 8007326:	4b26      	ldr	r3, [pc, #152]	@ (80073c0 <_vfiprintf_r+0x224>)
 8007328:	bb1b      	cbnz	r3, 8007372 <_vfiprintf_r+0x1d6>
 800732a:	9b03      	ldr	r3, [sp, #12]
 800732c:	3307      	adds	r3, #7
 800732e:	f023 0307 	bic.w	r3, r3, #7
 8007332:	3308      	adds	r3, #8
 8007334:	9303      	str	r3, [sp, #12]
 8007336:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007338:	443b      	add	r3, r7
 800733a:	9309      	str	r3, [sp, #36]	@ 0x24
 800733c:	e76a      	b.n	8007214 <_vfiprintf_r+0x78>
 800733e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007342:	460c      	mov	r4, r1
 8007344:	2001      	movs	r0, #1
 8007346:	e7a8      	b.n	800729a <_vfiprintf_r+0xfe>
 8007348:	2300      	movs	r3, #0
 800734a:	3401      	adds	r4, #1
 800734c:	9305      	str	r3, [sp, #20]
 800734e:	4619      	mov	r1, r3
 8007350:	f04f 0c0a 	mov.w	ip, #10
 8007354:	4620      	mov	r0, r4
 8007356:	f810 2b01 	ldrb.w	r2, [r0], #1
 800735a:	3a30      	subs	r2, #48	@ 0x30
 800735c:	2a09      	cmp	r2, #9
 800735e:	d903      	bls.n	8007368 <_vfiprintf_r+0x1cc>
 8007360:	2b00      	cmp	r3, #0
 8007362:	d0c6      	beq.n	80072f2 <_vfiprintf_r+0x156>
 8007364:	9105      	str	r1, [sp, #20]
 8007366:	e7c4      	b.n	80072f2 <_vfiprintf_r+0x156>
 8007368:	fb0c 2101 	mla	r1, ip, r1, r2
 800736c:	4604      	mov	r4, r0
 800736e:	2301      	movs	r3, #1
 8007370:	e7f0      	b.n	8007354 <_vfiprintf_r+0x1b8>
 8007372:	ab03      	add	r3, sp, #12
 8007374:	9300      	str	r3, [sp, #0]
 8007376:	462a      	mov	r2, r5
 8007378:	4b12      	ldr	r3, [pc, #72]	@ (80073c4 <_vfiprintf_r+0x228>)
 800737a:	a904      	add	r1, sp, #16
 800737c:	4630      	mov	r0, r6
 800737e:	f7fd fbc3 	bl	8004b08 <_printf_float>
 8007382:	4607      	mov	r7, r0
 8007384:	1c78      	adds	r0, r7, #1
 8007386:	d1d6      	bne.n	8007336 <_vfiprintf_r+0x19a>
 8007388:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800738a:	07d9      	lsls	r1, r3, #31
 800738c:	d405      	bmi.n	800739a <_vfiprintf_r+0x1fe>
 800738e:	89ab      	ldrh	r3, [r5, #12]
 8007390:	059a      	lsls	r2, r3, #22
 8007392:	d402      	bmi.n	800739a <_vfiprintf_r+0x1fe>
 8007394:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007396:	f7fe f899 	bl	80054cc <__retarget_lock_release_recursive>
 800739a:	89ab      	ldrh	r3, [r5, #12]
 800739c:	065b      	lsls	r3, r3, #25
 800739e:	f53f af1f 	bmi.w	80071e0 <_vfiprintf_r+0x44>
 80073a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80073a4:	e71e      	b.n	80071e4 <_vfiprintf_r+0x48>
 80073a6:	ab03      	add	r3, sp, #12
 80073a8:	9300      	str	r3, [sp, #0]
 80073aa:	462a      	mov	r2, r5
 80073ac:	4b05      	ldr	r3, [pc, #20]	@ (80073c4 <_vfiprintf_r+0x228>)
 80073ae:	a904      	add	r1, sp, #16
 80073b0:	4630      	mov	r0, r6
 80073b2:	f7fd fe41 	bl	8005038 <_printf_i>
 80073b6:	e7e4      	b.n	8007382 <_vfiprintf_r+0x1e6>
 80073b8:	08008509 	.word	0x08008509
 80073bc:	08008513 	.word	0x08008513
 80073c0:	08004b09 	.word	0x08004b09
 80073c4:	08007177 	.word	0x08007177
 80073c8:	0800850f 	.word	0x0800850f

080073cc <__swbuf_r>:
 80073cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ce:	460e      	mov	r6, r1
 80073d0:	4614      	mov	r4, r2
 80073d2:	4605      	mov	r5, r0
 80073d4:	b118      	cbz	r0, 80073de <__swbuf_r+0x12>
 80073d6:	6a03      	ldr	r3, [r0, #32]
 80073d8:	b90b      	cbnz	r3, 80073de <__swbuf_r+0x12>
 80073da:	f7fe f80d 	bl	80053f8 <__sinit>
 80073de:	69a3      	ldr	r3, [r4, #24]
 80073e0:	60a3      	str	r3, [r4, #8]
 80073e2:	89a3      	ldrh	r3, [r4, #12]
 80073e4:	071a      	lsls	r2, r3, #28
 80073e6:	d501      	bpl.n	80073ec <__swbuf_r+0x20>
 80073e8:	6923      	ldr	r3, [r4, #16]
 80073ea:	b943      	cbnz	r3, 80073fe <__swbuf_r+0x32>
 80073ec:	4621      	mov	r1, r4
 80073ee:	4628      	mov	r0, r5
 80073f0:	f000 f82a 	bl	8007448 <__swsetup_r>
 80073f4:	b118      	cbz	r0, 80073fe <__swbuf_r+0x32>
 80073f6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80073fa:	4638      	mov	r0, r7
 80073fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073fe:	6823      	ldr	r3, [r4, #0]
 8007400:	6922      	ldr	r2, [r4, #16]
 8007402:	1a98      	subs	r0, r3, r2
 8007404:	6963      	ldr	r3, [r4, #20]
 8007406:	b2f6      	uxtb	r6, r6
 8007408:	4283      	cmp	r3, r0
 800740a:	4637      	mov	r7, r6
 800740c:	dc05      	bgt.n	800741a <__swbuf_r+0x4e>
 800740e:	4621      	mov	r1, r4
 8007410:	4628      	mov	r0, r5
 8007412:	f7ff f93f 	bl	8006694 <_fflush_r>
 8007416:	2800      	cmp	r0, #0
 8007418:	d1ed      	bne.n	80073f6 <__swbuf_r+0x2a>
 800741a:	68a3      	ldr	r3, [r4, #8]
 800741c:	3b01      	subs	r3, #1
 800741e:	60a3      	str	r3, [r4, #8]
 8007420:	6823      	ldr	r3, [r4, #0]
 8007422:	1c5a      	adds	r2, r3, #1
 8007424:	6022      	str	r2, [r4, #0]
 8007426:	701e      	strb	r6, [r3, #0]
 8007428:	6962      	ldr	r2, [r4, #20]
 800742a:	1c43      	adds	r3, r0, #1
 800742c:	429a      	cmp	r2, r3
 800742e:	d004      	beq.n	800743a <__swbuf_r+0x6e>
 8007430:	89a3      	ldrh	r3, [r4, #12]
 8007432:	07db      	lsls	r3, r3, #31
 8007434:	d5e1      	bpl.n	80073fa <__swbuf_r+0x2e>
 8007436:	2e0a      	cmp	r6, #10
 8007438:	d1df      	bne.n	80073fa <__swbuf_r+0x2e>
 800743a:	4621      	mov	r1, r4
 800743c:	4628      	mov	r0, r5
 800743e:	f7ff f929 	bl	8006694 <_fflush_r>
 8007442:	2800      	cmp	r0, #0
 8007444:	d0d9      	beq.n	80073fa <__swbuf_r+0x2e>
 8007446:	e7d6      	b.n	80073f6 <__swbuf_r+0x2a>

08007448 <__swsetup_r>:
 8007448:	b538      	push	{r3, r4, r5, lr}
 800744a:	4b29      	ldr	r3, [pc, #164]	@ (80074f0 <__swsetup_r+0xa8>)
 800744c:	4605      	mov	r5, r0
 800744e:	6818      	ldr	r0, [r3, #0]
 8007450:	460c      	mov	r4, r1
 8007452:	b118      	cbz	r0, 800745c <__swsetup_r+0x14>
 8007454:	6a03      	ldr	r3, [r0, #32]
 8007456:	b90b      	cbnz	r3, 800745c <__swsetup_r+0x14>
 8007458:	f7fd ffce 	bl	80053f8 <__sinit>
 800745c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007460:	0719      	lsls	r1, r3, #28
 8007462:	d422      	bmi.n	80074aa <__swsetup_r+0x62>
 8007464:	06da      	lsls	r2, r3, #27
 8007466:	d407      	bmi.n	8007478 <__swsetup_r+0x30>
 8007468:	2209      	movs	r2, #9
 800746a:	602a      	str	r2, [r5, #0]
 800746c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007470:	81a3      	strh	r3, [r4, #12]
 8007472:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007476:	e033      	b.n	80074e0 <__swsetup_r+0x98>
 8007478:	0758      	lsls	r0, r3, #29
 800747a:	d512      	bpl.n	80074a2 <__swsetup_r+0x5a>
 800747c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800747e:	b141      	cbz	r1, 8007492 <__swsetup_r+0x4a>
 8007480:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007484:	4299      	cmp	r1, r3
 8007486:	d002      	beq.n	800748e <__swsetup_r+0x46>
 8007488:	4628      	mov	r0, r5
 800748a:	f7ff fdd3 	bl	8007034 <_free_r>
 800748e:	2300      	movs	r3, #0
 8007490:	6363      	str	r3, [r4, #52]	@ 0x34
 8007492:	89a3      	ldrh	r3, [r4, #12]
 8007494:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007498:	81a3      	strh	r3, [r4, #12]
 800749a:	2300      	movs	r3, #0
 800749c:	6063      	str	r3, [r4, #4]
 800749e:	6923      	ldr	r3, [r4, #16]
 80074a0:	6023      	str	r3, [r4, #0]
 80074a2:	89a3      	ldrh	r3, [r4, #12]
 80074a4:	f043 0308 	orr.w	r3, r3, #8
 80074a8:	81a3      	strh	r3, [r4, #12]
 80074aa:	6923      	ldr	r3, [r4, #16]
 80074ac:	b94b      	cbnz	r3, 80074c2 <__swsetup_r+0x7a>
 80074ae:	89a3      	ldrh	r3, [r4, #12]
 80074b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80074b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074b8:	d003      	beq.n	80074c2 <__swsetup_r+0x7a>
 80074ba:	4621      	mov	r1, r4
 80074bc:	4628      	mov	r0, r5
 80074be:	f000 f83f 	bl	8007540 <__smakebuf_r>
 80074c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074c6:	f013 0201 	ands.w	r2, r3, #1
 80074ca:	d00a      	beq.n	80074e2 <__swsetup_r+0x9a>
 80074cc:	2200      	movs	r2, #0
 80074ce:	60a2      	str	r2, [r4, #8]
 80074d0:	6962      	ldr	r2, [r4, #20]
 80074d2:	4252      	negs	r2, r2
 80074d4:	61a2      	str	r2, [r4, #24]
 80074d6:	6922      	ldr	r2, [r4, #16]
 80074d8:	b942      	cbnz	r2, 80074ec <__swsetup_r+0xa4>
 80074da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80074de:	d1c5      	bne.n	800746c <__swsetup_r+0x24>
 80074e0:	bd38      	pop	{r3, r4, r5, pc}
 80074e2:	0799      	lsls	r1, r3, #30
 80074e4:	bf58      	it	pl
 80074e6:	6962      	ldrpl	r2, [r4, #20]
 80074e8:	60a2      	str	r2, [r4, #8]
 80074ea:	e7f4      	b.n	80074d6 <__swsetup_r+0x8e>
 80074ec:	2000      	movs	r0, #0
 80074ee:	e7f7      	b.n	80074e0 <__swsetup_r+0x98>
 80074f0:	20000020 	.word	0x20000020

080074f4 <__swhatbuf_r>:
 80074f4:	b570      	push	{r4, r5, r6, lr}
 80074f6:	460c      	mov	r4, r1
 80074f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074fc:	2900      	cmp	r1, #0
 80074fe:	b096      	sub	sp, #88	@ 0x58
 8007500:	4615      	mov	r5, r2
 8007502:	461e      	mov	r6, r3
 8007504:	da0d      	bge.n	8007522 <__swhatbuf_r+0x2e>
 8007506:	89a3      	ldrh	r3, [r4, #12]
 8007508:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800750c:	f04f 0100 	mov.w	r1, #0
 8007510:	bf14      	ite	ne
 8007512:	2340      	movne	r3, #64	@ 0x40
 8007514:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007518:	2000      	movs	r0, #0
 800751a:	6031      	str	r1, [r6, #0]
 800751c:	602b      	str	r3, [r5, #0]
 800751e:	b016      	add	sp, #88	@ 0x58
 8007520:	bd70      	pop	{r4, r5, r6, pc}
 8007522:	466a      	mov	r2, sp
 8007524:	f000 f89c 	bl	8007660 <_fstat_r>
 8007528:	2800      	cmp	r0, #0
 800752a:	dbec      	blt.n	8007506 <__swhatbuf_r+0x12>
 800752c:	9901      	ldr	r1, [sp, #4]
 800752e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007532:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007536:	4259      	negs	r1, r3
 8007538:	4159      	adcs	r1, r3
 800753a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800753e:	e7eb      	b.n	8007518 <__swhatbuf_r+0x24>

08007540 <__smakebuf_r>:
 8007540:	898b      	ldrh	r3, [r1, #12]
 8007542:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007544:	079d      	lsls	r5, r3, #30
 8007546:	4606      	mov	r6, r0
 8007548:	460c      	mov	r4, r1
 800754a:	d507      	bpl.n	800755c <__smakebuf_r+0x1c>
 800754c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007550:	6023      	str	r3, [r4, #0]
 8007552:	6123      	str	r3, [r4, #16]
 8007554:	2301      	movs	r3, #1
 8007556:	6163      	str	r3, [r4, #20]
 8007558:	b003      	add	sp, #12
 800755a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800755c:	ab01      	add	r3, sp, #4
 800755e:	466a      	mov	r2, sp
 8007560:	f7ff ffc8 	bl	80074f4 <__swhatbuf_r>
 8007564:	9f00      	ldr	r7, [sp, #0]
 8007566:	4605      	mov	r5, r0
 8007568:	4639      	mov	r1, r7
 800756a:	4630      	mov	r0, r6
 800756c:	f7fe ff8e 	bl	800648c <_malloc_r>
 8007570:	b948      	cbnz	r0, 8007586 <__smakebuf_r+0x46>
 8007572:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007576:	059a      	lsls	r2, r3, #22
 8007578:	d4ee      	bmi.n	8007558 <__smakebuf_r+0x18>
 800757a:	f023 0303 	bic.w	r3, r3, #3
 800757e:	f043 0302 	orr.w	r3, r3, #2
 8007582:	81a3      	strh	r3, [r4, #12]
 8007584:	e7e2      	b.n	800754c <__smakebuf_r+0xc>
 8007586:	89a3      	ldrh	r3, [r4, #12]
 8007588:	6020      	str	r0, [r4, #0]
 800758a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800758e:	81a3      	strh	r3, [r4, #12]
 8007590:	9b01      	ldr	r3, [sp, #4]
 8007592:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007596:	b15b      	cbz	r3, 80075b0 <__smakebuf_r+0x70>
 8007598:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800759c:	4630      	mov	r0, r6
 800759e:	f000 f83b 	bl	8007618 <_isatty_r>
 80075a2:	b128      	cbz	r0, 80075b0 <__smakebuf_r+0x70>
 80075a4:	89a3      	ldrh	r3, [r4, #12]
 80075a6:	f023 0303 	bic.w	r3, r3, #3
 80075aa:	f043 0301 	orr.w	r3, r3, #1
 80075ae:	81a3      	strh	r3, [r4, #12]
 80075b0:	89a3      	ldrh	r3, [r4, #12]
 80075b2:	431d      	orrs	r5, r3
 80075b4:	81a5      	strh	r5, [r4, #12]
 80075b6:	e7cf      	b.n	8007558 <__smakebuf_r+0x18>

080075b8 <_raise_r>:
 80075b8:	291f      	cmp	r1, #31
 80075ba:	b538      	push	{r3, r4, r5, lr}
 80075bc:	4605      	mov	r5, r0
 80075be:	460c      	mov	r4, r1
 80075c0:	d904      	bls.n	80075cc <_raise_r+0x14>
 80075c2:	2316      	movs	r3, #22
 80075c4:	6003      	str	r3, [r0, #0]
 80075c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80075ca:	bd38      	pop	{r3, r4, r5, pc}
 80075cc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80075ce:	b112      	cbz	r2, 80075d6 <_raise_r+0x1e>
 80075d0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80075d4:	b94b      	cbnz	r3, 80075ea <_raise_r+0x32>
 80075d6:	4628      	mov	r0, r5
 80075d8:	f000 f840 	bl	800765c <_getpid_r>
 80075dc:	4622      	mov	r2, r4
 80075de:	4601      	mov	r1, r0
 80075e0:	4628      	mov	r0, r5
 80075e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80075e6:	f000 b827 	b.w	8007638 <_kill_r>
 80075ea:	2b01      	cmp	r3, #1
 80075ec:	d00a      	beq.n	8007604 <_raise_r+0x4c>
 80075ee:	1c59      	adds	r1, r3, #1
 80075f0:	d103      	bne.n	80075fa <_raise_r+0x42>
 80075f2:	2316      	movs	r3, #22
 80075f4:	6003      	str	r3, [r0, #0]
 80075f6:	2001      	movs	r0, #1
 80075f8:	e7e7      	b.n	80075ca <_raise_r+0x12>
 80075fa:	2100      	movs	r1, #0
 80075fc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007600:	4620      	mov	r0, r4
 8007602:	4798      	blx	r3
 8007604:	2000      	movs	r0, #0
 8007606:	e7e0      	b.n	80075ca <_raise_r+0x12>

08007608 <raise>:
 8007608:	4b02      	ldr	r3, [pc, #8]	@ (8007614 <raise+0xc>)
 800760a:	4601      	mov	r1, r0
 800760c:	6818      	ldr	r0, [r3, #0]
 800760e:	f7ff bfd3 	b.w	80075b8 <_raise_r>
 8007612:	bf00      	nop
 8007614:	20000020 	.word	0x20000020

08007618 <_isatty_r>:
 8007618:	b538      	push	{r3, r4, r5, lr}
 800761a:	4d06      	ldr	r5, [pc, #24]	@ (8007634 <_isatty_r+0x1c>)
 800761c:	2300      	movs	r3, #0
 800761e:	4604      	mov	r4, r0
 8007620:	4608      	mov	r0, r1
 8007622:	602b      	str	r3, [r5, #0]
 8007624:	f7fa fb6d 	bl	8001d02 <_isatty>
 8007628:	1c43      	adds	r3, r0, #1
 800762a:	d102      	bne.n	8007632 <_isatty_r+0x1a>
 800762c:	682b      	ldr	r3, [r5, #0]
 800762e:	b103      	cbz	r3, 8007632 <_isatty_r+0x1a>
 8007630:	6023      	str	r3, [r4, #0]
 8007632:	bd38      	pop	{r3, r4, r5, pc}
 8007634:	200007ec 	.word	0x200007ec

08007638 <_kill_r>:
 8007638:	b538      	push	{r3, r4, r5, lr}
 800763a:	4d07      	ldr	r5, [pc, #28]	@ (8007658 <_kill_r+0x20>)
 800763c:	2300      	movs	r3, #0
 800763e:	4604      	mov	r4, r0
 8007640:	4608      	mov	r0, r1
 8007642:	4611      	mov	r1, r2
 8007644:	602b      	str	r3, [r5, #0]
 8007646:	f7fa fb08 	bl	8001c5a <_kill>
 800764a:	1c43      	adds	r3, r0, #1
 800764c:	d102      	bne.n	8007654 <_kill_r+0x1c>
 800764e:	682b      	ldr	r3, [r5, #0]
 8007650:	b103      	cbz	r3, 8007654 <_kill_r+0x1c>
 8007652:	6023      	str	r3, [r4, #0]
 8007654:	bd38      	pop	{r3, r4, r5, pc}
 8007656:	bf00      	nop
 8007658:	200007ec 	.word	0x200007ec

0800765c <_getpid_r>:
 800765c:	f7fa baf5 	b.w	8001c4a <_getpid>

08007660 <_fstat_r>:
 8007660:	b538      	push	{r3, r4, r5, lr}
 8007662:	4d07      	ldr	r5, [pc, #28]	@ (8007680 <_fstat_r+0x20>)
 8007664:	2300      	movs	r3, #0
 8007666:	4604      	mov	r4, r0
 8007668:	4608      	mov	r0, r1
 800766a:	4611      	mov	r1, r2
 800766c:	602b      	str	r3, [r5, #0]
 800766e:	f7fa fb38 	bl	8001ce2 <_fstat>
 8007672:	1c43      	adds	r3, r0, #1
 8007674:	d102      	bne.n	800767c <_fstat_r+0x1c>
 8007676:	682b      	ldr	r3, [r5, #0]
 8007678:	b103      	cbz	r3, 800767c <_fstat_r+0x1c>
 800767a:	6023      	str	r3, [r4, #0]
 800767c:	bd38      	pop	{r3, r4, r5, pc}
 800767e:	bf00      	nop
 8007680:	200007ec 	.word	0x200007ec

08007684 <_init>:
 8007684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007686:	bf00      	nop
 8007688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800768a:	bc08      	pop	{r3}
 800768c:	469e      	mov	lr, r3
 800768e:	4770      	bx	lr

08007690 <_fini>:
 8007690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007692:	bf00      	nop
 8007694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007696:	bc08      	pop	{r3}
 8007698:	469e      	mov	lr, r3
 800769a:	4770      	bx	lr
