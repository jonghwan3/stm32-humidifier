
second_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b480  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011e4  0800b650  0800b650  0000c650  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c834  0800c834  0000e1e8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c834  0800c834  0000d834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c83c  0800c83c  0000e1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c83c  0800c83c  0000d83c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c840  0800c840  0000d840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800c844  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004fc4  200001e8  0800ca2c  0000e1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200051ac  0800ca2c  0000f1ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bffd  00000000  00000000  0000e218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003dc9  00000000  00000000  0002a215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001900  00000000  00000000  0002dfe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000138d  00000000  00000000  0002f8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002522a  00000000  00000000  00030c6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cc5e  00000000  00000000  00055e97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e00de  00000000  00000000  00072af5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00152bd3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b4c  00000000  00000000  00152c18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0015a764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b638 	.word	0x0800b638

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	0800b638 	.word	0x0800b638

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bfc:	f000 b988 	b.w	8000f10 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	468e      	mov	lr, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	4688      	mov	r8, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d962      	bls.n	8000cf4 <__udivmoddi4+0xdc>
 8000c2e:	fab2 f682 	clz	r6, r2
 8000c32:	b14e      	cbz	r6, 8000c48 <__udivmoddi4+0x30>
 8000c34:	f1c6 0320 	rsb	r3, r6, #32
 8000c38:	fa01 f806 	lsl.w	r8, r1, r6
 8000c3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c40:	40b7      	lsls	r7, r6
 8000c42:	ea43 0808 	orr.w	r8, r3, r8
 8000c46:	40b4      	lsls	r4, r6
 8000c48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c4c:	fa1f fc87 	uxth.w	ip, r7
 8000c50:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c54:	0c23      	lsrs	r3, r4, #16
 8000c56:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c5a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c6c:	f080 80ea 	bcs.w	8000e44 <__udivmoddi4+0x22c>
 8000c70:	429a      	cmp	r2, r3
 8000c72:	f240 80e7 	bls.w	8000e44 <__udivmoddi4+0x22c>
 8000c76:	3902      	subs	r1, #2
 8000c78:	443b      	add	r3, r7
 8000c7a:	1a9a      	subs	r2, r3, r2
 8000c7c:	b2a3      	uxth	r3, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c8a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8e:	459c      	cmp	ip, r3
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0x8e>
 8000c92:	18fb      	adds	r3, r7, r3
 8000c94:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000c98:	f080 80d6 	bcs.w	8000e48 <__udivmoddi4+0x230>
 8000c9c:	459c      	cmp	ip, r3
 8000c9e:	f240 80d3 	bls.w	8000e48 <__udivmoddi4+0x230>
 8000ca2:	443b      	add	r3, r7
 8000ca4:	3802      	subs	r0, #2
 8000ca6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000caa:	eba3 030c 	sub.w	r3, r3, ip
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11d      	cbz	r5, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40f3      	lsrs	r3, r6
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d905      	bls.n	8000cce <__udivmoddi4+0xb6>
 8000cc2:	b10d      	cbz	r5, 8000cc8 <__udivmoddi4+0xb0>
 8000cc4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4608      	mov	r0, r1
 8000ccc:	e7f5      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cce:	fab3 f183 	clz	r1, r3
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	d146      	bne.n	8000d64 <__udivmoddi4+0x14c>
 8000cd6:	4573      	cmp	r3, lr
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xc8>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 8105 	bhi.w	8000eea <__udivmoddi4+0x2d2>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	4690      	mov	r8, r2
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	d0e5      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cee:	e9c5 4800 	strd	r4, r8, [r5]
 8000cf2:	e7e2      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	f000 8090 	beq.w	8000e1a <__udivmoddi4+0x202>
 8000cfa:	fab2 f682 	clz	r6, r2
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	f040 80a4 	bne.w	8000e4c <__udivmoddi4+0x234>
 8000d04:	1a8a      	subs	r2, r1, r2
 8000d06:	0c03      	lsrs	r3, r0, #16
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	b280      	uxth	r0, r0
 8000d0e:	b2bc      	uxth	r4, r7
 8000d10:	2101      	movs	r1, #1
 8000d12:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d16:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d1e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x11e>
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x11c>
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	f200 80e0 	bhi.w	8000ef4 <__udivmoddi4+0x2dc>
 8000d34:	46c4      	mov	ip, r8
 8000d36:	1a9b      	subs	r3, r3, r2
 8000d38:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d3c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d40:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d44:	fb02 f404 	mul.w	r4, r2, r4
 8000d48:	429c      	cmp	r4, r3
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x144>
 8000d4c:	18fb      	adds	r3, r7, r3
 8000d4e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x142>
 8000d54:	429c      	cmp	r4, r3
 8000d56:	f200 80ca 	bhi.w	8000eee <__udivmoddi4+0x2d6>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	1b1b      	subs	r3, r3, r4
 8000d5e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d62:	e7a5      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d64:	f1c1 0620 	rsb	r6, r1, #32
 8000d68:	408b      	lsls	r3, r1
 8000d6a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d6e:	431f      	orrs	r7, r3
 8000d70:	fa0e f401 	lsl.w	r4, lr, r1
 8000d74:	fa20 f306 	lsr.w	r3, r0, r6
 8000d78:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d7c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d80:	4323      	orrs	r3, r4
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	fa1f fc87 	uxth.w	ip, r7
 8000d8a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d8e:	0c1c      	lsrs	r4, r3, #16
 8000d90:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d94:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d98:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000da2:	d909      	bls.n	8000db8 <__udivmoddi4+0x1a0>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000daa:	f080 809c 	bcs.w	8000ee6 <__udivmoddi4+0x2ce>
 8000dae:	45a6      	cmp	lr, r4
 8000db0:	f240 8099 	bls.w	8000ee6 <__udivmoddi4+0x2ce>
 8000db4:	3802      	subs	r0, #2
 8000db6:	443c      	add	r4, r7
 8000db8:	eba4 040e 	sub.w	r4, r4, lr
 8000dbc:	fa1f fe83 	uxth.w	lr, r3
 8000dc0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dcc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd0:	45a4      	cmp	ip, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x1ce>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000dda:	f080 8082 	bcs.w	8000ee2 <__udivmoddi4+0x2ca>
 8000dde:	45a4      	cmp	ip, r4
 8000de0:	d97f      	bls.n	8000ee2 <__udivmoddi4+0x2ca>
 8000de2:	3b02      	subs	r3, #2
 8000de4:	443c      	add	r4, r7
 8000de6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dea:	eba4 040c 	sub.w	r4, r4, ip
 8000dee:	fba0 ec02 	umull	lr, ip, r0, r2
 8000df2:	4564      	cmp	r4, ip
 8000df4:	4673      	mov	r3, lr
 8000df6:	46e1      	mov	r9, ip
 8000df8:	d362      	bcc.n	8000ec0 <__udivmoddi4+0x2a8>
 8000dfa:	d05f      	beq.n	8000ebc <__udivmoddi4+0x2a4>
 8000dfc:	b15d      	cbz	r5, 8000e16 <__udivmoddi4+0x1fe>
 8000dfe:	ebb8 0203 	subs.w	r2, r8, r3
 8000e02:	eb64 0409 	sbc.w	r4, r4, r9
 8000e06:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e0e:	431e      	orrs	r6, r3
 8000e10:	40cc      	lsrs	r4, r1
 8000e12:	e9c5 6400 	strd	r6, r4, [r5]
 8000e16:	2100      	movs	r1, #0
 8000e18:	e74f      	b.n	8000cba <__udivmoddi4+0xa2>
 8000e1a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e1e:	0c01      	lsrs	r1, r0, #16
 8000e20:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e24:	b280      	uxth	r0, r0
 8000e26:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	4638      	mov	r0, r7
 8000e2e:	463c      	mov	r4, r7
 8000e30:	46b8      	mov	r8, r7
 8000e32:	46be      	mov	lr, r7
 8000e34:	2620      	movs	r6, #32
 8000e36:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e3a:	eba2 0208 	sub.w	r2, r2, r8
 8000e3e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e42:	e766      	b.n	8000d12 <__udivmoddi4+0xfa>
 8000e44:	4601      	mov	r1, r0
 8000e46:	e718      	b.n	8000c7a <__udivmoddi4+0x62>
 8000e48:	4610      	mov	r0, r2
 8000e4a:	e72c      	b.n	8000ca6 <__udivmoddi4+0x8e>
 8000e4c:	f1c6 0220 	rsb	r2, r6, #32
 8000e50:	fa2e f302 	lsr.w	r3, lr, r2
 8000e54:	40b7      	lsls	r7, r6
 8000e56:	40b1      	lsls	r1, r6
 8000e58:	fa20 f202 	lsr.w	r2, r0, r2
 8000e5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e60:	430a      	orrs	r2, r1
 8000e62:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e66:	b2bc      	uxth	r4, r7
 8000e68:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e6c:	0c11      	lsrs	r1, r2, #16
 8000e6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e72:	fb08 f904 	mul.w	r9, r8, r4
 8000e76:	40b0      	lsls	r0, r6
 8000e78:	4589      	cmp	r9, r1
 8000e7a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e7e:	b280      	uxth	r0, r0
 8000e80:	d93e      	bls.n	8000f00 <__udivmoddi4+0x2e8>
 8000e82:	1879      	adds	r1, r7, r1
 8000e84:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000e88:	d201      	bcs.n	8000e8e <__udivmoddi4+0x276>
 8000e8a:	4589      	cmp	r9, r1
 8000e8c:	d81f      	bhi.n	8000ece <__udivmoddi4+0x2b6>
 8000e8e:	eba1 0109 	sub.w	r1, r1, r9
 8000e92:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e96:	fb09 f804 	mul.w	r8, r9, r4
 8000e9a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e9e:	b292      	uxth	r2, r2
 8000ea0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ea4:	4542      	cmp	r2, r8
 8000ea6:	d229      	bcs.n	8000efc <__udivmoddi4+0x2e4>
 8000ea8:	18ba      	adds	r2, r7, r2
 8000eaa:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000eae:	d2c4      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d2c2      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb4:	f1a9 0102 	sub.w	r1, r9, #2
 8000eb8:	443a      	add	r2, r7
 8000eba:	e7be      	b.n	8000e3a <__udivmoddi4+0x222>
 8000ebc:	45f0      	cmp	r8, lr
 8000ebe:	d29d      	bcs.n	8000dfc <__udivmoddi4+0x1e4>
 8000ec0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ec4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ec8:	3801      	subs	r0, #1
 8000eca:	46e1      	mov	r9, ip
 8000ecc:	e796      	b.n	8000dfc <__udivmoddi4+0x1e4>
 8000ece:	eba7 0909 	sub.w	r9, r7, r9
 8000ed2:	4449      	add	r1, r9
 8000ed4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ed8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000edc:	fb09 f804 	mul.w	r8, r9, r4
 8000ee0:	e7db      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ee2:	4673      	mov	r3, lr
 8000ee4:	e77f      	b.n	8000de6 <__udivmoddi4+0x1ce>
 8000ee6:	4650      	mov	r0, sl
 8000ee8:	e766      	b.n	8000db8 <__udivmoddi4+0x1a0>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e6fd      	b.n	8000cea <__udivmoddi4+0xd2>
 8000eee:	443b      	add	r3, r7
 8000ef0:	3a02      	subs	r2, #2
 8000ef2:	e733      	b.n	8000d5c <__udivmoddi4+0x144>
 8000ef4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef8:	443b      	add	r3, r7
 8000efa:	e71c      	b.n	8000d36 <__udivmoddi4+0x11e>
 8000efc:	4649      	mov	r1, r9
 8000efe:	e79c      	b.n	8000e3a <__udivmoddi4+0x222>
 8000f00:	eba1 0109 	sub.w	r1, r1, r9
 8000f04:	46c4      	mov	ip, r8
 8000f06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f0a:	fb09 f804 	mul.w	r8, r9, r4
 8000f0e:	e7c4      	b.n	8000e9a <__udivmoddi4+0x282>

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <_write>:
osMutexId_t i2cMutexHandle;
const osMutexAttr_t i2cMutex_attributes = {
  .name = "i2cMutex"
};
/* USER CODE BEGIN PV */
int _write(int file, char *p, int len){
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)p, len, 10);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	b29a      	uxth	r2, r3
 8000f24:	230a      	movs	r3, #10
 8000f26:	68b9      	ldr	r1, [r7, #8]
 8000f28:	4803      	ldr	r0, [pc, #12]	@ (8000f38 <_write+0x24>)
 8000f2a:	f003 fdb7 	bl	8004a9c <HAL_UART_Transmit>
	return len;
 8000f2e:	687b      	ldr	r3, [r7, #4]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3710      	adds	r7, #16
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20000258 	.word	0x20000258

08000f3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f40:	f001 f8f6 	bl	8002130 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f44:	f000 f84e 	bl	8000fe4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f48:	f000 f904 	bl	8001154 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f4c:	f000 f8d8 	bl	8001100 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000f50:	f000 f8a8 	bl	80010a4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 8000f54:	f000 fbec 	bl	8001730 <SSD1306_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f58:	f004 f9a0 	bl	800529c <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of i2cMutex */
  i2cMutexHandle = osMutexNew(&i2cMutex_attributes);
 8000f5c:	4814      	ldr	r0, [pc, #80]	@ (8000fb0 <main+0x74>)
 8000f5e:	f004 fa94 	bl	800548a <osMutexNew>
 8000f62:	4603      	mov	r3, r0
 8000f64:	4a13      	ldr	r2, [pc, #76]	@ (8000fb4 <main+0x78>)
 8000f66:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of xQueueRH */
  xQueueRHHandle = osMessageQueueNew (2, sizeof(rh_sample_t), &xQueueRH_attributes);
 8000f68:	4a13      	ldr	r2, [pc, #76]	@ (8000fb8 <main+0x7c>)
 8000f6a:	2108      	movs	r1, #8
 8000f6c:	2002      	movs	r0, #2
 8000f6e:	f004 fb9a 	bl	80056a6 <osMessageQueueNew>
 8000f72:	4603      	mov	r3, r0
 8000f74:	4a11      	ldr	r2, [pc, #68]	@ (8000fbc <main+0x80>)
 8000f76:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of SensorUI */
  SensorUIHandle = osThreadNew(SensorUiTask, NULL, &SensorUI_attributes);
 8000f78:	4a11      	ldr	r2, [pc, #68]	@ (8000fc0 <main+0x84>)
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	4811      	ldr	r0, [pc, #68]	@ (8000fc4 <main+0x88>)
 8000f7e:	f004 f9d7 	bl	8005330 <osThreadNew>
 8000f82:	4603      	mov	r3, r0
 8000f84:	4a10      	ldr	r2, [pc, #64]	@ (8000fc8 <main+0x8c>)
 8000f86:	6013      	str	r3, [r2, #0]

  /* creation of Control */
  ControlHandle = osThreadNew(ControlTask, NULL, &Control_attributes);
 8000f88:	4a10      	ldr	r2, [pc, #64]	@ (8000fcc <main+0x90>)
 8000f8a:	2100      	movs	r1, #0
 8000f8c:	4810      	ldr	r0, [pc, #64]	@ (8000fd0 <main+0x94>)
 8000f8e:	f004 f9cf 	bl	8005330 <osThreadNew>
 8000f92:	4603      	mov	r3, r0
 8000f94:	4a0f      	ldr	r2, [pc, #60]	@ (8000fd4 <main+0x98>)
 8000f96:	6013      	str	r3, [r2, #0]

  /* creation of Input */
  InputHandle = osThreadNew(InputTask, NULL, &Input_attributes);
 8000f98:	4a0f      	ldr	r2, [pc, #60]	@ (8000fd8 <main+0x9c>)
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	480f      	ldr	r0, [pc, #60]	@ (8000fdc <main+0xa0>)
 8000f9e:	f004 f9c7 	bl	8005330 <osThreadNew>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	4a0e      	ldr	r2, [pc, #56]	@ (8000fe0 <main+0xa4>)
 8000fa6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000fa8:	f004 f99c 	bl	80052e4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fac:	bf00      	nop
 8000fae:	e7fd      	b.n	8000fac <main+0x70>
 8000fb0:	0800c494 	.word	0x0800c494
 8000fb4:	200002b0 	.word	0x200002b0
 8000fb8:	0800c47c 	.word	0x0800c47c
 8000fbc:	200002ac 	.word	0x200002ac
 8000fc0:	0800c410 	.word	0x0800c410
 8000fc4:	08001255 	.word	0x08001255
 8000fc8:	200002a0 	.word	0x200002a0
 8000fcc:	0800c434 	.word	0x0800c434
 8000fd0:	0800133d 	.word	0x0800133d
 8000fd4:	200002a4 	.word	0x200002a4
 8000fd8:	0800c458 	.word	0x0800c458
 8000fdc:	08001409 	.word	0x08001409
 8000fe0:	200002a8 	.word	0x200002a8

08000fe4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b094      	sub	sp, #80	@ 0x50
 8000fe8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fea:	f107 031c 	add.w	r3, r7, #28
 8000fee:	2234      	movs	r2, #52	@ 0x34
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f008 fa0e 	bl	8009414 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ff8:	f107 0308 	add.w	r3, r7, #8
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]
 8001006:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001008:	2300      	movs	r3, #0
 800100a:	607b      	str	r3, [r7, #4]
 800100c:	4b23      	ldr	r3, [pc, #140]	@ (800109c <SystemClock_Config+0xb8>)
 800100e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001010:	4a22      	ldr	r2, [pc, #136]	@ (800109c <SystemClock_Config+0xb8>)
 8001012:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001016:	6413      	str	r3, [r2, #64]	@ 0x40
 8001018:	4b20      	ldr	r3, [pc, #128]	@ (800109c <SystemClock_Config+0xb8>)
 800101a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800101c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001020:	607b      	str	r3, [r7, #4]
 8001022:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001024:	2300      	movs	r3, #0
 8001026:	603b      	str	r3, [r7, #0]
 8001028:	4b1d      	ldr	r3, [pc, #116]	@ (80010a0 <SystemClock_Config+0xbc>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001030:	4a1b      	ldr	r2, [pc, #108]	@ (80010a0 <SystemClock_Config+0xbc>)
 8001032:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001036:	6013      	str	r3, [r2, #0]
 8001038:	4b19      	ldr	r3, [pc, #100]	@ (80010a0 <SystemClock_Config+0xbc>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001040:	603b      	str	r3, [r7, #0]
 8001042:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001044:	2302      	movs	r3, #2
 8001046:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001048:	2301      	movs	r3, #1
 800104a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800104c:	2310      	movs	r3, #16
 800104e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001050:	2300      	movs	r3, #0
 8001052:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001054:	f107 031c 	add.w	r3, r7, #28
 8001058:	4618      	mov	r0, r3
 800105a:	f002 ff95 	bl	8003f88 <HAL_RCC_OscConfig>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001064:	f000 fa9a 	bl	800159c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001068:	230f      	movs	r3, #15
 800106a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800106c:	2300      	movs	r3, #0
 800106e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001070:	2300      	movs	r3, #0
 8001072:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001074:	2300      	movs	r3, #0
 8001076:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001078:	2300      	movs	r3, #0
 800107a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800107c:	f107 0308 	add.w	r3, r7, #8
 8001080:	2100      	movs	r1, #0
 8001082:	4618      	mov	r0, r3
 8001084:	f002 fc8a 	bl	800399c <HAL_RCC_ClockConfig>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800108e:	f000 fa85 	bl	800159c <Error_Handler>
  }
}
 8001092:	bf00      	nop
 8001094:	3750      	adds	r7, #80	@ 0x50
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40023800 	.word	0x40023800
 80010a0:	40007000 	.word	0x40007000

080010a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010a8:	4b12      	ldr	r3, [pc, #72]	@ (80010f4 <MX_I2C1_Init+0x50>)
 80010aa:	4a13      	ldr	r2, [pc, #76]	@ (80010f8 <MX_I2C1_Init+0x54>)
 80010ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80010ae:	4b11      	ldr	r3, [pc, #68]	@ (80010f4 <MX_I2C1_Init+0x50>)
 80010b0:	4a12      	ldr	r2, [pc, #72]	@ (80010fc <MX_I2C1_Init+0x58>)
 80010b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010b4:	4b0f      	ldr	r3, [pc, #60]	@ (80010f4 <MX_I2C1_Init+0x50>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010ba:	4b0e      	ldr	r3, [pc, #56]	@ (80010f4 <MX_I2C1_Init+0x50>)
 80010bc:	2200      	movs	r2, #0
 80010be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010c0:	4b0c      	ldr	r3, [pc, #48]	@ (80010f4 <MX_I2C1_Init+0x50>)
 80010c2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80010c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010c8:	4b0a      	ldr	r3, [pc, #40]	@ (80010f4 <MX_I2C1_Init+0x50>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80010ce:	4b09      	ldr	r3, [pc, #36]	@ (80010f4 <MX_I2C1_Init+0x50>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010d4:	4b07      	ldr	r3, [pc, #28]	@ (80010f4 <MX_I2C1_Init+0x50>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010da:	4b06      	ldr	r3, [pc, #24]	@ (80010f4 <MX_I2C1_Init+0x50>)
 80010dc:	2200      	movs	r2, #0
 80010de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010e0:	4804      	ldr	r0, [pc, #16]	@ (80010f4 <MX_I2C1_Init+0x50>)
 80010e2:	f001 fb33 	bl	800274c <HAL_I2C_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80010ec:	f000 fa56 	bl	800159c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010f0:	bf00      	nop
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	20000204 	.word	0x20000204
 80010f8:	40005400 	.word	0x40005400
 80010fc:	00061a80 	.word	0x00061a80

08001100 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001104:	4b11      	ldr	r3, [pc, #68]	@ (800114c <MX_USART2_UART_Init+0x4c>)
 8001106:	4a12      	ldr	r2, [pc, #72]	@ (8001150 <MX_USART2_UART_Init+0x50>)
 8001108:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800110a:	4b10      	ldr	r3, [pc, #64]	@ (800114c <MX_USART2_UART_Init+0x4c>)
 800110c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001110:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001112:	4b0e      	ldr	r3, [pc, #56]	@ (800114c <MX_USART2_UART_Init+0x4c>)
 8001114:	2200      	movs	r2, #0
 8001116:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001118:	4b0c      	ldr	r3, [pc, #48]	@ (800114c <MX_USART2_UART_Init+0x4c>)
 800111a:	2200      	movs	r2, #0
 800111c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800111e:	4b0b      	ldr	r3, [pc, #44]	@ (800114c <MX_USART2_UART_Init+0x4c>)
 8001120:	2200      	movs	r2, #0
 8001122:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001124:	4b09      	ldr	r3, [pc, #36]	@ (800114c <MX_USART2_UART_Init+0x4c>)
 8001126:	220c      	movs	r2, #12
 8001128:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800112a:	4b08      	ldr	r3, [pc, #32]	@ (800114c <MX_USART2_UART_Init+0x4c>)
 800112c:	2200      	movs	r2, #0
 800112e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001130:	4b06      	ldr	r3, [pc, #24]	@ (800114c <MX_USART2_UART_Init+0x4c>)
 8001132:	2200      	movs	r2, #0
 8001134:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001136:	4805      	ldr	r0, [pc, #20]	@ (800114c <MX_USART2_UART_Init+0x4c>)
 8001138:	f003 fc60 	bl	80049fc <HAL_UART_Init>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001142:	f000 fa2b 	bl	800159c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000258 	.word	0x20000258
 8001150:	40004400 	.word	0x40004400

08001154 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b088      	sub	sp, #32
 8001158:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115a:	f107 030c 	add.w	r3, r7, #12
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]
 8001164:	609a      	str	r2, [r3, #8]
 8001166:	60da      	str	r2, [r3, #12]
 8001168:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800116a:	2300      	movs	r3, #0
 800116c:	60bb      	str	r3, [r7, #8]
 800116e:	4b35      	ldr	r3, [pc, #212]	@ (8001244 <MX_GPIO_Init+0xf0>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001172:	4a34      	ldr	r2, [pc, #208]	@ (8001244 <MX_GPIO_Init+0xf0>)
 8001174:	f043 0304 	orr.w	r3, r3, #4
 8001178:	6313      	str	r3, [r2, #48]	@ 0x30
 800117a:	4b32      	ldr	r3, [pc, #200]	@ (8001244 <MX_GPIO_Init+0xf0>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117e:	f003 0304 	and.w	r3, r3, #4
 8001182:	60bb      	str	r3, [r7, #8]
 8001184:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	607b      	str	r3, [r7, #4]
 800118a:	4b2e      	ldr	r3, [pc, #184]	@ (8001244 <MX_GPIO_Init+0xf0>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118e:	4a2d      	ldr	r2, [pc, #180]	@ (8001244 <MX_GPIO_Init+0xf0>)
 8001190:	f043 0301 	orr.w	r3, r3, #1
 8001194:	6313      	str	r3, [r2, #48]	@ 0x30
 8001196:	4b2b      	ldr	r3, [pc, #172]	@ (8001244 <MX_GPIO_Init+0xf0>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	607b      	str	r3, [r7, #4]
 80011a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	603b      	str	r3, [r7, #0]
 80011a6:	4b27      	ldr	r3, [pc, #156]	@ (8001244 <MX_GPIO_Init+0xf0>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011aa:	4a26      	ldr	r2, [pc, #152]	@ (8001244 <MX_GPIO_Init+0xf0>)
 80011ac:	f043 0302 	orr.w	r3, r3, #2
 80011b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011b2:	4b24      	ldr	r3, [pc, #144]	@ (8001244 <MX_GPIO_Init+0xf0>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b6:	f003 0302 	and.w	r3, r3, #2
 80011ba:	603b      	str	r3, [r7, #0]
 80011bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_LED_GPIO_Port, GPIO_LED_Pin, GPIO_PIN_RESET);
 80011be:	2200      	movs	r2, #0
 80011c0:	2120      	movs	r1, #32
 80011c2:	4821      	ldr	r0, [pc, #132]	@ (8001248 <MX_GPIO_Init+0xf4>)
 80011c4:	f001 faa8 	bl	8002718 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_HUM_GPIO_Port, GPIO_HUM_Pin, GPIO_PIN_RESET);
 80011c8:	2200      	movs	r2, #0
 80011ca:	2102      	movs	r1, #2
 80011cc:	481f      	ldr	r0, [pc, #124]	@ (800124c <MX_GPIO_Init+0xf8>)
 80011ce:	f001 faa3 	bl	8002718 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPIO_SW_Pin */
  GPIO_InitStruct.Pin = GPIO_SW_Pin;
 80011d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011d8:	2300      	movs	r3, #0
 80011da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011dc:	2301      	movs	r3, #1
 80011de:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIO_SW_GPIO_Port, &GPIO_InitStruct);
 80011e0:	f107 030c 	add.w	r3, r7, #12
 80011e4:	4619      	mov	r1, r3
 80011e6:	481a      	ldr	r0, [pc, #104]	@ (8001250 <MX_GPIO_Init+0xfc>)
 80011e8:	f001 f8ea 	bl	80023c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_LED_Pin */
  GPIO_InitStruct.Pin = GPIO_LED_Pin;
 80011ec:	2320      	movs	r3, #32
 80011ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f0:	2301      	movs	r3, #1
 80011f2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f8:	2300      	movs	r3, #0
 80011fa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIO_LED_GPIO_Port, &GPIO_InitStruct);
 80011fc:	f107 030c 	add.w	r3, r7, #12
 8001200:	4619      	mov	r1, r3
 8001202:	4811      	ldr	r0, [pc, #68]	@ (8001248 <MX_GPIO_Init+0xf4>)
 8001204:	f001 f8dc 	bl	80023c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_SW_D_Pin */
  GPIO_InitStruct.Pin = GPIO_SW_D_Pin;
 8001208:	2301      	movs	r3, #1
 800120a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800120c:	2300      	movs	r3, #0
 800120e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001210:	2301      	movs	r3, #1
 8001212:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIO_SW_D_GPIO_Port, &GPIO_InitStruct);
 8001214:	f107 030c 	add.w	r3, r7, #12
 8001218:	4619      	mov	r1, r3
 800121a:	480c      	ldr	r0, [pc, #48]	@ (800124c <MX_GPIO_Init+0xf8>)
 800121c:	f001 f8d0 	bl	80023c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_HUM_Pin */
  GPIO_InitStruct.Pin = GPIO_HUM_Pin;
 8001220:	2302      	movs	r3, #2
 8001222:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001224:	2301      	movs	r3, #1
 8001226:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122c:	2300      	movs	r3, #0
 800122e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIO_HUM_GPIO_Port, &GPIO_InitStruct);
 8001230:	f107 030c 	add.w	r3, r7, #12
 8001234:	4619      	mov	r1, r3
 8001236:	4805      	ldr	r0, [pc, #20]	@ (800124c <MX_GPIO_Init+0xf8>)
 8001238:	f001 f8c2 	bl	80023c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800123c:	bf00      	nop
 800123e:	3720      	adds	r7, #32
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40023800 	.word	0x40023800
 8001248:	40020000 	.word	0x40020000
 800124c:	40020400 	.word	0x40020400
 8001250:	40020800 	.word	0x40020800

08001254 <SensorUiTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_SensorUiTask */
void SensorUiTask(void *argument)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b08c      	sub	sp, #48	@ 0x30
 8001258:	af02      	add	r7, sp, #8
 800125a:	6078      	str	r0, [r7, #4]
	char line[24];
	rh_sample_t sample;
  /* Infinite loop */
  for(;;)
  {
	  if(osMutexAcquire(i2cMutexHandle, osWaitForever) == osOK) {
 800125c:	4b30      	ldr	r3, [pc, #192]	@ (8001320 <SensorUiTask+0xcc>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001264:	4618      	mov	r0, r3
 8001266:	f004 f996 	bl	8005596 <osMutexAcquire>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d1f5      	bne.n	800125c <SensorUiTask+0x8>
		  if (SHT31_ReadTempHum(&sample.temp, &sample.hum) == 0) {
 8001270:	f107 0308 	add.w	r3, r7, #8
 8001274:	1d1a      	adds	r2, r3, #4
 8001276:	f107 0308 	add.w	r3, r7, #8
 800127a:	4611      	mov	r1, r2
 800127c:	4618      	mov	r0, r3
 800127e:	f000 f993 	bl	80015a8 <SHT31_ReadTempHum>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d145      	bne.n	8001314 <SensorUiTask+0xc0>
			last_hum = sample.hum;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	4a26      	ldr	r2, [pc, #152]	@ (8001324 <SensorUiTask+0xd0>)
 800128c:	6013      	str	r3, [r2, #0]
			SSD1306_Clear();
 800128e:	f000 fc72 	bl	8001b76 <SSD1306_Clear>
			snprintf(line, sizeof(line), "Set: %d%%", g_set_hum);
 8001292:	4b25      	ldr	r3, [pc, #148]	@ (8001328 <SensorUiTask+0xd4>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f107 0010 	add.w	r0, r7, #16
 800129a:	4a24      	ldr	r2, [pc, #144]	@ (800132c <SensorUiTask+0xd8>)
 800129c:	2118      	movs	r1, #24
 800129e:	f007 ffc1 	bl	8009224 <sniprintf>
			SSD1306_GotoXY(0, 0);  SSD1306_Puts(line, &Font_11x18, 1);
 80012a2:	2100      	movs	r1, #0
 80012a4:	2000      	movs	r0, #0
 80012a6:	f000 fbad 	bl	8001a04 <SSD1306_GotoXY>
 80012aa:	f107 0310 	add.w	r3, r7, #16
 80012ae:	2201      	movs	r2, #1
 80012b0:	491f      	ldr	r1, [pc, #124]	@ (8001330 <SensorUiTask+0xdc>)
 80012b2:	4618      	mov	r0, r3
 80012b4:	f000 fc3a 	bl	8001b2c <SSD1306_Puts>

			snprintf(line, sizeof(line), "Cur: %.1f%%", last_hum);
 80012b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001324 <SensorUiTask+0xd0>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff f963 	bl	8000588 <__aeabi_f2d>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	f107 0010 	add.w	r0, r7, #16
 80012ca:	e9cd 2300 	strd	r2, r3, [sp]
 80012ce:	4a19      	ldr	r2, [pc, #100]	@ (8001334 <SensorUiTask+0xe0>)
 80012d0:	2118      	movs	r1, #24
 80012d2:	f007 ffa7 	bl	8009224 <sniprintf>
			SSD1306_GotoXY(0, 22); SSD1306_Puts(line, &Font_11x18, 1);
 80012d6:	2116      	movs	r1, #22
 80012d8:	2000      	movs	r0, #0
 80012da:	f000 fb93 	bl	8001a04 <SSD1306_GotoXY>
 80012de:	f107 0310 	add.w	r3, r7, #16
 80012e2:	2201      	movs	r2, #1
 80012e4:	4912      	ldr	r1, [pc, #72]	@ (8001330 <SensorUiTask+0xdc>)
 80012e6:	4618      	mov	r0, r3
 80012e8:	f000 fc20 	bl	8001b2c <SSD1306_Puts>
			SSD1306_UpdateScreen();
 80012ec:	f000 fae4 	bl	80018b8 <SSD1306_UpdateScreen>
			osMutexRelease(i2cMutexHandle);
 80012f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001320 <SensorUiTask+0xcc>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f004 f999 	bl	800562c <osMutexRelease>
			osMessageQueuePut(xQueueRHHandle, &sample, 0, 0); // keep the latest
 80012fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001338 <SensorUiTask+0xe4>)
 80012fc:	6818      	ldr	r0, [r3, #0]
 80012fe:	f107 0108 	add.w	r1, r7, #8
 8001302:	2300      	movs	r3, #0
 8001304:	2200      	movs	r2, #0
 8001306:	f004 fa41 	bl	800578c <osMessageQueuePut>
			osDelay(2000);
 800130a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800130e:	f004 f8a1 	bl	8005454 <osDelay>
 8001312:	e7a3      	b.n	800125c <SensorUiTask+0x8>
		  } else {
			  osMutexRelease(i2cMutexHandle);
 8001314:	4b02      	ldr	r3, [pc, #8]	@ (8001320 <SensorUiTask+0xcc>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4618      	mov	r0, r3
 800131a:	f004 f987 	bl	800562c <osMutexRelease>
	  if(osMutexAcquire(i2cMutexHandle, osWaitForever) == osOK) {
 800131e:	e79d      	b.n	800125c <SensorUiTask+0x8>
 8001320:	200002b0 	.word	0x200002b0
 8001324:	2000000c 	.word	0x2000000c
 8001328:	20000008 	.word	0x20000008
 800132c:	0800b684 	.word	0x0800b684
 8001330:	20000000 	.word	0x20000000
 8001334:	0800b690 	.word	0x0800b690
 8001338:	200002ac 	.word	0x200002ac

0800133c <ControlTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ControlTask */
void ControlTask(void *argument)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ControlTask */
	rh_sample_t sample;
  /* Infinite loop */
  for(;;)
  {
	  if (osMessageQueueGet(xQueueRHHandle, &sample, NULL, osWaitForever) == osOK) {
 8001344:	4b2c      	ldr	r3, [pc, #176]	@ (80013f8 <ControlTask+0xbc>)
 8001346:	6818      	ldr	r0, [r3, #0]
 8001348:	f107 0108 	add.w	r1, r7, #8
 800134c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001350:	2200      	movs	r2, #0
 8001352:	f004 fa7b 	bl	800584c <osMessageQueueGet>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1f3      	bne.n	8001344 <ControlTask+0x8>
		// Hysteresis controller
		if (g_hum_on && sample.hum > (g_set_hum + g_hyst)) {
 800135c:	4b27      	ldr	r3, [pc, #156]	@ (80013fc <ControlTask+0xc0>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d022      	beq.n	80013aa <ControlTask+0x6e>
 8001364:	ed97 7a03 	vldr	s14, [r7, #12]
 8001368:	4b25      	ldr	r3, [pc, #148]	@ (8001400 <ControlTask+0xc4>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	ee07 3a90 	vmov	s15, r3
 8001370:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001374:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8001378:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800137c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001384:	dd11      	ble.n	80013aa <ControlTask+0x6e>
			HAL_GPIO_WritePin(GPIO_HUM_GPIO_Port, GPIO_HUM_Pin, GPIO_PIN_SET);
 8001386:	2201      	movs	r2, #1
 8001388:	2102      	movs	r1, #2
 800138a:	481e      	ldr	r0, [pc, #120]	@ (8001404 <ControlTask+0xc8>)
 800138c:	f001 f9c4 	bl	8002718 <HAL_GPIO_WritePin>
			osDelay(3000);   // OFF long press
 8001390:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001394:	f004 f85e 	bl	8005454 <osDelay>
			HAL_GPIO_WritePin(GPIO_HUM_GPIO_Port, GPIO_HUM_Pin, GPIO_PIN_RESET);
 8001398:	2200      	movs	r2, #0
 800139a:	2102      	movs	r1, #2
 800139c:	4819      	ldr	r0, [pc, #100]	@ (8001404 <ControlTask+0xc8>)
 800139e:	f001 f9bb 	bl	8002718 <HAL_GPIO_WritePin>
			g_hum_on = 0;
 80013a2:	4b16      	ldr	r3, [pc, #88]	@ (80013fc <ControlTask+0xc0>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	e025      	b.n	80013f6 <ControlTask+0xba>
		} else if (!g_hum_on && sample.hum < (g_set_hum - g_hyst)) {
 80013aa:	4b14      	ldr	r3, [pc, #80]	@ (80013fc <ControlTask+0xc0>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d1c8      	bne.n	8001344 <ControlTask+0x8>
 80013b2:	ed97 7a03 	vldr	s14, [r7, #12]
 80013b6:	4b12      	ldr	r3, [pc, #72]	@ (8001400 <ControlTask+0xc4>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	ee07 3a90 	vmov	s15, r3
 80013be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013c2:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 80013c6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80013ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013d2:	d510      	bpl.n	80013f6 <ControlTask+0xba>
			HAL_GPIO_WritePin(GPIO_HUM_GPIO_Port, GPIO_HUM_Pin, GPIO_PIN_SET);
 80013d4:	2201      	movs	r2, #1
 80013d6:	2102      	movs	r1, #2
 80013d8:	480a      	ldr	r0, [pc, #40]	@ (8001404 <ControlTask+0xc8>)
 80013da:	f001 f99d 	bl	8002718 <HAL_GPIO_WritePin>
			osDelay(1000);   // ON short press
 80013de:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80013e2:	f004 f837 	bl	8005454 <osDelay>
			HAL_GPIO_WritePin(GPIO_HUM_GPIO_Port, GPIO_HUM_Pin, GPIO_PIN_RESET);
 80013e6:	2200      	movs	r2, #0
 80013e8:	2102      	movs	r1, #2
 80013ea:	4806      	ldr	r0, [pc, #24]	@ (8001404 <ControlTask+0xc8>)
 80013ec:	f001 f994 	bl	8002718 <HAL_GPIO_WritePin>
			g_hum_on = 1;
 80013f0:	4b02      	ldr	r3, [pc, #8]	@ (80013fc <ControlTask+0xc0>)
 80013f2:	2201      	movs	r2, #1
 80013f4:	601a      	str	r2, [r3, #0]
	  if (osMessageQueueGet(xQueueRHHandle, &sample, NULL, osWaitForever) == osOK) {
 80013f6:	e7a5      	b.n	8001344 <ControlTask+0x8>
 80013f8:	200002ac 	.word	0x200002ac
 80013fc:	200002b4 	.word	0x200002b4
 8001400:	20000008 	.word	0x20000008
 8001404:	40020400 	.word	0x40020400

08001408 <InputTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_InputTask */
void InputTask(void *argument)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08a      	sub	sp, #40	@ 0x28
 800140c:	af02      	add	r7, sp, #8
 800140e:	6078      	str	r0, [r7, #4]
	char line[24];
  /* Infinite loop */
  for(;;)
  {
		// increment logic (target humidity)
		if (!HAL_GPIO_ReadPin(GPIO_SW_GPIO_Port, GPIO_SW_Pin)) {
 8001410:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001414:	4850      	ldr	r0, [pc, #320]	@ (8001558 <InputTask+0x150>)
 8001416:	f001 f967 	bl	80026e8 <HAL_GPIO_ReadPin>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d147      	bne.n	80014b0 <InputTask+0xa8>
			if(osMutexAcquire(i2cMutexHandle, osWaitForever) == osOK) {
 8001420:	4b4e      	ldr	r3, [pc, #312]	@ (800155c <InputTask+0x154>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001428:	4618      	mov	r0, r3
 800142a:	f004 f8b4 	bl	8005596 <osMutexAcquire>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d13d      	bne.n	80014b0 <InputTask+0xa8>
				g_set_hum++;
 8001434:	4b4a      	ldr	r3, [pc, #296]	@ (8001560 <InputTask+0x158>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	3301      	adds	r3, #1
 800143a:	4a49      	ldr	r2, [pc, #292]	@ (8001560 <InputTask+0x158>)
 800143c:	6013      	str	r3, [r2, #0]
				SSD1306_Clear();
 800143e:	f000 fb9a 	bl	8001b76 <SSD1306_Clear>
				snprintf(line, sizeof(line), "Set: %d%%", g_set_hum);
 8001442:	4b47      	ldr	r3, [pc, #284]	@ (8001560 <InputTask+0x158>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f107 0008 	add.w	r0, r7, #8
 800144a:	4a46      	ldr	r2, [pc, #280]	@ (8001564 <InputTask+0x15c>)
 800144c:	2118      	movs	r1, #24
 800144e:	f007 fee9 	bl	8009224 <sniprintf>
				SSD1306_GotoXY(0, 0);  SSD1306_Puts(line, &Font_11x18, 1);
 8001452:	2100      	movs	r1, #0
 8001454:	2000      	movs	r0, #0
 8001456:	f000 fad5 	bl	8001a04 <SSD1306_GotoXY>
 800145a:	f107 0308 	add.w	r3, r7, #8
 800145e:	2201      	movs	r2, #1
 8001460:	4941      	ldr	r1, [pc, #260]	@ (8001568 <InputTask+0x160>)
 8001462:	4618      	mov	r0, r3
 8001464:	f000 fb62 	bl	8001b2c <SSD1306_Puts>
				snprintf(line, sizeof(line), "Cur: %.1f%%", last_hum);
 8001468:	4b40      	ldr	r3, [pc, #256]	@ (800156c <InputTask+0x164>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff f88b 	bl	8000588 <__aeabi_f2d>
 8001472:	4602      	mov	r2, r0
 8001474:	460b      	mov	r3, r1
 8001476:	f107 0008 	add.w	r0, r7, #8
 800147a:	e9cd 2300 	strd	r2, r3, [sp]
 800147e:	4a3c      	ldr	r2, [pc, #240]	@ (8001570 <InputTask+0x168>)
 8001480:	2118      	movs	r1, #24
 8001482:	f007 fecf 	bl	8009224 <sniprintf>
				SSD1306_GotoXY(0, 22); SSD1306_Puts(line, &Font_11x18, 1);
 8001486:	2116      	movs	r1, #22
 8001488:	2000      	movs	r0, #0
 800148a:	f000 fabb 	bl	8001a04 <SSD1306_GotoXY>
 800148e:	f107 0308 	add.w	r3, r7, #8
 8001492:	2201      	movs	r2, #1
 8001494:	4934      	ldr	r1, [pc, #208]	@ (8001568 <InputTask+0x160>)
 8001496:	4618      	mov	r0, r3
 8001498:	f000 fb48 	bl	8001b2c <SSD1306_Puts>
				SSD1306_UpdateScreen();
 800149c:	f000 fa0c 	bl	80018b8 <SSD1306_UpdateScreen>
				osMutexRelease(i2cMutexHandle);
 80014a0:	4b2e      	ldr	r3, [pc, #184]	@ (800155c <InputTask+0x154>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f004 f8c1 	bl	800562c <osMutexRelease>
				osDelay(100);
 80014aa:	2064      	movs	r0, #100	@ 0x64
 80014ac:	f003 ffd2 	bl	8005454 <osDelay>
			}
		}
		// decrease logic (target humidity)
		if (!HAL_GPIO_ReadPin(GPIO_SW_D_GPIO_Port, GPIO_SW_D_Pin)) {
 80014b0:	2101      	movs	r1, #1
 80014b2:	4830      	ldr	r0, [pc, #192]	@ (8001574 <InputTask+0x16c>)
 80014b4:	f001 f918 	bl	80026e8 <HAL_GPIO_ReadPin>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d147      	bne.n	800154e <InputTask+0x146>
			if(osMutexAcquire(i2cMutexHandle, osWaitForever) == osOK) {
 80014be:	4b27      	ldr	r3, [pc, #156]	@ (800155c <InputTask+0x154>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80014c6:	4618      	mov	r0, r3
 80014c8:	f004 f865 	bl	8005596 <osMutexAcquire>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d13d      	bne.n	800154e <InputTask+0x146>
				g_set_hum--;
 80014d2:	4b23      	ldr	r3, [pc, #140]	@ (8001560 <InputTask+0x158>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	3b01      	subs	r3, #1
 80014d8:	4a21      	ldr	r2, [pc, #132]	@ (8001560 <InputTask+0x158>)
 80014da:	6013      	str	r3, [r2, #0]
				SSD1306_Clear();
 80014dc:	f000 fb4b 	bl	8001b76 <SSD1306_Clear>
				snprintf(line, sizeof(line), "Set: %d%%", g_set_hum);
 80014e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001560 <InputTask+0x158>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f107 0008 	add.w	r0, r7, #8
 80014e8:	4a1e      	ldr	r2, [pc, #120]	@ (8001564 <InputTask+0x15c>)
 80014ea:	2118      	movs	r1, #24
 80014ec:	f007 fe9a 	bl	8009224 <sniprintf>
				SSD1306_GotoXY(0, 0);  SSD1306_Puts(line, &Font_11x18, 1);
 80014f0:	2100      	movs	r1, #0
 80014f2:	2000      	movs	r0, #0
 80014f4:	f000 fa86 	bl	8001a04 <SSD1306_GotoXY>
 80014f8:	f107 0308 	add.w	r3, r7, #8
 80014fc:	2201      	movs	r2, #1
 80014fe:	491a      	ldr	r1, [pc, #104]	@ (8001568 <InputTask+0x160>)
 8001500:	4618      	mov	r0, r3
 8001502:	f000 fb13 	bl	8001b2c <SSD1306_Puts>
				snprintf(line, sizeof(line), "Cur: %.1f%%", last_hum);
 8001506:	4b19      	ldr	r3, [pc, #100]	@ (800156c <InputTask+0x164>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff f83c 	bl	8000588 <__aeabi_f2d>
 8001510:	4602      	mov	r2, r0
 8001512:	460b      	mov	r3, r1
 8001514:	f107 0008 	add.w	r0, r7, #8
 8001518:	e9cd 2300 	strd	r2, r3, [sp]
 800151c:	4a14      	ldr	r2, [pc, #80]	@ (8001570 <InputTask+0x168>)
 800151e:	2118      	movs	r1, #24
 8001520:	f007 fe80 	bl	8009224 <sniprintf>
				SSD1306_GotoXY(0, 22); SSD1306_Puts(line, &Font_11x18, 1);
 8001524:	2116      	movs	r1, #22
 8001526:	2000      	movs	r0, #0
 8001528:	f000 fa6c 	bl	8001a04 <SSD1306_GotoXY>
 800152c:	f107 0308 	add.w	r3, r7, #8
 8001530:	2201      	movs	r2, #1
 8001532:	490d      	ldr	r1, [pc, #52]	@ (8001568 <InputTask+0x160>)
 8001534:	4618      	mov	r0, r3
 8001536:	f000 faf9 	bl	8001b2c <SSD1306_Puts>
				SSD1306_UpdateScreen();
 800153a:	f000 f9bd 	bl	80018b8 <SSD1306_UpdateScreen>
				osMutexRelease(i2cMutexHandle);
 800153e:	4b07      	ldr	r3, [pc, #28]	@ (800155c <InputTask+0x154>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4618      	mov	r0, r3
 8001544:	f004 f872 	bl	800562c <osMutexRelease>
				osDelay(100);
 8001548:	2064      	movs	r0, #100	@ 0x64
 800154a:	f003 ff83 	bl	8005454 <osDelay>
			}
		}
		osDelay(100); // let other tasks run
 800154e:	2064      	movs	r0, #100	@ 0x64
 8001550:	f003 ff80 	bl	8005454 <osDelay>
		if (!HAL_GPIO_ReadPin(GPIO_SW_GPIO_Port, GPIO_SW_Pin)) {
 8001554:	e75c      	b.n	8001410 <InputTask+0x8>
 8001556:	bf00      	nop
 8001558:	40020800 	.word	0x40020800
 800155c:	200002b0 	.word	0x200002b0
 8001560:	20000008 	.word	0x20000008
 8001564:	0800b684 	.word	0x0800b684
 8001568:	20000000 	.word	0x20000000
 800156c:	2000000c 	.word	0x2000000c
 8001570:	0800b690 	.word	0x0800b690
 8001574:	40020400 	.word	0x40020400

08001578 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a04      	ldr	r2, [pc, #16]	@ (8001598 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d101      	bne.n	800158e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800158a:	f000 fdf3 	bl	8002174 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800158e:	bf00      	nop
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40010000 	.word	0x40010000

0800159c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015a0:	b672      	cpsid	i
}
 80015a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015a4:	bf00      	nop
 80015a6:	e7fd      	b.n	80015a4 <Error_Handler+0x8>

080015a8 <SHT31_ReadTempHum>:
#include "sht31d.h"

extern I2C_HandleTypeDef hi2c1;
#define SHT31D_I2C &hi2c1

int SHT31_ReadTempHum(float *temperature, float *humidity) {
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b088      	sub	sp, #32
 80015ac:	af02      	add	r7, sp, #8
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	6039      	str	r1, [r7, #0]
//    uint8_t cmd[2] = {0x24, 0x00};   // high repeatability, no clock stretching
	uint8_t cmd[2] = {0x2C, 0x06};   // high repeatability, no clock stretching
 80015b2:	f240 632c 	movw	r3, #1580	@ 0x62c
 80015b6:	823b      	strh	r3, [r7, #16]
    uint8_t data[6];

    if (HAL_I2C_Master_Transmit(&hi2c1, SHT31D_I2C_ADDR, cmd, 2, HAL_MAX_DELAY) != HAL_OK)
 80015b8:	f107 0210 	add.w	r2, r7, #16
 80015bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80015c0:	9300      	str	r3, [sp, #0]
 80015c2:	2302      	movs	r3, #2
 80015c4:	2188      	movs	r1, #136	@ 0x88
 80015c6:	4838      	ldr	r0, [pc, #224]	@ (80016a8 <SHT31_ReadTempHum+0x100>)
 80015c8:	f001 fa04 	bl	80029d4 <HAL_I2C_Master_Transmit>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d002      	beq.n	80015d8 <SHT31_ReadTempHum+0x30>
        return -1;
 80015d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80015d6:	e063      	b.n	80016a0 <SHT31_ReadTempHum+0xf8>

    HAL_Delay(20); // wait ≥15ms per datasheet
 80015d8:	2014      	movs	r0, #20
 80015da:	f000 fdeb 	bl	80021b4 <HAL_Delay>

    if (HAL_I2C_Master_Receive(&hi2c1, SHT31D_I2C_ADDR, data, 6, HAL_MAX_DELAY) != HAL_OK)
 80015de:	f107 0208 	add.w	r2, r7, #8
 80015e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80015e6:	9300      	str	r3, [sp, #0]
 80015e8:	2306      	movs	r3, #6
 80015ea:	2188      	movs	r1, #136	@ 0x88
 80015ec:	482e      	ldr	r0, [pc, #184]	@ (80016a8 <SHT31_ReadTempHum+0x100>)
 80015ee:	f001 faef 	bl	8002bd0 <HAL_I2C_Master_Receive>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d002      	beq.n	80015fe <SHT31_ReadTempHum+0x56>
        return -2;
 80015f8:	f06f 0301 	mvn.w	r3, #1
 80015fc:	e050      	b.n	80016a0 <SHT31_ReadTempHum+0xf8>

    if (SHT31_CRC8(data, 2) != data[2] || SHT31_CRC8(data+3, 2) != data[5])
 80015fe:	f107 0308 	add.w	r3, r7, #8
 8001602:	2102      	movs	r1, #2
 8001604:	4618      	mov	r0, r3
 8001606:	f000 f859 	bl	80016bc <SHT31_CRC8>
 800160a:	4603      	mov	r3, r0
 800160c:	461a      	mov	r2, r3
 800160e:	7abb      	ldrb	r3, [r7, #10]
 8001610:	429a      	cmp	r2, r3
 8001612:	d10b      	bne.n	800162c <SHT31_ReadTempHum+0x84>
 8001614:	f107 0308 	add.w	r3, r7, #8
 8001618:	3303      	adds	r3, #3
 800161a:	2102      	movs	r1, #2
 800161c:	4618      	mov	r0, r3
 800161e:	f000 f84d 	bl	80016bc <SHT31_CRC8>
 8001622:	4603      	mov	r3, r0
 8001624:	461a      	mov	r2, r3
 8001626:	7b7b      	ldrb	r3, [r7, #13]
 8001628:	429a      	cmp	r2, r3
 800162a:	d002      	beq.n	8001632 <SHT31_ReadTempHum+0x8a>
        return -3;
 800162c:	f06f 0302 	mvn.w	r3, #2
 8001630:	e036      	b.n	80016a0 <SHT31_ReadTempHum+0xf8>

    uint16_t rawT  = (data[0] << 8) | data[1];
 8001632:	7a3b      	ldrb	r3, [r7, #8]
 8001634:	b21b      	sxth	r3, r3
 8001636:	021b      	lsls	r3, r3, #8
 8001638:	b21a      	sxth	r2, r3
 800163a:	7a7b      	ldrb	r3, [r7, #9]
 800163c:	b21b      	sxth	r3, r3
 800163e:	4313      	orrs	r3, r2
 8001640:	b21b      	sxth	r3, r3
 8001642:	82fb      	strh	r3, [r7, #22]
    uint16_t rawRH = (data[3] << 8) | data[4];
 8001644:	7afb      	ldrb	r3, [r7, #11]
 8001646:	b21b      	sxth	r3, r3
 8001648:	021b      	lsls	r3, r3, #8
 800164a:	b21a      	sxth	r2, r3
 800164c:	7b3b      	ldrb	r3, [r7, #12]
 800164e:	b21b      	sxth	r3, r3
 8001650:	4313      	orrs	r3, r2
 8001652:	b21b      	sxth	r3, r3
 8001654:	82bb      	strh	r3, [r7, #20]

    *temperature = -45.0f + 175.0f * ((float) rawT / 65535.0f);
 8001656:	8afb      	ldrh	r3, [r7, #22]
 8001658:	ee07 3a90 	vmov	s15, r3
 800165c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001660:	eddf 6a12 	vldr	s13, [pc, #72]	@ 80016ac <SHT31_ReadTempHum+0x104>
 8001664:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001668:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 80016b0 <SHT31_ReadTempHum+0x108>
 800166c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001670:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80016b4 <SHT31_ReadTempHum+0x10c>
 8001674:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	edc3 7a00 	vstr	s15, [r3]
    *humidity    = 100.0f * ((float) rawRH / 65535.0f);
 800167e:	8abb      	ldrh	r3, [r7, #20]
 8001680:	ee07 3a90 	vmov	s15, r3
 8001684:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001688:	eddf 6a08 	vldr	s13, [pc, #32]	@ 80016ac <SHT31_ReadTempHum+0x104>
 800168c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001690:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80016b8 <SHT31_ReadTempHum+0x110>
 8001694:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	edc3 7a00 	vstr	s15, [r3]

    return 0; // success
 800169e:	2300      	movs	r3, #0
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3718      	adds	r7, #24
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	20000204 	.word	0x20000204
 80016ac:	477fff00 	.word	0x477fff00
 80016b0:	432f0000 	.word	0x432f0000
 80016b4:	42340000 	.word	0x42340000
 80016b8:	42c80000 	.word	0x42c80000

080016bc <SHT31_CRC8>:

uint8_t SHT31_CRC8(const uint8_t *data, int len) {
 80016bc:	b480      	push	{r7}
 80016be:	b087      	sub	sp, #28
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
    uint8_t crc = 0xFF;
 80016c6:	23ff      	movs	r3, #255	@ 0xff
 80016c8:	75fb      	strb	r3, [r7, #23]
    for (int i = 0; i < len; i++) {
 80016ca:	2300      	movs	r3, #0
 80016cc:	613b      	str	r3, [r7, #16]
 80016ce:	e023      	b.n	8001718 <SHT31_CRC8+0x5c>
        crc ^= data[i];
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	4413      	add	r3, r2
 80016d6:	781a      	ldrb	r2, [r3, #0]
 80016d8:	7dfb      	ldrb	r3, [r7, #23]
 80016da:	4053      	eors	r3, r2
 80016dc:	75fb      	strb	r3, [r7, #23]
        for (int b = 0; b < 8; b++) {
 80016de:	2300      	movs	r3, #0
 80016e0:	60fb      	str	r3, [r7, #12]
 80016e2:	e013      	b.n	800170c <SHT31_CRC8+0x50>
            crc = (crc & 0x80) ? (crc << 1) ^ 0x31 : (crc << 1);
 80016e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	da08      	bge.n	80016fe <SHT31_CRC8+0x42>
 80016ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	b25b      	sxtb	r3, r3
 80016f4:	f083 0331 	eor.w	r3, r3, #49	@ 0x31
 80016f8:	b25b      	sxtb	r3, r3
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	e002      	b.n	8001704 <SHT31_CRC8+0x48>
 80016fe:	7dfb      	ldrb	r3, [r7, #23]
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	b2db      	uxtb	r3, r3
 8001704:	75fb      	strb	r3, [r7, #23]
        for (int b = 0; b < 8; b++) {
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	3301      	adds	r3, #1
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	2b07      	cmp	r3, #7
 8001710:	dde8      	ble.n	80016e4 <SHT31_CRC8+0x28>
    for (int i = 0; i < len; i++) {
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	3301      	adds	r3, #1
 8001716:	613b      	str	r3, [r7, #16]
 8001718:	693a      	ldr	r2, [r7, #16]
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	429a      	cmp	r2, r3
 800171e:	dbd7      	blt.n	80016d0 <SHT31_CRC8+0x14>
        }
    }
    return crc;
 8001720:	7dfb      	ldrb	r3, [r7, #23]
}
 8001722:	4618      	mov	r0, r3
 8001724:	371c      	adds	r7, #28
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
	...

08001730 <SSD1306_Init>:

/* Private variable */
static SSD1306_t SSD1306;


uint8_t SSD1306_Init(void) {
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001736:	f000 fa27 	bl	8001b88 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800173a:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800173e:	2201      	movs	r2, #1
 8001740:	2178      	movs	r1, #120	@ 0x78
 8001742:	485b      	ldr	r0, [pc, #364]	@ (80018b0 <SSD1306_Init+0x180>)
 8001744:	f001 fc76 	bl	8003034 <HAL_I2C_IsDeviceReady>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800174e:	2300      	movs	r3, #0
 8001750:	e0a9      	b.n	80018a6 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001752:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8001756:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001758:	e002      	b.n	8001760 <SSD1306_Init+0x30>
		p--;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	3b01      	subs	r3, #1
 800175e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d1f9      	bne.n	800175a <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001766:	22ae      	movs	r2, #174	@ 0xae
 8001768:	2100      	movs	r1, #0
 800176a:	2078      	movs	r0, #120	@ 0x78
 800176c:	f000 fa88 	bl	8001c80 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001770:	2220      	movs	r2, #32
 8001772:	2100      	movs	r1, #0
 8001774:	2078      	movs	r0, #120	@ 0x78
 8001776:	f000 fa83 	bl	8001c80 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800177a:	2210      	movs	r2, #16
 800177c:	2100      	movs	r1, #0
 800177e:	2078      	movs	r0, #120	@ 0x78
 8001780:	f000 fa7e 	bl	8001c80 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001784:	22b0      	movs	r2, #176	@ 0xb0
 8001786:	2100      	movs	r1, #0
 8001788:	2078      	movs	r0, #120	@ 0x78
 800178a:	f000 fa79 	bl	8001c80 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800178e:	22c8      	movs	r2, #200	@ 0xc8
 8001790:	2100      	movs	r1, #0
 8001792:	2078      	movs	r0, #120	@ 0x78
 8001794:	f000 fa74 	bl	8001c80 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001798:	2200      	movs	r2, #0
 800179a:	2100      	movs	r1, #0
 800179c:	2078      	movs	r0, #120	@ 0x78
 800179e:	f000 fa6f 	bl	8001c80 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80017a2:	2210      	movs	r2, #16
 80017a4:	2100      	movs	r1, #0
 80017a6:	2078      	movs	r0, #120	@ 0x78
 80017a8:	f000 fa6a 	bl	8001c80 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80017ac:	2240      	movs	r2, #64	@ 0x40
 80017ae:	2100      	movs	r1, #0
 80017b0:	2078      	movs	r0, #120	@ 0x78
 80017b2:	f000 fa65 	bl	8001c80 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80017b6:	2281      	movs	r2, #129	@ 0x81
 80017b8:	2100      	movs	r1, #0
 80017ba:	2078      	movs	r0, #120	@ 0x78
 80017bc:	f000 fa60 	bl	8001c80 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80017c0:	22ff      	movs	r2, #255	@ 0xff
 80017c2:	2100      	movs	r1, #0
 80017c4:	2078      	movs	r0, #120	@ 0x78
 80017c6:	f000 fa5b 	bl	8001c80 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80017ca:	22a1      	movs	r2, #161	@ 0xa1
 80017cc:	2100      	movs	r1, #0
 80017ce:	2078      	movs	r0, #120	@ 0x78
 80017d0:	f000 fa56 	bl	8001c80 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80017d4:	22a6      	movs	r2, #166	@ 0xa6
 80017d6:	2100      	movs	r1, #0
 80017d8:	2078      	movs	r0, #120	@ 0x78
 80017da:	f000 fa51 	bl	8001c80 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
	SSD1306_WRITECOMMAND(0xFF);
#else
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80017de:	22a8      	movs	r2, #168	@ 0xa8
 80017e0:	2100      	movs	r1, #0
 80017e2:	2078      	movs	r0, #120	@ 0x78
 80017e4:	f000 fa4c 	bl	8001c80 <ssd1306_I2C_Write>
#endif

#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x1F); //
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x3F); //
 80017e8:	223f      	movs	r2, #63	@ 0x3f
 80017ea:	2100      	movs	r1, #0
 80017ec:	2078      	movs	r0, #120	@ 0x78
 80017ee:	f000 fa47 	bl	8001c80 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x3F); // Seems to work for 128px high displays too.
#endif
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80017f2:	22a4      	movs	r2, #164	@ 0xa4
 80017f4:	2100      	movs	r1, #0
 80017f6:	2078      	movs	r0, #120	@ 0x78
 80017f8:	f000 fa42 	bl	8001c80 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80017fc:	22d3      	movs	r2, #211	@ 0xd3
 80017fe:	2100      	movs	r1, #0
 8001800:	2078      	movs	r0, #120	@ 0x78
 8001802:	f000 fa3d 	bl	8001c80 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001806:	2200      	movs	r2, #0
 8001808:	2100      	movs	r1, #0
 800180a:	2078      	movs	r0, #120	@ 0x78
 800180c:	f000 fa38 	bl	8001c80 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001810:	22d5      	movs	r2, #213	@ 0xd5
 8001812:	2100      	movs	r1, #0
 8001814:	2078      	movs	r0, #120	@ 0x78
 8001816:	f000 fa33 	bl	8001c80 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800181a:	22f0      	movs	r2, #240	@ 0xf0
 800181c:	2100      	movs	r1, #0
 800181e:	2078      	movs	r0, #120	@ 0x78
 8001820:	f000 fa2e 	bl	8001c80 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001824:	22d9      	movs	r2, #217	@ 0xd9
 8001826:	2100      	movs	r1, #0
 8001828:	2078      	movs	r0, #120	@ 0x78
 800182a:	f000 fa29 	bl	8001c80 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800182e:	2222      	movs	r2, #34	@ 0x22
 8001830:	2100      	movs	r1, #0
 8001832:	2078      	movs	r0, #120	@ 0x78
 8001834:	f000 fa24 	bl	8001c80 <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001838:	22da      	movs	r2, #218	@ 0xda
 800183a:	2100      	movs	r1, #0
 800183c:	2078      	movs	r0, #120	@ 0x78
 800183e:	f000 fa1f 	bl	8001c80 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x02);
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x12);
 8001842:	2212      	movs	r2, #18
 8001844:	2100      	movs	r1, #0
 8001846:	2078      	movs	r0, #120	@ 0x78
 8001848:	f000 fa1a 	bl	8001c80 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x12);
#endif

	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800184c:	22db      	movs	r2, #219	@ 0xdb
 800184e:	2100      	movs	r1, #0
 8001850:	2078      	movs	r0, #120	@ 0x78
 8001852:	f000 fa15 	bl	8001c80 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001856:	2220      	movs	r2, #32
 8001858:	2100      	movs	r1, #0
 800185a:	2078      	movs	r0, #120	@ 0x78
 800185c:	f000 fa10 	bl	8001c80 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001860:	228d      	movs	r2, #141	@ 0x8d
 8001862:	2100      	movs	r1, #0
 8001864:	2078      	movs	r0, #120	@ 0x78
 8001866:	f000 fa0b 	bl	8001c80 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800186a:	2214      	movs	r2, #20
 800186c:	2100      	movs	r1, #0
 800186e:	2078      	movs	r0, #120	@ 0x78
 8001870:	f000 fa06 	bl	8001c80 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001874:	22af      	movs	r2, #175	@ 0xaf
 8001876:	2100      	movs	r1, #0
 8001878:	2078      	movs	r0, #120	@ 0x78
 800187a:	f000 fa01 	bl	8001c80 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800187e:	222e      	movs	r2, #46	@ 0x2e
 8001880:	2100      	movs	r1, #0
 8001882:	2078      	movs	r0, #120	@ 0x78
 8001884:	f000 f9fc 	bl	8001c80 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001888:	2000      	movs	r0, #0
 800188a:	f000 f843 	bl	8001914 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800188e:	f000 f813 	bl	80018b8 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001892:	4b08      	ldr	r3, [pc, #32]	@ (80018b4 <SSD1306_Init+0x184>)
 8001894:	2200      	movs	r2, #0
 8001896:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001898:	4b06      	ldr	r3, [pc, #24]	@ (80018b4 <SSD1306_Init+0x184>)
 800189a:	2200      	movs	r2, #0
 800189c:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800189e:	4b05      	ldr	r3, [pc, #20]	@ (80018b4 <SSD1306_Init+0x184>)
 80018a0:	2201      	movs	r2, #1
 80018a2:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80018a4:	2301      	movs	r3, #1
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20000204 	.word	0x20000204
 80018b4:	200006b8 	.word	0x200006b8

080018b8 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80018be:	2300      	movs	r3, #0
 80018c0:	71fb      	strb	r3, [r7, #7]
 80018c2:	e01d      	b.n	8001900 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80018c4:	79fb      	ldrb	r3, [r7, #7]
 80018c6:	3b50      	subs	r3, #80	@ 0x50
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	461a      	mov	r2, r3
 80018cc:	2100      	movs	r1, #0
 80018ce:	2078      	movs	r0, #120	@ 0x78
 80018d0:	f000 f9d6 	bl	8001c80 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80018d4:	2200      	movs	r2, #0
 80018d6:	2100      	movs	r1, #0
 80018d8:	2078      	movs	r0, #120	@ 0x78
 80018da:	f000 f9d1 	bl	8001c80 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80018de:	2210      	movs	r2, #16
 80018e0:	2100      	movs	r1, #0
 80018e2:	2078      	movs	r0, #120	@ 0x78
 80018e4:	f000 f9cc 	bl	8001c80 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80018e8:	79fb      	ldrb	r3, [r7, #7]
 80018ea:	01db      	lsls	r3, r3, #7
 80018ec:	4a08      	ldr	r2, [pc, #32]	@ (8001910 <SSD1306_UpdateScreen+0x58>)
 80018ee:	441a      	add	r2, r3
 80018f0:	2380      	movs	r3, #128	@ 0x80
 80018f2:	2140      	movs	r1, #64	@ 0x40
 80018f4:	2078      	movs	r0, #120	@ 0x78
 80018f6:	f000 f95d 	bl	8001bb4 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80018fa:	79fb      	ldrb	r3, [r7, #7]
 80018fc:	3301      	adds	r3, #1
 80018fe:	71fb      	strb	r3, [r7, #7]
 8001900:	79fb      	ldrb	r3, [r7, #7]
 8001902:	2b07      	cmp	r3, #7
 8001904:	d9de      	bls.n	80018c4 <SSD1306_UpdateScreen+0xc>
	}
}
 8001906:	bf00      	nop
 8001908:	bf00      	nop
 800190a:	3708      	adds	r7, #8
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	200002b8 	.word	0x200002b8

08001914 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800191e:	79fb      	ldrb	r3, [r7, #7]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d101      	bne.n	8001928 <SSD1306_Fill+0x14>
 8001924:	2300      	movs	r3, #0
 8001926:	e000      	b.n	800192a <SSD1306_Fill+0x16>
 8001928:	23ff      	movs	r3, #255	@ 0xff
 800192a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800192e:	4619      	mov	r1, r3
 8001930:	4803      	ldr	r0, [pc, #12]	@ (8001940 <SSD1306_Fill+0x2c>)
 8001932:	f007 fd6f 	bl	8009414 <memset>
}
 8001936:	bf00      	nop
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	200002b8 	.word	0x200002b8

08001944 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	80fb      	strh	r3, [r7, #6]
 800194e:	460b      	mov	r3, r1
 8001950:	80bb      	strh	r3, [r7, #4]
 8001952:	4613      	mov	r3, r2
 8001954:	70fb      	strb	r3, [r7, #3]
	if (
 8001956:	88fb      	ldrh	r3, [r7, #6]
 8001958:	2b7f      	cmp	r3, #127	@ 0x7f
 800195a:	d848      	bhi.n	80019ee <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 800195c:	88bb      	ldrh	r3, [r7, #4]
 800195e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001960:	d845      	bhi.n	80019ee <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001962:	4b26      	ldr	r3, [pc, #152]	@ (80019fc <SSD1306_DrawPixel+0xb8>)
 8001964:	791b      	ldrb	r3, [r3, #4]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d006      	beq.n	8001978 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800196a:	78fb      	ldrb	r3, [r7, #3]
 800196c:	2b00      	cmp	r3, #0
 800196e:	bf0c      	ite	eq
 8001970:	2301      	moveq	r3, #1
 8001972:	2300      	movne	r3, #0
 8001974:	b2db      	uxtb	r3, r3
 8001976:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001978:	78fb      	ldrb	r3, [r7, #3]
 800197a:	2b01      	cmp	r3, #1
 800197c:	d11a      	bne.n	80019b4 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800197e:	88fa      	ldrh	r2, [r7, #6]
 8001980:	88bb      	ldrh	r3, [r7, #4]
 8001982:	08db      	lsrs	r3, r3, #3
 8001984:	b298      	uxth	r0, r3
 8001986:	4603      	mov	r3, r0
 8001988:	01db      	lsls	r3, r3, #7
 800198a:	4413      	add	r3, r2
 800198c:	4a1c      	ldr	r2, [pc, #112]	@ (8001a00 <SSD1306_DrawPixel+0xbc>)
 800198e:	5cd3      	ldrb	r3, [r2, r3]
 8001990:	b25a      	sxtb	r2, r3
 8001992:	88bb      	ldrh	r3, [r7, #4]
 8001994:	f003 0307 	and.w	r3, r3, #7
 8001998:	2101      	movs	r1, #1
 800199a:	fa01 f303 	lsl.w	r3, r1, r3
 800199e:	b25b      	sxtb	r3, r3
 80019a0:	4313      	orrs	r3, r2
 80019a2:	b259      	sxtb	r1, r3
 80019a4:	88fa      	ldrh	r2, [r7, #6]
 80019a6:	4603      	mov	r3, r0
 80019a8:	01db      	lsls	r3, r3, #7
 80019aa:	4413      	add	r3, r2
 80019ac:	b2c9      	uxtb	r1, r1
 80019ae:	4a14      	ldr	r2, [pc, #80]	@ (8001a00 <SSD1306_DrawPixel+0xbc>)
 80019b0:	54d1      	strb	r1, [r2, r3]
 80019b2:	e01d      	b.n	80019f0 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80019b4:	88fa      	ldrh	r2, [r7, #6]
 80019b6:	88bb      	ldrh	r3, [r7, #4]
 80019b8:	08db      	lsrs	r3, r3, #3
 80019ba:	b298      	uxth	r0, r3
 80019bc:	4603      	mov	r3, r0
 80019be:	01db      	lsls	r3, r3, #7
 80019c0:	4413      	add	r3, r2
 80019c2:	4a0f      	ldr	r2, [pc, #60]	@ (8001a00 <SSD1306_DrawPixel+0xbc>)
 80019c4:	5cd3      	ldrb	r3, [r2, r3]
 80019c6:	b25a      	sxtb	r2, r3
 80019c8:	88bb      	ldrh	r3, [r7, #4]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	2101      	movs	r1, #1
 80019d0:	fa01 f303 	lsl.w	r3, r1, r3
 80019d4:	b25b      	sxtb	r3, r3
 80019d6:	43db      	mvns	r3, r3
 80019d8:	b25b      	sxtb	r3, r3
 80019da:	4013      	ands	r3, r2
 80019dc:	b259      	sxtb	r1, r3
 80019de:	88fa      	ldrh	r2, [r7, #6]
 80019e0:	4603      	mov	r3, r0
 80019e2:	01db      	lsls	r3, r3, #7
 80019e4:	4413      	add	r3, r2
 80019e6:	b2c9      	uxtb	r1, r1
 80019e8:	4a05      	ldr	r2, [pc, #20]	@ (8001a00 <SSD1306_DrawPixel+0xbc>)
 80019ea:	54d1      	strb	r1, [r2, r3]
 80019ec:	e000      	b.n	80019f0 <SSD1306_DrawPixel+0xac>
		return;
 80019ee:	bf00      	nop
	}
}
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	200006b8 	.word	0x200006b8
 8001a00:	200002b8 	.word	0x200002b8

08001a04 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	460a      	mov	r2, r1
 8001a0e:	80fb      	strh	r3, [r7, #6]
 8001a10:	4613      	mov	r3, r2
 8001a12:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001a14:	4a05      	ldr	r2, [pc, #20]	@ (8001a2c <SSD1306_GotoXY+0x28>)
 8001a16:	88fb      	ldrh	r3, [r7, #6]
 8001a18:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001a1a:	4a04      	ldr	r2, [pc, #16]	@ (8001a2c <SSD1306_GotoXY+0x28>)
 8001a1c:	88bb      	ldrh	r3, [r7, #4]
 8001a1e:	8053      	strh	r3, [r2, #2]
}
 8001a20:	bf00      	nop
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	200006b8 	.word	0x200006b8

08001a30 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b086      	sub	sp, #24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	6039      	str	r1, [r7, #0]
 8001a3a:	71fb      	strb	r3, [r7, #7]
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001a40:	4b39      	ldr	r3, [pc, #228]	@ (8001b28 <SSD1306_Putc+0xf8>)
 8001a42:	881b      	ldrh	r3, [r3, #0]
 8001a44:	461a      	mov	r2, r3
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	4413      	add	r3, r2
	if (
 8001a4c:	2b7f      	cmp	r3, #127	@ 0x7f
 8001a4e:	dc07      	bgt.n	8001a60 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001a50:	4b35      	ldr	r3, [pc, #212]	@ (8001b28 <SSD1306_Putc+0xf8>)
 8001a52:	885b      	ldrh	r3, [r3, #2]
 8001a54:	461a      	mov	r2, r3
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	785b      	ldrb	r3, [r3, #1]
 8001a5a:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001a5c:	2b3f      	cmp	r3, #63	@ 0x3f
 8001a5e:	dd01      	ble.n	8001a64 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001a60:	2300      	movs	r3, #0
 8001a62:	e05d      	b.n	8001b20 <SSD1306_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001a64:	2300      	movs	r3, #0
 8001a66:	617b      	str	r3, [r7, #20]
 8001a68:	e04b      	b.n	8001b02 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685a      	ldr	r2, [r3, #4]
 8001a6e:	79fb      	ldrb	r3, [r7, #7]
 8001a70:	3b20      	subs	r3, #32
 8001a72:	6839      	ldr	r1, [r7, #0]
 8001a74:	7849      	ldrb	r1, [r1, #1]
 8001a76:	fb01 f303 	mul.w	r3, r1, r3
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	440b      	add	r3, r1
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	4413      	add	r3, r2
 8001a84:	881b      	ldrh	r3, [r3, #0]
 8001a86:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001a88:	2300      	movs	r3, #0
 8001a8a:	613b      	str	r3, [r7, #16]
 8001a8c:	e030      	b.n	8001af0 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001a8e:	68fa      	ldr	r2, [r7, #12]
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d010      	beq.n	8001ac0 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001a9e:	4b22      	ldr	r3, [pc, #136]	@ (8001b28 <SSD1306_Putc+0xf8>)
 8001aa0:	881a      	ldrh	r2, [r3, #0]
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	4413      	add	r3, r2
 8001aa8:	b298      	uxth	r0, r3
 8001aaa:	4b1f      	ldr	r3, [pc, #124]	@ (8001b28 <SSD1306_Putc+0xf8>)
 8001aac:	885a      	ldrh	r2, [r3, #2]
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	4413      	add	r3, r2
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	79ba      	ldrb	r2, [r7, #6]
 8001ab8:	4619      	mov	r1, r3
 8001aba:	f7ff ff43 	bl	8001944 <SSD1306_DrawPixel>
 8001abe:	e014      	b.n	8001aea <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001ac0:	4b19      	ldr	r3, [pc, #100]	@ (8001b28 <SSD1306_Putc+0xf8>)
 8001ac2:	881a      	ldrh	r2, [r3, #0]
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	4413      	add	r3, r2
 8001aca:	b298      	uxth	r0, r3
 8001acc:	4b16      	ldr	r3, [pc, #88]	@ (8001b28 <SSD1306_Putc+0xf8>)
 8001ace:	885a      	ldrh	r2, [r3, #2]
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	4413      	add	r3, r2
 8001ad6:	b299      	uxth	r1, r3
 8001ad8:	79bb      	ldrb	r3, [r7, #6]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	bf0c      	ite	eq
 8001ade:	2301      	moveq	r3, #1
 8001ae0:	2300      	movne	r3, #0
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	f7ff ff2d 	bl	8001944 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	3301      	adds	r3, #1
 8001aee:	613b      	str	r3, [r7, #16]
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	461a      	mov	r2, r3
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d3c8      	bcc.n	8001a8e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	3301      	adds	r3, #1
 8001b00:	617b      	str	r3, [r7, #20]
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	785b      	ldrb	r3, [r3, #1]
 8001b06:	461a      	mov	r2, r3
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d3ad      	bcc.n	8001a6a <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001b0e:	4b06      	ldr	r3, [pc, #24]	@ (8001b28 <SSD1306_Putc+0xf8>)
 8001b10:	881b      	ldrh	r3, [r3, #0]
 8001b12:	683a      	ldr	r2, [r7, #0]
 8001b14:	7812      	ldrb	r2, [r2, #0]
 8001b16:	4413      	add	r3, r2
 8001b18:	b29a      	uxth	r2, r3
 8001b1a:	4b03      	ldr	r3, [pc, #12]	@ (8001b28 <SSD1306_Putc+0xf8>)
 8001b1c:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001b1e:	79fb      	ldrb	r3, [r7, #7]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3718      	adds	r7, #24
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	200006b8 	.word	0x200006b8

08001b2c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	4613      	mov	r3, r2
 8001b38:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001b3a:	e012      	b.n	8001b62 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	79fa      	ldrb	r2, [r7, #7]
 8001b42:	68b9      	ldr	r1, [r7, #8]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff ff73 	bl	8001a30 <SSD1306_Putc>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d002      	beq.n	8001b5c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	e008      	b.n	8001b6e <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	3301      	adds	r3, #1
 8001b60:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d1e8      	bne.n	8001b3c <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	781b      	ldrb	r3, [r3, #0]
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3710      	adds	r7, #16
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}

08001b76 <SSD1306_Clear>:
        }
    }
}

void SSD1306_Clear (void)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001b7a:	2000      	movs	r0, #0
 8001b7c:	f7ff feca 	bl	8001914 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001b80:	f7ff fe9a 	bl	80018b8 <SSD1306_UpdateScreen>
}
 8001b84:	bf00      	nop
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001b8e:	4b08      	ldr	r3, [pc, #32]	@ (8001bb0 <ssd1306_I2C_Init+0x28>)
 8001b90:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001b92:	e002      	b.n	8001b9a <ssd1306_I2C_Init+0x12>
		p--;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	3b01      	subs	r3, #1
 8001b98:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d1f9      	bne.n	8001b94 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001ba0:	bf00      	nop
 8001ba2:	bf00      	nop
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	0003d090 	.word	0x0003d090

08001bb4 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001bb4:	b590      	push	{r4, r7, lr}
 8001bb6:	b0c7      	sub	sp, #284	@ 0x11c
 8001bb8:	af02      	add	r7, sp, #8
 8001bba:	4604      	mov	r4, r0
 8001bbc:	4608      	mov	r0, r1
 8001bbe:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8001bc2:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8001bc6:	600a      	str	r2, [r1, #0]
 8001bc8:	4619      	mov	r1, r3
 8001bca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001bce:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001bd2:	4622      	mov	r2, r4
 8001bd4:	701a      	strb	r2, [r3, #0]
 8001bd6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001bda:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001bde:	4602      	mov	r2, r0
 8001be0:	701a      	strb	r2, [r3, #0]
 8001be2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001be6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001bea:	460a      	mov	r2, r1
 8001bec:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001bee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001bf2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001bf6:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001bfa:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8001bfe:	7812      	ldrb	r2, [r2, #0]
 8001c00:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001c02:	2300      	movs	r3, #0
 8001c04:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001c08:	e015      	b.n	8001c36 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001c0a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001c0e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001c12:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001c16:	6812      	ldr	r2, [r2, #0]
 8001c18:	441a      	add	r2, r3
 8001c1a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001c1e:	3301      	adds	r3, #1
 8001c20:	7811      	ldrb	r1, [r2, #0]
 8001c22:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001c26:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8001c2a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001c2c:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001c30:	3301      	adds	r3, #1
 8001c32:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001c36:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001c40:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001c44:	8812      	ldrh	r2, [r2, #0]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d8df      	bhi.n	8001c0a <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, count+1, 10);
 8001c4a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001c4e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	b299      	uxth	r1, r3
 8001c56:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001c5a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001c5e:	881b      	ldrh	r3, [r3, #0]
 8001c60:	3301      	adds	r3, #1
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	f107 020c 	add.w	r2, r7, #12
 8001c68:	200a      	movs	r0, #10
 8001c6a:	9000      	str	r0, [sp, #0]
 8001c6c:	4803      	ldr	r0, [pc, #12]	@ (8001c7c <ssd1306_I2C_WriteMulti+0xc8>)
 8001c6e:	f000 feb1 	bl	80029d4 <HAL_I2C_Master_Transmit>
}
 8001c72:	bf00      	nop
 8001c74:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd90      	pop	{r4, r7, pc}
 8001c7c:	20000204 	.word	0x20000204

08001c80 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b086      	sub	sp, #24
 8001c84:	af02      	add	r7, sp, #8
 8001c86:	4603      	mov	r3, r0
 8001c88:	71fb      	strb	r3, [r7, #7]
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	71bb      	strb	r3, [r7, #6]
 8001c8e:	4613      	mov	r3, r2
 8001c90:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001c92:	79bb      	ldrb	r3, [r7, #6]
 8001c94:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001c96:	797b      	ldrb	r3, [r7, #5]
 8001c98:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, 2, 10);
 8001c9a:	79fb      	ldrb	r3, [r7, #7]
 8001c9c:	b299      	uxth	r1, r3
 8001c9e:	f107 020c 	add.w	r2, r7, #12
 8001ca2:	230a      	movs	r3, #10
 8001ca4:	9300      	str	r3, [sp, #0]
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	4803      	ldr	r0, [pc, #12]	@ (8001cb8 <ssd1306_I2C_Write+0x38>)
 8001caa:	f000 fe93 	bl	80029d4 <HAL_I2C_Master_Transmit>
}
 8001cae:	bf00      	nop
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	20000204 	.word	0x20000204

08001cbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	607b      	str	r3, [r7, #4]
 8001cc6:	4b12      	ldr	r3, [pc, #72]	@ (8001d10 <HAL_MspInit+0x54>)
 8001cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cca:	4a11      	ldr	r2, [pc, #68]	@ (8001d10 <HAL_MspInit+0x54>)
 8001ccc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cd2:	4b0f      	ldr	r3, [pc, #60]	@ (8001d10 <HAL_MspInit+0x54>)
 8001cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cda:	607b      	str	r3, [r7, #4]
 8001cdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	603b      	str	r3, [r7, #0]
 8001ce2:	4b0b      	ldr	r3, [pc, #44]	@ (8001d10 <HAL_MspInit+0x54>)
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce6:	4a0a      	ldr	r2, [pc, #40]	@ (8001d10 <HAL_MspInit+0x54>)
 8001ce8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cec:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cee:	4b08      	ldr	r3, [pc, #32]	@ (8001d10 <HAL_MspInit+0x54>)
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cf6:	603b      	str	r3, [r7, #0]
 8001cf8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	210f      	movs	r1, #15
 8001cfe:	f06f 0001 	mvn.w	r0, #1
 8001d02:	f000 fb33 	bl	800236c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d06:	bf00      	nop
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	40023800 	.word	0x40023800

08001d14 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b08a      	sub	sp, #40	@ 0x28
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d1c:	f107 0314 	add.w	r3, r7, #20
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	605a      	str	r2, [r3, #4]
 8001d26:	609a      	str	r2, [r3, #8]
 8001d28:	60da      	str	r2, [r3, #12]
 8001d2a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a19      	ldr	r2, [pc, #100]	@ (8001d98 <HAL_I2C_MspInit+0x84>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d12c      	bne.n	8001d90 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	613b      	str	r3, [r7, #16]
 8001d3a:	4b18      	ldr	r3, [pc, #96]	@ (8001d9c <HAL_I2C_MspInit+0x88>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3e:	4a17      	ldr	r2, [pc, #92]	@ (8001d9c <HAL_I2C_MspInit+0x88>)
 8001d40:	f043 0302 	orr.w	r3, r3, #2
 8001d44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d46:	4b15      	ldr	r3, [pc, #84]	@ (8001d9c <HAL_I2C_MspInit+0x88>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	613b      	str	r3, [r7, #16]
 8001d50:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d52:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001d56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d58:	2312      	movs	r3, #18
 8001d5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d60:	2303      	movs	r3, #3
 8001d62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d64:	2304      	movs	r3, #4
 8001d66:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d68:	f107 0314 	add.w	r3, r7, #20
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	480c      	ldr	r0, [pc, #48]	@ (8001da0 <HAL_I2C_MspInit+0x8c>)
 8001d70:	f000 fb26 	bl	80023c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d74:	2300      	movs	r3, #0
 8001d76:	60fb      	str	r3, [r7, #12]
 8001d78:	4b08      	ldr	r3, [pc, #32]	@ (8001d9c <HAL_I2C_MspInit+0x88>)
 8001d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d7c:	4a07      	ldr	r2, [pc, #28]	@ (8001d9c <HAL_I2C_MspInit+0x88>)
 8001d7e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001d82:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d84:	4b05      	ldr	r3, [pc, #20]	@ (8001d9c <HAL_I2C_MspInit+0x88>)
 8001d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001d90:	bf00      	nop
 8001d92:	3728      	adds	r7, #40	@ 0x28
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40005400 	.word	0x40005400
 8001d9c:	40023800 	.word	0x40023800
 8001da0:	40020400 	.word	0x40020400

08001da4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b08a      	sub	sp, #40	@ 0x28
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dac:	f107 0314 	add.w	r3, r7, #20
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	605a      	str	r2, [r3, #4]
 8001db6:	609a      	str	r2, [r3, #8]
 8001db8:	60da      	str	r2, [r3, #12]
 8001dba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a19      	ldr	r2, [pc, #100]	@ (8001e28 <HAL_UART_MspInit+0x84>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d12b      	bne.n	8001e1e <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	613b      	str	r3, [r7, #16]
 8001dca:	4b18      	ldr	r3, [pc, #96]	@ (8001e2c <HAL_UART_MspInit+0x88>)
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dce:	4a17      	ldr	r2, [pc, #92]	@ (8001e2c <HAL_UART_MspInit+0x88>)
 8001dd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dd6:	4b15      	ldr	r3, [pc, #84]	@ (8001e2c <HAL_UART_MspInit+0x88>)
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dde:	613b      	str	r3, [r7, #16]
 8001de0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	4b11      	ldr	r3, [pc, #68]	@ (8001e2c <HAL_UART_MspInit+0x88>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dea:	4a10      	ldr	r2, [pc, #64]	@ (8001e2c <HAL_UART_MspInit+0x88>)
 8001dec:	f043 0301 	orr.w	r3, r3, #1
 8001df0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001df2:	4b0e      	ldr	r3, [pc, #56]	@ (8001e2c <HAL_UART_MspInit+0x88>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	60fb      	str	r3, [r7, #12]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001dfe:	230c      	movs	r3, #12
 8001e00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e02:	2302      	movs	r3, #2
 8001e04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e06:	2300      	movs	r3, #0
 8001e08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e0e:	2307      	movs	r3, #7
 8001e10:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e12:	f107 0314 	add.w	r3, r7, #20
 8001e16:	4619      	mov	r1, r3
 8001e18:	4805      	ldr	r0, [pc, #20]	@ (8001e30 <HAL_UART_MspInit+0x8c>)
 8001e1a:	f000 fad1 	bl	80023c0 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001e1e:	bf00      	nop
 8001e20:	3728      	adds	r7, #40	@ 0x28
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	40004400 	.word	0x40004400
 8001e2c:	40023800 	.word	0x40023800
 8001e30:	40020000 	.word	0x40020000

08001e34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b08c      	sub	sp, #48	@ 0x30
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001e40:	2300      	movs	r3, #0
 8001e42:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001e44:	2300      	movs	r3, #0
 8001e46:	60bb      	str	r3, [r7, #8]
 8001e48:	4b2e      	ldr	r3, [pc, #184]	@ (8001f04 <HAL_InitTick+0xd0>)
 8001e4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e4c:	4a2d      	ldr	r2, [pc, #180]	@ (8001f04 <HAL_InitTick+0xd0>)
 8001e4e:	f043 0301 	orr.w	r3, r3, #1
 8001e52:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e54:	4b2b      	ldr	r3, [pc, #172]	@ (8001f04 <HAL_InitTick+0xd0>)
 8001e56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e58:	f003 0301 	and.w	r3, r3, #1
 8001e5c:	60bb      	str	r3, [r7, #8]
 8001e5e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e60:	f107 020c 	add.w	r2, r7, #12
 8001e64:	f107 0310 	add.w	r3, r7, #16
 8001e68:	4611      	mov	r1, r2
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f001 feb0 	bl	8003bd0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001e70:	f001 fe9a 	bl	8003ba8 <HAL_RCC_GetPCLK2Freq>
 8001e74:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e78:	4a23      	ldr	r2, [pc, #140]	@ (8001f08 <HAL_InitTick+0xd4>)
 8001e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7e:	0c9b      	lsrs	r3, r3, #18
 8001e80:	3b01      	subs	r3, #1
 8001e82:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001e84:	4b21      	ldr	r3, [pc, #132]	@ (8001f0c <HAL_InitTick+0xd8>)
 8001e86:	4a22      	ldr	r2, [pc, #136]	@ (8001f10 <HAL_InitTick+0xdc>)
 8001e88:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001e8a:	4b20      	ldr	r3, [pc, #128]	@ (8001f0c <HAL_InitTick+0xd8>)
 8001e8c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001e90:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001e92:	4a1e      	ldr	r2, [pc, #120]	@ (8001f0c <HAL_InitTick+0xd8>)
 8001e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e96:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001e98:	4b1c      	ldr	r3, [pc, #112]	@ (8001f0c <HAL_InitTick+0xd8>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e9e:	4b1b      	ldr	r3, [pc, #108]	@ (8001f0c <HAL_InitTick+0xd8>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ea4:	4b19      	ldr	r3, [pc, #100]	@ (8001f0c <HAL_InitTick+0xd8>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001eaa:	4818      	ldr	r0, [pc, #96]	@ (8001f0c <HAL_InitTick+0xd8>)
 8001eac:	f002 fb0a 	bl	80044c4 <HAL_TIM_Base_Init>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001eb6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d11b      	bne.n	8001ef6 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001ebe:	4813      	ldr	r0, [pc, #76]	@ (8001f0c <HAL_InitTick+0xd8>)
 8001ec0:	f002 fb5a 	bl	8004578 <HAL_TIM_Base_Start_IT>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001eca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d111      	bne.n	8001ef6 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001ed2:	2019      	movs	r0, #25
 8001ed4:	f000 fa66 	bl	80023a4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2b0f      	cmp	r3, #15
 8001edc:	d808      	bhi.n	8001ef0 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001ede:	2200      	movs	r2, #0
 8001ee0:	6879      	ldr	r1, [r7, #4]
 8001ee2:	2019      	movs	r0, #25
 8001ee4:	f000 fa42 	bl	800236c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ee8:	4a0a      	ldr	r2, [pc, #40]	@ (8001f14 <HAL_InitTick+0xe0>)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6013      	str	r3, [r2, #0]
 8001eee:	e002      	b.n	8001ef6 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001ef6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3730      	adds	r7, #48	@ 0x30
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	40023800 	.word	0x40023800
 8001f08:	431bde83 	.word	0x431bde83
 8001f0c:	200006c0 	.word	0x200006c0
 8001f10:	40010000 	.word	0x40010000
 8001f14:	20000014 	.word	0x20000014

08001f18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f1c:	bf00      	nop
 8001f1e:	e7fd      	b.n	8001f1c <NMI_Handler+0x4>

08001f20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f24:	bf00      	nop
 8001f26:	e7fd      	b.n	8001f24 <HardFault_Handler+0x4>

08001f28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f2c:	bf00      	nop
 8001f2e:	e7fd      	b.n	8001f2c <MemManage_Handler+0x4>

08001f30 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f34:	bf00      	nop
 8001f36:	e7fd      	b.n	8001f34 <BusFault_Handler+0x4>

08001f38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f3c:	bf00      	nop
 8001f3e:	e7fd      	b.n	8001f3c <UsageFault_Handler+0x4>

08001f40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f44:	bf00      	nop
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
	...

08001f50 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f54:	4802      	ldr	r0, [pc, #8]	@ (8001f60 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001f56:	f002 fb7f 	bl	8004658 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001f5a:	bf00      	nop
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	200006c0 	.word	0x200006c0

08001f64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  return 1;
 8001f68:	2301      	movs	r3, #1
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <_kill>:

int _kill(int pid, int sig)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f7e:	f007 fa51 	bl	8009424 <__errno>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2216      	movs	r2, #22
 8001f86:	601a      	str	r2, [r3, #0]
  return -1;
 8001f88:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3708      	adds	r7, #8
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <_exit>:

void _exit (int status)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f9c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f7ff ffe7 	bl	8001f74 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001fa6:	bf00      	nop
 8001fa8:	e7fd      	b.n	8001fa6 <_exit+0x12>

08001faa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b086      	sub	sp, #24
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	60f8      	str	r0, [r7, #12]
 8001fb2:	60b9      	str	r1, [r7, #8]
 8001fb4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	617b      	str	r3, [r7, #20]
 8001fba:	e00a      	b.n	8001fd2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001fbc:	f3af 8000 	nop.w
 8001fc0:	4601      	mov	r1, r0
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	1c5a      	adds	r2, r3, #1
 8001fc6:	60ba      	str	r2, [r7, #8]
 8001fc8:	b2ca      	uxtb	r2, r1
 8001fca:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	3301      	adds	r3, #1
 8001fd0:	617b      	str	r3, [r7, #20]
 8001fd2:	697a      	ldr	r2, [r7, #20]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	dbf0      	blt.n	8001fbc <_read+0x12>
  }

  return len;
 8001fda:	687b      	ldr	r3, [r7, #4]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3718      	adds	r7, #24
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001fec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800200c:	605a      	str	r2, [r3, #4]
  return 0;
 800200e:	2300      	movs	r3, #0
}
 8002010:	4618      	mov	r0, r3
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <_isatty>:

int _isatty(int file)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002024:	2301      	movs	r3, #1
}
 8002026:	4618      	mov	r0, r3
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr

08002032 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002032:	b480      	push	{r7}
 8002034:	b085      	sub	sp, #20
 8002036:	af00      	add	r7, sp, #0
 8002038:	60f8      	str	r0, [r7, #12]
 800203a:	60b9      	str	r1, [r7, #8]
 800203c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800203e:	2300      	movs	r3, #0
}
 8002040:	4618      	mov	r0, r3
 8002042:	3714      	adds	r7, #20
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002054:	4a14      	ldr	r2, [pc, #80]	@ (80020a8 <_sbrk+0x5c>)
 8002056:	4b15      	ldr	r3, [pc, #84]	@ (80020ac <_sbrk+0x60>)
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002060:	4b13      	ldr	r3, [pc, #76]	@ (80020b0 <_sbrk+0x64>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d102      	bne.n	800206e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002068:	4b11      	ldr	r3, [pc, #68]	@ (80020b0 <_sbrk+0x64>)
 800206a:	4a12      	ldr	r2, [pc, #72]	@ (80020b4 <_sbrk+0x68>)
 800206c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800206e:	4b10      	ldr	r3, [pc, #64]	@ (80020b0 <_sbrk+0x64>)
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4413      	add	r3, r2
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	429a      	cmp	r2, r3
 800207a:	d207      	bcs.n	800208c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800207c:	f007 f9d2 	bl	8009424 <__errno>
 8002080:	4603      	mov	r3, r0
 8002082:	220c      	movs	r2, #12
 8002084:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002086:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800208a:	e009      	b.n	80020a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800208c:	4b08      	ldr	r3, [pc, #32]	@ (80020b0 <_sbrk+0x64>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002092:	4b07      	ldr	r3, [pc, #28]	@ (80020b0 <_sbrk+0x64>)
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4413      	add	r3, r2
 800209a:	4a05      	ldr	r2, [pc, #20]	@ (80020b0 <_sbrk+0x64>)
 800209c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800209e:	68fb      	ldr	r3, [r7, #12]
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3718      	adds	r7, #24
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	20020000 	.word	0x20020000
 80020ac:	00000400 	.word	0x00000400
 80020b0:	20000708 	.word	0x20000708
 80020b4:	200051b0 	.word	0x200051b0

080020b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020bc:	4b06      	ldr	r3, [pc, #24]	@ (80020d8 <SystemInit+0x20>)
 80020be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020c2:	4a05      	ldr	r2, [pc, #20]	@ (80020d8 <SystemInit+0x20>)
 80020c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020cc:	bf00      	nop
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	e000ed00 	.word	0xe000ed00

080020dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80020dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002114 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80020e0:	f7ff ffea 	bl	80020b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020e4:	480c      	ldr	r0, [pc, #48]	@ (8002118 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020e6:	490d      	ldr	r1, [pc, #52]	@ (800211c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020e8:	4a0d      	ldr	r2, [pc, #52]	@ (8002120 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020ec:	e002      	b.n	80020f4 <LoopCopyDataInit>

080020ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020f2:	3304      	adds	r3, #4

080020f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020f8:	d3f9      	bcc.n	80020ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002124 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020fc:	4c0a      	ldr	r4, [pc, #40]	@ (8002128 <LoopFillZerobss+0x22>)
  movs r3, #0
 80020fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002100:	e001      	b.n	8002106 <LoopFillZerobss>

08002102 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002102:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002104:	3204      	adds	r2, #4

08002106 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002106:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002108:	d3fb      	bcc.n	8002102 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800210a:	f007 f991 	bl	8009430 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800210e:	f7fe ff15 	bl	8000f3c <main>
  bx  lr    
 8002112:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002114:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002118:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800211c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002120:	0800c844 	.word	0x0800c844
  ldr r2, =_sbss
 8002124:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002128:	200051ac 	.word	0x200051ac

0800212c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800212c:	e7fe      	b.n	800212c <ADC_IRQHandler>
	...

08002130 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002134:	4b0e      	ldr	r3, [pc, #56]	@ (8002170 <HAL_Init+0x40>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a0d      	ldr	r2, [pc, #52]	@ (8002170 <HAL_Init+0x40>)
 800213a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800213e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002140:	4b0b      	ldr	r3, [pc, #44]	@ (8002170 <HAL_Init+0x40>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a0a      	ldr	r2, [pc, #40]	@ (8002170 <HAL_Init+0x40>)
 8002146:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800214a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800214c:	4b08      	ldr	r3, [pc, #32]	@ (8002170 <HAL_Init+0x40>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a07      	ldr	r2, [pc, #28]	@ (8002170 <HAL_Init+0x40>)
 8002152:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002156:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002158:	2003      	movs	r0, #3
 800215a:	f000 f8fc 	bl	8002356 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800215e:	200f      	movs	r0, #15
 8002160:	f7ff fe68 	bl	8001e34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002164:	f7ff fdaa 	bl	8001cbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	40023c00 	.word	0x40023c00

08002174 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002178:	4b06      	ldr	r3, [pc, #24]	@ (8002194 <HAL_IncTick+0x20>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	461a      	mov	r2, r3
 800217e:	4b06      	ldr	r3, [pc, #24]	@ (8002198 <HAL_IncTick+0x24>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4413      	add	r3, r2
 8002184:	4a04      	ldr	r2, [pc, #16]	@ (8002198 <HAL_IncTick+0x24>)
 8002186:	6013      	str	r3, [r2, #0]
}
 8002188:	bf00      	nop
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	20000018 	.word	0x20000018
 8002198:	2000070c 	.word	0x2000070c

0800219c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  return uwTick;
 80021a0:	4b03      	ldr	r3, [pc, #12]	@ (80021b0 <HAL_GetTick+0x14>)
 80021a2:	681b      	ldr	r3, [r3, #0]
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	2000070c 	.word	0x2000070c

080021b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021bc:	f7ff ffee 	bl	800219c <HAL_GetTick>
 80021c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80021cc:	d005      	beq.n	80021da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021ce:	4b0a      	ldr	r3, [pc, #40]	@ (80021f8 <HAL_Delay+0x44>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	461a      	mov	r2, r3
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	4413      	add	r3, r2
 80021d8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021da:	bf00      	nop
 80021dc:	f7ff ffde 	bl	800219c <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d8f7      	bhi.n	80021dc <HAL_Delay+0x28>
  {
  }
}
 80021ec:	bf00      	nop
 80021ee:	bf00      	nop
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	20000018 	.word	0x20000018

080021fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f003 0307 	and.w	r3, r3, #7
 800220a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800220c:	4b0c      	ldr	r3, [pc, #48]	@ (8002240 <__NVIC_SetPriorityGrouping+0x44>)
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002212:	68ba      	ldr	r2, [r7, #8]
 8002214:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002218:	4013      	ands	r3, r2
 800221a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002224:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002228:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800222c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800222e:	4a04      	ldr	r2, [pc, #16]	@ (8002240 <__NVIC_SetPriorityGrouping+0x44>)
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	60d3      	str	r3, [r2, #12]
}
 8002234:	bf00      	nop
 8002236:	3714      	adds	r7, #20
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr
 8002240:	e000ed00 	.word	0xe000ed00

08002244 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002248:	4b04      	ldr	r3, [pc, #16]	@ (800225c <__NVIC_GetPriorityGrouping+0x18>)
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	0a1b      	lsrs	r3, r3, #8
 800224e:	f003 0307 	and.w	r3, r3, #7
}
 8002252:	4618      	mov	r0, r3
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	e000ed00 	.word	0xe000ed00

08002260 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	4603      	mov	r3, r0
 8002268:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800226a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800226e:	2b00      	cmp	r3, #0
 8002270:	db0b      	blt.n	800228a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002272:	79fb      	ldrb	r3, [r7, #7]
 8002274:	f003 021f 	and.w	r2, r3, #31
 8002278:	4907      	ldr	r1, [pc, #28]	@ (8002298 <__NVIC_EnableIRQ+0x38>)
 800227a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227e:	095b      	lsrs	r3, r3, #5
 8002280:	2001      	movs	r0, #1
 8002282:	fa00 f202 	lsl.w	r2, r0, r2
 8002286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800228a:	bf00      	nop
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	e000e100 	.word	0xe000e100

0800229c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	4603      	mov	r3, r0
 80022a4:	6039      	str	r1, [r7, #0]
 80022a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	db0a      	blt.n	80022c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	b2da      	uxtb	r2, r3
 80022b4:	490c      	ldr	r1, [pc, #48]	@ (80022e8 <__NVIC_SetPriority+0x4c>)
 80022b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ba:	0112      	lsls	r2, r2, #4
 80022bc:	b2d2      	uxtb	r2, r2
 80022be:	440b      	add	r3, r1
 80022c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022c4:	e00a      	b.n	80022dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	b2da      	uxtb	r2, r3
 80022ca:	4908      	ldr	r1, [pc, #32]	@ (80022ec <__NVIC_SetPriority+0x50>)
 80022cc:	79fb      	ldrb	r3, [r7, #7]
 80022ce:	f003 030f 	and.w	r3, r3, #15
 80022d2:	3b04      	subs	r3, #4
 80022d4:	0112      	lsls	r2, r2, #4
 80022d6:	b2d2      	uxtb	r2, r2
 80022d8:	440b      	add	r3, r1
 80022da:	761a      	strb	r2, [r3, #24]
}
 80022dc:	bf00      	nop
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr
 80022e8:	e000e100 	.word	0xe000e100
 80022ec:	e000ed00 	.word	0xe000ed00

080022f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b089      	sub	sp, #36	@ 0x24
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	60f8      	str	r0, [r7, #12]
 80022f8:	60b9      	str	r1, [r7, #8]
 80022fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	f003 0307 	and.w	r3, r3, #7
 8002302:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	f1c3 0307 	rsb	r3, r3, #7
 800230a:	2b04      	cmp	r3, #4
 800230c:	bf28      	it	cs
 800230e:	2304      	movcs	r3, #4
 8002310:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	3304      	adds	r3, #4
 8002316:	2b06      	cmp	r3, #6
 8002318:	d902      	bls.n	8002320 <NVIC_EncodePriority+0x30>
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	3b03      	subs	r3, #3
 800231e:	e000      	b.n	8002322 <NVIC_EncodePriority+0x32>
 8002320:	2300      	movs	r3, #0
 8002322:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002324:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	43da      	mvns	r2, r3
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	401a      	ands	r2, r3
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002338:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	fa01 f303 	lsl.w	r3, r1, r3
 8002342:	43d9      	mvns	r1, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002348:	4313      	orrs	r3, r2
         );
}
 800234a:	4618      	mov	r0, r3
 800234c:	3724      	adds	r7, #36	@ 0x24
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr

08002356 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b082      	sub	sp, #8
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f7ff ff4c 	bl	80021fc <__NVIC_SetPriorityGrouping>
}
 8002364:	bf00      	nop
 8002366:	3708      	adds	r7, #8
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af00      	add	r7, sp, #0
 8002372:	4603      	mov	r3, r0
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
 8002378:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800237a:	2300      	movs	r3, #0
 800237c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800237e:	f7ff ff61 	bl	8002244 <__NVIC_GetPriorityGrouping>
 8002382:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002384:	687a      	ldr	r2, [r7, #4]
 8002386:	68b9      	ldr	r1, [r7, #8]
 8002388:	6978      	ldr	r0, [r7, #20]
 800238a:	f7ff ffb1 	bl	80022f0 <NVIC_EncodePriority>
 800238e:	4602      	mov	r2, r0
 8002390:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002394:	4611      	mov	r1, r2
 8002396:	4618      	mov	r0, r3
 8002398:	f7ff ff80 	bl	800229c <__NVIC_SetPriority>
}
 800239c:	bf00      	nop
 800239e:	3718      	adds	r7, #24
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	4603      	mov	r3, r0
 80023ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7ff ff54 	bl	8002260 <__NVIC_EnableIRQ>
}
 80023b8:	bf00      	nop
 80023ba:	3708      	adds	r7, #8
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b089      	sub	sp, #36	@ 0x24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023ca:	2300      	movs	r3, #0
 80023cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023ce:	2300      	movs	r3, #0
 80023d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023d2:	2300      	movs	r3, #0
 80023d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023d6:	2300      	movs	r3, #0
 80023d8:	61fb      	str	r3, [r7, #28]
 80023da:	e165      	b.n	80026a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023dc:	2201      	movs	r2, #1
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	697a      	ldr	r2, [r7, #20]
 80023ec:	4013      	ands	r3, r2
 80023ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023f0:	693a      	ldr	r2, [r7, #16]
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	f040 8154 	bne.w	80026a2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f003 0303 	and.w	r3, r3, #3
 8002402:	2b01      	cmp	r3, #1
 8002404:	d005      	beq.n	8002412 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800240e:	2b02      	cmp	r3, #2
 8002410:	d130      	bne.n	8002474 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	2203      	movs	r2, #3
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	43db      	mvns	r3, r3
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	4013      	ands	r3, r2
 8002428:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	68da      	ldr	r2, [r3, #12]
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	fa02 f303 	lsl.w	r3, r2, r3
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	4313      	orrs	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002448:	2201      	movs	r2, #1
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	43db      	mvns	r3, r3
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	4013      	ands	r3, r2
 8002456:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	091b      	lsrs	r3, r3, #4
 800245e:	f003 0201 	and.w	r2, r3, #1
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	4313      	orrs	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f003 0303 	and.w	r3, r3, #3
 800247c:	2b03      	cmp	r3, #3
 800247e:	d017      	beq.n	80024b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	2203      	movs	r2, #3
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	43db      	mvns	r3, r3
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	4013      	ands	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	689a      	ldr	r2, [r3, #8]
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f003 0303 	and.w	r3, r3, #3
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d123      	bne.n	8002504 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	08da      	lsrs	r2, r3, #3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	3208      	adds	r2, #8
 80024c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	f003 0307 	and.w	r3, r3, #7
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	220f      	movs	r2, #15
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	43db      	mvns	r3, r3
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	4013      	ands	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	691a      	ldr	r2, [r3, #16]
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	f003 0307 	and.w	r3, r3, #7
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	08da      	lsrs	r2, r3, #3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	3208      	adds	r2, #8
 80024fe:	69b9      	ldr	r1, [r7, #24]
 8002500:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	2203      	movs	r2, #3
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	43db      	mvns	r3, r3
 8002516:	69ba      	ldr	r2, [r7, #24]
 8002518:	4013      	ands	r3, r2
 800251a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f003 0203 	and.w	r2, r3, #3
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	4313      	orrs	r3, r2
 8002530:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002540:	2b00      	cmp	r3, #0
 8002542:	f000 80ae 	beq.w	80026a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002546:	2300      	movs	r3, #0
 8002548:	60fb      	str	r3, [r7, #12]
 800254a:	4b5d      	ldr	r3, [pc, #372]	@ (80026c0 <HAL_GPIO_Init+0x300>)
 800254c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800254e:	4a5c      	ldr	r2, [pc, #368]	@ (80026c0 <HAL_GPIO_Init+0x300>)
 8002550:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002554:	6453      	str	r3, [r2, #68]	@ 0x44
 8002556:	4b5a      	ldr	r3, [pc, #360]	@ (80026c0 <HAL_GPIO_Init+0x300>)
 8002558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800255a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800255e:	60fb      	str	r3, [r7, #12]
 8002560:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002562:	4a58      	ldr	r2, [pc, #352]	@ (80026c4 <HAL_GPIO_Init+0x304>)
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	089b      	lsrs	r3, r3, #2
 8002568:	3302      	adds	r3, #2
 800256a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800256e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	f003 0303 	and.w	r3, r3, #3
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	220f      	movs	r2, #15
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	43db      	mvns	r3, r3
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	4013      	ands	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a4f      	ldr	r2, [pc, #316]	@ (80026c8 <HAL_GPIO_Init+0x308>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d025      	beq.n	80025da <HAL_GPIO_Init+0x21a>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a4e      	ldr	r2, [pc, #312]	@ (80026cc <HAL_GPIO_Init+0x30c>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d01f      	beq.n	80025d6 <HAL_GPIO_Init+0x216>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a4d      	ldr	r2, [pc, #308]	@ (80026d0 <HAL_GPIO_Init+0x310>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d019      	beq.n	80025d2 <HAL_GPIO_Init+0x212>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	4a4c      	ldr	r2, [pc, #304]	@ (80026d4 <HAL_GPIO_Init+0x314>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d013      	beq.n	80025ce <HAL_GPIO_Init+0x20e>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4a4b      	ldr	r2, [pc, #300]	@ (80026d8 <HAL_GPIO_Init+0x318>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d00d      	beq.n	80025ca <HAL_GPIO_Init+0x20a>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4a4a      	ldr	r2, [pc, #296]	@ (80026dc <HAL_GPIO_Init+0x31c>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d007      	beq.n	80025c6 <HAL_GPIO_Init+0x206>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a49      	ldr	r2, [pc, #292]	@ (80026e0 <HAL_GPIO_Init+0x320>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d101      	bne.n	80025c2 <HAL_GPIO_Init+0x202>
 80025be:	2306      	movs	r3, #6
 80025c0:	e00c      	b.n	80025dc <HAL_GPIO_Init+0x21c>
 80025c2:	2307      	movs	r3, #7
 80025c4:	e00a      	b.n	80025dc <HAL_GPIO_Init+0x21c>
 80025c6:	2305      	movs	r3, #5
 80025c8:	e008      	b.n	80025dc <HAL_GPIO_Init+0x21c>
 80025ca:	2304      	movs	r3, #4
 80025cc:	e006      	b.n	80025dc <HAL_GPIO_Init+0x21c>
 80025ce:	2303      	movs	r3, #3
 80025d0:	e004      	b.n	80025dc <HAL_GPIO_Init+0x21c>
 80025d2:	2302      	movs	r3, #2
 80025d4:	e002      	b.n	80025dc <HAL_GPIO_Init+0x21c>
 80025d6:	2301      	movs	r3, #1
 80025d8:	e000      	b.n	80025dc <HAL_GPIO_Init+0x21c>
 80025da:	2300      	movs	r3, #0
 80025dc:	69fa      	ldr	r2, [r7, #28]
 80025de:	f002 0203 	and.w	r2, r2, #3
 80025e2:	0092      	lsls	r2, r2, #2
 80025e4:	4093      	lsls	r3, r2
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025ec:	4935      	ldr	r1, [pc, #212]	@ (80026c4 <HAL_GPIO_Init+0x304>)
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	089b      	lsrs	r3, r3, #2
 80025f2:	3302      	adds	r3, #2
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025fa:	4b3a      	ldr	r3, [pc, #232]	@ (80026e4 <HAL_GPIO_Init+0x324>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	43db      	mvns	r3, r3
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	4013      	ands	r3, r2
 8002608:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d003      	beq.n	800261e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	4313      	orrs	r3, r2
 800261c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800261e:	4a31      	ldr	r2, [pc, #196]	@ (80026e4 <HAL_GPIO_Init+0x324>)
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002624:	4b2f      	ldr	r3, [pc, #188]	@ (80026e4 <HAL_GPIO_Init+0x324>)
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	43db      	mvns	r3, r3
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	4013      	ands	r3, r2
 8002632:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d003      	beq.n	8002648 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002640:	69ba      	ldr	r2, [r7, #24]
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	4313      	orrs	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002648:	4a26      	ldr	r2, [pc, #152]	@ (80026e4 <HAL_GPIO_Init+0x324>)
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800264e:	4b25      	ldr	r3, [pc, #148]	@ (80026e4 <HAL_GPIO_Init+0x324>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	43db      	mvns	r3, r3
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	4013      	ands	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d003      	beq.n	8002672 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	4313      	orrs	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002672:	4a1c      	ldr	r2, [pc, #112]	@ (80026e4 <HAL_GPIO_Init+0x324>)
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002678:	4b1a      	ldr	r3, [pc, #104]	@ (80026e4 <HAL_GPIO_Init+0x324>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	43db      	mvns	r3, r3
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	4013      	ands	r3, r2
 8002686:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d003      	beq.n	800269c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	4313      	orrs	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800269c:	4a11      	ldr	r2, [pc, #68]	@ (80026e4 <HAL_GPIO_Init+0x324>)
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	3301      	adds	r3, #1
 80026a6:	61fb      	str	r3, [r7, #28]
 80026a8:	69fb      	ldr	r3, [r7, #28]
 80026aa:	2b0f      	cmp	r3, #15
 80026ac:	f67f ae96 	bls.w	80023dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026b0:	bf00      	nop
 80026b2:	bf00      	nop
 80026b4:	3724      	adds	r7, #36	@ 0x24
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	40023800 	.word	0x40023800
 80026c4:	40013800 	.word	0x40013800
 80026c8:	40020000 	.word	0x40020000
 80026cc:	40020400 	.word	0x40020400
 80026d0:	40020800 	.word	0x40020800
 80026d4:	40020c00 	.word	0x40020c00
 80026d8:	40021000 	.word	0x40021000
 80026dc:	40021400 	.word	0x40021400
 80026e0:	40021800 	.word	0x40021800
 80026e4:	40013c00 	.word	0x40013c00

080026e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b085      	sub	sp, #20
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	460b      	mov	r3, r1
 80026f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	691a      	ldr	r2, [r3, #16]
 80026f8:	887b      	ldrh	r3, [r7, #2]
 80026fa:	4013      	ands	r3, r2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d002      	beq.n	8002706 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002700:	2301      	movs	r3, #1
 8002702:	73fb      	strb	r3, [r7, #15]
 8002704:	e001      	b.n	800270a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002706:	2300      	movs	r3, #0
 8002708:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800270a:	7bfb      	ldrb	r3, [r7, #15]
}
 800270c:	4618      	mov	r0, r3
 800270e:	3714      	adds	r7, #20
 8002710:	46bd      	mov	sp, r7
 8002712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002716:	4770      	bx	lr

08002718 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	460b      	mov	r3, r1
 8002722:	807b      	strh	r3, [r7, #2]
 8002724:	4613      	mov	r3, r2
 8002726:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002728:	787b      	ldrb	r3, [r7, #1]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d003      	beq.n	8002736 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800272e:	887a      	ldrh	r2, [r7, #2]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002734:	e003      	b.n	800273e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002736:	887b      	ldrh	r3, [r7, #2]
 8002738:	041a      	lsls	r2, r3, #16
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	619a      	str	r2, [r3, #24]
}
 800273e:	bf00      	nop
 8002740:	370c      	adds	r7, #12
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
	...

0800274c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d101      	bne.n	800275e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e12b      	b.n	80029b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b00      	cmp	r3, #0
 8002768:	d106      	bne.n	8002778 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f7ff face 	bl	8001d14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2224      	movs	r2, #36	@ 0x24
 800277c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f022 0201 	bic.w	r2, r2, #1
 800278e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800279e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80027ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80027b0:	f001 f9e6 	bl	8003b80 <HAL_RCC_GetPCLK1Freq>
 80027b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	4a81      	ldr	r2, [pc, #516]	@ (80029c0 <HAL_I2C_Init+0x274>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d807      	bhi.n	80027d0 <HAL_I2C_Init+0x84>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	4a80      	ldr	r2, [pc, #512]	@ (80029c4 <HAL_I2C_Init+0x278>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	bf94      	ite	ls
 80027c8:	2301      	movls	r3, #1
 80027ca:	2300      	movhi	r3, #0
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	e006      	b.n	80027de <HAL_I2C_Init+0x92>
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	4a7d      	ldr	r2, [pc, #500]	@ (80029c8 <HAL_I2C_Init+0x27c>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	bf94      	ite	ls
 80027d8:	2301      	movls	r3, #1
 80027da:	2300      	movhi	r3, #0
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e0e7      	b.n	80029b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	4a78      	ldr	r2, [pc, #480]	@ (80029cc <HAL_I2C_Init+0x280>)
 80027ea:	fba2 2303 	umull	r2, r3, r2, r3
 80027ee:	0c9b      	lsrs	r3, r3, #18
 80027f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68ba      	ldr	r2, [r7, #8]
 8002802:	430a      	orrs	r2, r1
 8002804:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	6a1b      	ldr	r3, [r3, #32]
 800280c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	4a6a      	ldr	r2, [pc, #424]	@ (80029c0 <HAL_I2C_Init+0x274>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d802      	bhi.n	8002820 <HAL_I2C_Init+0xd4>
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	3301      	adds	r3, #1
 800281e:	e009      	b.n	8002834 <HAL_I2C_Init+0xe8>
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002826:	fb02 f303 	mul.w	r3, r2, r3
 800282a:	4a69      	ldr	r2, [pc, #420]	@ (80029d0 <HAL_I2C_Init+0x284>)
 800282c:	fba2 2303 	umull	r2, r3, r2, r3
 8002830:	099b      	lsrs	r3, r3, #6
 8002832:	3301      	adds	r3, #1
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	6812      	ldr	r2, [r2, #0]
 8002838:	430b      	orrs	r3, r1
 800283a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	69db      	ldr	r3, [r3, #28]
 8002842:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002846:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	495c      	ldr	r1, [pc, #368]	@ (80029c0 <HAL_I2C_Init+0x274>)
 8002850:	428b      	cmp	r3, r1
 8002852:	d819      	bhi.n	8002888 <HAL_I2C_Init+0x13c>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	1e59      	subs	r1, r3, #1
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002862:	1c59      	adds	r1, r3, #1
 8002864:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002868:	400b      	ands	r3, r1
 800286a:	2b00      	cmp	r3, #0
 800286c:	d00a      	beq.n	8002884 <HAL_I2C_Init+0x138>
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	1e59      	subs	r1, r3, #1
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	fbb1 f3f3 	udiv	r3, r1, r3
 800287c:	3301      	adds	r3, #1
 800287e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002882:	e051      	b.n	8002928 <HAL_I2C_Init+0x1dc>
 8002884:	2304      	movs	r3, #4
 8002886:	e04f      	b.n	8002928 <HAL_I2C_Init+0x1dc>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d111      	bne.n	80028b4 <HAL_I2C_Init+0x168>
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	1e58      	subs	r0, r3, #1
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6859      	ldr	r1, [r3, #4]
 8002898:	460b      	mov	r3, r1
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	440b      	add	r3, r1
 800289e:	fbb0 f3f3 	udiv	r3, r0, r3
 80028a2:	3301      	adds	r3, #1
 80028a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	bf0c      	ite	eq
 80028ac:	2301      	moveq	r3, #1
 80028ae:	2300      	movne	r3, #0
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	e012      	b.n	80028da <HAL_I2C_Init+0x18e>
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	1e58      	subs	r0, r3, #1
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6859      	ldr	r1, [r3, #4]
 80028bc:	460b      	mov	r3, r1
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	440b      	add	r3, r1
 80028c2:	0099      	lsls	r1, r3, #2
 80028c4:	440b      	add	r3, r1
 80028c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80028ca:	3301      	adds	r3, #1
 80028cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	bf0c      	ite	eq
 80028d4:	2301      	moveq	r3, #1
 80028d6:	2300      	movne	r3, #0
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <HAL_I2C_Init+0x196>
 80028de:	2301      	movs	r3, #1
 80028e0:	e022      	b.n	8002928 <HAL_I2C_Init+0x1dc>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d10e      	bne.n	8002908 <HAL_I2C_Init+0x1bc>
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	1e58      	subs	r0, r3, #1
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6859      	ldr	r1, [r3, #4]
 80028f2:	460b      	mov	r3, r1
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	440b      	add	r3, r1
 80028f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80028fc:	3301      	adds	r3, #1
 80028fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002902:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002906:	e00f      	b.n	8002928 <HAL_I2C_Init+0x1dc>
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	1e58      	subs	r0, r3, #1
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6859      	ldr	r1, [r3, #4]
 8002910:	460b      	mov	r3, r1
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	440b      	add	r3, r1
 8002916:	0099      	lsls	r1, r3, #2
 8002918:	440b      	add	r3, r1
 800291a:	fbb0 f3f3 	udiv	r3, r0, r3
 800291e:	3301      	adds	r3, #1
 8002920:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002924:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002928:	6879      	ldr	r1, [r7, #4]
 800292a:	6809      	ldr	r1, [r1, #0]
 800292c:	4313      	orrs	r3, r2
 800292e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	69da      	ldr	r2, [r3, #28]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	431a      	orrs	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	430a      	orrs	r2, r1
 800294a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002956:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800295a:	687a      	ldr	r2, [r7, #4]
 800295c:	6911      	ldr	r1, [r2, #16]
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	68d2      	ldr	r2, [r2, #12]
 8002962:	4311      	orrs	r1, r2
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	6812      	ldr	r2, [r2, #0]
 8002968:	430b      	orrs	r3, r1
 800296a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	695a      	ldr	r2, [r3, #20]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	699b      	ldr	r3, [r3, #24]
 800297e:	431a      	orrs	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	430a      	orrs	r2, r1
 8002986:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f042 0201 	orr.w	r2, r2, #1
 8002996:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2220      	movs	r2, #32
 80029a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80029b4:	2300      	movs	r3, #0
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3710      	adds	r7, #16
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	000186a0 	.word	0x000186a0
 80029c4:	001e847f 	.word	0x001e847f
 80029c8:	003d08ff 	.word	0x003d08ff
 80029cc:	431bde83 	.word	0x431bde83
 80029d0:	10624dd3 	.word	0x10624dd3

080029d4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b088      	sub	sp, #32
 80029d8:	af02      	add	r7, sp, #8
 80029da:	60f8      	str	r0, [r7, #12]
 80029dc:	607a      	str	r2, [r7, #4]
 80029de:	461a      	mov	r2, r3
 80029e0:	460b      	mov	r3, r1
 80029e2:	817b      	strh	r3, [r7, #10]
 80029e4:	4613      	mov	r3, r2
 80029e6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029e8:	f7ff fbd8 	bl	800219c <HAL_GetTick>
 80029ec:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	2b20      	cmp	r3, #32
 80029f8:	f040 80e0 	bne.w	8002bbc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	9300      	str	r3, [sp, #0]
 8002a00:	2319      	movs	r3, #25
 8002a02:	2201      	movs	r2, #1
 8002a04:	4970      	ldr	r1, [pc, #448]	@ (8002bc8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002a06:	68f8      	ldr	r0, [r7, #12]
 8002a08:	f000 fd92 	bl	8003530 <I2C_WaitOnFlagUntilTimeout>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002a12:	2302      	movs	r3, #2
 8002a14:	e0d3      	b.n	8002bbe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a1c:	2b01      	cmp	r3, #1
 8002a1e:	d101      	bne.n	8002a24 <HAL_I2C_Master_Transmit+0x50>
 8002a20:	2302      	movs	r3, #2
 8002a22:	e0cc      	b.n	8002bbe <HAL_I2C_Master_Transmit+0x1ea>
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d007      	beq.n	8002a4a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f042 0201 	orr.w	r2, r2, #1
 8002a48:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a58:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2221      	movs	r2, #33	@ 0x21
 8002a5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2210      	movs	r2, #16
 8002a66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	893a      	ldrh	r2, [r7, #8]
 8002a7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a80:	b29a      	uxth	r2, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	4a50      	ldr	r2, [pc, #320]	@ (8002bcc <HAL_I2C_Master_Transmit+0x1f8>)
 8002a8a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002a8c:	8979      	ldrh	r1, [r7, #10]
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	6a3a      	ldr	r2, [r7, #32]
 8002a92:	68f8      	ldr	r0, [r7, #12]
 8002a94:	f000 fbfc 	bl	8003290 <I2C_MasterRequestWrite>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e08d      	b.n	8002bbe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	613b      	str	r3, [r7, #16]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	695b      	ldr	r3, [r3, #20]
 8002aac:	613b      	str	r3, [r7, #16]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	613b      	str	r3, [r7, #16]
 8002ab6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002ab8:	e066      	b.n	8002b88 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	6a39      	ldr	r1, [r7, #32]
 8002abe:	68f8      	ldr	r0, [r7, #12]
 8002ac0:	f000 fe50 	bl	8003764 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00d      	beq.n	8002ae6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ace:	2b04      	cmp	r3, #4
 8002ad0:	d107      	bne.n	8002ae2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ae0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e06b      	b.n	8002bbe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aea:	781a      	ldrb	r2, [r3, #0]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002af6:	1c5a      	adds	r2, r3, #1
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	3b01      	subs	r3, #1
 8002b04:	b29a      	uxth	r2, r3
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	b29a      	uxth	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	695b      	ldr	r3, [r3, #20]
 8002b1c:	f003 0304 	and.w	r3, r3, #4
 8002b20:	2b04      	cmp	r3, #4
 8002b22:	d11b      	bne.n	8002b5c <HAL_I2C_Master_Transmit+0x188>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d017      	beq.n	8002b5c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b30:	781a      	ldrb	r2, [r3, #0]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b3c:	1c5a      	adds	r2, r3, #1
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	3b01      	subs	r3, #1
 8002b4a:	b29a      	uxth	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b54:	3b01      	subs	r3, #1
 8002b56:	b29a      	uxth	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b5c:	697a      	ldr	r2, [r7, #20]
 8002b5e:	6a39      	ldr	r1, [r7, #32]
 8002b60:	68f8      	ldr	r0, [r7, #12]
 8002b62:	f000 fe47 	bl	80037f4 <I2C_WaitOnBTFFlagUntilTimeout>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d00d      	beq.n	8002b88 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b70:	2b04      	cmp	r3, #4
 8002b72:	d107      	bne.n	8002b84 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b82:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e01a      	b.n	8002bbe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d194      	bne.n	8002aba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2220      	movs	r2, #32
 8002ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	e000      	b.n	8002bbe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002bbc:	2302      	movs	r3, #2
  }
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3718      	adds	r7, #24
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	00100002 	.word	0x00100002
 8002bcc:	ffff0000 	.word	0xffff0000

08002bd0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b08c      	sub	sp, #48	@ 0x30
 8002bd4:	af02      	add	r7, sp, #8
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	607a      	str	r2, [r7, #4]
 8002bda:	461a      	mov	r2, r3
 8002bdc:	460b      	mov	r3, r1
 8002bde:	817b      	strh	r3, [r7, #10]
 8002be0:	4613      	mov	r3, r2
 8002be2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002be4:	f7ff fada 	bl	800219c <HAL_GetTick>
 8002be8:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	2b20      	cmp	r3, #32
 8002bf4:	f040 8217 	bne.w	8003026 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bfa:	9300      	str	r3, [sp, #0]
 8002bfc:	2319      	movs	r3, #25
 8002bfe:	2201      	movs	r2, #1
 8002c00:	497c      	ldr	r1, [pc, #496]	@ (8002df4 <HAL_I2C_Master_Receive+0x224>)
 8002c02:	68f8      	ldr	r0, [r7, #12]
 8002c04:	f000 fc94 	bl	8003530 <I2C_WaitOnFlagUntilTimeout>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002c0e:	2302      	movs	r3, #2
 8002c10:	e20a      	b.n	8003028 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d101      	bne.n	8002c20 <HAL_I2C_Master_Receive+0x50>
 8002c1c:	2302      	movs	r3, #2
 8002c1e:	e203      	b.n	8003028 <HAL_I2C_Master_Receive+0x458>
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2201      	movs	r2, #1
 8002c24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d007      	beq.n	8002c46 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f042 0201 	orr.w	r2, r2, #1
 8002c44:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c54:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2222      	movs	r2, #34	@ 0x22
 8002c5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2210      	movs	r2, #16
 8002c62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	893a      	ldrh	r2, [r7, #8]
 8002c76:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c7c:	b29a      	uxth	r2, r3
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	4a5c      	ldr	r2, [pc, #368]	@ (8002df8 <HAL_I2C_Master_Receive+0x228>)
 8002c86:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002c88:	8979      	ldrh	r1, [r7, #10]
 8002c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c8e:	68f8      	ldr	r0, [r7, #12]
 8002c90:	f000 fb80 	bl	8003394 <I2C_MasterRequestRead>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e1c4      	b.n	8003028 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d113      	bne.n	8002cce <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	623b      	str	r3, [r7, #32]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	695b      	ldr	r3, [r3, #20]
 8002cb0:	623b      	str	r3, [r7, #32]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	699b      	ldr	r3, [r3, #24]
 8002cb8:	623b      	str	r3, [r7, #32]
 8002cba:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cca:	601a      	str	r2, [r3, #0]
 8002ccc:	e198      	b.n	8003000 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d11b      	bne.n	8002d0e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ce4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	61fb      	str	r3, [r7, #28]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	695b      	ldr	r3, [r3, #20]
 8002cf0:	61fb      	str	r3, [r7, #28]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	699b      	ldr	r3, [r3, #24]
 8002cf8:	61fb      	str	r3, [r7, #28]
 8002cfa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d0a:	601a      	str	r2, [r3, #0]
 8002d0c:	e178      	b.n	8003000 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d11b      	bne.n	8002d4e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d24:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d34:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d36:	2300      	movs	r3, #0
 8002d38:	61bb      	str	r3, [r7, #24]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	695b      	ldr	r3, [r3, #20]
 8002d40:	61bb      	str	r3, [r7, #24]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	699b      	ldr	r3, [r3, #24]
 8002d48:	61bb      	str	r3, [r7, #24]
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	e158      	b.n	8003000 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002d5c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d5e:	2300      	movs	r3, #0
 8002d60:	617b      	str	r3, [r7, #20]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	695b      	ldr	r3, [r3, #20]
 8002d68:	617b      	str	r3, [r7, #20]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	699b      	ldr	r3, [r3, #24]
 8002d70:	617b      	str	r3, [r7, #20]
 8002d72:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002d74:	e144      	b.n	8003000 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d7a:	2b03      	cmp	r3, #3
 8002d7c:	f200 80f1 	bhi.w	8002f62 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d123      	bne.n	8002dd0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d8a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002d8c:	68f8      	ldr	r0, [r7, #12]
 8002d8e:	f000 fd79 	bl	8003884 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d001      	beq.n	8002d9c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e145      	b.n	8003028 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	691a      	ldr	r2, [r3, #16]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da6:	b2d2      	uxtb	r2, r2
 8002da8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dae:	1c5a      	adds	r2, r3, #1
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002db8:	3b01      	subs	r3, #1
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	b29a      	uxth	r2, r3
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002dce:	e117      	b.n	8003000 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d14e      	bne.n	8002e76 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dda:	9300      	str	r3, [sp, #0]
 8002ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dde:	2200      	movs	r2, #0
 8002de0:	4906      	ldr	r1, [pc, #24]	@ (8002dfc <HAL_I2C_Master_Receive+0x22c>)
 8002de2:	68f8      	ldr	r0, [r7, #12]
 8002de4:	f000 fba4 	bl	8003530 <I2C_WaitOnFlagUntilTimeout>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d008      	beq.n	8002e00 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e11a      	b.n	8003028 <HAL_I2C_Master_Receive+0x458>
 8002df2:	bf00      	nop
 8002df4:	00100002 	.word	0x00100002
 8002df8:	ffff0000 	.word	0xffff0000
 8002dfc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	691a      	ldr	r2, [r3, #16]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e1a:	b2d2      	uxtb	r2, r2
 8002e1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e22:	1c5a      	adds	r2, r3, #1
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e2c:	3b01      	subs	r3, #1
 8002e2e:	b29a      	uxth	r2, r3
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	b29a      	uxth	r2, r3
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	691a      	ldr	r2, [r3, #16]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e4c:	b2d2      	uxtb	r2, r2
 8002e4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e54:	1c5a      	adds	r2, r3, #1
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	3b01      	subs	r3, #1
 8002e6e:	b29a      	uxth	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002e74:	e0c4      	b.n	8003000 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e78:	9300      	str	r3, [sp, #0]
 8002e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	496c      	ldr	r1, [pc, #432]	@ (8003030 <HAL_I2C_Master_Receive+0x460>)
 8002e80:	68f8      	ldr	r0, [r7, #12]
 8002e82:	f000 fb55 	bl	8003530 <I2C_WaitOnFlagUntilTimeout>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d001      	beq.n	8002e90 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e0cb      	b.n	8003028 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	691a      	ldr	r2, [r3, #16]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eaa:	b2d2      	uxtb	r2, r2
 8002eac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb2:	1c5a      	adds	r2, r3, #1
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ebc:	3b01      	subs	r3, #1
 8002ebe:	b29a      	uxth	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	b29a      	uxth	r2, r3
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed4:	9300      	str	r3, [sp, #0]
 8002ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ed8:	2200      	movs	r2, #0
 8002eda:	4955      	ldr	r1, [pc, #340]	@ (8003030 <HAL_I2C_Master_Receive+0x460>)
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	f000 fb27 	bl	8003530 <I2C_WaitOnFlagUntilTimeout>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e09d      	b.n	8003028 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002efa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	691a      	ldr	r2, [r3, #16]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f06:	b2d2      	uxtb	r2, r2
 8002f08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f0e:	1c5a      	adds	r2, r3, #1
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f18:	3b01      	subs	r3, #1
 8002f1a:	b29a      	uxth	r2, r3
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	3b01      	subs	r3, #1
 8002f28:	b29a      	uxth	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	691a      	ldr	r2, [r3, #16]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f38:	b2d2      	uxtb	r2, r2
 8002f3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f40:	1c5a      	adds	r2, r3, #1
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	b29a      	uxth	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	3b01      	subs	r3, #1
 8002f5a:	b29a      	uxth	r2, r3
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002f60:	e04e      	b.n	8003000 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f64:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	f000 fc8c 	bl	8003884 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e058      	b.n	8003028 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	691a      	ldr	r2, [r3, #16]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f80:	b2d2      	uxtb	r2, r2
 8002f82:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f88:	1c5a      	adds	r2, r3, #1
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f92:	3b01      	subs	r3, #1
 8002f94:	b29a      	uxth	r2, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	f003 0304 	and.w	r3, r3, #4
 8002fb2:	2b04      	cmp	r3, #4
 8002fb4:	d124      	bne.n	8003000 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fba:	2b03      	cmp	r3, #3
 8002fbc:	d107      	bne.n	8002fce <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fcc:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	691a      	ldr	r2, [r3, #16]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd8:	b2d2      	uxtb	r2, r2
 8002fda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe0:	1c5a      	adds	r2, r3, #1
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fea:	3b01      	subs	r3, #1
 8002fec:	b29a      	uxth	r2, r3
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	3b01      	subs	r3, #1
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003004:	2b00      	cmp	r3, #0
 8003006:	f47f aeb6 	bne.w	8002d76 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2220      	movs	r2, #32
 800300e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003022:	2300      	movs	r3, #0
 8003024:	e000      	b.n	8003028 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003026:	2302      	movs	r3, #2
  }
}
 8003028:	4618      	mov	r0, r3
 800302a:	3728      	adds	r7, #40	@ 0x28
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	00010004 	.word	0x00010004

08003034 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b08a      	sub	sp, #40	@ 0x28
 8003038:	af02      	add	r7, sp, #8
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	607a      	str	r2, [r7, #4]
 800303e:	603b      	str	r3, [r7, #0]
 8003040:	460b      	mov	r3, r1
 8003042:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003044:	f7ff f8aa 	bl	800219c <HAL_GetTick>
 8003048:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800304a:	2300      	movs	r3, #0
 800304c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b20      	cmp	r3, #32
 8003058:	f040 8111 	bne.w	800327e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	9300      	str	r3, [sp, #0]
 8003060:	2319      	movs	r3, #25
 8003062:	2201      	movs	r2, #1
 8003064:	4988      	ldr	r1, [pc, #544]	@ (8003288 <HAL_I2C_IsDeviceReady+0x254>)
 8003066:	68f8      	ldr	r0, [r7, #12]
 8003068:	f000 fa62 	bl	8003530 <I2C_WaitOnFlagUntilTimeout>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003072:	2302      	movs	r3, #2
 8003074:	e104      	b.n	8003280 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800307c:	2b01      	cmp	r3, #1
 800307e:	d101      	bne.n	8003084 <HAL_I2C_IsDeviceReady+0x50>
 8003080:	2302      	movs	r3, #2
 8003082:	e0fd      	b.n	8003280 <HAL_I2C_IsDeviceReady+0x24c>
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0301 	and.w	r3, r3, #1
 8003096:	2b01      	cmp	r3, #1
 8003098:	d007      	beq.n	80030aa <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f042 0201 	orr.w	r2, r2, #1
 80030a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2224      	movs	r2, #36	@ 0x24
 80030be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2200      	movs	r2, #0
 80030c6:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	4a70      	ldr	r2, [pc, #448]	@ (800328c <HAL_I2C_IsDeviceReady+0x258>)
 80030cc:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030dc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	9300      	str	r3, [sp, #0]
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	2200      	movs	r2, #0
 80030e6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80030ea:	68f8      	ldr	r0, [r7, #12]
 80030ec:	f000 fa20 	bl	8003530 <I2C_WaitOnFlagUntilTimeout>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00d      	beq.n	8003112 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003100:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003104:	d103      	bne.n	800310e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800310c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	e0b6      	b.n	8003280 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003112:	897b      	ldrh	r3, [r7, #10]
 8003114:	b2db      	uxtb	r3, r3
 8003116:	461a      	mov	r2, r3
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003120:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003122:	f7ff f83b 	bl	800219c <HAL_GetTick>
 8003126:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	2b02      	cmp	r3, #2
 8003134:	bf0c      	ite	eq
 8003136:	2301      	moveq	r3, #1
 8003138:	2300      	movne	r3, #0
 800313a:	b2db      	uxtb	r3, r3
 800313c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	695b      	ldr	r3, [r3, #20]
 8003144:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003148:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800314c:	bf0c      	ite	eq
 800314e:	2301      	moveq	r3, #1
 8003150:	2300      	movne	r3, #0
 8003152:	b2db      	uxtb	r3, r3
 8003154:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003156:	e025      	b.n	80031a4 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003158:	f7ff f820 	bl	800219c <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	683a      	ldr	r2, [r7, #0]
 8003164:	429a      	cmp	r2, r3
 8003166:	d302      	bcc.n	800316e <HAL_I2C_IsDeviceReady+0x13a>
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d103      	bne.n	8003176 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	22a0      	movs	r2, #160	@ 0xa0
 8003172:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	695b      	ldr	r3, [r3, #20]
 800317c:	f003 0302 	and.w	r3, r3, #2
 8003180:	2b02      	cmp	r3, #2
 8003182:	bf0c      	ite	eq
 8003184:	2301      	moveq	r3, #1
 8003186:	2300      	movne	r3, #0
 8003188:	b2db      	uxtb	r3, r3
 800318a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003196:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800319a:	bf0c      	ite	eq
 800319c:	2301      	moveq	r3, #1
 800319e:	2300      	movne	r3, #0
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	2ba0      	cmp	r3, #160	@ 0xa0
 80031ae:	d005      	beq.n	80031bc <HAL_I2C_IsDeviceReady+0x188>
 80031b0:	7dfb      	ldrb	r3, [r7, #23]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d102      	bne.n	80031bc <HAL_I2C_IsDeviceReady+0x188>
 80031b6:	7dbb      	ldrb	r3, [r7, #22]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d0cd      	beq.n	8003158 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2220      	movs	r2, #32
 80031c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d129      	bne.n	8003226 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031e0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031e2:	2300      	movs	r3, #0
 80031e4:	613b      	str	r3, [r7, #16]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	695b      	ldr	r3, [r3, #20]
 80031ec:	613b      	str	r3, [r7, #16]
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	613b      	str	r3, [r7, #16]
 80031f6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	9300      	str	r3, [sp, #0]
 80031fc:	2319      	movs	r3, #25
 80031fe:	2201      	movs	r2, #1
 8003200:	4921      	ldr	r1, [pc, #132]	@ (8003288 <HAL_I2C_IsDeviceReady+0x254>)
 8003202:	68f8      	ldr	r0, [r7, #12]
 8003204:	f000 f994 	bl	8003530 <I2C_WaitOnFlagUntilTimeout>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d001      	beq.n	8003212 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e036      	b.n	8003280 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2220      	movs	r2, #32
 8003216:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8003222:	2300      	movs	r3, #0
 8003224:	e02c      	b.n	8003280 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003234:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800323e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	9300      	str	r3, [sp, #0]
 8003244:	2319      	movs	r3, #25
 8003246:	2201      	movs	r2, #1
 8003248:	490f      	ldr	r1, [pc, #60]	@ (8003288 <HAL_I2C_IsDeviceReady+0x254>)
 800324a:	68f8      	ldr	r0, [r7, #12]
 800324c:	f000 f970 	bl	8003530 <I2C_WaitOnFlagUntilTimeout>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d001      	beq.n	800325a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e012      	b.n	8003280 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	3301      	adds	r3, #1
 800325e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	429a      	cmp	r2, r3
 8003266:	f4ff af32 	bcc.w	80030ce <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2220      	movs	r2, #32
 800326e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e000      	b.n	8003280 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800327e:	2302      	movs	r3, #2
  }
}
 8003280:	4618      	mov	r0, r3
 8003282:	3720      	adds	r7, #32
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	00100002 	.word	0x00100002
 800328c:	ffff0000 	.word	0xffff0000

08003290 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b088      	sub	sp, #32
 8003294:	af02      	add	r7, sp, #8
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	607a      	str	r2, [r7, #4]
 800329a:	603b      	str	r3, [r7, #0]
 800329c:	460b      	mov	r3, r1
 800329e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032a4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	2b08      	cmp	r3, #8
 80032aa:	d006      	beq.n	80032ba <I2C_MasterRequestWrite+0x2a>
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d003      	beq.n	80032ba <I2C_MasterRequestWrite+0x2a>
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80032b8:	d108      	bne.n	80032cc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032c8:	601a      	str	r2, [r3, #0]
 80032ca:	e00b      	b.n	80032e4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d0:	2b12      	cmp	r3, #18
 80032d2:	d107      	bne.n	80032e4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	9300      	str	r3, [sp, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80032f0:	68f8      	ldr	r0, [r7, #12]
 80032f2:	f000 f91d 	bl	8003530 <I2C_WaitOnFlagUntilTimeout>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d00d      	beq.n	8003318 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003306:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800330a:	d103      	bne.n	8003314 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003312:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e035      	b.n	8003384 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	691b      	ldr	r3, [r3, #16]
 800331c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003320:	d108      	bne.n	8003334 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003322:	897b      	ldrh	r3, [r7, #10]
 8003324:	b2db      	uxtb	r3, r3
 8003326:	461a      	mov	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003330:	611a      	str	r2, [r3, #16]
 8003332:	e01b      	b.n	800336c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003334:	897b      	ldrh	r3, [r7, #10]
 8003336:	11db      	asrs	r3, r3, #7
 8003338:	b2db      	uxtb	r3, r3
 800333a:	f003 0306 	and.w	r3, r3, #6
 800333e:	b2db      	uxtb	r3, r3
 8003340:	f063 030f 	orn	r3, r3, #15
 8003344:	b2da      	uxtb	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	490e      	ldr	r1, [pc, #56]	@ (800338c <I2C_MasterRequestWrite+0xfc>)
 8003352:	68f8      	ldr	r0, [r7, #12]
 8003354:	f000 f966 	bl	8003624 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e010      	b.n	8003384 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003362:	897b      	ldrh	r3, [r7, #10]
 8003364:	b2da      	uxtb	r2, r3
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	4907      	ldr	r1, [pc, #28]	@ (8003390 <I2C_MasterRequestWrite+0x100>)
 8003372:	68f8      	ldr	r0, [r7, #12]
 8003374:	f000 f956 	bl	8003624 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e000      	b.n	8003384 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003382:	2300      	movs	r3, #0
}
 8003384:	4618      	mov	r0, r3
 8003386:	3718      	adds	r7, #24
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	00010008 	.word	0x00010008
 8003390:	00010002 	.word	0x00010002

08003394 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b088      	sub	sp, #32
 8003398:	af02      	add	r7, sp, #8
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	607a      	str	r2, [r7, #4]
 800339e:	603b      	str	r3, [r7, #0]
 80033a0:	460b      	mov	r3, r1
 80033a2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033a8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80033b8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	2b08      	cmp	r3, #8
 80033be:	d006      	beq.n	80033ce <I2C_MasterRequestRead+0x3a>
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d003      	beq.n	80033ce <I2C_MasterRequestRead+0x3a>
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80033cc:	d108      	bne.n	80033e0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033dc:	601a      	str	r2, [r3, #0]
 80033de:	e00b      	b.n	80033f8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033e4:	2b11      	cmp	r3, #17
 80033e6:	d107      	bne.n	80033f8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033f6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	9300      	str	r3, [sp, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003404:	68f8      	ldr	r0, [r7, #12]
 8003406:	f000 f893 	bl	8003530 <I2C_WaitOnFlagUntilTimeout>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d00d      	beq.n	800342c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800341a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800341e:	d103      	bne.n	8003428 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003426:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	e079      	b.n	8003520 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	691b      	ldr	r3, [r3, #16]
 8003430:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003434:	d108      	bne.n	8003448 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003436:	897b      	ldrh	r3, [r7, #10]
 8003438:	b2db      	uxtb	r3, r3
 800343a:	f043 0301 	orr.w	r3, r3, #1
 800343e:	b2da      	uxtb	r2, r3
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	611a      	str	r2, [r3, #16]
 8003446:	e05f      	b.n	8003508 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003448:	897b      	ldrh	r3, [r7, #10]
 800344a:	11db      	asrs	r3, r3, #7
 800344c:	b2db      	uxtb	r3, r3
 800344e:	f003 0306 	and.w	r3, r3, #6
 8003452:	b2db      	uxtb	r3, r3
 8003454:	f063 030f 	orn	r3, r3, #15
 8003458:	b2da      	uxtb	r2, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	4930      	ldr	r1, [pc, #192]	@ (8003528 <I2C_MasterRequestRead+0x194>)
 8003466:	68f8      	ldr	r0, [r7, #12]
 8003468:	f000 f8dc 	bl	8003624 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d001      	beq.n	8003476 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e054      	b.n	8003520 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003476:	897b      	ldrh	r3, [r7, #10]
 8003478:	b2da      	uxtb	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	4929      	ldr	r1, [pc, #164]	@ (800352c <I2C_MasterRequestRead+0x198>)
 8003486:	68f8      	ldr	r0, [r7, #12]
 8003488:	f000 f8cc 	bl	8003624 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d001      	beq.n	8003496 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e044      	b.n	8003520 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003496:	2300      	movs	r3, #0
 8003498:	613b      	str	r3, [r7, #16]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	695b      	ldr	r3, [r3, #20]
 80034a0:	613b      	str	r3, [r7, #16]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	699b      	ldr	r3, [r3, #24]
 80034a8:	613b      	str	r3, [r7, #16]
 80034aa:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80034ba:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	9300      	str	r3, [sp, #0]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80034c8:	68f8      	ldr	r0, [r7, #12]
 80034ca:	f000 f831 	bl	8003530 <I2C_WaitOnFlagUntilTimeout>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d00d      	beq.n	80034f0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034e2:	d103      	bne.n	80034ec <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80034ea:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80034ec:	2303      	movs	r3, #3
 80034ee:	e017      	b.n	8003520 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80034f0:	897b      	ldrh	r3, [r7, #10]
 80034f2:	11db      	asrs	r3, r3, #7
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	f003 0306 	and.w	r3, r3, #6
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	f063 030e 	orn	r3, r3, #14
 8003500:	b2da      	uxtb	r2, r3
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	4907      	ldr	r1, [pc, #28]	@ (800352c <I2C_MasterRequestRead+0x198>)
 800350e:	68f8      	ldr	r0, [r7, #12]
 8003510:	f000 f888 	bl	8003624 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003514:	4603      	mov	r3, r0
 8003516:	2b00      	cmp	r3, #0
 8003518:	d001      	beq.n	800351e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e000      	b.n	8003520 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	3718      	adds	r7, #24
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	00010008 	.word	0x00010008
 800352c:	00010002 	.word	0x00010002

08003530 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	603b      	str	r3, [r7, #0]
 800353c:	4613      	mov	r3, r2
 800353e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003540:	e048      	b.n	80035d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003548:	d044      	beq.n	80035d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800354a:	f7fe fe27 	bl	800219c <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	683a      	ldr	r2, [r7, #0]
 8003556:	429a      	cmp	r2, r3
 8003558:	d302      	bcc.n	8003560 <I2C_WaitOnFlagUntilTimeout+0x30>
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d139      	bne.n	80035d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	0c1b      	lsrs	r3, r3, #16
 8003564:	b2db      	uxtb	r3, r3
 8003566:	2b01      	cmp	r3, #1
 8003568:	d10d      	bne.n	8003586 <I2C_WaitOnFlagUntilTimeout+0x56>
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	695b      	ldr	r3, [r3, #20]
 8003570:	43da      	mvns	r2, r3
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	4013      	ands	r3, r2
 8003576:	b29b      	uxth	r3, r3
 8003578:	2b00      	cmp	r3, #0
 800357a:	bf0c      	ite	eq
 800357c:	2301      	moveq	r3, #1
 800357e:	2300      	movne	r3, #0
 8003580:	b2db      	uxtb	r3, r3
 8003582:	461a      	mov	r2, r3
 8003584:	e00c      	b.n	80035a0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	699b      	ldr	r3, [r3, #24]
 800358c:	43da      	mvns	r2, r3
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	4013      	ands	r3, r2
 8003592:	b29b      	uxth	r3, r3
 8003594:	2b00      	cmp	r3, #0
 8003596:	bf0c      	ite	eq
 8003598:	2301      	moveq	r3, #1
 800359a:	2300      	movne	r3, #0
 800359c:	b2db      	uxtb	r3, r3
 800359e:	461a      	mov	r2, r3
 80035a0:	79fb      	ldrb	r3, [r7, #7]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d116      	bne.n	80035d4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2200      	movs	r2, #0
 80035aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2220      	movs	r2, #32
 80035b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c0:	f043 0220 	orr.w	r2, r3, #32
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e023      	b.n	800361c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	0c1b      	lsrs	r3, r3, #16
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d10d      	bne.n	80035fa <I2C_WaitOnFlagUntilTimeout+0xca>
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	695b      	ldr	r3, [r3, #20]
 80035e4:	43da      	mvns	r2, r3
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	4013      	ands	r3, r2
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	bf0c      	ite	eq
 80035f0:	2301      	moveq	r3, #1
 80035f2:	2300      	movne	r3, #0
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	461a      	mov	r2, r3
 80035f8:	e00c      	b.n	8003614 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	699b      	ldr	r3, [r3, #24]
 8003600:	43da      	mvns	r2, r3
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	4013      	ands	r3, r2
 8003606:	b29b      	uxth	r3, r3
 8003608:	2b00      	cmp	r3, #0
 800360a:	bf0c      	ite	eq
 800360c:	2301      	moveq	r3, #1
 800360e:	2300      	movne	r3, #0
 8003610:	b2db      	uxtb	r3, r3
 8003612:	461a      	mov	r2, r3
 8003614:	79fb      	ldrb	r3, [r7, #7]
 8003616:	429a      	cmp	r2, r3
 8003618:	d093      	beq.n	8003542 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800361a:	2300      	movs	r3, #0
}
 800361c:	4618      	mov	r0, r3
 800361e:	3710      	adds	r7, #16
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	607a      	str	r2, [r7, #4]
 8003630:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003632:	e071      	b.n	8003718 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800363e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003642:	d123      	bne.n	800368c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003652:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800365c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2200      	movs	r2, #0
 8003662:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2220      	movs	r2, #32
 8003668:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003678:	f043 0204 	orr.w	r2, r3, #4
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e067      	b.n	800375c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003692:	d041      	beq.n	8003718 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003694:	f7fe fd82 	bl	800219c <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d302      	bcc.n	80036aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d136      	bne.n	8003718 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	0c1b      	lsrs	r3, r3, #16
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d10c      	bne.n	80036ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	43da      	mvns	r2, r3
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	4013      	ands	r3, r2
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	bf14      	ite	ne
 80036c6:	2301      	movne	r3, #1
 80036c8:	2300      	moveq	r3, #0
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	e00b      	b.n	80036e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	699b      	ldr	r3, [r3, #24]
 80036d4:	43da      	mvns	r2, r3
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	4013      	ands	r3, r2
 80036da:	b29b      	uxth	r3, r3
 80036dc:	2b00      	cmp	r3, #0
 80036de:	bf14      	ite	ne
 80036e0:	2301      	movne	r3, #1
 80036e2:	2300      	moveq	r3, #0
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d016      	beq.n	8003718 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2200      	movs	r2, #0
 80036ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2220      	movs	r2, #32
 80036f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003704:	f043 0220 	orr.w	r2, r3, #32
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e021      	b.n	800375c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	0c1b      	lsrs	r3, r3, #16
 800371c:	b2db      	uxtb	r3, r3
 800371e:	2b01      	cmp	r3, #1
 8003720:	d10c      	bne.n	800373c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	695b      	ldr	r3, [r3, #20]
 8003728:	43da      	mvns	r2, r3
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	4013      	ands	r3, r2
 800372e:	b29b      	uxth	r3, r3
 8003730:	2b00      	cmp	r3, #0
 8003732:	bf14      	ite	ne
 8003734:	2301      	movne	r3, #1
 8003736:	2300      	moveq	r3, #0
 8003738:	b2db      	uxtb	r3, r3
 800373a:	e00b      	b.n	8003754 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	43da      	mvns	r2, r3
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	4013      	ands	r3, r2
 8003748:	b29b      	uxth	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	bf14      	ite	ne
 800374e:	2301      	movne	r3, #1
 8003750:	2300      	moveq	r3, #0
 8003752:	b2db      	uxtb	r3, r3
 8003754:	2b00      	cmp	r3, #0
 8003756:	f47f af6d 	bne.w	8003634 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800375a:	2300      	movs	r3, #0
}
 800375c:	4618      	mov	r0, r3
 800375e:	3710      	adds	r7, #16
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	60b9      	str	r1, [r7, #8]
 800376e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003770:	e034      	b.n	80037dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	f000 f8e3 	bl	800393e <I2C_IsAcknowledgeFailed>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e034      	b.n	80037ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003788:	d028      	beq.n	80037dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800378a:	f7fe fd07 	bl	800219c <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	68ba      	ldr	r2, [r7, #8]
 8003796:	429a      	cmp	r2, r3
 8003798:	d302      	bcc.n	80037a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d11d      	bne.n	80037dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037aa:	2b80      	cmp	r3, #128	@ 0x80
 80037ac:	d016      	beq.n	80037dc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2200      	movs	r2, #0
 80037b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2220      	movs	r2, #32
 80037b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037c8:	f043 0220 	orr.w	r2, r3, #32
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e007      	b.n	80037ec <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	695b      	ldr	r3, [r3, #20]
 80037e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037e6:	2b80      	cmp	r3, #128	@ 0x80
 80037e8:	d1c3      	bne.n	8003772 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3710      	adds	r7, #16
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003800:	e034      	b.n	800386c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003802:	68f8      	ldr	r0, [r7, #12]
 8003804:	f000 f89b 	bl	800393e <I2C_IsAcknowledgeFailed>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d001      	beq.n	8003812 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e034      	b.n	800387c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003818:	d028      	beq.n	800386c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800381a:	f7fe fcbf 	bl	800219c <HAL_GetTick>
 800381e:	4602      	mov	r2, r0
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	68ba      	ldr	r2, [r7, #8]
 8003826:	429a      	cmp	r2, r3
 8003828:	d302      	bcc.n	8003830 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d11d      	bne.n	800386c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	f003 0304 	and.w	r3, r3, #4
 800383a:	2b04      	cmp	r3, #4
 800383c:	d016      	beq.n	800386c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2200      	movs	r2, #0
 8003842:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2220      	movs	r2, #32
 8003848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003858:	f043 0220 	orr.w	r2, r3, #32
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003868:	2301      	movs	r3, #1
 800386a:	e007      	b.n	800387c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	695b      	ldr	r3, [r3, #20]
 8003872:	f003 0304 	and.w	r3, r3, #4
 8003876:	2b04      	cmp	r3, #4
 8003878:	d1c3      	bne.n	8003802 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800387a:	2300      	movs	r3, #0
}
 800387c:	4618      	mov	r0, r3
 800387e:	3710      	adds	r7, #16
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003890:	e049      	b.n	8003926 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	695b      	ldr	r3, [r3, #20]
 8003898:	f003 0310 	and.w	r3, r3, #16
 800389c:	2b10      	cmp	r3, #16
 800389e:	d119      	bne.n	80038d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f06f 0210 	mvn.w	r2, #16
 80038a8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2200      	movs	r2, #0
 80038ae:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2220      	movs	r2, #32
 80038b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e030      	b.n	8003936 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038d4:	f7fe fc62 	bl	800219c <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	68ba      	ldr	r2, [r7, #8]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d302      	bcc.n	80038ea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d11d      	bne.n	8003926 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	695b      	ldr	r3, [r3, #20]
 80038f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038f4:	2b40      	cmp	r3, #64	@ 0x40
 80038f6:	d016      	beq.n	8003926 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2200      	movs	r2, #0
 80038fc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2220      	movs	r2, #32
 8003902:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003912:	f043 0220 	orr.w	r2, r3, #32
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e007      	b.n	8003936 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	695b      	ldr	r3, [r3, #20]
 800392c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003930:	2b40      	cmp	r3, #64	@ 0x40
 8003932:	d1ae      	bne.n	8003892 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3710      	adds	r7, #16
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800393e:	b480      	push	{r7}
 8003940:	b083      	sub	sp, #12
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	695b      	ldr	r3, [r3, #20]
 800394c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003950:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003954:	d11b      	bne.n	800398e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800395e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2220      	movs	r2, #32
 800396a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800397a:	f043 0204 	orr.w	r2, r3, #4
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e000      	b.n	8003990 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d101      	bne.n	80039b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e0cc      	b.n	8003b4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039b0:	4b68      	ldr	r3, [pc, #416]	@ (8003b54 <HAL_RCC_ClockConfig+0x1b8>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 030f 	and.w	r3, r3, #15
 80039b8:	683a      	ldr	r2, [r7, #0]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d90c      	bls.n	80039d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039be:	4b65      	ldr	r3, [pc, #404]	@ (8003b54 <HAL_RCC_ClockConfig+0x1b8>)
 80039c0:	683a      	ldr	r2, [r7, #0]
 80039c2:	b2d2      	uxtb	r2, r2
 80039c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039c6:	4b63      	ldr	r3, [pc, #396]	@ (8003b54 <HAL_RCC_ClockConfig+0x1b8>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 030f 	and.w	r3, r3, #15
 80039ce:	683a      	ldr	r2, [r7, #0]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d001      	beq.n	80039d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e0b8      	b.n	8003b4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0302 	and.w	r3, r3, #2
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d020      	beq.n	8003a26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0304 	and.w	r3, r3, #4
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d005      	beq.n	80039fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039f0:	4b59      	ldr	r3, [pc, #356]	@ (8003b58 <HAL_RCC_ClockConfig+0x1bc>)
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	4a58      	ldr	r2, [pc, #352]	@ (8003b58 <HAL_RCC_ClockConfig+0x1bc>)
 80039f6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80039fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0308 	and.w	r3, r3, #8
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d005      	beq.n	8003a14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a08:	4b53      	ldr	r3, [pc, #332]	@ (8003b58 <HAL_RCC_ClockConfig+0x1bc>)
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	4a52      	ldr	r2, [pc, #328]	@ (8003b58 <HAL_RCC_ClockConfig+0x1bc>)
 8003a0e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003a12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a14:	4b50      	ldr	r3, [pc, #320]	@ (8003b58 <HAL_RCC_ClockConfig+0x1bc>)
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	494d      	ldr	r1, [pc, #308]	@ (8003b58 <HAL_RCC_ClockConfig+0x1bc>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d044      	beq.n	8003abc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d107      	bne.n	8003a4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a3a:	4b47      	ldr	r3, [pc, #284]	@ (8003b58 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d119      	bne.n	8003a7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e07f      	b.n	8003b4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d003      	beq.n	8003a5a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a56:	2b03      	cmp	r3, #3
 8003a58:	d107      	bne.n	8003a6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a5a:	4b3f      	ldr	r3, [pc, #252]	@ (8003b58 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d109      	bne.n	8003a7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e06f      	b.n	8003b4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a6a:	4b3b      	ldr	r3, [pc, #236]	@ (8003b58 <HAL_RCC_ClockConfig+0x1bc>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0302 	and.w	r3, r3, #2
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d101      	bne.n	8003a7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e067      	b.n	8003b4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a7a:	4b37      	ldr	r3, [pc, #220]	@ (8003b58 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	f023 0203 	bic.w	r2, r3, #3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	4934      	ldr	r1, [pc, #208]	@ (8003b58 <HAL_RCC_ClockConfig+0x1bc>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a8c:	f7fe fb86 	bl	800219c <HAL_GetTick>
 8003a90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a92:	e00a      	b.n	8003aaa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a94:	f7fe fb82 	bl	800219c <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e04f      	b.n	8003b4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aaa:	4b2b      	ldr	r3, [pc, #172]	@ (8003b58 <HAL_RCC_ClockConfig+0x1bc>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f003 020c 	and.w	r2, r3, #12
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d1eb      	bne.n	8003a94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003abc:	4b25      	ldr	r3, [pc, #148]	@ (8003b54 <HAL_RCC_ClockConfig+0x1b8>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 030f 	and.w	r3, r3, #15
 8003ac4:	683a      	ldr	r2, [r7, #0]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d20c      	bcs.n	8003ae4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aca:	4b22      	ldr	r3, [pc, #136]	@ (8003b54 <HAL_RCC_ClockConfig+0x1b8>)
 8003acc:	683a      	ldr	r2, [r7, #0]
 8003ace:	b2d2      	uxtb	r2, r2
 8003ad0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ad2:	4b20      	ldr	r3, [pc, #128]	@ (8003b54 <HAL_RCC_ClockConfig+0x1b8>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 030f 	and.w	r3, r3, #15
 8003ada:	683a      	ldr	r2, [r7, #0]
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d001      	beq.n	8003ae4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e032      	b.n	8003b4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0304 	and.w	r3, r3, #4
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d008      	beq.n	8003b02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003af0:	4b19      	ldr	r3, [pc, #100]	@ (8003b58 <HAL_RCC_ClockConfig+0x1bc>)
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	4916      	ldr	r1, [pc, #88]	@ (8003b58 <HAL_RCC_ClockConfig+0x1bc>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0308 	and.w	r3, r3, #8
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d009      	beq.n	8003b22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b0e:	4b12      	ldr	r3, [pc, #72]	@ (8003b58 <HAL_RCC_ClockConfig+0x1bc>)
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	691b      	ldr	r3, [r3, #16]
 8003b1a:	00db      	lsls	r3, r3, #3
 8003b1c:	490e      	ldr	r1, [pc, #56]	@ (8003b58 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b22:	f000 f887 	bl	8003c34 <HAL_RCC_GetSysClockFreq>
 8003b26:	4602      	mov	r2, r0
 8003b28:	4b0b      	ldr	r3, [pc, #44]	@ (8003b58 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	091b      	lsrs	r3, r3, #4
 8003b2e:	f003 030f 	and.w	r3, r3, #15
 8003b32:	490a      	ldr	r1, [pc, #40]	@ (8003b5c <HAL_RCC_ClockConfig+0x1c0>)
 8003b34:	5ccb      	ldrb	r3, [r1, r3]
 8003b36:	fa22 f303 	lsr.w	r3, r2, r3
 8003b3a:	4a09      	ldr	r2, [pc, #36]	@ (8003b60 <HAL_RCC_ClockConfig+0x1c4>)
 8003b3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003b3e:	4b09      	ldr	r3, [pc, #36]	@ (8003b64 <HAL_RCC_ClockConfig+0x1c8>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4618      	mov	r0, r3
 8003b44:	f7fe f976 	bl	8001e34 <HAL_InitTick>

  return HAL_OK;
 8003b48:	2300      	movs	r3, #0
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3710      	adds	r7, #16
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	40023c00 	.word	0x40023c00
 8003b58:	40023800 	.word	0x40023800
 8003b5c:	0800c4a4 	.word	0x0800c4a4
 8003b60:	20000010 	.word	0x20000010
 8003b64:	20000014 	.word	0x20000014

08003b68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b6c:	4b03      	ldr	r3, [pc, #12]	@ (8003b7c <HAL_RCC_GetHCLKFreq+0x14>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	20000010 	.word	0x20000010

08003b80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b84:	f7ff fff0 	bl	8003b68 <HAL_RCC_GetHCLKFreq>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	4b05      	ldr	r3, [pc, #20]	@ (8003ba0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	0a9b      	lsrs	r3, r3, #10
 8003b90:	f003 0307 	and.w	r3, r3, #7
 8003b94:	4903      	ldr	r1, [pc, #12]	@ (8003ba4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b96:	5ccb      	ldrb	r3, [r1, r3]
 8003b98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	40023800 	.word	0x40023800
 8003ba4:	0800c4b4 	.word	0x0800c4b4

08003ba8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003bac:	f7ff ffdc 	bl	8003b68 <HAL_RCC_GetHCLKFreq>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	4b05      	ldr	r3, [pc, #20]	@ (8003bc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	0b5b      	lsrs	r3, r3, #13
 8003bb8:	f003 0307 	and.w	r3, r3, #7
 8003bbc:	4903      	ldr	r1, [pc, #12]	@ (8003bcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bbe:	5ccb      	ldrb	r3, [r1, r3]
 8003bc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	40023800 	.word	0x40023800
 8003bcc:	0800c4b4 	.word	0x0800c4b4

08003bd0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	220f      	movs	r2, #15
 8003bde:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003be0:	4b12      	ldr	r3, [pc, #72]	@ (8003c2c <HAL_RCC_GetClockConfig+0x5c>)
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f003 0203 	and.w	r2, r3, #3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003bec:	4b0f      	ldr	r3, [pc, #60]	@ (8003c2c <HAL_RCC_GetClockConfig+0x5c>)
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003bf8:	4b0c      	ldr	r3, [pc, #48]	@ (8003c2c <HAL_RCC_GetClockConfig+0x5c>)
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003c04:	4b09      	ldr	r3, [pc, #36]	@ (8003c2c <HAL_RCC_GetClockConfig+0x5c>)
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	08db      	lsrs	r3, r3, #3
 8003c0a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003c12:	4b07      	ldr	r3, [pc, #28]	@ (8003c30 <HAL_RCC_GetClockConfig+0x60>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 020f 	and.w	r2, r3, #15
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	601a      	str	r2, [r3, #0]
}
 8003c1e:	bf00      	nop
 8003c20:	370c      	adds	r7, #12
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	40023800 	.word	0x40023800
 8003c30:	40023c00 	.word	0x40023c00

08003c34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c38:	b0a6      	sub	sp, #152	@ 0x98
 8003c3a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8003c42:	2300      	movs	r3, #0
 8003c44:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8003c54:	2300      	movs	r3, #0
 8003c56:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c5a:	4bc8      	ldr	r3, [pc, #800]	@ (8003f7c <HAL_RCC_GetSysClockFreq+0x348>)
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f003 030c 	and.w	r3, r3, #12
 8003c62:	2b0c      	cmp	r3, #12
 8003c64:	f200 817e 	bhi.w	8003f64 <HAL_RCC_GetSysClockFreq+0x330>
 8003c68:	a201      	add	r2, pc, #4	@ (adr r2, 8003c70 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c6e:	bf00      	nop
 8003c70:	08003ca5 	.word	0x08003ca5
 8003c74:	08003f65 	.word	0x08003f65
 8003c78:	08003f65 	.word	0x08003f65
 8003c7c:	08003f65 	.word	0x08003f65
 8003c80:	08003cad 	.word	0x08003cad
 8003c84:	08003f65 	.word	0x08003f65
 8003c88:	08003f65 	.word	0x08003f65
 8003c8c:	08003f65 	.word	0x08003f65
 8003c90:	08003cb5 	.word	0x08003cb5
 8003c94:	08003f65 	.word	0x08003f65
 8003c98:	08003f65 	.word	0x08003f65
 8003c9c:	08003f65 	.word	0x08003f65
 8003ca0:	08003e1f 	.word	0x08003e1f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ca4:	4bb6      	ldr	r3, [pc, #728]	@ (8003f80 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003ca6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003caa:	e15f      	b.n	8003f6c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003cac:	4bb5      	ldr	r3, [pc, #724]	@ (8003f84 <HAL_RCC_GetSysClockFreq+0x350>)
 8003cae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003cb2:	e15b      	b.n	8003f6c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cb4:	4bb1      	ldr	r3, [pc, #708]	@ (8003f7c <HAL_RCC_GetSysClockFreq+0x348>)
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003cbc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cc0:	4bae      	ldr	r3, [pc, #696]	@ (8003f7c <HAL_RCC_GetSysClockFreq+0x348>)
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d031      	beq.n	8003d30 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ccc:	4bab      	ldr	r3, [pc, #684]	@ (8003f7c <HAL_RCC_GetSysClockFreq+0x348>)
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	099b      	lsrs	r3, r3, #6
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003cd6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003cd8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003cda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cde:	663b      	str	r3, [r7, #96]	@ 0x60
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	667b      	str	r3, [r7, #100]	@ 0x64
 8003ce4:	4ba7      	ldr	r3, [pc, #668]	@ (8003f84 <HAL_RCC_GetSysClockFreq+0x350>)
 8003ce6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003cea:	462a      	mov	r2, r5
 8003cec:	fb03 f202 	mul.w	r2, r3, r2
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	4621      	mov	r1, r4
 8003cf4:	fb01 f303 	mul.w	r3, r1, r3
 8003cf8:	4413      	add	r3, r2
 8003cfa:	4aa2      	ldr	r2, [pc, #648]	@ (8003f84 <HAL_RCC_GetSysClockFreq+0x350>)
 8003cfc:	4621      	mov	r1, r4
 8003cfe:	fba1 1202 	umull	r1, r2, r1, r2
 8003d02:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003d04:	460a      	mov	r2, r1
 8003d06:	67ba      	str	r2, [r7, #120]	@ 0x78
 8003d08:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003d0a:	4413      	add	r3, r2
 8003d0c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003d0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d12:	2200      	movs	r2, #0
 8003d14:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003d16:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003d18:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003d1c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8003d20:	f7fc ff62 	bl	8000be8 <__aeabi_uldivmod>
 8003d24:	4602      	mov	r2, r0
 8003d26:	460b      	mov	r3, r1
 8003d28:	4613      	mov	r3, r2
 8003d2a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003d2e:	e064      	b.n	8003dfa <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d30:	4b92      	ldr	r3, [pc, #584]	@ (8003f7c <HAL_RCC_GetSysClockFreq+0x348>)
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	099b      	lsrs	r3, r3, #6
 8003d36:	2200      	movs	r2, #0
 8003d38:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d3a:	657a      	str	r2, [r7, #84]	@ 0x54
 8003d3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d42:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d44:	2300      	movs	r3, #0
 8003d46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d48:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8003d4c:	4622      	mov	r2, r4
 8003d4e:	462b      	mov	r3, r5
 8003d50:	f04f 0000 	mov.w	r0, #0
 8003d54:	f04f 0100 	mov.w	r1, #0
 8003d58:	0159      	lsls	r1, r3, #5
 8003d5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d5e:	0150      	lsls	r0, r2, #5
 8003d60:	4602      	mov	r2, r0
 8003d62:	460b      	mov	r3, r1
 8003d64:	4621      	mov	r1, r4
 8003d66:	1a51      	subs	r1, r2, r1
 8003d68:	6139      	str	r1, [r7, #16]
 8003d6a:	4629      	mov	r1, r5
 8003d6c:	eb63 0301 	sbc.w	r3, r3, r1
 8003d70:	617b      	str	r3, [r7, #20]
 8003d72:	f04f 0200 	mov.w	r2, #0
 8003d76:	f04f 0300 	mov.w	r3, #0
 8003d7a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d7e:	4659      	mov	r1, fp
 8003d80:	018b      	lsls	r3, r1, #6
 8003d82:	4651      	mov	r1, sl
 8003d84:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d88:	4651      	mov	r1, sl
 8003d8a:	018a      	lsls	r2, r1, #6
 8003d8c:	4651      	mov	r1, sl
 8003d8e:	ebb2 0801 	subs.w	r8, r2, r1
 8003d92:	4659      	mov	r1, fp
 8003d94:	eb63 0901 	sbc.w	r9, r3, r1
 8003d98:	f04f 0200 	mov.w	r2, #0
 8003d9c:	f04f 0300 	mov.w	r3, #0
 8003da0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003da4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003da8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003dac:	4690      	mov	r8, r2
 8003dae:	4699      	mov	r9, r3
 8003db0:	4623      	mov	r3, r4
 8003db2:	eb18 0303 	adds.w	r3, r8, r3
 8003db6:	60bb      	str	r3, [r7, #8]
 8003db8:	462b      	mov	r3, r5
 8003dba:	eb49 0303 	adc.w	r3, r9, r3
 8003dbe:	60fb      	str	r3, [r7, #12]
 8003dc0:	f04f 0200 	mov.w	r2, #0
 8003dc4:	f04f 0300 	mov.w	r3, #0
 8003dc8:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003dcc:	4629      	mov	r1, r5
 8003dce:	028b      	lsls	r3, r1, #10
 8003dd0:	4621      	mov	r1, r4
 8003dd2:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003dd6:	4621      	mov	r1, r4
 8003dd8:	028a      	lsls	r2, r1, #10
 8003dda:	4610      	mov	r0, r2
 8003ddc:	4619      	mov	r1, r3
 8003dde:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003de2:	2200      	movs	r2, #0
 8003de4:	643b      	str	r3, [r7, #64]	@ 0x40
 8003de6:	647a      	str	r2, [r7, #68]	@ 0x44
 8003de8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003dec:	f7fc fefc 	bl	8000be8 <__aeabi_uldivmod>
 8003df0:	4602      	mov	r2, r0
 8003df2:	460b      	mov	r3, r1
 8003df4:	4613      	mov	r3, r2
 8003df6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003dfa:	4b60      	ldr	r3, [pc, #384]	@ (8003f7c <HAL_RCC_GetSysClockFreq+0x348>)
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	0c1b      	lsrs	r3, r3, #16
 8003e00:	f003 0303 	and.w	r3, r3, #3
 8003e04:	3301      	adds	r3, #1
 8003e06:	005b      	lsls	r3, r3, #1
 8003e08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8003e0c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003e10:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e18:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003e1c:	e0a6      	b.n	8003f6c <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e1e:	4b57      	ldr	r3, [pc, #348]	@ (8003f7c <HAL_RCC_GetSysClockFreq+0x348>)
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e26:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e2a:	4b54      	ldr	r3, [pc, #336]	@ (8003f7c <HAL_RCC_GetSysClockFreq+0x348>)
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d02a      	beq.n	8003e8c <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e36:	4b51      	ldr	r3, [pc, #324]	@ (8003f7c <HAL_RCC_GetSysClockFreq+0x348>)
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	099b      	lsrs	r3, r3, #6
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e40:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003e42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e44:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003e48:	2100      	movs	r1, #0
 8003e4a:	4b4e      	ldr	r3, [pc, #312]	@ (8003f84 <HAL_RCC_GetSysClockFreq+0x350>)
 8003e4c:	fb03 f201 	mul.w	r2, r3, r1
 8003e50:	2300      	movs	r3, #0
 8003e52:	fb00 f303 	mul.w	r3, r0, r3
 8003e56:	4413      	add	r3, r2
 8003e58:	4a4a      	ldr	r2, [pc, #296]	@ (8003f84 <HAL_RCC_GetSysClockFreq+0x350>)
 8003e5a:	fba0 1202 	umull	r1, r2, r0, r2
 8003e5e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003e60:	460a      	mov	r2, r1
 8003e62:	673a      	str	r2, [r7, #112]	@ 0x70
 8003e64:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003e66:	4413      	add	r3, r2
 8003e68:	677b      	str	r3, [r7, #116]	@ 0x74
 8003e6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e6e:	2200      	movs	r2, #0
 8003e70:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e72:	637a      	str	r2, [r7, #52]	@ 0x34
 8003e74:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003e78:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003e7c:	f7fc feb4 	bl	8000be8 <__aeabi_uldivmod>
 8003e80:	4602      	mov	r2, r0
 8003e82:	460b      	mov	r3, r1
 8003e84:	4613      	mov	r3, r2
 8003e86:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003e8a:	e05b      	b.n	8003f44 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e8c:	4b3b      	ldr	r3, [pc, #236]	@ (8003f7c <HAL_RCC_GetSysClockFreq+0x348>)
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	099b      	lsrs	r3, r3, #6
 8003e92:	2200      	movs	r2, #0
 8003e94:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e96:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e9e:	623b      	str	r3, [r7, #32]
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ea4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003ea8:	4642      	mov	r2, r8
 8003eaa:	464b      	mov	r3, r9
 8003eac:	f04f 0000 	mov.w	r0, #0
 8003eb0:	f04f 0100 	mov.w	r1, #0
 8003eb4:	0159      	lsls	r1, r3, #5
 8003eb6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003eba:	0150      	lsls	r0, r2, #5
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	4641      	mov	r1, r8
 8003ec2:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ec6:	4649      	mov	r1, r9
 8003ec8:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ecc:	f04f 0200 	mov.w	r2, #0
 8003ed0:	f04f 0300 	mov.w	r3, #0
 8003ed4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ed8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003edc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ee0:	ebb2 040a 	subs.w	r4, r2, sl
 8003ee4:	eb63 050b 	sbc.w	r5, r3, fp
 8003ee8:	f04f 0200 	mov.w	r2, #0
 8003eec:	f04f 0300 	mov.w	r3, #0
 8003ef0:	00eb      	lsls	r3, r5, #3
 8003ef2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ef6:	00e2      	lsls	r2, r4, #3
 8003ef8:	4614      	mov	r4, r2
 8003efa:	461d      	mov	r5, r3
 8003efc:	4643      	mov	r3, r8
 8003efe:	18e3      	adds	r3, r4, r3
 8003f00:	603b      	str	r3, [r7, #0]
 8003f02:	464b      	mov	r3, r9
 8003f04:	eb45 0303 	adc.w	r3, r5, r3
 8003f08:	607b      	str	r3, [r7, #4]
 8003f0a:	f04f 0200 	mov.w	r2, #0
 8003f0e:	f04f 0300 	mov.w	r3, #0
 8003f12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f16:	4629      	mov	r1, r5
 8003f18:	028b      	lsls	r3, r1, #10
 8003f1a:	4621      	mov	r1, r4
 8003f1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f20:	4621      	mov	r1, r4
 8003f22:	028a      	lsls	r2, r1, #10
 8003f24:	4610      	mov	r0, r2
 8003f26:	4619      	mov	r1, r3
 8003f28:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	61bb      	str	r3, [r7, #24]
 8003f30:	61fa      	str	r2, [r7, #28]
 8003f32:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f36:	f7fc fe57 	bl	8000be8 <__aeabi_uldivmod>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	4613      	mov	r3, r2
 8003f40:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003f44:	4b0d      	ldr	r3, [pc, #52]	@ (8003f7c <HAL_RCC_GetSysClockFreq+0x348>)
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	0f1b      	lsrs	r3, r3, #28
 8003f4a:	f003 0307 	and.w	r3, r3, #7
 8003f4e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8003f52:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003f56:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f5e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003f62:	e003      	b.n	8003f6c <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f64:	4b06      	ldr	r3, [pc, #24]	@ (8003f80 <HAL_RCC_GetSysClockFreq+0x34c>)
 8003f66:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003f6a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f6c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3798      	adds	r7, #152	@ 0x98
 8003f74:	46bd      	mov	sp, r7
 8003f76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f7a:	bf00      	nop
 8003f7c:	40023800 	.word	0x40023800
 8003f80:	00f42400 	.word	0x00f42400
 8003f84:	017d7840 	.word	0x017d7840

08003f88 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b086      	sub	sp, #24
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d101      	bne.n	8003f9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e28d      	b.n	80044b6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	f000 8083 	beq.w	80040ae <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003fa8:	4b94      	ldr	r3, [pc, #592]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	f003 030c 	and.w	r3, r3, #12
 8003fb0:	2b04      	cmp	r3, #4
 8003fb2:	d019      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003fb4:	4b91      	ldr	r3, [pc, #580]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f003 030c 	and.w	r3, r3, #12
        || \
 8003fbc:	2b08      	cmp	r3, #8
 8003fbe:	d106      	bne.n	8003fce <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003fc0:	4b8e      	ldr	r3, [pc, #568]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fc8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003fcc:	d00c      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fce:	4b8b      	ldr	r3, [pc, #556]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003fd6:	2b0c      	cmp	r3, #12
 8003fd8:	d112      	bne.n	8004000 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fda:	4b88      	ldr	r3, [pc, #544]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fe2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003fe6:	d10b      	bne.n	8004000 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fe8:	4b84      	ldr	r3, [pc, #528]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d05b      	beq.n	80040ac <HAL_RCC_OscConfig+0x124>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d157      	bne.n	80040ac <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e25a      	b.n	80044b6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004008:	d106      	bne.n	8004018 <HAL_RCC_OscConfig+0x90>
 800400a:	4b7c      	ldr	r3, [pc, #496]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a7b      	ldr	r2, [pc, #492]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 8004010:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004014:	6013      	str	r3, [r2, #0]
 8004016:	e01d      	b.n	8004054 <HAL_RCC_OscConfig+0xcc>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004020:	d10c      	bne.n	800403c <HAL_RCC_OscConfig+0xb4>
 8004022:	4b76      	ldr	r3, [pc, #472]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a75      	ldr	r2, [pc, #468]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 8004028:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800402c:	6013      	str	r3, [r2, #0]
 800402e:	4b73      	ldr	r3, [pc, #460]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a72      	ldr	r2, [pc, #456]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 8004034:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004038:	6013      	str	r3, [r2, #0]
 800403a:	e00b      	b.n	8004054 <HAL_RCC_OscConfig+0xcc>
 800403c:	4b6f      	ldr	r3, [pc, #444]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a6e      	ldr	r2, [pc, #440]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 8004042:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004046:	6013      	str	r3, [r2, #0]
 8004048:	4b6c      	ldr	r3, [pc, #432]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a6b      	ldr	r2, [pc, #428]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 800404e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004052:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d013      	beq.n	8004084 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800405c:	f7fe f89e 	bl	800219c <HAL_GetTick>
 8004060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004062:	e008      	b.n	8004076 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004064:	f7fe f89a 	bl	800219c <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	2b64      	cmp	r3, #100	@ 0x64
 8004070:	d901      	bls.n	8004076 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e21f      	b.n	80044b6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004076:	4b61      	ldr	r3, [pc, #388]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d0f0      	beq.n	8004064 <HAL_RCC_OscConfig+0xdc>
 8004082:	e014      	b.n	80040ae <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004084:	f7fe f88a 	bl	800219c <HAL_GetTick>
 8004088:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800408a:	e008      	b.n	800409e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800408c:	f7fe f886 	bl	800219c <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	2b64      	cmp	r3, #100	@ 0x64
 8004098:	d901      	bls.n	800409e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e20b      	b.n	80044b6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800409e:	4b57      	ldr	r3, [pc, #348]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d1f0      	bne.n	800408c <HAL_RCC_OscConfig+0x104>
 80040aa:	e000      	b.n	80040ae <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0302 	and.w	r3, r3, #2
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d06f      	beq.n	800419a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80040ba:	4b50      	ldr	r3, [pc, #320]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f003 030c 	and.w	r3, r3, #12
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d017      	beq.n	80040f6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80040c6:	4b4d      	ldr	r3, [pc, #308]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f003 030c 	and.w	r3, r3, #12
        || \
 80040ce:	2b08      	cmp	r3, #8
 80040d0:	d105      	bne.n	80040de <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80040d2:	4b4a      	ldr	r3, [pc, #296]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00b      	beq.n	80040f6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040de:	4b47      	ldr	r3, [pc, #284]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80040e6:	2b0c      	cmp	r3, #12
 80040e8:	d11c      	bne.n	8004124 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040ea:	4b44      	ldr	r3, [pc, #272]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d116      	bne.n	8004124 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040f6:	4b41      	ldr	r3, [pc, #260]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0302 	and.w	r3, r3, #2
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d005      	beq.n	800410e <HAL_RCC_OscConfig+0x186>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	2b01      	cmp	r3, #1
 8004108:	d001      	beq.n	800410e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e1d3      	b.n	80044b6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800410e:	4b3b      	ldr	r3, [pc, #236]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	691b      	ldr	r3, [r3, #16]
 800411a:	00db      	lsls	r3, r3, #3
 800411c:	4937      	ldr	r1, [pc, #220]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 800411e:	4313      	orrs	r3, r2
 8004120:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004122:	e03a      	b.n	800419a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d020      	beq.n	800416e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800412c:	4b34      	ldr	r3, [pc, #208]	@ (8004200 <HAL_RCC_OscConfig+0x278>)
 800412e:	2201      	movs	r2, #1
 8004130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004132:	f7fe f833 	bl	800219c <HAL_GetTick>
 8004136:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004138:	e008      	b.n	800414c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800413a:	f7fe f82f 	bl	800219c <HAL_GetTick>
 800413e:	4602      	mov	r2, r0
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	1ad3      	subs	r3, r2, r3
 8004144:	2b02      	cmp	r3, #2
 8004146:	d901      	bls.n	800414c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e1b4      	b.n	80044b6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800414c:	4b2b      	ldr	r3, [pc, #172]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0302 	and.w	r3, r3, #2
 8004154:	2b00      	cmp	r3, #0
 8004156:	d0f0      	beq.n	800413a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004158:	4b28      	ldr	r3, [pc, #160]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	691b      	ldr	r3, [r3, #16]
 8004164:	00db      	lsls	r3, r3, #3
 8004166:	4925      	ldr	r1, [pc, #148]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 8004168:	4313      	orrs	r3, r2
 800416a:	600b      	str	r3, [r1, #0]
 800416c:	e015      	b.n	800419a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800416e:	4b24      	ldr	r3, [pc, #144]	@ (8004200 <HAL_RCC_OscConfig+0x278>)
 8004170:	2200      	movs	r2, #0
 8004172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004174:	f7fe f812 	bl	800219c <HAL_GetTick>
 8004178:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800417a:	e008      	b.n	800418e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800417c:	f7fe f80e 	bl	800219c <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	2b02      	cmp	r3, #2
 8004188:	d901      	bls.n	800418e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e193      	b.n	80044b6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800418e:	4b1b      	ldr	r3, [pc, #108]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	2b00      	cmp	r3, #0
 8004198:	d1f0      	bne.n	800417c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0308 	and.w	r3, r3, #8
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d036      	beq.n	8004214 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d016      	beq.n	80041dc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041ae:	4b15      	ldr	r3, [pc, #84]	@ (8004204 <HAL_RCC_OscConfig+0x27c>)
 80041b0:	2201      	movs	r2, #1
 80041b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041b4:	f7fd fff2 	bl	800219c <HAL_GetTick>
 80041b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041ba:	e008      	b.n	80041ce <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041bc:	f7fd ffee 	bl	800219c <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d901      	bls.n	80041ce <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e173      	b.n	80044b6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041ce:	4b0b      	ldr	r3, [pc, #44]	@ (80041fc <HAL_RCC_OscConfig+0x274>)
 80041d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041d2:	f003 0302 	and.w	r3, r3, #2
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d0f0      	beq.n	80041bc <HAL_RCC_OscConfig+0x234>
 80041da:	e01b      	b.n	8004214 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041dc:	4b09      	ldr	r3, [pc, #36]	@ (8004204 <HAL_RCC_OscConfig+0x27c>)
 80041de:	2200      	movs	r2, #0
 80041e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041e2:	f7fd ffdb 	bl	800219c <HAL_GetTick>
 80041e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041e8:	e00e      	b.n	8004208 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041ea:	f7fd ffd7 	bl	800219c <HAL_GetTick>
 80041ee:	4602      	mov	r2, r0
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	d907      	bls.n	8004208 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	e15c      	b.n	80044b6 <HAL_RCC_OscConfig+0x52e>
 80041fc:	40023800 	.word	0x40023800
 8004200:	42470000 	.word	0x42470000
 8004204:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004208:	4b8a      	ldr	r3, [pc, #552]	@ (8004434 <HAL_RCC_OscConfig+0x4ac>)
 800420a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800420c:	f003 0302 	and.w	r3, r3, #2
 8004210:	2b00      	cmp	r3, #0
 8004212:	d1ea      	bne.n	80041ea <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0304 	and.w	r3, r3, #4
 800421c:	2b00      	cmp	r3, #0
 800421e:	f000 8097 	beq.w	8004350 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004222:	2300      	movs	r3, #0
 8004224:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004226:	4b83      	ldr	r3, [pc, #524]	@ (8004434 <HAL_RCC_OscConfig+0x4ac>)
 8004228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800422a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d10f      	bne.n	8004252 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004232:	2300      	movs	r3, #0
 8004234:	60bb      	str	r3, [r7, #8]
 8004236:	4b7f      	ldr	r3, [pc, #508]	@ (8004434 <HAL_RCC_OscConfig+0x4ac>)
 8004238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800423a:	4a7e      	ldr	r2, [pc, #504]	@ (8004434 <HAL_RCC_OscConfig+0x4ac>)
 800423c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004240:	6413      	str	r3, [r2, #64]	@ 0x40
 8004242:	4b7c      	ldr	r3, [pc, #496]	@ (8004434 <HAL_RCC_OscConfig+0x4ac>)
 8004244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004246:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800424a:	60bb      	str	r3, [r7, #8]
 800424c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800424e:	2301      	movs	r3, #1
 8004250:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004252:	4b79      	ldr	r3, [pc, #484]	@ (8004438 <HAL_RCC_OscConfig+0x4b0>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800425a:	2b00      	cmp	r3, #0
 800425c:	d118      	bne.n	8004290 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800425e:	4b76      	ldr	r3, [pc, #472]	@ (8004438 <HAL_RCC_OscConfig+0x4b0>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a75      	ldr	r2, [pc, #468]	@ (8004438 <HAL_RCC_OscConfig+0x4b0>)
 8004264:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004268:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800426a:	f7fd ff97 	bl	800219c <HAL_GetTick>
 800426e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004270:	e008      	b.n	8004284 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004272:	f7fd ff93 	bl	800219c <HAL_GetTick>
 8004276:	4602      	mov	r2, r0
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	2b02      	cmp	r3, #2
 800427e:	d901      	bls.n	8004284 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004280:	2303      	movs	r3, #3
 8004282:	e118      	b.n	80044b6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004284:	4b6c      	ldr	r3, [pc, #432]	@ (8004438 <HAL_RCC_OscConfig+0x4b0>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800428c:	2b00      	cmp	r3, #0
 800428e:	d0f0      	beq.n	8004272 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	2b01      	cmp	r3, #1
 8004296:	d106      	bne.n	80042a6 <HAL_RCC_OscConfig+0x31e>
 8004298:	4b66      	ldr	r3, [pc, #408]	@ (8004434 <HAL_RCC_OscConfig+0x4ac>)
 800429a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800429c:	4a65      	ldr	r2, [pc, #404]	@ (8004434 <HAL_RCC_OscConfig+0x4ac>)
 800429e:	f043 0301 	orr.w	r3, r3, #1
 80042a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80042a4:	e01c      	b.n	80042e0 <HAL_RCC_OscConfig+0x358>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	2b05      	cmp	r3, #5
 80042ac:	d10c      	bne.n	80042c8 <HAL_RCC_OscConfig+0x340>
 80042ae:	4b61      	ldr	r3, [pc, #388]	@ (8004434 <HAL_RCC_OscConfig+0x4ac>)
 80042b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042b2:	4a60      	ldr	r2, [pc, #384]	@ (8004434 <HAL_RCC_OscConfig+0x4ac>)
 80042b4:	f043 0304 	orr.w	r3, r3, #4
 80042b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80042ba:	4b5e      	ldr	r3, [pc, #376]	@ (8004434 <HAL_RCC_OscConfig+0x4ac>)
 80042bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042be:	4a5d      	ldr	r2, [pc, #372]	@ (8004434 <HAL_RCC_OscConfig+0x4ac>)
 80042c0:	f043 0301 	orr.w	r3, r3, #1
 80042c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80042c6:	e00b      	b.n	80042e0 <HAL_RCC_OscConfig+0x358>
 80042c8:	4b5a      	ldr	r3, [pc, #360]	@ (8004434 <HAL_RCC_OscConfig+0x4ac>)
 80042ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042cc:	4a59      	ldr	r2, [pc, #356]	@ (8004434 <HAL_RCC_OscConfig+0x4ac>)
 80042ce:	f023 0301 	bic.w	r3, r3, #1
 80042d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80042d4:	4b57      	ldr	r3, [pc, #348]	@ (8004434 <HAL_RCC_OscConfig+0x4ac>)
 80042d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042d8:	4a56      	ldr	r2, [pc, #344]	@ (8004434 <HAL_RCC_OscConfig+0x4ac>)
 80042da:	f023 0304 	bic.w	r3, r3, #4
 80042de:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d015      	beq.n	8004314 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042e8:	f7fd ff58 	bl	800219c <HAL_GetTick>
 80042ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042ee:	e00a      	b.n	8004306 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042f0:	f7fd ff54 	bl	800219c <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042fe:	4293      	cmp	r3, r2
 8004300:	d901      	bls.n	8004306 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e0d7      	b.n	80044b6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004306:	4b4b      	ldr	r3, [pc, #300]	@ (8004434 <HAL_RCC_OscConfig+0x4ac>)
 8004308:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800430a:	f003 0302 	and.w	r3, r3, #2
 800430e:	2b00      	cmp	r3, #0
 8004310:	d0ee      	beq.n	80042f0 <HAL_RCC_OscConfig+0x368>
 8004312:	e014      	b.n	800433e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004314:	f7fd ff42 	bl	800219c <HAL_GetTick>
 8004318:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800431a:	e00a      	b.n	8004332 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800431c:	f7fd ff3e 	bl	800219c <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	f241 3288 	movw	r2, #5000	@ 0x1388
 800432a:	4293      	cmp	r3, r2
 800432c:	d901      	bls.n	8004332 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800432e:	2303      	movs	r3, #3
 8004330:	e0c1      	b.n	80044b6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004332:	4b40      	ldr	r3, [pc, #256]	@ (8004434 <HAL_RCC_OscConfig+0x4ac>)
 8004334:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004336:	f003 0302 	and.w	r3, r3, #2
 800433a:	2b00      	cmp	r3, #0
 800433c:	d1ee      	bne.n	800431c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800433e:	7dfb      	ldrb	r3, [r7, #23]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d105      	bne.n	8004350 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004344:	4b3b      	ldr	r3, [pc, #236]	@ (8004434 <HAL_RCC_OscConfig+0x4ac>)
 8004346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004348:	4a3a      	ldr	r2, [pc, #232]	@ (8004434 <HAL_RCC_OscConfig+0x4ac>)
 800434a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800434e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	699b      	ldr	r3, [r3, #24]
 8004354:	2b00      	cmp	r3, #0
 8004356:	f000 80ad 	beq.w	80044b4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800435a:	4b36      	ldr	r3, [pc, #216]	@ (8004434 <HAL_RCC_OscConfig+0x4ac>)
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f003 030c 	and.w	r3, r3, #12
 8004362:	2b08      	cmp	r3, #8
 8004364:	d060      	beq.n	8004428 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	2b02      	cmp	r3, #2
 800436c:	d145      	bne.n	80043fa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800436e:	4b33      	ldr	r3, [pc, #204]	@ (800443c <HAL_RCC_OscConfig+0x4b4>)
 8004370:	2200      	movs	r2, #0
 8004372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004374:	f7fd ff12 	bl	800219c <HAL_GetTick>
 8004378:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800437a:	e008      	b.n	800438e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800437c:	f7fd ff0e 	bl	800219c <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	2b02      	cmp	r3, #2
 8004388:	d901      	bls.n	800438e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e093      	b.n	80044b6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800438e:	4b29      	ldr	r3, [pc, #164]	@ (8004434 <HAL_RCC_OscConfig+0x4ac>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1f0      	bne.n	800437c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	69da      	ldr	r2, [r3, #28]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a1b      	ldr	r3, [r3, #32]
 80043a2:	431a      	orrs	r2, r3
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a8:	019b      	lsls	r3, r3, #6
 80043aa:	431a      	orrs	r2, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043b0:	085b      	lsrs	r3, r3, #1
 80043b2:	3b01      	subs	r3, #1
 80043b4:	041b      	lsls	r3, r3, #16
 80043b6:	431a      	orrs	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043bc:	061b      	lsls	r3, r3, #24
 80043be:	431a      	orrs	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043c4:	071b      	lsls	r3, r3, #28
 80043c6:	491b      	ldr	r1, [pc, #108]	@ (8004434 <HAL_RCC_OscConfig+0x4ac>)
 80043c8:	4313      	orrs	r3, r2
 80043ca:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043cc:	4b1b      	ldr	r3, [pc, #108]	@ (800443c <HAL_RCC_OscConfig+0x4b4>)
 80043ce:	2201      	movs	r2, #1
 80043d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d2:	f7fd fee3 	bl	800219c <HAL_GetTick>
 80043d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043d8:	e008      	b.n	80043ec <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043da:	f7fd fedf 	bl	800219c <HAL_GetTick>
 80043de:	4602      	mov	r2, r0
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d901      	bls.n	80043ec <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e064      	b.n	80044b6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043ec:	4b11      	ldr	r3, [pc, #68]	@ (8004434 <HAL_RCC_OscConfig+0x4ac>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d0f0      	beq.n	80043da <HAL_RCC_OscConfig+0x452>
 80043f8:	e05c      	b.n	80044b4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043fa:	4b10      	ldr	r3, [pc, #64]	@ (800443c <HAL_RCC_OscConfig+0x4b4>)
 80043fc:	2200      	movs	r2, #0
 80043fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004400:	f7fd fecc 	bl	800219c <HAL_GetTick>
 8004404:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004406:	e008      	b.n	800441a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004408:	f7fd fec8 	bl	800219c <HAL_GetTick>
 800440c:	4602      	mov	r2, r0
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	1ad3      	subs	r3, r2, r3
 8004412:	2b02      	cmp	r3, #2
 8004414:	d901      	bls.n	800441a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e04d      	b.n	80044b6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800441a:	4b06      	ldr	r3, [pc, #24]	@ (8004434 <HAL_RCC_OscConfig+0x4ac>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1f0      	bne.n	8004408 <HAL_RCC_OscConfig+0x480>
 8004426:	e045      	b.n	80044b4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	699b      	ldr	r3, [r3, #24]
 800442c:	2b01      	cmp	r3, #1
 800442e:	d107      	bne.n	8004440 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e040      	b.n	80044b6 <HAL_RCC_OscConfig+0x52e>
 8004434:	40023800 	.word	0x40023800
 8004438:	40007000 	.word	0x40007000
 800443c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004440:	4b1f      	ldr	r3, [pc, #124]	@ (80044c0 <HAL_RCC_OscConfig+0x538>)
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	699b      	ldr	r3, [r3, #24]
 800444a:	2b01      	cmp	r3, #1
 800444c:	d030      	beq.n	80044b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004458:	429a      	cmp	r2, r3
 800445a:	d129      	bne.n	80044b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004466:	429a      	cmp	r2, r3
 8004468:	d122      	bne.n	80044b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800446a:	68fa      	ldr	r2, [r7, #12]
 800446c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004470:	4013      	ands	r3, r2
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004476:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004478:	4293      	cmp	r3, r2
 800447a:	d119      	bne.n	80044b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004486:	085b      	lsrs	r3, r3, #1
 8004488:	3b01      	subs	r3, #1
 800448a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800448c:	429a      	cmp	r2, r3
 800448e:	d10f      	bne.n	80044b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800449a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800449c:	429a      	cmp	r2, r3
 800449e:	d107      	bne.n	80044b0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044aa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d001      	beq.n	80044b4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e000      	b.n	80044b6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3718      	adds	r7, #24
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
 80044be:	bf00      	nop
 80044c0:	40023800 	.word	0x40023800

080044c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d101      	bne.n	80044d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e041      	b.n	800455a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d106      	bne.n	80044f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044ea:	6878      	ldr	r0, [r7, #4]
 80044ec:	f000 f839 	bl	8004562 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2202      	movs	r2, #2
 80044f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	3304      	adds	r3, #4
 8004500:	4619      	mov	r1, r3
 8004502:	4610      	mov	r0, r2
 8004504:	f000 f9c0 	bl	8004888 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3708      	adds	r7, #8
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}

08004562 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004562:	b480      	push	{r7}
 8004564:	b083      	sub	sp, #12
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800456a:	bf00      	nop
 800456c:	370c      	adds	r7, #12
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
	...

08004578 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004578:	b480      	push	{r7}
 800457a:	b085      	sub	sp, #20
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004586:	b2db      	uxtb	r3, r3
 8004588:	2b01      	cmp	r3, #1
 800458a:	d001      	beq.n	8004590 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e04e      	b.n	800462e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2202      	movs	r2, #2
 8004594:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	68da      	ldr	r2, [r3, #12]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f042 0201 	orr.w	r2, r2, #1
 80045a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a23      	ldr	r2, [pc, #140]	@ (800463c <HAL_TIM_Base_Start_IT+0xc4>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d022      	beq.n	80045f8 <HAL_TIM_Base_Start_IT+0x80>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045ba:	d01d      	beq.n	80045f8 <HAL_TIM_Base_Start_IT+0x80>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a1f      	ldr	r2, [pc, #124]	@ (8004640 <HAL_TIM_Base_Start_IT+0xc8>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d018      	beq.n	80045f8 <HAL_TIM_Base_Start_IT+0x80>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a1e      	ldr	r2, [pc, #120]	@ (8004644 <HAL_TIM_Base_Start_IT+0xcc>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d013      	beq.n	80045f8 <HAL_TIM_Base_Start_IT+0x80>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a1c      	ldr	r2, [pc, #112]	@ (8004648 <HAL_TIM_Base_Start_IT+0xd0>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d00e      	beq.n	80045f8 <HAL_TIM_Base_Start_IT+0x80>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a1b      	ldr	r2, [pc, #108]	@ (800464c <HAL_TIM_Base_Start_IT+0xd4>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d009      	beq.n	80045f8 <HAL_TIM_Base_Start_IT+0x80>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a19      	ldr	r2, [pc, #100]	@ (8004650 <HAL_TIM_Base_Start_IT+0xd8>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d004      	beq.n	80045f8 <HAL_TIM_Base_Start_IT+0x80>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a18      	ldr	r2, [pc, #96]	@ (8004654 <HAL_TIM_Base_Start_IT+0xdc>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d111      	bne.n	800461c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	f003 0307 	and.w	r3, r3, #7
 8004602:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2b06      	cmp	r3, #6
 8004608:	d010      	beq.n	800462c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f042 0201 	orr.w	r2, r2, #1
 8004618:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800461a:	e007      	b.n	800462c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f042 0201 	orr.w	r2, r2, #1
 800462a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	3714      	adds	r7, #20
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	40010000 	.word	0x40010000
 8004640:	40000400 	.word	0x40000400
 8004644:	40000800 	.word	0x40000800
 8004648:	40000c00 	.word	0x40000c00
 800464c:	40010400 	.word	0x40010400
 8004650:	40014000 	.word	0x40014000
 8004654:	40001800 	.word	0x40001800

08004658 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	691b      	ldr	r3, [r3, #16]
 800466e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	f003 0302 	and.w	r3, r3, #2
 8004676:	2b00      	cmp	r3, #0
 8004678:	d020      	beq.n	80046bc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f003 0302 	and.w	r3, r3, #2
 8004680:	2b00      	cmp	r3, #0
 8004682:	d01b      	beq.n	80046bc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f06f 0202 	mvn.w	r2, #2
 800468c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2201      	movs	r2, #1
 8004692:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	f003 0303 	and.w	r3, r3, #3
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d003      	beq.n	80046aa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 f8d2 	bl	800484c <HAL_TIM_IC_CaptureCallback>
 80046a8:	e005      	b.n	80046b6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f000 f8c4 	bl	8004838 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f000 f8d5 	bl	8004860 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	f003 0304 	and.w	r3, r3, #4
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d020      	beq.n	8004708 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f003 0304 	and.w	r3, r3, #4
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d01b      	beq.n	8004708 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f06f 0204 	mvn.w	r2, #4
 80046d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2202      	movs	r2, #2
 80046de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	699b      	ldr	r3, [r3, #24]
 80046e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d003      	beq.n	80046f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 f8ac 	bl	800484c <HAL_TIM_IC_CaptureCallback>
 80046f4:	e005      	b.n	8004702 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 f89e 	bl	8004838 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f000 f8af 	bl	8004860 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	f003 0308 	and.w	r3, r3, #8
 800470e:	2b00      	cmp	r3, #0
 8004710:	d020      	beq.n	8004754 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f003 0308 	and.w	r3, r3, #8
 8004718:	2b00      	cmp	r3, #0
 800471a:	d01b      	beq.n	8004754 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f06f 0208 	mvn.w	r2, #8
 8004724:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2204      	movs	r2, #4
 800472a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	69db      	ldr	r3, [r3, #28]
 8004732:	f003 0303 	and.w	r3, r3, #3
 8004736:	2b00      	cmp	r3, #0
 8004738:	d003      	beq.n	8004742 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 f886 	bl	800484c <HAL_TIM_IC_CaptureCallback>
 8004740:	e005      	b.n	800474e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 f878 	bl	8004838 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f000 f889 	bl	8004860 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	f003 0310 	and.w	r3, r3, #16
 800475a:	2b00      	cmp	r3, #0
 800475c:	d020      	beq.n	80047a0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f003 0310 	and.w	r3, r3, #16
 8004764:	2b00      	cmp	r3, #0
 8004766:	d01b      	beq.n	80047a0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f06f 0210 	mvn.w	r2, #16
 8004770:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2208      	movs	r2, #8
 8004776:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	69db      	ldr	r3, [r3, #28]
 800477e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004782:	2b00      	cmp	r3, #0
 8004784:	d003      	beq.n	800478e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 f860 	bl	800484c <HAL_TIM_IC_CaptureCallback>
 800478c:	e005      	b.n	800479a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 f852 	bl	8004838 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f000 f863 	bl	8004860 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	f003 0301 	and.w	r3, r3, #1
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00c      	beq.n	80047c4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f003 0301 	and.w	r3, r3, #1
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d007      	beq.n	80047c4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f06f 0201 	mvn.w	r2, #1
 80047bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f7fc feda 	bl	8001578 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d00c      	beq.n	80047e8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d007      	beq.n	80047e8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80047e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 f900 	bl	80049e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00c      	beq.n	800480c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d007      	beq.n	800480c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004804:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 f834 	bl	8004874 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	f003 0320 	and.w	r3, r3, #32
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00c      	beq.n	8004830 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f003 0320 	and.w	r3, r3, #32
 800481c:	2b00      	cmp	r3, #0
 800481e:	d007      	beq.n	8004830 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f06f 0220 	mvn.w	r2, #32
 8004828:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 f8d2 	bl	80049d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004830:	bf00      	nop
 8004832:	3710      	adds	r7, #16
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}

08004838 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004838:	b480      	push	{r7}
 800483a:	b083      	sub	sp, #12
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004840:	bf00      	nop
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004854:	bf00      	nop
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004868:	bf00      	nop
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800487c:	bf00      	nop
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004888:	b480      	push	{r7}
 800488a:	b085      	sub	sp, #20
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	4a43      	ldr	r2, [pc, #268]	@ (80049a8 <TIM_Base_SetConfig+0x120>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d013      	beq.n	80048c8 <TIM_Base_SetConfig+0x40>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048a6:	d00f      	beq.n	80048c8 <TIM_Base_SetConfig+0x40>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4a40      	ldr	r2, [pc, #256]	@ (80049ac <TIM_Base_SetConfig+0x124>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d00b      	beq.n	80048c8 <TIM_Base_SetConfig+0x40>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a3f      	ldr	r2, [pc, #252]	@ (80049b0 <TIM_Base_SetConfig+0x128>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d007      	beq.n	80048c8 <TIM_Base_SetConfig+0x40>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a3e      	ldr	r2, [pc, #248]	@ (80049b4 <TIM_Base_SetConfig+0x12c>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d003      	beq.n	80048c8 <TIM_Base_SetConfig+0x40>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	4a3d      	ldr	r2, [pc, #244]	@ (80049b8 <TIM_Base_SetConfig+0x130>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d108      	bne.n	80048da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	68fa      	ldr	r2, [r7, #12]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a32      	ldr	r2, [pc, #200]	@ (80049a8 <TIM_Base_SetConfig+0x120>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d02b      	beq.n	800493a <TIM_Base_SetConfig+0xb2>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048e8:	d027      	beq.n	800493a <TIM_Base_SetConfig+0xb2>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a2f      	ldr	r2, [pc, #188]	@ (80049ac <TIM_Base_SetConfig+0x124>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d023      	beq.n	800493a <TIM_Base_SetConfig+0xb2>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a2e      	ldr	r2, [pc, #184]	@ (80049b0 <TIM_Base_SetConfig+0x128>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d01f      	beq.n	800493a <TIM_Base_SetConfig+0xb2>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a2d      	ldr	r2, [pc, #180]	@ (80049b4 <TIM_Base_SetConfig+0x12c>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d01b      	beq.n	800493a <TIM_Base_SetConfig+0xb2>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a2c      	ldr	r2, [pc, #176]	@ (80049b8 <TIM_Base_SetConfig+0x130>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d017      	beq.n	800493a <TIM_Base_SetConfig+0xb2>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a2b      	ldr	r2, [pc, #172]	@ (80049bc <TIM_Base_SetConfig+0x134>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d013      	beq.n	800493a <TIM_Base_SetConfig+0xb2>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	4a2a      	ldr	r2, [pc, #168]	@ (80049c0 <TIM_Base_SetConfig+0x138>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d00f      	beq.n	800493a <TIM_Base_SetConfig+0xb2>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a29      	ldr	r2, [pc, #164]	@ (80049c4 <TIM_Base_SetConfig+0x13c>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d00b      	beq.n	800493a <TIM_Base_SetConfig+0xb2>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a28      	ldr	r2, [pc, #160]	@ (80049c8 <TIM_Base_SetConfig+0x140>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d007      	beq.n	800493a <TIM_Base_SetConfig+0xb2>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a27      	ldr	r2, [pc, #156]	@ (80049cc <TIM_Base_SetConfig+0x144>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d003      	beq.n	800493a <TIM_Base_SetConfig+0xb2>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a26      	ldr	r2, [pc, #152]	@ (80049d0 <TIM_Base_SetConfig+0x148>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d108      	bne.n	800494c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004940:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	68fa      	ldr	r2, [r7, #12]
 8004948:	4313      	orrs	r3, r2
 800494a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	695b      	ldr	r3, [r3, #20]
 8004956:	4313      	orrs	r3, r2
 8004958:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	689a      	ldr	r2, [r3, #8]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	4a0e      	ldr	r2, [pc, #56]	@ (80049a8 <TIM_Base_SetConfig+0x120>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d003      	beq.n	800497a <TIM_Base_SetConfig+0xf2>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	4a10      	ldr	r2, [pc, #64]	@ (80049b8 <TIM_Base_SetConfig+0x130>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d103      	bne.n	8004982 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	691a      	ldr	r2, [r3, #16]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f043 0204 	orr.w	r2, r3, #4
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2201      	movs	r2, #1
 8004992:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	68fa      	ldr	r2, [r7, #12]
 8004998:	601a      	str	r2, [r3, #0]
}
 800499a:	bf00      	nop
 800499c:	3714      	adds	r7, #20
 800499e:	46bd      	mov	sp, r7
 80049a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a4:	4770      	bx	lr
 80049a6:	bf00      	nop
 80049a8:	40010000 	.word	0x40010000
 80049ac:	40000400 	.word	0x40000400
 80049b0:	40000800 	.word	0x40000800
 80049b4:	40000c00 	.word	0x40000c00
 80049b8:	40010400 	.word	0x40010400
 80049bc:	40014000 	.word	0x40014000
 80049c0:	40014400 	.word	0x40014400
 80049c4:	40014800 	.word	0x40014800
 80049c8:	40001800 	.word	0x40001800
 80049cc:	40001c00 	.word	0x40001c00
 80049d0:	40002000 	.word	0x40002000

080049d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049dc:	bf00      	nop
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr

080049e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049f0:	bf00      	nop
 80049f2:	370c      	adds	r7, #12
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b082      	sub	sp, #8
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d101      	bne.n	8004a0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e042      	b.n	8004a94 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d106      	bne.n	8004a28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f7fd f9be 	bl	8001da4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2224      	movs	r2, #36	@ 0x24
 8004a2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68da      	ldr	r2, [r3, #12]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004a3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f000 f973 	bl	8004d2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	691a      	ldr	r2, [r3, #16]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004a54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	695a      	ldr	r2, [r3, #20]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004a64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	68da      	ldr	r2, [r3, #12]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004a74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2220      	movs	r2, #32
 8004a80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2220      	movs	r2, #32
 8004a88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004a92:	2300      	movs	r3, #0
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3708      	adds	r7, #8
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b08a      	sub	sp, #40	@ 0x28
 8004aa0:	af02      	add	r7, sp, #8
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	60b9      	str	r1, [r7, #8]
 8004aa6:	603b      	str	r3, [r7, #0]
 8004aa8:	4613      	mov	r3, r2
 8004aaa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004aac:	2300      	movs	r3, #0
 8004aae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	2b20      	cmp	r3, #32
 8004aba:	d175      	bne.n	8004ba8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d002      	beq.n	8004ac8 <HAL_UART_Transmit+0x2c>
 8004ac2:	88fb      	ldrh	r3, [r7, #6]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d101      	bne.n	8004acc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e06e      	b.n	8004baa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2221      	movs	r2, #33	@ 0x21
 8004ad6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ada:	f7fd fb5f 	bl	800219c <HAL_GetTick>
 8004ade:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	88fa      	ldrh	r2, [r7, #6]
 8004ae4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	88fa      	ldrh	r2, [r7, #6]
 8004aea:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004af4:	d108      	bne.n	8004b08 <HAL_UART_Transmit+0x6c>
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d104      	bne.n	8004b08 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004afe:	2300      	movs	r3, #0
 8004b00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	61bb      	str	r3, [r7, #24]
 8004b06:	e003      	b.n	8004b10 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b10:	e02e      	b.n	8004b70 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	9300      	str	r3, [sp, #0]
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	2180      	movs	r1, #128	@ 0x80
 8004b1c:	68f8      	ldr	r0, [r7, #12]
 8004b1e:	f000 f848 	bl	8004bb2 <UART_WaitOnFlagUntilTimeout>
 8004b22:	4603      	mov	r3, r0
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d005      	beq.n	8004b34 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2220      	movs	r2, #32
 8004b2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004b30:	2303      	movs	r3, #3
 8004b32:	e03a      	b.n	8004baa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d10b      	bne.n	8004b52 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	881b      	ldrh	r3, [r3, #0]
 8004b3e:	461a      	mov	r2, r3
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b48:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004b4a:	69bb      	ldr	r3, [r7, #24]
 8004b4c:	3302      	adds	r3, #2
 8004b4e:	61bb      	str	r3, [r7, #24]
 8004b50:	e007      	b.n	8004b62 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	781a      	ldrb	r2, [r3, #0]
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	3301      	adds	r3, #1
 8004b60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	3b01      	subs	r3, #1
 8004b6a:	b29a      	uxth	r2, r3
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d1cb      	bne.n	8004b12 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	9300      	str	r3, [sp, #0]
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	2200      	movs	r2, #0
 8004b82:	2140      	movs	r1, #64	@ 0x40
 8004b84:	68f8      	ldr	r0, [r7, #12]
 8004b86:	f000 f814 	bl	8004bb2 <UART_WaitOnFlagUntilTimeout>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d005      	beq.n	8004b9c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2220      	movs	r2, #32
 8004b94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	e006      	b.n	8004baa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2220      	movs	r2, #32
 8004ba0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	e000      	b.n	8004baa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004ba8:	2302      	movs	r3, #2
  }
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3720      	adds	r7, #32
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}

08004bb2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004bb2:	b580      	push	{r7, lr}
 8004bb4:	b086      	sub	sp, #24
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	60f8      	str	r0, [r7, #12]
 8004bba:	60b9      	str	r1, [r7, #8]
 8004bbc:	603b      	str	r3, [r7, #0]
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bc2:	e03b      	b.n	8004c3c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bc4:	6a3b      	ldr	r3, [r7, #32]
 8004bc6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004bca:	d037      	beq.n	8004c3c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bcc:	f7fd fae6 	bl	800219c <HAL_GetTick>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	6a3a      	ldr	r2, [r7, #32]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d302      	bcc.n	8004be2 <UART_WaitOnFlagUntilTimeout+0x30>
 8004bdc:	6a3b      	ldr	r3, [r7, #32]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d101      	bne.n	8004be6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e03a      	b.n	8004c5c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	f003 0304 	and.w	r3, r3, #4
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d023      	beq.n	8004c3c <UART_WaitOnFlagUntilTimeout+0x8a>
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	2b80      	cmp	r3, #128	@ 0x80
 8004bf8:	d020      	beq.n	8004c3c <UART_WaitOnFlagUntilTimeout+0x8a>
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	2b40      	cmp	r3, #64	@ 0x40
 8004bfe:	d01d      	beq.n	8004c3c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0308 	and.w	r3, r3, #8
 8004c0a:	2b08      	cmp	r3, #8
 8004c0c:	d116      	bne.n	8004c3c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004c0e:	2300      	movs	r3, #0
 8004c10:	617b      	str	r3, [r7, #20]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	617b      	str	r3, [r7, #20]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	617b      	str	r3, [r7, #20]
 8004c22:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c24:	68f8      	ldr	r0, [r7, #12]
 8004c26:	f000 f81d 	bl	8004c64 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2208      	movs	r2, #8
 8004c2e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e00f      	b.n	8004c5c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	4013      	ands	r3, r2
 8004c46:	68ba      	ldr	r2, [r7, #8]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	bf0c      	ite	eq
 8004c4c:	2301      	moveq	r3, #1
 8004c4e:	2300      	movne	r3, #0
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	461a      	mov	r2, r3
 8004c54:	79fb      	ldrb	r3, [r7, #7]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d0b4      	beq.n	8004bc4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c5a:	2300      	movs	r3, #0
}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3718      	adds	r7, #24
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b095      	sub	sp, #84	@ 0x54
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	330c      	adds	r3, #12
 8004c72:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c76:	e853 3f00 	ldrex	r3, [r3]
 8004c7a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c7e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	330c      	adds	r3, #12
 8004c8a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004c8c:	643a      	str	r2, [r7, #64]	@ 0x40
 8004c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c90:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004c92:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c94:	e841 2300 	strex	r3, r2, [r1]
 8004c98:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d1e5      	bne.n	8004c6c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	3314      	adds	r3, #20
 8004ca6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca8:	6a3b      	ldr	r3, [r7, #32]
 8004caa:	e853 3f00 	ldrex	r3, [r3]
 8004cae:	61fb      	str	r3, [r7, #28]
   return(result);
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	f023 0301 	bic.w	r3, r3, #1
 8004cb6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	3314      	adds	r3, #20
 8004cbe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004cc0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004cc2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004cc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004cc8:	e841 2300 	strex	r3, r2, [r1]
 8004ccc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d1e5      	bne.n	8004ca0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d119      	bne.n	8004d10 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	330c      	adds	r3, #12
 8004ce2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	e853 3f00 	ldrex	r3, [r3]
 8004cea:	60bb      	str	r3, [r7, #8]
   return(result);
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	f023 0310 	bic.w	r3, r3, #16
 8004cf2:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	330c      	adds	r3, #12
 8004cfa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004cfc:	61ba      	str	r2, [r7, #24]
 8004cfe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d00:	6979      	ldr	r1, [r7, #20]
 8004d02:	69ba      	ldr	r2, [r7, #24]
 8004d04:	e841 2300 	strex	r3, r2, [r1]
 8004d08:	613b      	str	r3, [r7, #16]
   return(result);
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d1e5      	bne.n	8004cdc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2220      	movs	r2, #32
 8004d14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004d1e:	bf00      	nop
 8004d20:	3754      	adds	r7, #84	@ 0x54
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr
	...

08004d2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d30:	b0c0      	sub	sp, #256	@ 0x100
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	691b      	ldr	r3, [r3, #16]
 8004d40:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d48:	68d9      	ldr	r1, [r3, #12]
 8004d4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	ea40 0301 	orr.w	r3, r0, r1
 8004d54:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d5a:	689a      	ldr	r2, [r3, #8]
 8004d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	431a      	orrs	r2, r3
 8004d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d68:	695b      	ldr	r3, [r3, #20]
 8004d6a:	431a      	orrs	r2, r3
 8004d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d70:	69db      	ldr	r3, [r3, #28]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004d84:	f021 010c 	bic.w	r1, r1, #12
 8004d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004d92:	430b      	orrs	r3, r1
 8004d94:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	695b      	ldr	r3, [r3, #20]
 8004d9e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004da6:	6999      	ldr	r1, [r3, #24]
 8004da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	ea40 0301 	orr.w	r3, r0, r1
 8004db2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	4b8f      	ldr	r3, [pc, #572]	@ (8004ff8 <UART_SetConfig+0x2cc>)
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d005      	beq.n	8004dcc <UART_SetConfig+0xa0>
 8004dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	4b8d      	ldr	r3, [pc, #564]	@ (8004ffc <UART_SetConfig+0x2d0>)
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d104      	bne.n	8004dd6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004dcc:	f7fe feec 	bl	8003ba8 <HAL_RCC_GetPCLK2Freq>
 8004dd0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004dd4:	e003      	b.n	8004dde <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004dd6:	f7fe fed3 	bl	8003b80 <HAL_RCC_GetPCLK1Freq>
 8004dda:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004de2:	69db      	ldr	r3, [r3, #28]
 8004de4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004de8:	f040 810c 	bne.w	8005004 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004dec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004df0:	2200      	movs	r2, #0
 8004df2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004df6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004dfa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004dfe:	4622      	mov	r2, r4
 8004e00:	462b      	mov	r3, r5
 8004e02:	1891      	adds	r1, r2, r2
 8004e04:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004e06:	415b      	adcs	r3, r3
 8004e08:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e0a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004e0e:	4621      	mov	r1, r4
 8004e10:	eb12 0801 	adds.w	r8, r2, r1
 8004e14:	4629      	mov	r1, r5
 8004e16:	eb43 0901 	adc.w	r9, r3, r1
 8004e1a:	f04f 0200 	mov.w	r2, #0
 8004e1e:	f04f 0300 	mov.w	r3, #0
 8004e22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e2e:	4690      	mov	r8, r2
 8004e30:	4699      	mov	r9, r3
 8004e32:	4623      	mov	r3, r4
 8004e34:	eb18 0303 	adds.w	r3, r8, r3
 8004e38:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004e3c:	462b      	mov	r3, r5
 8004e3e:	eb49 0303 	adc.w	r3, r9, r3
 8004e42:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004e52:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004e56:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004e5a:	460b      	mov	r3, r1
 8004e5c:	18db      	adds	r3, r3, r3
 8004e5e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e60:	4613      	mov	r3, r2
 8004e62:	eb42 0303 	adc.w	r3, r2, r3
 8004e66:	657b      	str	r3, [r7, #84]	@ 0x54
 8004e68:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004e6c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004e70:	f7fb feba 	bl	8000be8 <__aeabi_uldivmod>
 8004e74:	4602      	mov	r2, r0
 8004e76:	460b      	mov	r3, r1
 8004e78:	4b61      	ldr	r3, [pc, #388]	@ (8005000 <UART_SetConfig+0x2d4>)
 8004e7a:	fba3 2302 	umull	r2, r3, r3, r2
 8004e7e:	095b      	lsrs	r3, r3, #5
 8004e80:	011c      	lsls	r4, r3, #4
 8004e82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e86:	2200      	movs	r2, #0
 8004e88:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004e8c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004e90:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004e94:	4642      	mov	r2, r8
 8004e96:	464b      	mov	r3, r9
 8004e98:	1891      	adds	r1, r2, r2
 8004e9a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004e9c:	415b      	adcs	r3, r3
 8004e9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ea0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004ea4:	4641      	mov	r1, r8
 8004ea6:	eb12 0a01 	adds.w	sl, r2, r1
 8004eaa:	4649      	mov	r1, r9
 8004eac:	eb43 0b01 	adc.w	fp, r3, r1
 8004eb0:	f04f 0200 	mov.w	r2, #0
 8004eb4:	f04f 0300 	mov.w	r3, #0
 8004eb8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004ebc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004ec0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ec4:	4692      	mov	sl, r2
 8004ec6:	469b      	mov	fp, r3
 8004ec8:	4643      	mov	r3, r8
 8004eca:	eb1a 0303 	adds.w	r3, sl, r3
 8004ece:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004ed2:	464b      	mov	r3, r9
 8004ed4:	eb4b 0303 	adc.w	r3, fp, r3
 8004ed8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004ee8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004eec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004ef0:	460b      	mov	r3, r1
 8004ef2:	18db      	adds	r3, r3, r3
 8004ef4:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	eb42 0303 	adc.w	r3, r2, r3
 8004efc:	647b      	str	r3, [r7, #68]	@ 0x44
 8004efe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004f02:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004f06:	f7fb fe6f 	bl	8000be8 <__aeabi_uldivmod>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	460b      	mov	r3, r1
 8004f0e:	4611      	mov	r1, r2
 8004f10:	4b3b      	ldr	r3, [pc, #236]	@ (8005000 <UART_SetConfig+0x2d4>)
 8004f12:	fba3 2301 	umull	r2, r3, r3, r1
 8004f16:	095b      	lsrs	r3, r3, #5
 8004f18:	2264      	movs	r2, #100	@ 0x64
 8004f1a:	fb02 f303 	mul.w	r3, r2, r3
 8004f1e:	1acb      	subs	r3, r1, r3
 8004f20:	00db      	lsls	r3, r3, #3
 8004f22:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004f26:	4b36      	ldr	r3, [pc, #216]	@ (8005000 <UART_SetConfig+0x2d4>)
 8004f28:	fba3 2302 	umull	r2, r3, r3, r2
 8004f2c:	095b      	lsrs	r3, r3, #5
 8004f2e:	005b      	lsls	r3, r3, #1
 8004f30:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004f34:	441c      	add	r4, r3
 8004f36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004f40:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004f44:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004f48:	4642      	mov	r2, r8
 8004f4a:	464b      	mov	r3, r9
 8004f4c:	1891      	adds	r1, r2, r2
 8004f4e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004f50:	415b      	adcs	r3, r3
 8004f52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f54:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004f58:	4641      	mov	r1, r8
 8004f5a:	1851      	adds	r1, r2, r1
 8004f5c:	6339      	str	r1, [r7, #48]	@ 0x30
 8004f5e:	4649      	mov	r1, r9
 8004f60:	414b      	adcs	r3, r1
 8004f62:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f64:	f04f 0200 	mov.w	r2, #0
 8004f68:	f04f 0300 	mov.w	r3, #0
 8004f6c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004f70:	4659      	mov	r1, fp
 8004f72:	00cb      	lsls	r3, r1, #3
 8004f74:	4651      	mov	r1, sl
 8004f76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f7a:	4651      	mov	r1, sl
 8004f7c:	00ca      	lsls	r2, r1, #3
 8004f7e:	4610      	mov	r0, r2
 8004f80:	4619      	mov	r1, r3
 8004f82:	4603      	mov	r3, r0
 8004f84:	4642      	mov	r2, r8
 8004f86:	189b      	adds	r3, r3, r2
 8004f88:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004f8c:	464b      	mov	r3, r9
 8004f8e:	460a      	mov	r2, r1
 8004f90:	eb42 0303 	adc.w	r3, r2, r3
 8004f94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004fa4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004fa8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004fac:	460b      	mov	r3, r1
 8004fae:	18db      	adds	r3, r3, r3
 8004fb0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	eb42 0303 	adc.w	r3, r2, r3
 8004fb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004fba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004fbe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004fc2:	f7fb fe11 	bl	8000be8 <__aeabi_uldivmod>
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	460b      	mov	r3, r1
 8004fca:	4b0d      	ldr	r3, [pc, #52]	@ (8005000 <UART_SetConfig+0x2d4>)
 8004fcc:	fba3 1302 	umull	r1, r3, r3, r2
 8004fd0:	095b      	lsrs	r3, r3, #5
 8004fd2:	2164      	movs	r1, #100	@ 0x64
 8004fd4:	fb01 f303 	mul.w	r3, r1, r3
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	00db      	lsls	r3, r3, #3
 8004fdc:	3332      	adds	r3, #50	@ 0x32
 8004fde:	4a08      	ldr	r2, [pc, #32]	@ (8005000 <UART_SetConfig+0x2d4>)
 8004fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe4:	095b      	lsrs	r3, r3, #5
 8004fe6:	f003 0207 	and.w	r2, r3, #7
 8004fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4422      	add	r2, r4
 8004ff2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ff4:	e106      	b.n	8005204 <UART_SetConfig+0x4d8>
 8004ff6:	bf00      	nop
 8004ff8:	40011000 	.word	0x40011000
 8004ffc:	40011400 	.word	0x40011400
 8005000:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005004:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005008:	2200      	movs	r2, #0
 800500a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800500e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005012:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005016:	4642      	mov	r2, r8
 8005018:	464b      	mov	r3, r9
 800501a:	1891      	adds	r1, r2, r2
 800501c:	6239      	str	r1, [r7, #32]
 800501e:	415b      	adcs	r3, r3
 8005020:	627b      	str	r3, [r7, #36]	@ 0x24
 8005022:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005026:	4641      	mov	r1, r8
 8005028:	1854      	adds	r4, r2, r1
 800502a:	4649      	mov	r1, r9
 800502c:	eb43 0501 	adc.w	r5, r3, r1
 8005030:	f04f 0200 	mov.w	r2, #0
 8005034:	f04f 0300 	mov.w	r3, #0
 8005038:	00eb      	lsls	r3, r5, #3
 800503a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800503e:	00e2      	lsls	r2, r4, #3
 8005040:	4614      	mov	r4, r2
 8005042:	461d      	mov	r5, r3
 8005044:	4643      	mov	r3, r8
 8005046:	18e3      	adds	r3, r4, r3
 8005048:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800504c:	464b      	mov	r3, r9
 800504e:	eb45 0303 	adc.w	r3, r5, r3
 8005052:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005062:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005066:	f04f 0200 	mov.w	r2, #0
 800506a:	f04f 0300 	mov.w	r3, #0
 800506e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005072:	4629      	mov	r1, r5
 8005074:	008b      	lsls	r3, r1, #2
 8005076:	4621      	mov	r1, r4
 8005078:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800507c:	4621      	mov	r1, r4
 800507e:	008a      	lsls	r2, r1, #2
 8005080:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005084:	f7fb fdb0 	bl	8000be8 <__aeabi_uldivmod>
 8005088:	4602      	mov	r2, r0
 800508a:	460b      	mov	r3, r1
 800508c:	4b60      	ldr	r3, [pc, #384]	@ (8005210 <UART_SetConfig+0x4e4>)
 800508e:	fba3 2302 	umull	r2, r3, r3, r2
 8005092:	095b      	lsrs	r3, r3, #5
 8005094:	011c      	lsls	r4, r3, #4
 8005096:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800509a:	2200      	movs	r2, #0
 800509c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80050a0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80050a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80050a8:	4642      	mov	r2, r8
 80050aa:	464b      	mov	r3, r9
 80050ac:	1891      	adds	r1, r2, r2
 80050ae:	61b9      	str	r1, [r7, #24]
 80050b0:	415b      	adcs	r3, r3
 80050b2:	61fb      	str	r3, [r7, #28]
 80050b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050b8:	4641      	mov	r1, r8
 80050ba:	1851      	adds	r1, r2, r1
 80050bc:	6139      	str	r1, [r7, #16]
 80050be:	4649      	mov	r1, r9
 80050c0:	414b      	adcs	r3, r1
 80050c2:	617b      	str	r3, [r7, #20]
 80050c4:	f04f 0200 	mov.w	r2, #0
 80050c8:	f04f 0300 	mov.w	r3, #0
 80050cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80050d0:	4659      	mov	r1, fp
 80050d2:	00cb      	lsls	r3, r1, #3
 80050d4:	4651      	mov	r1, sl
 80050d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050da:	4651      	mov	r1, sl
 80050dc:	00ca      	lsls	r2, r1, #3
 80050de:	4610      	mov	r0, r2
 80050e0:	4619      	mov	r1, r3
 80050e2:	4603      	mov	r3, r0
 80050e4:	4642      	mov	r2, r8
 80050e6:	189b      	adds	r3, r3, r2
 80050e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80050ec:	464b      	mov	r3, r9
 80050ee:	460a      	mov	r2, r1
 80050f0:	eb42 0303 	adc.w	r3, r2, r3
 80050f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80050f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005102:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005104:	f04f 0200 	mov.w	r2, #0
 8005108:	f04f 0300 	mov.w	r3, #0
 800510c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005110:	4649      	mov	r1, r9
 8005112:	008b      	lsls	r3, r1, #2
 8005114:	4641      	mov	r1, r8
 8005116:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800511a:	4641      	mov	r1, r8
 800511c:	008a      	lsls	r2, r1, #2
 800511e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005122:	f7fb fd61 	bl	8000be8 <__aeabi_uldivmod>
 8005126:	4602      	mov	r2, r0
 8005128:	460b      	mov	r3, r1
 800512a:	4611      	mov	r1, r2
 800512c:	4b38      	ldr	r3, [pc, #224]	@ (8005210 <UART_SetConfig+0x4e4>)
 800512e:	fba3 2301 	umull	r2, r3, r3, r1
 8005132:	095b      	lsrs	r3, r3, #5
 8005134:	2264      	movs	r2, #100	@ 0x64
 8005136:	fb02 f303 	mul.w	r3, r2, r3
 800513a:	1acb      	subs	r3, r1, r3
 800513c:	011b      	lsls	r3, r3, #4
 800513e:	3332      	adds	r3, #50	@ 0x32
 8005140:	4a33      	ldr	r2, [pc, #204]	@ (8005210 <UART_SetConfig+0x4e4>)
 8005142:	fba2 2303 	umull	r2, r3, r2, r3
 8005146:	095b      	lsrs	r3, r3, #5
 8005148:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800514c:	441c      	add	r4, r3
 800514e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005152:	2200      	movs	r2, #0
 8005154:	673b      	str	r3, [r7, #112]	@ 0x70
 8005156:	677a      	str	r2, [r7, #116]	@ 0x74
 8005158:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800515c:	4642      	mov	r2, r8
 800515e:	464b      	mov	r3, r9
 8005160:	1891      	adds	r1, r2, r2
 8005162:	60b9      	str	r1, [r7, #8]
 8005164:	415b      	adcs	r3, r3
 8005166:	60fb      	str	r3, [r7, #12]
 8005168:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800516c:	4641      	mov	r1, r8
 800516e:	1851      	adds	r1, r2, r1
 8005170:	6039      	str	r1, [r7, #0]
 8005172:	4649      	mov	r1, r9
 8005174:	414b      	adcs	r3, r1
 8005176:	607b      	str	r3, [r7, #4]
 8005178:	f04f 0200 	mov.w	r2, #0
 800517c:	f04f 0300 	mov.w	r3, #0
 8005180:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005184:	4659      	mov	r1, fp
 8005186:	00cb      	lsls	r3, r1, #3
 8005188:	4651      	mov	r1, sl
 800518a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800518e:	4651      	mov	r1, sl
 8005190:	00ca      	lsls	r2, r1, #3
 8005192:	4610      	mov	r0, r2
 8005194:	4619      	mov	r1, r3
 8005196:	4603      	mov	r3, r0
 8005198:	4642      	mov	r2, r8
 800519a:	189b      	adds	r3, r3, r2
 800519c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800519e:	464b      	mov	r3, r9
 80051a0:	460a      	mov	r2, r1
 80051a2:	eb42 0303 	adc.w	r3, r2, r3
 80051a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80051a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	663b      	str	r3, [r7, #96]	@ 0x60
 80051b2:	667a      	str	r2, [r7, #100]	@ 0x64
 80051b4:	f04f 0200 	mov.w	r2, #0
 80051b8:	f04f 0300 	mov.w	r3, #0
 80051bc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80051c0:	4649      	mov	r1, r9
 80051c2:	008b      	lsls	r3, r1, #2
 80051c4:	4641      	mov	r1, r8
 80051c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051ca:	4641      	mov	r1, r8
 80051cc:	008a      	lsls	r2, r1, #2
 80051ce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80051d2:	f7fb fd09 	bl	8000be8 <__aeabi_uldivmod>
 80051d6:	4602      	mov	r2, r0
 80051d8:	460b      	mov	r3, r1
 80051da:	4b0d      	ldr	r3, [pc, #52]	@ (8005210 <UART_SetConfig+0x4e4>)
 80051dc:	fba3 1302 	umull	r1, r3, r3, r2
 80051e0:	095b      	lsrs	r3, r3, #5
 80051e2:	2164      	movs	r1, #100	@ 0x64
 80051e4:	fb01 f303 	mul.w	r3, r1, r3
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	011b      	lsls	r3, r3, #4
 80051ec:	3332      	adds	r3, #50	@ 0x32
 80051ee:	4a08      	ldr	r2, [pc, #32]	@ (8005210 <UART_SetConfig+0x4e4>)
 80051f0:	fba2 2303 	umull	r2, r3, r2, r3
 80051f4:	095b      	lsrs	r3, r3, #5
 80051f6:	f003 020f 	and.w	r2, r3, #15
 80051fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4422      	add	r2, r4
 8005202:	609a      	str	r2, [r3, #8]
}
 8005204:	bf00      	nop
 8005206:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800520a:	46bd      	mov	sp, r7
 800520c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005210:	51eb851f 	.word	0x51eb851f

08005214 <__NVIC_SetPriority>:
{
 8005214:	b480      	push	{r7}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
 800521a:	4603      	mov	r3, r0
 800521c:	6039      	str	r1, [r7, #0]
 800521e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005224:	2b00      	cmp	r3, #0
 8005226:	db0a      	blt.n	800523e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	b2da      	uxtb	r2, r3
 800522c:	490c      	ldr	r1, [pc, #48]	@ (8005260 <__NVIC_SetPriority+0x4c>)
 800522e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005232:	0112      	lsls	r2, r2, #4
 8005234:	b2d2      	uxtb	r2, r2
 8005236:	440b      	add	r3, r1
 8005238:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800523c:	e00a      	b.n	8005254 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	b2da      	uxtb	r2, r3
 8005242:	4908      	ldr	r1, [pc, #32]	@ (8005264 <__NVIC_SetPriority+0x50>)
 8005244:	79fb      	ldrb	r3, [r7, #7]
 8005246:	f003 030f 	and.w	r3, r3, #15
 800524a:	3b04      	subs	r3, #4
 800524c:	0112      	lsls	r2, r2, #4
 800524e:	b2d2      	uxtb	r2, r2
 8005250:	440b      	add	r3, r1
 8005252:	761a      	strb	r2, [r3, #24]
}
 8005254:	bf00      	nop
 8005256:	370c      	adds	r7, #12
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr
 8005260:	e000e100 	.word	0xe000e100
 8005264:	e000ed00 	.word	0xe000ed00

08005268 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005268:	b580      	push	{r7, lr}
 800526a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800526c:	4b05      	ldr	r3, [pc, #20]	@ (8005284 <SysTick_Handler+0x1c>)
 800526e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005270:	f002 fa04 	bl	800767c <xTaskGetSchedulerState>
 8005274:	4603      	mov	r3, r0
 8005276:	2b01      	cmp	r3, #1
 8005278:	d001      	beq.n	800527e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800527a:	f003 f8fd 	bl	8008478 <xPortSysTickHandler>
  }
}
 800527e:	bf00      	nop
 8005280:	bd80      	pop	{r7, pc}
 8005282:	bf00      	nop
 8005284:	e000e010 	.word	0xe000e010

08005288 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005288:	b580      	push	{r7, lr}
 800528a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800528c:	2100      	movs	r1, #0
 800528e:	f06f 0004 	mvn.w	r0, #4
 8005292:	f7ff ffbf 	bl	8005214 <__NVIC_SetPriority>
#endif
}
 8005296:	bf00      	nop
 8005298:	bd80      	pop	{r7, pc}
	...

0800529c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052a2:	f3ef 8305 	mrs	r3, IPSR
 80052a6:	603b      	str	r3, [r7, #0]
  return(result);
 80052a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d003      	beq.n	80052b6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80052ae:	f06f 0305 	mvn.w	r3, #5
 80052b2:	607b      	str	r3, [r7, #4]
 80052b4:	e00c      	b.n	80052d0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80052b6:	4b0a      	ldr	r3, [pc, #40]	@ (80052e0 <osKernelInitialize+0x44>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d105      	bne.n	80052ca <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80052be:	4b08      	ldr	r3, [pc, #32]	@ (80052e0 <osKernelInitialize+0x44>)
 80052c0:	2201      	movs	r2, #1
 80052c2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80052c4:	2300      	movs	r3, #0
 80052c6:	607b      	str	r3, [r7, #4]
 80052c8:	e002      	b.n	80052d0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80052ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80052ce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80052d0:	687b      	ldr	r3, [r7, #4]
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	370c      	adds	r7, #12
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	20000710 	.word	0x20000710

080052e4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b082      	sub	sp, #8
 80052e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052ea:	f3ef 8305 	mrs	r3, IPSR
 80052ee:	603b      	str	r3, [r7, #0]
  return(result);
 80052f0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d003      	beq.n	80052fe <osKernelStart+0x1a>
    stat = osErrorISR;
 80052f6:	f06f 0305 	mvn.w	r3, #5
 80052fa:	607b      	str	r3, [r7, #4]
 80052fc:	e010      	b.n	8005320 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80052fe:	4b0b      	ldr	r3, [pc, #44]	@ (800532c <osKernelStart+0x48>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2b01      	cmp	r3, #1
 8005304:	d109      	bne.n	800531a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005306:	f7ff ffbf 	bl	8005288 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800530a:	4b08      	ldr	r3, [pc, #32]	@ (800532c <osKernelStart+0x48>)
 800530c:	2202      	movs	r2, #2
 800530e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005310:	f001 fd56 	bl	8006dc0 <vTaskStartScheduler>
      stat = osOK;
 8005314:	2300      	movs	r3, #0
 8005316:	607b      	str	r3, [r7, #4]
 8005318:	e002      	b.n	8005320 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800531a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800531e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005320:	687b      	ldr	r3, [r7, #4]
}
 8005322:	4618      	mov	r0, r3
 8005324:	3708      	adds	r7, #8
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	20000710 	.word	0x20000710

08005330 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005330:	b580      	push	{r7, lr}
 8005332:	b08e      	sub	sp, #56	@ 0x38
 8005334:	af04      	add	r7, sp, #16
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800533c:	2300      	movs	r3, #0
 800533e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005340:	f3ef 8305 	mrs	r3, IPSR
 8005344:	617b      	str	r3, [r7, #20]
  return(result);
 8005346:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005348:	2b00      	cmp	r3, #0
 800534a:	d17e      	bne.n	800544a <osThreadNew+0x11a>
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d07b      	beq.n	800544a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005352:	2380      	movs	r3, #128	@ 0x80
 8005354:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005356:	2318      	movs	r3, #24
 8005358:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800535a:	2300      	movs	r3, #0
 800535c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800535e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005362:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d045      	beq.n	80053f6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d002      	beq.n	8005378 <osThreadNew+0x48>
        name = attr->name;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	699b      	ldr	r3, [r3, #24]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d002      	beq.n	8005386 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	699b      	ldr	r3, [r3, #24]
 8005384:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005386:	69fb      	ldr	r3, [r7, #28]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d008      	beq.n	800539e <osThreadNew+0x6e>
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	2b38      	cmp	r3, #56	@ 0x38
 8005390:	d805      	bhi.n	800539e <osThreadNew+0x6e>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	f003 0301 	and.w	r3, r3, #1
 800539a:	2b00      	cmp	r3, #0
 800539c:	d001      	beq.n	80053a2 <osThreadNew+0x72>
        return (NULL);
 800539e:	2300      	movs	r3, #0
 80053a0:	e054      	b.n	800544c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	695b      	ldr	r3, [r3, #20]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d003      	beq.n	80053b2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	695b      	ldr	r3, [r3, #20]
 80053ae:	089b      	lsrs	r3, r3, #2
 80053b0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00e      	beq.n	80053d8 <osThreadNew+0xa8>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	2b5b      	cmp	r3, #91	@ 0x5b
 80053c0:	d90a      	bls.n	80053d8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d006      	beq.n	80053d8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	695b      	ldr	r3, [r3, #20]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d002      	beq.n	80053d8 <osThreadNew+0xa8>
        mem = 1;
 80053d2:	2301      	movs	r3, #1
 80053d4:	61bb      	str	r3, [r7, #24]
 80053d6:	e010      	b.n	80053fa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d10c      	bne.n	80053fa <osThreadNew+0xca>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d108      	bne.n	80053fa <osThreadNew+0xca>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	691b      	ldr	r3, [r3, #16]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d104      	bne.n	80053fa <osThreadNew+0xca>
          mem = 0;
 80053f0:	2300      	movs	r3, #0
 80053f2:	61bb      	str	r3, [r7, #24]
 80053f4:	e001      	b.n	80053fa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80053f6:	2300      	movs	r3, #0
 80053f8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80053fa:	69bb      	ldr	r3, [r7, #24]
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d110      	bne.n	8005422 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005408:	9202      	str	r2, [sp, #8]
 800540a:	9301      	str	r3, [sp, #4]
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	9300      	str	r3, [sp, #0]
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	6a3a      	ldr	r2, [r7, #32]
 8005414:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005416:	68f8      	ldr	r0, [r7, #12]
 8005418:	f001 faf6 	bl	8006a08 <xTaskCreateStatic>
 800541c:	4603      	mov	r3, r0
 800541e:	613b      	str	r3, [r7, #16]
 8005420:	e013      	b.n	800544a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d110      	bne.n	800544a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005428:	6a3b      	ldr	r3, [r7, #32]
 800542a:	b29a      	uxth	r2, r3
 800542c:	f107 0310 	add.w	r3, r7, #16
 8005430:	9301      	str	r3, [sp, #4]
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	9300      	str	r3, [sp, #0]
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800543a:	68f8      	ldr	r0, [r7, #12]
 800543c:	f001 fb44 	bl	8006ac8 <xTaskCreate>
 8005440:	4603      	mov	r3, r0
 8005442:	2b01      	cmp	r3, #1
 8005444:	d001      	beq.n	800544a <osThreadNew+0x11a>
            hTask = NULL;
 8005446:	2300      	movs	r3, #0
 8005448:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800544a:	693b      	ldr	r3, [r7, #16]
}
 800544c:	4618      	mov	r0, r3
 800544e:	3728      	adds	r7, #40	@ 0x28
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}

08005454 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005454:	b580      	push	{r7, lr}
 8005456:	b084      	sub	sp, #16
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800545c:	f3ef 8305 	mrs	r3, IPSR
 8005460:	60bb      	str	r3, [r7, #8]
  return(result);
 8005462:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005464:	2b00      	cmp	r3, #0
 8005466:	d003      	beq.n	8005470 <osDelay+0x1c>
    stat = osErrorISR;
 8005468:	f06f 0305 	mvn.w	r3, #5
 800546c:	60fb      	str	r3, [r7, #12]
 800546e:	e007      	b.n	8005480 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005470:	2300      	movs	r3, #0
 8005472:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d002      	beq.n	8005480 <osDelay+0x2c>
      vTaskDelay(ticks);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f001 fc6a 	bl	8006d54 <vTaskDelay>
    }
  }

  return (stat);
 8005480:	68fb      	ldr	r3, [r7, #12]
}
 8005482:	4618      	mov	r0, r3
 8005484:	3710      	adds	r7, #16
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}

0800548a <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800548a:	b580      	push	{r7, lr}
 800548c:	b088      	sub	sp, #32
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8005492:	2300      	movs	r3, #0
 8005494:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005496:	f3ef 8305 	mrs	r3, IPSR
 800549a:	60bb      	str	r3, [r7, #8]
  return(result);
 800549c:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d174      	bne.n	800558c <osMutexNew+0x102>
    if (attr != NULL) {
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d003      	beq.n	80054b0 <osMutexNew+0x26>
      type = attr->attr_bits;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	61bb      	str	r3, [r7, #24]
 80054ae:	e001      	b.n	80054b4 <osMutexNew+0x2a>
    } else {
      type = 0U;
 80054b0:	2300      	movs	r3, #0
 80054b2:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	f003 0301 	and.w	r3, r3, #1
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d002      	beq.n	80054c4 <osMutexNew+0x3a>
      rmtx = 1U;
 80054be:	2301      	movs	r3, #1
 80054c0:	617b      	str	r3, [r7, #20]
 80054c2:	e001      	b.n	80054c8 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80054c4:	2300      	movs	r3, #0
 80054c6:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80054c8:	69bb      	ldr	r3, [r7, #24]
 80054ca:	f003 0308 	and.w	r3, r3, #8
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d15c      	bne.n	800558c <osMutexNew+0x102>
      mem = -1;
 80054d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80054d6:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d015      	beq.n	800550a <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d006      	beq.n	80054f4 <osMutexNew+0x6a>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	2b4f      	cmp	r3, #79	@ 0x4f
 80054ec:	d902      	bls.n	80054f4 <osMutexNew+0x6a>
          mem = 1;
 80054ee:	2301      	movs	r3, #1
 80054f0:	613b      	str	r3, [r7, #16]
 80054f2:	e00c      	b.n	800550e <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d108      	bne.n	800550e <osMutexNew+0x84>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d104      	bne.n	800550e <osMutexNew+0x84>
            mem = 0;
 8005504:	2300      	movs	r3, #0
 8005506:	613b      	str	r3, [r7, #16]
 8005508:	e001      	b.n	800550e <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800550a:	2300      	movs	r3, #0
 800550c:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	2b01      	cmp	r3, #1
 8005512:	d112      	bne.n	800553a <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d007      	beq.n	800552a <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	4619      	mov	r1, r3
 8005520:	2004      	movs	r0, #4
 8005522:	f000 fc50 	bl	8005dc6 <xQueueCreateMutexStatic>
 8005526:	61f8      	str	r0, [r7, #28]
 8005528:	e016      	b.n	8005558 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	4619      	mov	r1, r3
 8005530:	2001      	movs	r0, #1
 8005532:	f000 fc48 	bl	8005dc6 <xQueueCreateMutexStatic>
 8005536:	61f8      	str	r0, [r7, #28]
 8005538:	e00e      	b.n	8005558 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d10b      	bne.n	8005558 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d004      	beq.n	8005550 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8005546:	2004      	movs	r0, #4
 8005548:	f000 fc25 	bl	8005d96 <xQueueCreateMutex>
 800554c:	61f8      	str	r0, [r7, #28]
 800554e:	e003      	b.n	8005558 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8005550:	2001      	movs	r0, #1
 8005552:	f000 fc20 	bl	8005d96 <xQueueCreateMutex>
 8005556:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00c      	beq.n	8005578 <osMutexNew+0xee>
        if (attr != NULL) {
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d003      	beq.n	800556c <osMutexNew+0xe2>
          name = attr->name;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	60fb      	str	r3, [r7, #12]
 800556a:	e001      	b.n	8005570 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800556c:	2300      	movs	r3, #0
 800556e:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8005570:	68f9      	ldr	r1, [r7, #12]
 8005572:	69f8      	ldr	r0, [r7, #28]
 8005574:	f001 f9ea 	bl	800694c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d006      	beq.n	800558c <osMutexNew+0x102>
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d003      	beq.n	800558c <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	f043 0301 	orr.w	r3, r3, #1
 800558a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800558c:	69fb      	ldr	r3, [r7, #28]
}
 800558e:	4618      	mov	r0, r3
 8005590:	3720      	adds	r7, #32
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}

08005596 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8005596:	b580      	push	{r7, lr}
 8005598:	b086      	sub	sp, #24
 800559a:	af00      	add	r7, sp, #0
 800559c:	6078      	str	r0, [r7, #4]
 800559e:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f023 0301 	bic.w	r3, r3, #1
 80055a6:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f003 0301 	and.w	r3, r3, #1
 80055ae:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80055b0:	2300      	movs	r3, #0
 80055b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055b4:	f3ef 8305 	mrs	r3, IPSR
 80055b8:	60bb      	str	r3, [r7, #8]
  return(result);
 80055ba:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d003      	beq.n	80055c8 <osMutexAcquire+0x32>
    stat = osErrorISR;
 80055c0:	f06f 0305 	mvn.w	r3, #5
 80055c4:	617b      	str	r3, [r7, #20]
 80055c6:	e02c      	b.n	8005622 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d103      	bne.n	80055d6 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80055ce:	f06f 0303 	mvn.w	r3, #3
 80055d2:	617b      	str	r3, [r7, #20]
 80055d4:	e025      	b.n	8005622 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d011      	beq.n	8005600 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80055dc:	6839      	ldr	r1, [r7, #0]
 80055de:	6938      	ldr	r0, [r7, #16]
 80055e0:	f000 fc41 	bl	8005e66 <xQueueTakeMutexRecursive>
 80055e4:	4603      	mov	r3, r0
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d01b      	beq.n	8005622 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d003      	beq.n	80055f8 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80055f0:	f06f 0301 	mvn.w	r3, #1
 80055f4:	617b      	str	r3, [r7, #20]
 80055f6:	e014      	b.n	8005622 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80055f8:	f06f 0302 	mvn.w	r3, #2
 80055fc:	617b      	str	r3, [r7, #20]
 80055fe:	e010      	b.n	8005622 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8005600:	6839      	ldr	r1, [r7, #0]
 8005602:	6938      	ldr	r0, [r7, #16]
 8005604:	f000 fee8 	bl	80063d8 <xQueueSemaphoreTake>
 8005608:	4603      	mov	r3, r0
 800560a:	2b01      	cmp	r3, #1
 800560c:	d009      	beq.n	8005622 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d003      	beq.n	800561c <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8005614:	f06f 0301 	mvn.w	r3, #1
 8005618:	617b      	str	r3, [r7, #20]
 800561a:	e002      	b.n	8005622 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800561c:	f06f 0302 	mvn.w	r3, #2
 8005620:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8005622:	697b      	ldr	r3, [r7, #20]
}
 8005624:	4618      	mov	r0, r3
 8005626:	3718      	adds	r7, #24
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}

0800562c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800562c:	b580      	push	{r7, lr}
 800562e:	b086      	sub	sp, #24
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f023 0301 	bic.w	r3, r3, #1
 800563a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f003 0301 	and.w	r3, r3, #1
 8005642:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005644:	2300      	movs	r3, #0
 8005646:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005648:	f3ef 8305 	mrs	r3, IPSR
 800564c:	60bb      	str	r3, [r7, #8]
  return(result);
 800564e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005650:	2b00      	cmp	r3, #0
 8005652:	d003      	beq.n	800565c <osMutexRelease+0x30>
    stat = osErrorISR;
 8005654:	f06f 0305 	mvn.w	r3, #5
 8005658:	617b      	str	r3, [r7, #20]
 800565a:	e01f      	b.n	800569c <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d103      	bne.n	800566a <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8005662:	f06f 0303 	mvn.w	r3, #3
 8005666:	617b      	str	r3, [r7, #20]
 8005668:	e018      	b.n	800569c <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d009      	beq.n	8005684 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8005670:	6938      	ldr	r0, [r7, #16]
 8005672:	f000 fbc3 	bl	8005dfc <xQueueGiveMutexRecursive>
 8005676:	4603      	mov	r3, r0
 8005678:	2b01      	cmp	r3, #1
 800567a:	d00f      	beq.n	800569c <osMutexRelease+0x70>
        stat = osErrorResource;
 800567c:	f06f 0302 	mvn.w	r3, #2
 8005680:	617b      	str	r3, [r7, #20]
 8005682:	e00b      	b.n	800569c <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8005684:	2300      	movs	r3, #0
 8005686:	2200      	movs	r2, #0
 8005688:	2100      	movs	r1, #0
 800568a:	6938      	ldr	r0, [r7, #16]
 800568c:	f000 fc22 	bl	8005ed4 <xQueueGenericSend>
 8005690:	4603      	mov	r3, r0
 8005692:	2b01      	cmp	r3, #1
 8005694:	d002      	beq.n	800569c <osMutexRelease+0x70>
        stat = osErrorResource;
 8005696:	f06f 0302 	mvn.w	r3, #2
 800569a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800569c:	697b      	ldr	r3, [r7, #20]
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3718      	adds	r7, #24
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}

080056a6 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80056a6:	b580      	push	{r7, lr}
 80056a8:	b08a      	sub	sp, #40	@ 0x28
 80056aa:	af02      	add	r7, sp, #8
 80056ac:	60f8      	str	r0, [r7, #12]
 80056ae:	60b9      	str	r1, [r7, #8]
 80056b0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80056b2:	2300      	movs	r3, #0
 80056b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056b6:	f3ef 8305 	mrs	r3, IPSR
 80056ba:	613b      	str	r3, [r7, #16]
  return(result);
 80056bc:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d15f      	bne.n	8005782 <osMessageQueueNew+0xdc>
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d05c      	beq.n	8005782 <osMessageQueueNew+0xdc>
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d059      	beq.n	8005782 <osMessageQueueNew+0xdc>
    mem = -1;
 80056ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80056d2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d029      	beq.n	800572e <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d012      	beq.n	8005708 <osMessageQueueNew+0x62>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	2b4f      	cmp	r3, #79	@ 0x4f
 80056e8:	d90e      	bls.n	8005708 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d00a      	beq.n	8005708 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	695a      	ldr	r2, [r3, #20]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	68b9      	ldr	r1, [r7, #8]
 80056fa:	fb01 f303 	mul.w	r3, r1, r3
 80056fe:	429a      	cmp	r2, r3
 8005700:	d302      	bcc.n	8005708 <osMessageQueueNew+0x62>
        mem = 1;
 8005702:	2301      	movs	r3, #1
 8005704:	61bb      	str	r3, [r7, #24]
 8005706:	e014      	b.n	8005732 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d110      	bne.n	8005732 <osMessageQueueNew+0x8c>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d10c      	bne.n	8005732 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800571c:	2b00      	cmp	r3, #0
 800571e:	d108      	bne.n	8005732 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	695b      	ldr	r3, [r3, #20]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d104      	bne.n	8005732 <osMessageQueueNew+0x8c>
          mem = 0;
 8005728:	2300      	movs	r3, #0
 800572a:	61bb      	str	r3, [r7, #24]
 800572c:	e001      	b.n	8005732 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800572e:	2300      	movs	r3, #0
 8005730:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005732:	69bb      	ldr	r3, [r7, #24]
 8005734:	2b01      	cmp	r3, #1
 8005736:	d10b      	bne.n	8005750 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	691a      	ldr	r2, [r3, #16]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	2100      	movs	r1, #0
 8005742:	9100      	str	r1, [sp, #0]
 8005744:	68b9      	ldr	r1, [r7, #8]
 8005746:	68f8      	ldr	r0, [r7, #12]
 8005748:	f000 fa30 	bl	8005bac <xQueueGenericCreateStatic>
 800574c:	61f8      	str	r0, [r7, #28]
 800574e:	e008      	b.n	8005762 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005750:	69bb      	ldr	r3, [r7, #24]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d105      	bne.n	8005762 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005756:	2200      	movs	r2, #0
 8005758:	68b9      	ldr	r1, [r7, #8]
 800575a:	68f8      	ldr	r0, [r7, #12]
 800575c:	f000 faa3 	bl	8005ca6 <xQueueGenericCreate>
 8005760:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d00c      	beq.n	8005782 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d003      	beq.n	8005776 <osMessageQueueNew+0xd0>
        name = attr->name;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	617b      	str	r3, [r7, #20]
 8005774:	e001      	b.n	800577a <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005776:	2300      	movs	r3, #0
 8005778:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800577a:	6979      	ldr	r1, [r7, #20]
 800577c:	69f8      	ldr	r0, [r7, #28]
 800577e:	f001 f8e5 	bl	800694c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005782:	69fb      	ldr	r3, [r7, #28]
}
 8005784:	4618      	mov	r0, r3
 8005786:	3720      	adds	r7, #32
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}

0800578c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800578c:	b580      	push	{r7, lr}
 800578e:	b088      	sub	sp, #32
 8005790:	af00      	add	r7, sp, #0
 8005792:	60f8      	str	r0, [r7, #12]
 8005794:	60b9      	str	r1, [r7, #8]
 8005796:	603b      	str	r3, [r7, #0]
 8005798:	4613      	mov	r3, r2
 800579a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80057a0:	2300      	movs	r3, #0
 80057a2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057a4:	f3ef 8305 	mrs	r3, IPSR
 80057a8:	617b      	str	r3, [r7, #20]
  return(result);
 80057aa:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d028      	beq.n	8005802 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d005      	beq.n	80057c2 <osMessageQueuePut+0x36>
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d002      	beq.n	80057c2 <osMessageQueuePut+0x36>
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d003      	beq.n	80057ca <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80057c2:	f06f 0303 	mvn.w	r3, #3
 80057c6:	61fb      	str	r3, [r7, #28]
 80057c8:	e038      	b.n	800583c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80057ca:	2300      	movs	r3, #0
 80057cc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80057ce:	f107 0210 	add.w	r2, r7, #16
 80057d2:	2300      	movs	r3, #0
 80057d4:	68b9      	ldr	r1, [r7, #8]
 80057d6:	69b8      	ldr	r0, [r7, #24]
 80057d8:	f000 fc7e 	bl	80060d8 <xQueueGenericSendFromISR>
 80057dc:	4603      	mov	r3, r0
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d003      	beq.n	80057ea <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80057e2:	f06f 0302 	mvn.w	r3, #2
 80057e6:	61fb      	str	r3, [r7, #28]
 80057e8:	e028      	b.n	800583c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d025      	beq.n	800583c <osMessageQueuePut+0xb0>
 80057f0:	4b15      	ldr	r3, [pc, #84]	@ (8005848 <osMessageQueuePut+0xbc>)
 80057f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057f6:	601a      	str	r2, [r3, #0]
 80057f8:	f3bf 8f4f 	dsb	sy
 80057fc:	f3bf 8f6f 	isb	sy
 8005800:	e01c      	b.n	800583c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005802:	69bb      	ldr	r3, [r7, #24]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d002      	beq.n	800580e <osMessageQueuePut+0x82>
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d103      	bne.n	8005816 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800580e:	f06f 0303 	mvn.w	r3, #3
 8005812:	61fb      	str	r3, [r7, #28]
 8005814:	e012      	b.n	800583c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005816:	2300      	movs	r3, #0
 8005818:	683a      	ldr	r2, [r7, #0]
 800581a:	68b9      	ldr	r1, [r7, #8]
 800581c:	69b8      	ldr	r0, [r7, #24]
 800581e:	f000 fb59 	bl	8005ed4 <xQueueGenericSend>
 8005822:	4603      	mov	r3, r0
 8005824:	2b01      	cmp	r3, #1
 8005826:	d009      	beq.n	800583c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d003      	beq.n	8005836 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800582e:	f06f 0301 	mvn.w	r3, #1
 8005832:	61fb      	str	r3, [r7, #28]
 8005834:	e002      	b.n	800583c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8005836:	f06f 0302 	mvn.w	r3, #2
 800583a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800583c:	69fb      	ldr	r3, [r7, #28]
}
 800583e:	4618      	mov	r0, r3
 8005840:	3720      	adds	r7, #32
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
 8005846:	bf00      	nop
 8005848:	e000ed04 	.word	0xe000ed04

0800584c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800584c:	b580      	push	{r7, lr}
 800584e:	b088      	sub	sp, #32
 8005850:	af00      	add	r7, sp, #0
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	607a      	str	r2, [r7, #4]
 8005858:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800585e:	2300      	movs	r3, #0
 8005860:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005862:	f3ef 8305 	mrs	r3, IPSR
 8005866:	617b      	str	r3, [r7, #20]
  return(result);
 8005868:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800586a:	2b00      	cmp	r3, #0
 800586c:	d028      	beq.n	80058c0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d005      	beq.n	8005880 <osMessageQueueGet+0x34>
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d002      	beq.n	8005880 <osMessageQueueGet+0x34>
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d003      	beq.n	8005888 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8005880:	f06f 0303 	mvn.w	r3, #3
 8005884:	61fb      	str	r3, [r7, #28]
 8005886:	e037      	b.n	80058f8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8005888:	2300      	movs	r3, #0
 800588a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800588c:	f107 0310 	add.w	r3, r7, #16
 8005890:	461a      	mov	r2, r3
 8005892:	68b9      	ldr	r1, [r7, #8]
 8005894:	69b8      	ldr	r0, [r7, #24]
 8005896:	f000 feaf 	bl	80065f8 <xQueueReceiveFromISR>
 800589a:	4603      	mov	r3, r0
 800589c:	2b01      	cmp	r3, #1
 800589e:	d003      	beq.n	80058a8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80058a0:	f06f 0302 	mvn.w	r3, #2
 80058a4:	61fb      	str	r3, [r7, #28]
 80058a6:	e027      	b.n	80058f8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d024      	beq.n	80058f8 <osMessageQueueGet+0xac>
 80058ae:	4b15      	ldr	r3, [pc, #84]	@ (8005904 <osMessageQueueGet+0xb8>)
 80058b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058b4:	601a      	str	r2, [r3, #0]
 80058b6:	f3bf 8f4f 	dsb	sy
 80058ba:	f3bf 8f6f 	isb	sy
 80058be:	e01b      	b.n	80058f8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d002      	beq.n	80058cc <osMessageQueueGet+0x80>
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d103      	bne.n	80058d4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80058cc:	f06f 0303 	mvn.w	r3, #3
 80058d0:	61fb      	str	r3, [r7, #28]
 80058d2:	e011      	b.n	80058f8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80058d4:	683a      	ldr	r2, [r7, #0]
 80058d6:	68b9      	ldr	r1, [r7, #8]
 80058d8:	69b8      	ldr	r0, [r7, #24]
 80058da:	f000 fc9b 	bl	8006214 <xQueueReceive>
 80058de:	4603      	mov	r3, r0
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d009      	beq.n	80058f8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d003      	beq.n	80058f2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80058ea:	f06f 0301 	mvn.w	r3, #1
 80058ee:	61fb      	str	r3, [r7, #28]
 80058f0:	e002      	b.n	80058f8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80058f2:	f06f 0302 	mvn.w	r3, #2
 80058f6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80058f8:	69fb      	ldr	r3, [r7, #28]
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3720      	adds	r7, #32
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	e000ed04 	.word	0xe000ed04

08005908 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005908:	b480      	push	{r7}
 800590a:	b085      	sub	sp, #20
 800590c:	af00      	add	r7, sp, #0
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	60b9      	str	r1, [r7, #8]
 8005912:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	4a07      	ldr	r2, [pc, #28]	@ (8005934 <vApplicationGetIdleTaskMemory+0x2c>)
 8005918:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	4a06      	ldr	r2, [pc, #24]	@ (8005938 <vApplicationGetIdleTaskMemory+0x30>)
 800591e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2280      	movs	r2, #128	@ 0x80
 8005924:	601a      	str	r2, [r3, #0]
}
 8005926:	bf00      	nop
 8005928:	3714      	adds	r7, #20
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop
 8005934:	20000714 	.word	0x20000714
 8005938:	20000770 	.word	0x20000770

0800593c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800593c:	b480      	push	{r7}
 800593e:	b085      	sub	sp, #20
 8005940:	af00      	add	r7, sp, #0
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	4a07      	ldr	r2, [pc, #28]	@ (8005968 <vApplicationGetTimerTaskMemory+0x2c>)
 800594c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	4a06      	ldr	r2, [pc, #24]	@ (800596c <vApplicationGetTimerTaskMemory+0x30>)
 8005952:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800595a:	601a      	str	r2, [r3, #0]
}
 800595c:	bf00      	nop
 800595e:	3714      	adds	r7, #20
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr
 8005968:	20000970 	.word	0x20000970
 800596c:	200009cc 	.word	0x200009cc

08005970 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f103 0208 	add.w	r2, r3, #8
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005988:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f103 0208 	add.w	r2, r3, #8
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f103 0208 	add.w	r2, r3, #8
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80059a4:	bf00      	nop
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80059b0:	b480      	push	{r7}
 80059b2:	b083      	sub	sp, #12
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80059be:	bf00      	nop
 80059c0:	370c      	adds	r7, #12
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr

080059ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80059ca:	b480      	push	{r7}
 80059cc:	b085      	sub	sp, #20
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
 80059d2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	68fa      	ldr	r2, [r7, #12]
 80059de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	689a      	ldr	r2, [r3, #8]
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	683a      	ldr	r2, [r7, #0]
 80059ee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	683a      	ldr	r2, [r7, #0]
 80059f4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	687a      	ldr	r2, [r7, #4]
 80059fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	1c5a      	adds	r2, r3, #1
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	601a      	str	r2, [r3, #0]
}
 8005a06:	bf00      	nop
 8005a08:	3714      	adds	r7, #20
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr

08005a12 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005a12:	b480      	push	{r7}
 8005a14:	b085      	sub	sp, #20
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
 8005a1a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a28:	d103      	bne.n	8005a32 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	691b      	ldr	r3, [r3, #16]
 8005a2e:	60fb      	str	r3, [r7, #12]
 8005a30:	e00c      	b.n	8005a4c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	3308      	adds	r3, #8
 8005a36:	60fb      	str	r3, [r7, #12]
 8005a38:	e002      	b.n	8005a40 <vListInsert+0x2e>
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	60fb      	str	r3, [r7, #12]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	68ba      	ldr	r2, [r7, #8]
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d2f6      	bcs.n	8005a3a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	685a      	ldr	r2, [r3, #4]
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	683a      	ldr	r2, [r7, #0]
 8005a5a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	68fa      	ldr	r2, [r7, #12]
 8005a60:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	683a      	ldr	r2, [r7, #0]
 8005a66:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	1c5a      	adds	r2, r3, #1
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	601a      	str	r2, [r3, #0]
}
 8005a78:	bf00      	nop
 8005a7a:	3714      	adds	r7, #20
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr

08005a84 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005a84:	b480      	push	{r7}
 8005a86:	b085      	sub	sp, #20
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	691b      	ldr	r3, [r3, #16]
 8005a90:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	687a      	ldr	r2, [r7, #4]
 8005a98:	6892      	ldr	r2, [r2, #8]
 8005a9a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	6852      	ldr	r2, [r2, #4]
 8005aa4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d103      	bne.n	8005ab8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	689a      	ldr	r2, [r3, #8]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	1e5a      	subs	r2, r3, #1
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3714      	adds	r7, #20
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr

08005ad8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b084      	sub	sp, #16
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
 8005ae0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d10b      	bne.n	8005b04 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005aec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005af0:	f383 8811 	msr	BASEPRI, r3
 8005af4:	f3bf 8f6f 	isb	sy
 8005af8:	f3bf 8f4f 	dsb	sy
 8005afc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005afe:	bf00      	nop
 8005b00:	bf00      	nop
 8005b02:	e7fd      	b.n	8005b00 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005b04:	f002 fc28 	bl	8008358 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b10:	68f9      	ldr	r1, [r7, #12]
 8005b12:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005b14:	fb01 f303 	mul.w	r3, r1, r3
 8005b18:	441a      	add	r2, r3
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2200      	movs	r2, #0
 8005b22:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b34:	3b01      	subs	r3, #1
 8005b36:	68f9      	ldr	r1, [r7, #12]
 8005b38:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005b3a:	fb01 f303 	mul.w	r3, r1, r3
 8005b3e:	441a      	add	r2, r3
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	22ff      	movs	r2, #255	@ 0xff
 8005b48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	22ff      	movs	r2, #255	@ 0xff
 8005b50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d114      	bne.n	8005b84 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d01a      	beq.n	8005b98 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	3310      	adds	r3, #16
 8005b66:	4618      	mov	r0, r3
 8005b68:	f001 fbb8 	bl	80072dc <xTaskRemoveFromEventList>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d012      	beq.n	8005b98 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005b72:	4b0d      	ldr	r3, [pc, #52]	@ (8005ba8 <xQueueGenericReset+0xd0>)
 8005b74:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b78:	601a      	str	r2, [r3, #0]
 8005b7a:	f3bf 8f4f 	dsb	sy
 8005b7e:	f3bf 8f6f 	isb	sy
 8005b82:	e009      	b.n	8005b98 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	3310      	adds	r3, #16
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f7ff fef1 	bl	8005970 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	3324      	adds	r3, #36	@ 0x24
 8005b92:	4618      	mov	r0, r3
 8005b94:	f7ff feec 	bl	8005970 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005b98:	f002 fc10 	bl	80083bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005b9c:	2301      	movs	r3, #1
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3710      	adds	r7, #16
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	bf00      	nop
 8005ba8:	e000ed04 	.word	0xe000ed04

08005bac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b08e      	sub	sp, #56	@ 0x38
 8005bb0:	af02      	add	r7, sp, #8
 8005bb2:	60f8      	str	r0, [r7, #12]
 8005bb4:	60b9      	str	r1, [r7, #8]
 8005bb6:	607a      	str	r2, [r7, #4]
 8005bb8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d10b      	bne.n	8005bd8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bc4:	f383 8811 	msr	BASEPRI, r3
 8005bc8:	f3bf 8f6f 	isb	sy
 8005bcc:	f3bf 8f4f 	dsb	sy
 8005bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005bd2:	bf00      	nop
 8005bd4:	bf00      	nop
 8005bd6:	e7fd      	b.n	8005bd4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d10b      	bne.n	8005bf6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005bde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005be2:	f383 8811 	msr	BASEPRI, r3
 8005be6:	f3bf 8f6f 	isb	sy
 8005bea:	f3bf 8f4f 	dsb	sy
 8005bee:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005bf0:	bf00      	nop
 8005bf2:	bf00      	nop
 8005bf4:	e7fd      	b.n	8005bf2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d002      	beq.n	8005c02 <xQueueGenericCreateStatic+0x56>
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d001      	beq.n	8005c06 <xQueueGenericCreateStatic+0x5a>
 8005c02:	2301      	movs	r3, #1
 8005c04:	e000      	b.n	8005c08 <xQueueGenericCreateStatic+0x5c>
 8005c06:	2300      	movs	r3, #0
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d10b      	bne.n	8005c24 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005c0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c10:	f383 8811 	msr	BASEPRI, r3
 8005c14:	f3bf 8f6f 	isb	sy
 8005c18:	f3bf 8f4f 	dsb	sy
 8005c1c:	623b      	str	r3, [r7, #32]
}
 8005c1e:	bf00      	nop
 8005c20:	bf00      	nop
 8005c22:	e7fd      	b.n	8005c20 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d102      	bne.n	8005c30 <xQueueGenericCreateStatic+0x84>
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d101      	bne.n	8005c34 <xQueueGenericCreateStatic+0x88>
 8005c30:	2301      	movs	r3, #1
 8005c32:	e000      	b.n	8005c36 <xQueueGenericCreateStatic+0x8a>
 8005c34:	2300      	movs	r3, #0
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d10b      	bne.n	8005c52 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005c3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c3e:	f383 8811 	msr	BASEPRI, r3
 8005c42:	f3bf 8f6f 	isb	sy
 8005c46:	f3bf 8f4f 	dsb	sy
 8005c4a:	61fb      	str	r3, [r7, #28]
}
 8005c4c:	bf00      	nop
 8005c4e:	bf00      	nop
 8005c50:	e7fd      	b.n	8005c4e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005c52:	2350      	movs	r3, #80	@ 0x50
 8005c54:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	2b50      	cmp	r3, #80	@ 0x50
 8005c5a:	d00b      	beq.n	8005c74 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005c5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c60:	f383 8811 	msr	BASEPRI, r3
 8005c64:	f3bf 8f6f 	isb	sy
 8005c68:	f3bf 8f4f 	dsb	sy
 8005c6c:	61bb      	str	r3, [r7, #24]
}
 8005c6e:	bf00      	nop
 8005c70:	bf00      	nop
 8005c72:	e7fd      	b.n	8005c70 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005c74:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005c7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d00d      	beq.n	8005c9c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005c80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005c88:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005c8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c8e:	9300      	str	r3, [sp, #0]
 8005c90:	4613      	mov	r3, r2
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	68b9      	ldr	r1, [r7, #8]
 8005c96:	68f8      	ldr	r0, [r7, #12]
 8005c98:	f000 f840 	bl	8005d1c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005c9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3730      	adds	r7, #48	@ 0x30
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}

08005ca6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005ca6:	b580      	push	{r7, lr}
 8005ca8:	b08a      	sub	sp, #40	@ 0x28
 8005caa:	af02      	add	r7, sp, #8
 8005cac:	60f8      	str	r0, [r7, #12]
 8005cae:	60b9      	str	r1, [r7, #8]
 8005cb0:	4613      	mov	r3, r2
 8005cb2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d10b      	bne.n	8005cd2 <xQueueGenericCreate+0x2c>
	__asm volatile
 8005cba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cbe:	f383 8811 	msr	BASEPRI, r3
 8005cc2:	f3bf 8f6f 	isb	sy
 8005cc6:	f3bf 8f4f 	dsb	sy
 8005cca:	613b      	str	r3, [r7, #16]
}
 8005ccc:	bf00      	nop
 8005cce:	bf00      	nop
 8005cd0:	e7fd      	b.n	8005cce <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	68ba      	ldr	r2, [r7, #8]
 8005cd6:	fb02 f303 	mul.w	r3, r2, r3
 8005cda:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	3350      	adds	r3, #80	@ 0x50
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f002 fc5b 	bl	800859c <pvPortMalloc>
 8005ce6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005ce8:	69bb      	ldr	r3, [r7, #24]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d011      	beq.n	8005d12 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	3350      	adds	r3, #80	@ 0x50
 8005cf6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005cf8:	69bb      	ldr	r3, [r7, #24]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005d00:	79fa      	ldrb	r2, [r7, #7]
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	9300      	str	r3, [sp, #0]
 8005d06:	4613      	mov	r3, r2
 8005d08:	697a      	ldr	r2, [r7, #20]
 8005d0a:	68b9      	ldr	r1, [r7, #8]
 8005d0c:	68f8      	ldr	r0, [r7, #12]
 8005d0e:	f000 f805 	bl	8005d1c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005d12:	69bb      	ldr	r3, [r7, #24]
	}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3720      	adds	r7, #32
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	60f8      	str	r0, [r7, #12]
 8005d24:	60b9      	str	r1, [r7, #8]
 8005d26:	607a      	str	r2, [r7, #4]
 8005d28:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d103      	bne.n	8005d38 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005d30:	69bb      	ldr	r3, [r7, #24]
 8005d32:	69ba      	ldr	r2, [r7, #24]
 8005d34:	601a      	str	r2, [r3, #0]
 8005d36:	e002      	b.n	8005d3e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005d3e:	69bb      	ldr	r3, [r7, #24]
 8005d40:	68fa      	ldr	r2, [r7, #12]
 8005d42:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005d44:	69bb      	ldr	r3, [r7, #24]
 8005d46:	68ba      	ldr	r2, [r7, #8]
 8005d48:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005d4a:	2101      	movs	r1, #1
 8005d4c:	69b8      	ldr	r0, [r7, #24]
 8005d4e:	f7ff fec3 	bl	8005ad8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005d52:	69bb      	ldr	r3, [r7, #24]
 8005d54:	78fa      	ldrb	r2, [r7, #3]
 8005d56:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005d5a:	bf00      	nop
 8005d5c:	3710      	adds	r7, #16
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}

08005d62 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005d62:	b580      	push	{r7, lr}
 8005d64:	b082      	sub	sp, #8
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d00e      	beq.n	8005d8e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2200      	movs	r2, #0
 8005d74:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005d82:	2300      	movs	r3, #0
 8005d84:	2200      	movs	r2, #0
 8005d86:	2100      	movs	r1, #0
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f000 f8a3 	bl	8005ed4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005d8e:	bf00      	nop
 8005d90:	3708      	adds	r7, #8
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}

08005d96 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005d96:	b580      	push	{r7, lr}
 8005d98:	b086      	sub	sp, #24
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005da0:	2301      	movs	r3, #1
 8005da2:	617b      	str	r3, [r7, #20]
 8005da4:	2300      	movs	r3, #0
 8005da6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005da8:	79fb      	ldrb	r3, [r7, #7]
 8005daa:	461a      	mov	r2, r3
 8005dac:	6939      	ldr	r1, [r7, #16]
 8005dae:	6978      	ldr	r0, [r7, #20]
 8005db0:	f7ff ff79 	bl	8005ca6 <xQueueGenericCreate>
 8005db4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005db6:	68f8      	ldr	r0, [r7, #12]
 8005db8:	f7ff ffd3 	bl	8005d62 <prvInitialiseMutex>

		return xNewQueue;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
	}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3718      	adds	r7, #24
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}

08005dc6 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005dc6:	b580      	push	{r7, lr}
 8005dc8:	b088      	sub	sp, #32
 8005dca:	af02      	add	r7, sp, #8
 8005dcc:	4603      	mov	r3, r0
 8005dce:	6039      	str	r1, [r7, #0]
 8005dd0:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	617b      	str	r3, [r7, #20]
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005dda:	79fb      	ldrb	r3, [r7, #7]
 8005ddc:	9300      	str	r3, [sp, #0]
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	2200      	movs	r2, #0
 8005de2:	6939      	ldr	r1, [r7, #16]
 8005de4:	6978      	ldr	r0, [r7, #20]
 8005de6:	f7ff fee1 	bl	8005bac <xQueueGenericCreateStatic>
 8005dea:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005dec:	68f8      	ldr	r0, [r7, #12]
 8005dee:	f7ff ffb8 	bl	8005d62 <prvInitialiseMutex>

		return xNewQueue;
 8005df2:	68fb      	ldr	r3, [r7, #12]
	}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3718      	adds	r7, #24
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8005dfc:	b590      	push	{r4, r7, lr}
 8005dfe:	b087      	sub	sp, #28
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d10b      	bne.n	8005e26 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8005e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e12:	f383 8811 	msr	BASEPRI, r3
 8005e16:	f3bf 8f6f 	isb	sy
 8005e1a:	f3bf 8f4f 	dsb	sy
 8005e1e:	60fb      	str	r3, [r7, #12]
}
 8005e20:	bf00      	nop
 8005e22:	bf00      	nop
 8005e24:	e7fd      	b.n	8005e22 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	689c      	ldr	r4, [r3, #8]
 8005e2a:	f001 fc17 	bl	800765c <xTaskGetCurrentTaskHandle>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	429c      	cmp	r4, r3
 8005e32:	d111      	bne.n	8005e58 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	1e5a      	subs	r2, r3, #1
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d105      	bne.n	8005e52 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8005e46:	2300      	movs	r3, #0
 8005e48:	2200      	movs	r2, #0
 8005e4a:	2100      	movs	r1, #0
 8005e4c:	6938      	ldr	r0, [r7, #16]
 8005e4e:	f000 f841 	bl	8005ed4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8005e52:	2301      	movs	r3, #1
 8005e54:	617b      	str	r3, [r7, #20]
 8005e56:	e001      	b.n	8005e5c <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8005e5c:	697b      	ldr	r3, [r7, #20]
	}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	371c      	adds	r7, #28
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd90      	pop	{r4, r7, pc}

08005e66 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8005e66:	b590      	push	{r4, r7, lr}
 8005e68:	b087      	sub	sp, #28
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
 8005e6e:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d10b      	bne.n	8005e92 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8005e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e7e:	f383 8811 	msr	BASEPRI, r3
 8005e82:	f3bf 8f6f 	isb	sy
 8005e86:	f3bf 8f4f 	dsb	sy
 8005e8a:	60fb      	str	r3, [r7, #12]
}
 8005e8c:	bf00      	nop
 8005e8e:	bf00      	nop
 8005e90:	e7fd      	b.n	8005e8e <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	689c      	ldr	r4, [r3, #8]
 8005e96:	f001 fbe1 	bl	800765c <xTaskGetCurrentTaskHandle>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	429c      	cmp	r4, r3
 8005e9e:	d107      	bne.n	8005eb0 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	1c5a      	adds	r2, r3, #1
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	617b      	str	r3, [r7, #20]
 8005eae:	e00c      	b.n	8005eca <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8005eb0:	6839      	ldr	r1, [r7, #0]
 8005eb2:	6938      	ldr	r0, [r7, #16]
 8005eb4:	f000 fa90 	bl	80063d8 <xQueueSemaphoreTake>
 8005eb8:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d004      	beq.n	8005eca <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	1c5a      	adds	r2, r3, #1
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8005eca:	697b      	ldr	r3, [r7, #20]
	}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	371c      	adds	r7, #28
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd90      	pop	{r4, r7, pc}

08005ed4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b08e      	sub	sp, #56	@ 0x38
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	60f8      	str	r0, [r7, #12]
 8005edc:	60b9      	str	r1, [r7, #8]
 8005ede:	607a      	str	r2, [r7, #4]
 8005ee0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d10b      	bne.n	8005f08 <xQueueGenericSend+0x34>
	__asm volatile
 8005ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ef4:	f383 8811 	msr	BASEPRI, r3
 8005ef8:	f3bf 8f6f 	isb	sy
 8005efc:	f3bf 8f4f 	dsb	sy
 8005f00:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005f02:	bf00      	nop
 8005f04:	bf00      	nop
 8005f06:	e7fd      	b.n	8005f04 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d103      	bne.n	8005f16 <xQueueGenericSend+0x42>
 8005f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d101      	bne.n	8005f1a <xQueueGenericSend+0x46>
 8005f16:	2301      	movs	r3, #1
 8005f18:	e000      	b.n	8005f1c <xQueueGenericSend+0x48>
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d10b      	bne.n	8005f38 <xQueueGenericSend+0x64>
	__asm volatile
 8005f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f24:	f383 8811 	msr	BASEPRI, r3
 8005f28:	f3bf 8f6f 	isb	sy
 8005f2c:	f3bf 8f4f 	dsb	sy
 8005f30:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005f32:	bf00      	nop
 8005f34:	bf00      	nop
 8005f36:	e7fd      	b.n	8005f34 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	2b02      	cmp	r3, #2
 8005f3c:	d103      	bne.n	8005f46 <xQueueGenericSend+0x72>
 8005f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f42:	2b01      	cmp	r3, #1
 8005f44:	d101      	bne.n	8005f4a <xQueueGenericSend+0x76>
 8005f46:	2301      	movs	r3, #1
 8005f48:	e000      	b.n	8005f4c <xQueueGenericSend+0x78>
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d10b      	bne.n	8005f68 <xQueueGenericSend+0x94>
	__asm volatile
 8005f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f54:	f383 8811 	msr	BASEPRI, r3
 8005f58:	f3bf 8f6f 	isb	sy
 8005f5c:	f3bf 8f4f 	dsb	sy
 8005f60:	623b      	str	r3, [r7, #32]
}
 8005f62:	bf00      	nop
 8005f64:	bf00      	nop
 8005f66:	e7fd      	b.n	8005f64 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005f68:	f001 fb88 	bl	800767c <xTaskGetSchedulerState>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d102      	bne.n	8005f78 <xQueueGenericSend+0xa4>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d101      	bne.n	8005f7c <xQueueGenericSend+0xa8>
 8005f78:	2301      	movs	r3, #1
 8005f7a:	e000      	b.n	8005f7e <xQueueGenericSend+0xaa>
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d10b      	bne.n	8005f9a <xQueueGenericSend+0xc6>
	__asm volatile
 8005f82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f86:	f383 8811 	msr	BASEPRI, r3
 8005f8a:	f3bf 8f6f 	isb	sy
 8005f8e:	f3bf 8f4f 	dsb	sy
 8005f92:	61fb      	str	r3, [r7, #28]
}
 8005f94:	bf00      	nop
 8005f96:	bf00      	nop
 8005f98:	e7fd      	b.n	8005f96 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005f9a:	f002 f9dd 	bl	8008358 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fa0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d302      	bcc.n	8005fb0 <xQueueGenericSend+0xdc>
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	2b02      	cmp	r3, #2
 8005fae:	d129      	bne.n	8006004 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005fb0:	683a      	ldr	r2, [r7, #0]
 8005fb2:	68b9      	ldr	r1, [r7, #8]
 8005fb4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005fb6:	f000 fbb9 	bl	800672c <prvCopyDataToQueue>
 8005fba:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d010      	beq.n	8005fe6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005fc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fc6:	3324      	adds	r3, #36	@ 0x24
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f001 f987 	bl	80072dc <xTaskRemoveFromEventList>
 8005fce:	4603      	mov	r3, r0
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d013      	beq.n	8005ffc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005fd4:	4b3f      	ldr	r3, [pc, #252]	@ (80060d4 <xQueueGenericSend+0x200>)
 8005fd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fda:	601a      	str	r2, [r3, #0]
 8005fdc:	f3bf 8f4f 	dsb	sy
 8005fe0:	f3bf 8f6f 	isb	sy
 8005fe4:	e00a      	b.n	8005ffc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005fe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d007      	beq.n	8005ffc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005fec:	4b39      	ldr	r3, [pc, #228]	@ (80060d4 <xQueueGenericSend+0x200>)
 8005fee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ff2:	601a      	str	r2, [r3, #0]
 8005ff4:	f3bf 8f4f 	dsb	sy
 8005ff8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005ffc:	f002 f9de 	bl	80083bc <vPortExitCritical>
				return pdPASS;
 8006000:	2301      	movs	r3, #1
 8006002:	e063      	b.n	80060cc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d103      	bne.n	8006012 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800600a:	f002 f9d7 	bl	80083bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800600e:	2300      	movs	r3, #0
 8006010:	e05c      	b.n	80060cc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006012:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006014:	2b00      	cmp	r3, #0
 8006016:	d106      	bne.n	8006026 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006018:	f107 0314 	add.w	r3, r7, #20
 800601c:	4618      	mov	r0, r3
 800601e:	f001 f9c1 	bl	80073a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006022:	2301      	movs	r3, #1
 8006024:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006026:	f002 f9c9 	bl	80083bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800602a:	f000 ff31 	bl	8006e90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800602e:	f002 f993 	bl	8008358 <vPortEnterCritical>
 8006032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006034:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006038:	b25b      	sxtb	r3, r3
 800603a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800603e:	d103      	bne.n	8006048 <xQueueGenericSend+0x174>
 8006040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006042:	2200      	movs	r2, #0
 8006044:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800604a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800604e:	b25b      	sxtb	r3, r3
 8006050:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006054:	d103      	bne.n	800605e <xQueueGenericSend+0x18a>
 8006056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006058:	2200      	movs	r2, #0
 800605a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800605e:	f002 f9ad 	bl	80083bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006062:	1d3a      	adds	r2, r7, #4
 8006064:	f107 0314 	add.w	r3, r7, #20
 8006068:	4611      	mov	r1, r2
 800606a:	4618      	mov	r0, r3
 800606c:	f001 f9b0 	bl	80073d0 <xTaskCheckForTimeOut>
 8006070:	4603      	mov	r3, r0
 8006072:	2b00      	cmp	r3, #0
 8006074:	d124      	bne.n	80060c0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006076:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006078:	f000 fc50 	bl	800691c <prvIsQueueFull>
 800607c:	4603      	mov	r3, r0
 800607e:	2b00      	cmp	r3, #0
 8006080:	d018      	beq.n	80060b4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006084:	3310      	adds	r3, #16
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	4611      	mov	r1, r2
 800608a:	4618      	mov	r0, r3
 800608c:	f001 f8d4 	bl	8007238 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006090:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006092:	f000 fbdb 	bl	800684c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006096:	f000 ff09 	bl	8006eac <xTaskResumeAll>
 800609a:	4603      	mov	r3, r0
 800609c:	2b00      	cmp	r3, #0
 800609e:	f47f af7c 	bne.w	8005f9a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80060a2:	4b0c      	ldr	r3, [pc, #48]	@ (80060d4 <xQueueGenericSend+0x200>)
 80060a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060a8:	601a      	str	r2, [r3, #0]
 80060aa:	f3bf 8f4f 	dsb	sy
 80060ae:	f3bf 8f6f 	isb	sy
 80060b2:	e772      	b.n	8005f9a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80060b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80060b6:	f000 fbc9 	bl	800684c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80060ba:	f000 fef7 	bl	8006eac <xTaskResumeAll>
 80060be:	e76c      	b.n	8005f9a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80060c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80060c2:	f000 fbc3 	bl	800684c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80060c6:	f000 fef1 	bl	8006eac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80060ca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3738      	adds	r7, #56	@ 0x38
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}
 80060d4:	e000ed04 	.word	0xe000ed04

080060d8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b090      	sub	sp, #64	@ 0x40
 80060dc:	af00      	add	r7, sp, #0
 80060de:	60f8      	str	r0, [r7, #12]
 80060e0:	60b9      	str	r1, [r7, #8]
 80060e2:	607a      	str	r2, [r7, #4]
 80060e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80060ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d10b      	bne.n	8006108 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80060f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060f4:	f383 8811 	msr	BASEPRI, r3
 80060f8:	f3bf 8f6f 	isb	sy
 80060fc:	f3bf 8f4f 	dsb	sy
 8006100:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006102:	bf00      	nop
 8006104:	bf00      	nop
 8006106:	e7fd      	b.n	8006104 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d103      	bne.n	8006116 <xQueueGenericSendFromISR+0x3e>
 800610e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006112:	2b00      	cmp	r3, #0
 8006114:	d101      	bne.n	800611a <xQueueGenericSendFromISR+0x42>
 8006116:	2301      	movs	r3, #1
 8006118:	e000      	b.n	800611c <xQueueGenericSendFromISR+0x44>
 800611a:	2300      	movs	r3, #0
 800611c:	2b00      	cmp	r3, #0
 800611e:	d10b      	bne.n	8006138 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006124:	f383 8811 	msr	BASEPRI, r3
 8006128:	f3bf 8f6f 	isb	sy
 800612c:	f3bf 8f4f 	dsb	sy
 8006130:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006132:	bf00      	nop
 8006134:	bf00      	nop
 8006136:	e7fd      	b.n	8006134 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	2b02      	cmp	r3, #2
 800613c:	d103      	bne.n	8006146 <xQueueGenericSendFromISR+0x6e>
 800613e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006140:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006142:	2b01      	cmp	r3, #1
 8006144:	d101      	bne.n	800614a <xQueueGenericSendFromISR+0x72>
 8006146:	2301      	movs	r3, #1
 8006148:	e000      	b.n	800614c <xQueueGenericSendFromISR+0x74>
 800614a:	2300      	movs	r3, #0
 800614c:	2b00      	cmp	r3, #0
 800614e:	d10b      	bne.n	8006168 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006154:	f383 8811 	msr	BASEPRI, r3
 8006158:	f3bf 8f6f 	isb	sy
 800615c:	f3bf 8f4f 	dsb	sy
 8006160:	623b      	str	r3, [r7, #32]
}
 8006162:	bf00      	nop
 8006164:	bf00      	nop
 8006166:	e7fd      	b.n	8006164 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006168:	f002 f9d6 	bl	8008518 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800616c:	f3ef 8211 	mrs	r2, BASEPRI
 8006170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006174:	f383 8811 	msr	BASEPRI, r3
 8006178:	f3bf 8f6f 	isb	sy
 800617c:	f3bf 8f4f 	dsb	sy
 8006180:	61fa      	str	r2, [r7, #28]
 8006182:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006184:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006186:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800618a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800618c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800618e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006190:	429a      	cmp	r2, r3
 8006192:	d302      	bcc.n	800619a <xQueueGenericSendFromISR+0xc2>
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	2b02      	cmp	r3, #2
 8006198:	d12f      	bne.n	80061fa <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800619a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800619c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80061a0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80061a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80061aa:	683a      	ldr	r2, [r7, #0]
 80061ac:	68b9      	ldr	r1, [r7, #8]
 80061ae:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80061b0:	f000 fabc 	bl	800672c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80061b4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80061b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80061bc:	d112      	bne.n	80061e4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80061be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d016      	beq.n	80061f4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80061c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061c8:	3324      	adds	r3, #36	@ 0x24
 80061ca:	4618      	mov	r0, r3
 80061cc:	f001 f886 	bl	80072dc <xTaskRemoveFromEventList>
 80061d0:	4603      	mov	r3, r0
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d00e      	beq.n	80061f4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d00b      	beq.n	80061f4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	601a      	str	r2, [r3, #0]
 80061e2:	e007      	b.n	80061f4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80061e4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80061e8:	3301      	adds	r3, #1
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	b25a      	sxtb	r2, r3
 80061ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80061f4:	2301      	movs	r3, #1
 80061f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80061f8:	e001      	b.n	80061fe <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80061fa:	2300      	movs	r3, #0
 80061fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80061fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006200:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006208:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800620a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800620c:	4618      	mov	r0, r3
 800620e:	3740      	adds	r7, #64	@ 0x40
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b08c      	sub	sp, #48	@ 0x30
 8006218:	af00      	add	r7, sp, #0
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	60b9      	str	r1, [r7, #8]
 800621e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006220:	2300      	movs	r3, #0
 8006222:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800622a:	2b00      	cmp	r3, #0
 800622c:	d10b      	bne.n	8006246 <xQueueReceive+0x32>
	__asm volatile
 800622e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006232:	f383 8811 	msr	BASEPRI, r3
 8006236:	f3bf 8f6f 	isb	sy
 800623a:	f3bf 8f4f 	dsb	sy
 800623e:	623b      	str	r3, [r7, #32]
}
 8006240:	bf00      	nop
 8006242:	bf00      	nop
 8006244:	e7fd      	b.n	8006242 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d103      	bne.n	8006254 <xQueueReceive+0x40>
 800624c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800624e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006250:	2b00      	cmp	r3, #0
 8006252:	d101      	bne.n	8006258 <xQueueReceive+0x44>
 8006254:	2301      	movs	r3, #1
 8006256:	e000      	b.n	800625a <xQueueReceive+0x46>
 8006258:	2300      	movs	r3, #0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d10b      	bne.n	8006276 <xQueueReceive+0x62>
	__asm volatile
 800625e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006262:	f383 8811 	msr	BASEPRI, r3
 8006266:	f3bf 8f6f 	isb	sy
 800626a:	f3bf 8f4f 	dsb	sy
 800626e:	61fb      	str	r3, [r7, #28]
}
 8006270:	bf00      	nop
 8006272:	bf00      	nop
 8006274:	e7fd      	b.n	8006272 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006276:	f001 fa01 	bl	800767c <xTaskGetSchedulerState>
 800627a:	4603      	mov	r3, r0
 800627c:	2b00      	cmp	r3, #0
 800627e:	d102      	bne.n	8006286 <xQueueReceive+0x72>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d101      	bne.n	800628a <xQueueReceive+0x76>
 8006286:	2301      	movs	r3, #1
 8006288:	e000      	b.n	800628c <xQueueReceive+0x78>
 800628a:	2300      	movs	r3, #0
 800628c:	2b00      	cmp	r3, #0
 800628e:	d10b      	bne.n	80062a8 <xQueueReceive+0x94>
	__asm volatile
 8006290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006294:	f383 8811 	msr	BASEPRI, r3
 8006298:	f3bf 8f6f 	isb	sy
 800629c:	f3bf 8f4f 	dsb	sy
 80062a0:	61bb      	str	r3, [r7, #24]
}
 80062a2:	bf00      	nop
 80062a4:	bf00      	nop
 80062a6:	e7fd      	b.n	80062a4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80062a8:	f002 f856 	bl	8008358 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80062ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062b0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80062b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d01f      	beq.n	80062f8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80062b8:	68b9      	ldr	r1, [r7, #8]
 80062ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80062bc:	f000 faa0 	bl	8006800 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80062c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c2:	1e5a      	subs	r2, r3, #1
 80062c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062c6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ca:	691b      	ldr	r3, [r3, #16]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d00f      	beq.n	80062f0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062d2:	3310      	adds	r3, #16
 80062d4:	4618      	mov	r0, r3
 80062d6:	f001 f801 	bl	80072dc <xTaskRemoveFromEventList>
 80062da:	4603      	mov	r3, r0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d007      	beq.n	80062f0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80062e0:	4b3c      	ldr	r3, [pc, #240]	@ (80063d4 <xQueueReceive+0x1c0>)
 80062e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062e6:	601a      	str	r2, [r3, #0]
 80062e8:	f3bf 8f4f 	dsb	sy
 80062ec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80062f0:	f002 f864 	bl	80083bc <vPortExitCritical>
				return pdPASS;
 80062f4:	2301      	movs	r3, #1
 80062f6:	e069      	b.n	80063cc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d103      	bne.n	8006306 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80062fe:	f002 f85d 	bl	80083bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006302:	2300      	movs	r3, #0
 8006304:	e062      	b.n	80063cc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006306:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006308:	2b00      	cmp	r3, #0
 800630a:	d106      	bne.n	800631a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800630c:	f107 0310 	add.w	r3, r7, #16
 8006310:	4618      	mov	r0, r3
 8006312:	f001 f847 	bl	80073a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006316:	2301      	movs	r3, #1
 8006318:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800631a:	f002 f84f 	bl	80083bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800631e:	f000 fdb7 	bl	8006e90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006322:	f002 f819 	bl	8008358 <vPortEnterCritical>
 8006326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006328:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800632c:	b25b      	sxtb	r3, r3
 800632e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006332:	d103      	bne.n	800633c <xQueueReceive+0x128>
 8006334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006336:	2200      	movs	r2, #0
 8006338:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800633c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800633e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006342:	b25b      	sxtb	r3, r3
 8006344:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006348:	d103      	bne.n	8006352 <xQueueReceive+0x13e>
 800634a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800634c:	2200      	movs	r2, #0
 800634e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006352:	f002 f833 	bl	80083bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006356:	1d3a      	adds	r2, r7, #4
 8006358:	f107 0310 	add.w	r3, r7, #16
 800635c:	4611      	mov	r1, r2
 800635e:	4618      	mov	r0, r3
 8006360:	f001 f836 	bl	80073d0 <xTaskCheckForTimeOut>
 8006364:	4603      	mov	r3, r0
 8006366:	2b00      	cmp	r3, #0
 8006368:	d123      	bne.n	80063b2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800636a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800636c:	f000 fac0 	bl	80068f0 <prvIsQueueEmpty>
 8006370:	4603      	mov	r3, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d017      	beq.n	80063a6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006378:	3324      	adds	r3, #36	@ 0x24
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	4611      	mov	r1, r2
 800637e:	4618      	mov	r0, r3
 8006380:	f000 ff5a 	bl	8007238 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006384:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006386:	f000 fa61 	bl	800684c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800638a:	f000 fd8f 	bl	8006eac <xTaskResumeAll>
 800638e:	4603      	mov	r3, r0
 8006390:	2b00      	cmp	r3, #0
 8006392:	d189      	bne.n	80062a8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006394:	4b0f      	ldr	r3, [pc, #60]	@ (80063d4 <xQueueReceive+0x1c0>)
 8006396:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800639a:	601a      	str	r2, [r3, #0]
 800639c:	f3bf 8f4f 	dsb	sy
 80063a0:	f3bf 8f6f 	isb	sy
 80063a4:	e780      	b.n	80062a8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80063a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80063a8:	f000 fa50 	bl	800684c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80063ac:	f000 fd7e 	bl	8006eac <xTaskResumeAll>
 80063b0:	e77a      	b.n	80062a8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80063b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80063b4:	f000 fa4a 	bl	800684c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80063b8:	f000 fd78 	bl	8006eac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80063bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80063be:	f000 fa97 	bl	80068f0 <prvIsQueueEmpty>
 80063c2:	4603      	mov	r3, r0
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	f43f af6f 	beq.w	80062a8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80063ca:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3730      	adds	r7, #48	@ 0x30
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}
 80063d4:	e000ed04 	.word	0xe000ed04

080063d8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b08e      	sub	sp, #56	@ 0x38
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80063e2:	2300      	movs	r3, #0
 80063e4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80063ea:	2300      	movs	r3, #0
 80063ec:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80063ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d10b      	bne.n	800640c <xQueueSemaphoreTake+0x34>
	__asm volatile
 80063f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063f8:	f383 8811 	msr	BASEPRI, r3
 80063fc:	f3bf 8f6f 	isb	sy
 8006400:	f3bf 8f4f 	dsb	sy
 8006404:	623b      	str	r3, [r7, #32]
}
 8006406:	bf00      	nop
 8006408:	bf00      	nop
 800640a:	e7fd      	b.n	8006408 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800640c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800640e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006410:	2b00      	cmp	r3, #0
 8006412:	d00b      	beq.n	800642c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8006414:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006418:	f383 8811 	msr	BASEPRI, r3
 800641c:	f3bf 8f6f 	isb	sy
 8006420:	f3bf 8f4f 	dsb	sy
 8006424:	61fb      	str	r3, [r7, #28]
}
 8006426:	bf00      	nop
 8006428:	bf00      	nop
 800642a:	e7fd      	b.n	8006428 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800642c:	f001 f926 	bl	800767c <xTaskGetSchedulerState>
 8006430:	4603      	mov	r3, r0
 8006432:	2b00      	cmp	r3, #0
 8006434:	d102      	bne.n	800643c <xQueueSemaphoreTake+0x64>
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d101      	bne.n	8006440 <xQueueSemaphoreTake+0x68>
 800643c:	2301      	movs	r3, #1
 800643e:	e000      	b.n	8006442 <xQueueSemaphoreTake+0x6a>
 8006440:	2300      	movs	r3, #0
 8006442:	2b00      	cmp	r3, #0
 8006444:	d10b      	bne.n	800645e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8006446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800644a:	f383 8811 	msr	BASEPRI, r3
 800644e:	f3bf 8f6f 	isb	sy
 8006452:	f3bf 8f4f 	dsb	sy
 8006456:	61bb      	str	r3, [r7, #24]
}
 8006458:	bf00      	nop
 800645a:	bf00      	nop
 800645c:	e7fd      	b.n	800645a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800645e:	f001 ff7b 	bl	8008358 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006466:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800646a:	2b00      	cmp	r3, #0
 800646c:	d024      	beq.n	80064b8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800646e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006470:	1e5a      	subs	r2, r3, #1
 8006472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006474:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d104      	bne.n	8006488 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800647e:	f001 fa77 	bl	8007970 <pvTaskIncrementMutexHeldCount>
 8006482:	4602      	mov	r2, r0
 8006484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006486:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800648a:	691b      	ldr	r3, [r3, #16]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d00f      	beq.n	80064b0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006492:	3310      	adds	r3, #16
 8006494:	4618      	mov	r0, r3
 8006496:	f000 ff21 	bl	80072dc <xTaskRemoveFromEventList>
 800649a:	4603      	mov	r3, r0
 800649c:	2b00      	cmp	r3, #0
 800649e:	d007      	beq.n	80064b0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80064a0:	4b54      	ldr	r3, [pc, #336]	@ (80065f4 <xQueueSemaphoreTake+0x21c>)
 80064a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064a6:	601a      	str	r2, [r3, #0]
 80064a8:	f3bf 8f4f 	dsb	sy
 80064ac:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80064b0:	f001 ff84 	bl	80083bc <vPortExitCritical>
				return pdPASS;
 80064b4:	2301      	movs	r3, #1
 80064b6:	e098      	b.n	80065ea <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d112      	bne.n	80064e4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80064be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d00b      	beq.n	80064dc <xQueueSemaphoreTake+0x104>
	__asm volatile
 80064c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064c8:	f383 8811 	msr	BASEPRI, r3
 80064cc:	f3bf 8f6f 	isb	sy
 80064d0:	f3bf 8f4f 	dsb	sy
 80064d4:	617b      	str	r3, [r7, #20]
}
 80064d6:	bf00      	nop
 80064d8:	bf00      	nop
 80064da:	e7fd      	b.n	80064d8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80064dc:	f001 ff6e 	bl	80083bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80064e0:	2300      	movs	r3, #0
 80064e2:	e082      	b.n	80065ea <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80064e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d106      	bne.n	80064f8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80064ea:	f107 030c 	add.w	r3, r7, #12
 80064ee:	4618      	mov	r0, r3
 80064f0:	f000 ff58 	bl	80073a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80064f4:	2301      	movs	r3, #1
 80064f6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80064f8:	f001 ff60 	bl	80083bc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80064fc:	f000 fcc8 	bl	8006e90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006500:	f001 ff2a 	bl	8008358 <vPortEnterCritical>
 8006504:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006506:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800650a:	b25b      	sxtb	r3, r3
 800650c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006510:	d103      	bne.n	800651a <xQueueSemaphoreTake+0x142>
 8006512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006514:	2200      	movs	r2, #0
 8006516:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800651a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800651c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006520:	b25b      	sxtb	r3, r3
 8006522:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006526:	d103      	bne.n	8006530 <xQueueSemaphoreTake+0x158>
 8006528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800652a:	2200      	movs	r2, #0
 800652c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006530:	f001 ff44 	bl	80083bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006534:	463a      	mov	r2, r7
 8006536:	f107 030c 	add.w	r3, r7, #12
 800653a:	4611      	mov	r1, r2
 800653c:	4618      	mov	r0, r3
 800653e:	f000 ff47 	bl	80073d0 <xTaskCheckForTimeOut>
 8006542:	4603      	mov	r3, r0
 8006544:	2b00      	cmp	r3, #0
 8006546:	d132      	bne.n	80065ae <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006548:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800654a:	f000 f9d1 	bl	80068f0 <prvIsQueueEmpty>
 800654e:	4603      	mov	r3, r0
 8006550:	2b00      	cmp	r3, #0
 8006552:	d026      	beq.n	80065a2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d109      	bne.n	8006570 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800655c:	f001 fefc 	bl	8008358 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006562:	689b      	ldr	r3, [r3, #8]
 8006564:	4618      	mov	r0, r3
 8006566:	f001 f8a7 	bl	80076b8 <xTaskPriorityInherit>
 800656a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800656c:	f001 ff26 	bl	80083bc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006572:	3324      	adds	r3, #36	@ 0x24
 8006574:	683a      	ldr	r2, [r7, #0]
 8006576:	4611      	mov	r1, r2
 8006578:	4618      	mov	r0, r3
 800657a:	f000 fe5d 	bl	8007238 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800657e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006580:	f000 f964 	bl	800684c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006584:	f000 fc92 	bl	8006eac <xTaskResumeAll>
 8006588:	4603      	mov	r3, r0
 800658a:	2b00      	cmp	r3, #0
 800658c:	f47f af67 	bne.w	800645e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8006590:	4b18      	ldr	r3, [pc, #96]	@ (80065f4 <xQueueSemaphoreTake+0x21c>)
 8006592:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006596:	601a      	str	r2, [r3, #0]
 8006598:	f3bf 8f4f 	dsb	sy
 800659c:	f3bf 8f6f 	isb	sy
 80065a0:	e75d      	b.n	800645e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80065a2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80065a4:	f000 f952 	bl	800684c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80065a8:	f000 fc80 	bl	8006eac <xTaskResumeAll>
 80065ac:	e757      	b.n	800645e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80065ae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80065b0:	f000 f94c 	bl	800684c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80065b4:	f000 fc7a 	bl	8006eac <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80065b8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80065ba:	f000 f999 	bl	80068f0 <prvIsQueueEmpty>
 80065be:	4603      	mov	r3, r0
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	f43f af4c 	beq.w	800645e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80065c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d00d      	beq.n	80065e8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80065cc:	f001 fec4 	bl	8008358 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80065d0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80065d2:	f000 f893 	bl	80066fc <prvGetDisinheritPriorityAfterTimeout>
 80065d6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80065d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80065de:	4618      	mov	r0, r3
 80065e0:	f001 f942 	bl	8007868 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80065e4:	f001 feea 	bl	80083bc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80065e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3738      	adds	r7, #56	@ 0x38
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}
 80065f2:	bf00      	nop
 80065f4:	e000ed04 	.word	0xe000ed04

080065f8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b08e      	sub	sp, #56	@ 0x38
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	60f8      	str	r0, [r7, #12]
 8006600:	60b9      	str	r1, [r7, #8]
 8006602:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800660a:	2b00      	cmp	r3, #0
 800660c:	d10b      	bne.n	8006626 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800660e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006612:	f383 8811 	msr	BASEPRI, r3
 8006616:	f3bf 8f6f 	isb	sy
 800661a:	f3bf 8f4f 	dsb	sy
 800661e:	623b      	str	r3, [r7, #32]
}
 8006620:	bf00      	nop
 8006622:	bf00      	nop
 8006624:	e7fd      	b.n	8006622 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d103      	bne.n	8006634 <xQueueReceiveFromISR+0x3c>
 800662c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800662e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006630:	2b00      	cmp	r3, #0
 8006632:	d101      	bne.n	8006638 <xQueueReceiveFromISR+0x40>
 8006634:	2301      	movs	r3, #1
 8006636:	e000      	b.n	800663a <xQueueReceiveFromISR+0x42>
 8006638:	2300      	movs	r3, #0
 800663a:	2b00      	cmp	r3, #0
 800663c:	d10b      	bne.n	8006656 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800663e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006642:	f383 8811 	msr	BASEPRI, r3
 8006646:	f3bf 8f6f 	isb	sy
 800664a:	f3bf 8f4f 	dsb	sy
 800664e:	61fb      	str	r3, [r7, #28]
}
 8006650:	bf00      	nop
 8006652:	bf00      	nop
 8006654:	e7fd      	b.n	8006652 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006656:	f001 ff5f 	bl	8008518 <vPortValidateInterruptPriority>
	__asm volatile
 800665a:	f3ef 8211 	mrs	r2, BASEPRI
 800665e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006662:	f383 8811 	msr	BASEPRI, r3
 8006666:	f3bf 8f6f 	isb	sy
 800666a:	f3bf 8f4f 	dsb	sy
 800666e:	61ba      	str	r2, [r7, #24]
 8006670:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006672:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006674:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006678:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800667a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800667c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800667e:	2b00      	cmp	r3, #0
 8006680:	d02f      	beq.n	80066e2 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006684:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006688:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800668c:	68b9      	ldr	r1, [r7, #8]
 800668e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006690:	f000 f8b6 	bl	8006800 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006696:	1e5a      	subs	r2, r3, #1
 8006698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800669a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800669c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80066a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80066a4:	d112      	bne.n	80066cc <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80066a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066a8:	691b      	ldr	r3, [r3, #16]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d016      	beq.n	80066dc <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066b0:	3310      	adds	r3, #16
 80066b2:	4618      	mov	r0, r3
 80066b4:	f000 fe12 	bl	80072dc <xTaskRemoveFromEventList>
 80066b8:	4603      	mov	r3, r0
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d00e      	beq.n	80066dc <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d00b      	beq.n	80066dc <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2201      	movs	r2, #1
 80066c8:	601a      	str	r2, [r3, #0]
 80066ca:	e007      	b.n	80066dc <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80066cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80066d0:	3301      	adds	r3, #1
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	b25a      	sxtb	r2, r3
 80066d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80066dc:	2301      	movs	r3, #1
 80066de:	637b      	str	r3, [r7, #52]	@ 0x34
 80066e0:	e001      	b.n	80066e6 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80066e2:	2300      	movs	r3, #0
 80066e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80066e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066e8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	f383 8811 	msr	BASEPRI, r3
}
 80066f0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80066f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3738      	adds	r7, #56	@ 0x38
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}

080066fc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80066fc:	b480      	push	{r7}
 80066fe:	b085      	sub	sp, #20
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006708:	2b00      	cmp	r3, #0
 800670a:	d006      	beq.n	800671a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8006716:	60fb      	str	r3, [r7, #12]
 8006718:	e001      	b.n	800671e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800671a:	2300      	movs	r3, #0
 800671c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800671e:	68fb      	ldr	r3, [r7, #12]
	}
 8006720:	4618      	mov	r0, r3
 8006722:	3714      	adds	r7, #20
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr

0800672c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b086      	sub	sp, #24
 8006730:	af00      	add	r7, sp, #0
 8006732:	60f8      	str	r0, [r7, #12]
 8006734:	60b9      	str	r1, [r7, #8]
 8006736:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006738:	2300      	movs	r3, #0
 800673a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006740:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006746:	2b00      	cmp	r3, #0
 8006748:	d10d      	bne.n	8006766 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d14d      	bne.n	80067ee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	4618      	mov	r0, r3
 8006758:	f001 f816 	bl	8007788 <xTaskPriorityDisinherit>
 800675c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	2200      	movs	r2, #0
 8006762:	609a      	str	r2, [r3, #8]
 8006764:	e043      	b.n	80067ee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d119      	bne.n	80067a0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6858      	ldr	r0, [r3, #4]
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006774:	461a      	mov	r2, r3
 8006776:	68b9      	ldr	r1, [r7, #8]
 8006778:	f002 fe86 	bl	8009488 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	685a      	ldr	r2, [r3, #4]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006784:	441a      	add	r2, r3
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	685a      	ldr	r2, [r3, #4]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	429a      	cmp	r2, r3
 8006794:	d32b      	bcc.n	80067ee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681a      	ldr	r2, [r3, #0]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	605a      	str	r2, [r3, #4]
 800679e:	e026      	b.n	80067ee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	68d8      	ldr	r0, [r3, #12]
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067a8:	461a      	mov	r2, r3
 80067aa:	68b9      	ldr	r1, [r7, #8]
 80067ac:	f002 fe6c 	bl	8009488 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	68da      	ldr	r2, [r3, #12]
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067b8:	425b      	negs	r3, r3
 80067ba:	441a      	add	r2, r3
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	68da      	ldr	r2, [r3, #12]
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d207      	bcs.n	80067dc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	689a      	ldr	r2, [r3, #8]
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067d4:	425b      	negs	r3, r3
 80067d6:	441a      	add	r2, r3
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2b02      	cmp	r3, #2
 80067e0:	d105      	bne.n	80067ee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d002      	beq.n	80067ee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	3b01      	subs	r3, #1
 80067ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	1c5a      	adds	r2, r3, #1
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80067f6:	697b      	ldr	r3, [r7, #20]
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3718      	adds	r7, #24
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b082      	sub	sp, #8
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800680e:	2b00      	cmp	r3, #0
 8006810:	d018      	beq.n	8006844 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	68da      	ldr	r2, [r3, #12]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800681a:	441a      	add	r2, r3
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	68da      	ldr	r2, [r3, #12]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	429a      	cmp	r2, r3
 800682a:	d303      	bcc.n	8006834 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	68d9      	ldr	r1, [r3, #12]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800683c:	461a      	mov	r2, r3
 800683e:	6838      	ldr	r0, [r7, #0]
 8006840:	f002 fe22 	bl	8009488 <memcpy>
	}
}
 8006844:	bf00      	nop
 8006846:	3708      	adds	r7, #8
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}

0800684c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b084      	sub	sp, #16
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006854:	f001 fd80 	bl	8008358 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800685e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006860:	e011      	b.n	8006886 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006866:	2b00      	cmp	r3, #0
 8006868:	d012      	beq.n	8006890 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	3324      	adds	r3, #36	@ 0x24
 800686e:	4618      	mov	r0, r3
 8006870:	f000 fd34 	bl	80072dc <xTaskRemoveFromEventList>
 8006874:	4603      	mov	r3, r0
 8006876:	2b00      	cmp	r3, #0
 8006878:	d001      	beq.n	800687e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800687a:	f000 fe0d 	bl	8007498 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800687e:	7bfb      	ldrb	r3, [r7, #15]
 8006880:	3b01      	subs	r3, #1
 8006882:	b2db      	uxtb	r3, r3
 8006884:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800688a:	2b00      	cmp	r3, #0
 800688c:	dce9      	bgt.n	8006862 <prvUnlockQueue+0x16>
 800688e:	e000      	b.n	8006892 <prvUnlockQueue+0x46>
					break;
 8006890:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	22ff      	movs	r2, #255	@ 0xff
 8006896:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800689a:	f001 fd8f 	bl	80083bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800689e:	f001 fd5b 	bl	8008358 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80068a8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80068aa:	e011      	b.n	80068d0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	691b      	ldr	r3, [r3, #16]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d012      	beq.n	80068da <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	3310      	adds	r3, #16
 80068b8:	4618      	mov	r0, r3
 80068ba:	f000 fd0f 	bl	80072dc <xTaskRemoveFromEventList>
 80068be:	4603      	mov	r3, r0
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d001      	beq.n	80068c8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80068c4:	f000 fde8 	bl	8007498 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80068c8:	7bbb      	ldrb	r3, [r7, #14]
 80068ca:	3b01      	subs	r3, #1
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80068d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	dce9      	bgt.n	80068ac <prvUnlockQueue+0x60>
 80068d8:	e000      	b.n	80068dc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80068da:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	22ff      	movs	r2, #255	@ 0xff
 80068e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80068e4:	f001 fd6a 	bl	80083bc <vPortExitCritical>
}
 80068e8:	bf00      	nop
 80068ea:	3710      	adds	r7, #16
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80068f8:	f001 fd2e 	bl	8008358 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006900:	2b00      	cmp	r3, #0
 8006902:	d102      	bne.n	800690a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006904:	2301      	movs	r3, #1
 8006906:	60fb      	str	r3, [r7, #12]
 8006908:	e001      	b.n	800690e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800690a:	2300      	movs	r3, #0
 800690c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800690e:	f001 fd55 	bl	80083bc <vPortExitCritical>

	return xReturn;
 8006912:	68fb      	ldr	r3, [r7, #12]
}
 8006914:	4618      	mov	r0, r3
 8006916:	3710      	adds	r7, #16
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}

0800691c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b084      	sub	sp, #16
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006924:	f001 fd18 	bl	8008358 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006930:	429a      	cmp	r2, r3
 8006932:	d102      	bne.n	800693a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006934:	2301      	movs	r3, #1
 8006936:	60fb      	str	r3, [r7, #12]
 8006938:	e001      	b.n	800693e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800693a:	2300      	movs	r3, #0
 800693c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800693e:	f001 fd3d 	bl	80083bc <vPortExitCritical>

	return xReturn;
 8006942:	68fb      	ldr	r3, [r7, #12]
}
 8006944:	4618      	mov	r0, r3
 8006946:	3710      	adds	r7, #16
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800694c:	b480      	push	{r7}
 800694e:	b085      	sub	sp, #20
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006956:	2300      	movs	r3, #0
 8006958:	60fb      	str	r3, [r7, #12]
 800695a:	e014      	b.n	8006986 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800695c:	4a0f      	ldr	r2, [pc, #60]	@ (800699c <vQueueAddToRegistry+0x50>)
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d10b      	bne.n	8006980 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006968:	490c      	ldr	r1, [pc, #48]	@ (800699c <vQueueAddToRegistry+0x50>)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	683a      	ldr	r2, [r7, #0]
 800696e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006972:	4a0a      	ldr	r2, [pc, #40]	@ (800699c <vQueueAddToRegistry+0x50>)
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	00db      	lsls	r3, r3, #3
 8006978:	4413      	add	r3, r2
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800697e:	e006      	b.n	800698e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	3301      	adds	r3, #1
 8006984:	60fb      	str	r3, [r7, #12]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2b07      	cmp	r3, #7
 800698a:	d9e7      	bls.n	800695c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800698c:	bf00      	nop
 800698e:	bf00      	nop
 8006990:	3714      	adds	r7, #20
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr
 800699a:	bf00      	nop
 800699c:	20000dcc 	.word	0x20000dcc

080069a0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b086      	sub	sp, #24
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	60f8      	str	r0, [r7, #12]
 80069a8:	60b9      	str	r1, [r7, #8]
 80069aa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80069b0:	f001 fcd2 	bl	8008358 <vPortEnterCritical>
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80069ba:	b25b      	sxtb	r3, r3
 80069bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80069c0:	d103      	bne.n	80069ca <vQueueWaitForMessageRestricted+0x2a>
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	2200      	movs	r2, #0
 80069c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80069d0:	b25b      	sxtb	r3, r3
 80069d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80069d6:	d103      	bne.n	80069e0 <vQueueWaitForMessageRestricted+0x40>
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	2200      	movs	r2, #0
 80069dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80069e0:	f001 fcec 	bl	80083bc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d106      	bne.n	80069fa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	3324      	adds	r3, #36	@ 0x24
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	68b9      	ldr	r1, [r7, #8]
 80069f4:	4618      	mov	r0, r3
 80069f6:	f000 fc45 	bl	8007284 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80069fa:	6978      	ldr	r0, [r7, #20]
 80069fc:	f7ff ff26 	bl	800684c <prvUnlockQueue>
	}
 8006a00:	bf00      	nop
 8006a02:	3718      	adds	r7, #24
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}

08006a08 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b08e      	sub	sp, #56	@ 0x38
 8006a0c:	af04      	add	r7, sp, #16
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	60b9      	str	r1, [r7, #8]
 8006a12:	607a      	str	r2, [r7, #4]
 8006a14:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006a16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d10b      	bne.n	8006a34 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006a1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a20:	f383 8811 	msr	BASEPRI, r3
 8006a24:	f3bf 8f6f 	isb	sy
 8006a28:	f3bf 8f4f 	dsb	sy
 8006a2c:	623b      	str	r3, [r7, #32]
}
 8006a2e:	bf00      	nop
 8006a30:	bf00      	nop
 8006a32:	e7fd      	b.n	8006a30 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006a34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d10b      	bne.n	8006a52 <xTaskCreateStatic+0x4a>
	__asm volatile
 8006a3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a3e:	f383 8811 	msr	BASEPRI, r3
 8006a42:	f3bf 8f6f 	isb	sy
 8006a46:	f3bf 8f4f 	dsb	sy
 8006a4a:	61fb      	str	r3, [r7, #28]
}
 8006a4c:	bf00      	nop
 8006a4e:	bf00      	nop
 8006a50:	e7fd      	b.n	8006a4e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006a52:	235c      	movs	r3, #92	@ 0x5c
 8006a54:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	2b5c      	cmp	r3, #92	@ 0x5c
 8006a5a:	d00b      	beq.n	8006a74 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006a5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a60:	f383 8811 	msr	BASEPRI, r3
 8006a64:	f3bf 8f6f 	isb	sy
 8006a68:	f3bf 8f4f 	dsb	sy
 8006a6c:	61bb      	str	r3, [r7, #24]
}
 8006a6e:	bf00      	nop
 8006a70:	bf00      	nop
 8006a72:	e7fd      	b.n	8006a70 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006a74:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006a76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d01e      	beq.n	8006aba <xTaskCreateStatic+0xb2>
 8006a7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d01b      	beq.n	8006aba <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a84:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a88:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006a8a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a8e:	2202      	movs	r2, #2
 8006a90:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006a94:	2300      	movs	r3, #0
 8006a96:	9303      	str	r3, [sp, #12]
 8006a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a9a:	9302      	str	r3, [sp, #8]
 8006a9c:	f107 0314 	add.w	r3, r7, #20
 8006aa0:	9301      	str	r3, [sp, #4]
 8006aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aa4:	9300      	str	r3, [sp, #0]
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	687a      	ldr	r2, [r7, #4]
 8006aaa:	68b9      	ldr	r1, [r7, #8]
 8006aac:	68f8      	ldr	r0, [r7, #12]
 8006aae:	f000 f850 	bl	8006b52 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006ab2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006ab4:	f000 f8de 	bl	8006c74 <prvAddNewTaskToReadyList>
 8006ab8:	e001      	b.n	8006abe <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006aba:	2300      	movs	r3, #0
 8006abc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006abe:	697b      	ldr	r3, [r7, #20]
	}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3728      	adds	r7, #40	@ 0x28
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b08c      	sub	sp, #48	@ 0x30
 8006acc:	af04      	add	r7, sp, #16
 8006ace:	60f8      	str	r0, [r7, #12]
 8006ad0:	60b9      	str	r1, [r7, #8]
 8006ad2:	603b      	str	r3, [r7, #0]
 8006ad4:	4613      	mov	r3, r2
 8006ad6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006ad8:	88fb      	ldrh	r3, [r7, #6]
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	4618      	mov	r0, r3
 8006ade:	f001 fd5d 	bl	800859c <pvPortMalloc>
 8006ae2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d00e      	beq.n	8006b08 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006aea:	205c      	movs	r0, #92	@ 0x5c
 8006aec:	f001 fd56 	bl	800859c <pvPortMalloc>
 8006af0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006af2:	69fb      	ldr	r3, [r7, #28]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d003      	beq.n	8006b00 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006af8:	69fb      	ldr	r3, [r7, #28]
 8006afa:	697a      	ldr	r2, [r7, #20]
 8006afc:	631a      	str	r2, [r3, #48]	@ 0x30
 8006afe:	e005      	b.n	8006b0c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006b00:	6978      	ldr	r0, [r7, #20]
 8006b02:	f001 fe19 	bl	8008738 <vPortFree>
 8006b06:	e001      	b.n	8006b0c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006b0c:	69fb      	ldr	r3, [r7, #28]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d017      	beq.n	8006b42 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006b12:	69fb      	ldr	r3, [r7, #28]
 8006b14:	2200      	movs	r2, #0
 8006b16:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006b1a:	88fa      	ldrh	r2, [r7, #6]
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	9303      	str	r3, [sp, #12]
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	9302      	str	r3, [sp, #8]
 8006b24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b26:	9301      	str	r3, [sp, #4]
 8006b28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b2a:	9300      	str	r3, [sp, #0]
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	68b9      	ldr	r1, [r7, #8]
 8006b30:	68f8      	ldr	r0, [r7, #12]
 8006b32:	f000 f80e 	bl	8006b52 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b36:	69f8      	ldr	r0, [r7, #28]
 8006b38:	f000 f89c 	bl	8006c74 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	61bb      	str	r3, [r7, #24]
 8006b40:	e002      	b.n	8006b48 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006b42:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006b46:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006b48:	69bb      	ldr	r3, [r7, #24]
	}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3720      	adds	r7, #32
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}

08006b52 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006b52:	b580      	push	{r7, lr}
 8006b54:	b088      	sub	sp, #32
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	60f8      	str	r0, [r7, #12]
 8006b5a:	60b9      	str	r1, [r7, #8]
 8006b5c:	607a      	str	r2, [r7, #4]
 8006b5e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b62:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	461a      	mov	r2, r3
 8006b6a:	21a5      	movs	r1, #165	@ 0xa5
 8006b6c:	f002 fc52 	bl	8009414 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006b7a:	3b01      	subs	r3, #1
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	4413      	add	r3, r2
 8006b80:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006b82:	69bb      	ldr	r3, [r7, #24]
 8006b84:	f023 0307 	bic.w	r3, r3, #7
 8006b88:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006b8a:	69bb      	ldr	r3, [r7, #24]
 8006b8c:	f003 0307 	and.w	r3, r3, #7
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d00b      	beq.n	8006bac <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006b94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b98:	f383 8811 	msr	BASEPRI, r3
 8006b9c:	f3bf 8f6f 	isb	sy
 8006ba0:	f3bf 8f4f 	dsb	sy
 8006ba4:	617b      	str	r3, [r7, #20]
}
 8006ba6:	bf00      	nop
 8006ba8:	bf00      	nop
 8006baa:	e7fd      	b.n	8006ba8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d01f      	beq.n	8006bf2 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	61fb      	str	r3, [r7, #28]
 8006bb6:	e012      	b.n	8006bde <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006bb8:	68ba      	ldr	r2, [r7, #8]
 8006bba:	69fb      	ldr	r3, [r7, #28]
 8006bbc:	4413      	add	r3, r2
 8006bbe:	7819      	ldrb	r1, [r3, #0]
 8006bc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	4413      	add	r3, r2
 8006bc6:	3334      	adds	r3, #52	@ 0x34
 8006bc8:	460a      	mov	r2, r1
 8006bca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006bcc:	68ba      	ldr	r2, [r7, #8]
 8006bce:	69fb      	ldr	r3, [r7, #28]
 8006bd0:	4413      	add	r3, r2
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d006      	beq.n	8006be6 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006bd8:	69fb      	ldr	r3, [r7, #28]
 8006bda:	3301      	adds	r3, #1
 8006bdc:	61fb      	str	r3, [r7, #28]
 8006bde:	69fb      	ldr	r3, [r7, #28]
 8006be0:	2b0f      	cmp	r3, #15
 8006be2:	d9e9      	bls.n	8006bb8 <prvInitialiseNewTask+0x66>
 8006be4:	e000      	b.n	8006be8 <prvInitialiseNewTask+0x96>
			{
				break;
 8006be6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bea:	2200      	movs	r2, #0
 8006bec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006bf0:	e003      	b.n	8006bfa <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006bfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bfc:	2b37      	cmp	r3, #55	@ 0x37
 8006bfe:	d901      	bls.n	8006c04 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006c00:	2337      	movs	r3, #55	@ 0x37
 8006c02:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006c08:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c0c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006c0e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006c10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c12:	2200      	movs	r2, #0
 8006c14:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c18:	3304      	adds	r3, #4
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f7fe fec8 	bl	80059b0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c22:	3318      	adds	r3, #24
 8006c24:	4618      	mov	r0, r3
 8006c26:	f7fe fec3 	bl	80059b0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c2e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c32:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c38:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006c3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c3e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c42:	2200      	movs	r2, #0
 8006c44:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006c4e:	683a      	ldr	r2, [r7, #0]
 8006c50:	68f9      	ldr	r1, [r7, #12]
 8006c52:	69b8      	ldr	r0, [r7, #24]
 8006c54:	f001 fa4e 	bl	80080f4 <pxPortInitialiseStack>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c5c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006c5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d002      	beq.n	8006c6a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006c64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c68:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c6a:	bf00      	nop
 8006c6c:	3720      	adds	r7, #32
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}
	...

08006c74 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b082      	sub	sp, #8
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006c7c:	f001 fb6c 	bl	8008358 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006c80:	4b2d      	ldr	r3, [pc, #180]	@ (8006d38 <prvAddNewTaskToReadyList+0xc4>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	3301      	adds	r3, #1
 8006c86:	4a2c      	ldr	r2, [pc, #176]	@ (8006d38 <prvAddNewTaskToReadyList+0xc4>)
 8006c88:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006c8a:	4b2c      	ldr	r3, [pc, #176]	@ (8006d3c <prvAddNewTaskToReadyList+0xc8>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d109      	bne.n	8006ca6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006c92:	4a2a      	ldr	r2, [pc, #168]	@ (8006d3c <prvAddNewTaskToReadyList+0xc8>)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006c98:	4b27      	ldr	r3, [pc, #156]	@ (8006d38 <prvAddNewTaskToReadyList+0xc4>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d110      	bne.n	8006cc2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006ca0:	f000 fc1e 	bl	80074e0 <prvInitialiseTaskLists>
 8006ca4:	e00d      	b.n	8006cc2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006ca6:	4b26      	ldr	r3, [pc, #152]	@ (8006d40 <prvAddNewTaskToReadyList+0xcc>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d109      	bne.n	8006cc2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006cae:	4b23      	ldr	r3, [pc, #140]	@ (8006d3c <prvAddNewTaskToReadyList+0xc8>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d802      	bhi.n	8006cc2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006cbc:	4a1f      	ldr	r2, [pc, #124]	@ (8006d3c <prvAddNewTaskToReadyList+0xc8>)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006cc2:	4b20      	ldr	r3, [pc, #128]	@ (8006d44 <prvAddNewTaskToReadyList+0xd0>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	4a1e      	ldr	r2, [pc, #120]	@ (8006d44 <prvAddNewTaskToReadyList+0xd0>)
 8006cca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006ccc:	4b1d      	ldr	r3, [pc, #116]	@ (8006d44 <prvAddNewTaskToReadyList+0xd0>)
 8006cce:	681a      	ldr	r2, [r3, #0]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cd8:	4b1b      	ldr	r3, [pc, #108]	@ (8006d48 <prvAddNewTaskToReadyList+0xd4>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d903      	bls.n	8006ce8 <prvAddNewTaskToReadyList+0x74>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ce4:	4a18      	ldr	r2, [pc, #96]	@ (8006d48 <prvAddNewTaskToReadyList+0xd4>)
 8006ce6:	6013      	str	r3, [r2, #0]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cec:	4613      	mov	r3, r2
 8006cee:	009b      	lsls	r3, r3, #2
 8006cf0:	4413      	add	r3, r2
 8006cf2:	009b      	lsls	r3, r3, #2
 8006cf4:	4a15      	ldr	r2, [pc, #84]	@ (8006d4c <prvAddNewTaskToReadyList+0xd8>)
 8006cf6:	441a      	add	r2, r3
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	3304      	adds	r3, #4
 8006cfc:	4619      	mov	r1, r3
 8006cfe:	4610      	mov	r0, r2
 8006d00:	f7fe fe63 	bl	80059ca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006d04:	f001 fb5a 	bl	80083bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006d08:	4b0d      	ldr	r3, [pc, #52]	@ (8006d40 <prvAddNewTaskToReadyList+0xcc>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d00e      	beq.n	8006d2e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006d10:	4b0a      	ldr	r3, [pc, #40]	@ (8006d3c <prvAddNewTaskToReadyList+0xc8>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d207      	bcs.n	8006d2e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006d1e:	4b0c      	ldr	r3, [pc, #48]	@ (8006d50 <prvAddNewTaskToReadyList+0xdc>)
 8006d20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d24:	601a      	str	r2, [r3, #0]
 8006d26:	f3bf 8f4f 	dsb	sy
 8006d2a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d2e:	bf00      	nop
 8006d30:	3708      	adds	r7, #8
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}
 8006d36:	bf00      	nop
 8006d38:	200012e0 	.word	0x200012e0
 8006d3c:	20000e0c 	.word	0x20000e0c
 8006d40:	200012ec 	.word	0x200012ec
 8006d44:	200012fc 	.word	0x200012fc
 8006d48:	200012e8 	.word	0x200012e8
 8006d4c:	20000e10 	.word	0x20000e10
 8006d50:	e000ed04 	.word	0xe000ed04

08006d54 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b084      	sub	sp, #16
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d018      	beq.n	8006d98 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006d66:	4b14      	ldr	r3, [pc, #80]	@ (8006db8 <vTaskDelay+0x64>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d00b      	beq.n	8006d86 <vTaskDelay+0x32>
	__asm volatile
 8006d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d72:	f383 8811 	msr	BASEPRI, r3
 8006d76:	f3bf 8f6f 	isb	sy
 8006d7a:	f3bf 8f4f 	dsb	sy
 8006d7e:	60bb      	str	r3, [r7, #8]
}
 8006d80:	bf00      	nop
 8006d82:	bf00      	nop
 8006d84:	e7fd      	b.n	8006d82 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006d86:	f000 f883 	bl	8006e90 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006d8a:	2100      	movs	r1, #0
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f000 fe03 	bl	8007998 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006d92:	f000 f88b 	bl	8006eac <xTaskResumeAll>
 8006d96:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d107      	bne.n	8006dae <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006d9e:	4b07      	ldr	r3, [pc, #28]	@ (8006dbc <vTaskDelay+0x68>)
 8006da0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006da4:	601a      	str	r2, [r3, #0]
 8006da6:	f3bf 8f4f 	dsb	sy
 8006daa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006dae:	bf00      	nop
 8006db0:	3710      	adds	r7, #16
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}
 8006db6:	bf00      	nop
 8006db8:	20001308 	.word	0x20001308
 8006dbc:	e000ed04 	.word	0xe000ed04

08006dc0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b08a      	sub	sp, #40	@ 0x28
 8006dc4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006dce:	463a      	mov	r2, r7
 8006dd0:	1d39      	adds	r1, r7, #4
 8006dd2:	f107 0308 	add.w	r3, r7, #8
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f7fe fd96 	bl	8005908 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006ddc:	6839      	ldr	r1, [r7, #0]
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	68ba      	ldr	r2, [r7, #8]
 8006de2:	9202      	str	r2, [sp, #8]
 8006de4:	9301      	str	r3, [sp, #4]
 8006de6:	2300      	movs	r3, #0
 8006de8:	9300      	str	r3, [sp, #0]
 8006dea:	2300      	movs	r3, #0
 8006dec:	460a      	mov	r2, r1
 8006dee:	4922      	ldr	r1, [pc, #136]	@ (8006e78 <vTaskStartScheduler+0xb8>)
 8006df0:	4822      	ldr	r0, [pc, #136]	@ (8006e7c <vTaskStartScheduler+0xbc>)
 8006df2:	f7ff fe09 	bl	8006a08 <xTaskCreateStatic>
 8006df6:	4603      	mov	r3, r0
 8006df8:	4a21      	ldr	r2, [pc, #132]	@ (8006e80 <vTaskStartScheduler+0xc0>)
 8006dfa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006dfc:	4b20      	ldr	r3, [pc, #128]	@ (8006e80 <vTaskStartScheduler+0xc0>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d002      	beq.n	8006e0a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006e04:	2301      	movs	r3, #1
 8006e06:	617b      	str	r3, [r7, #20]
 8006e08:	e001      	b.n	8006e0e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d102      	bne.n	8006e1a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006e14:	f000 fe14 	bl	8007a40 <xTimerCreateTimerTask>
 8006e18:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	2b01      	cmp	r3, #1
 8006e1e:	d116      	bne.n	8006e4e <vTaskStartScheduler+0x8e>
	__asm volatile
 8006e20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e24:	f383 8811 	msr	BASEPRI, r3
 8006e28:	f3bf 8f6f 	isb	sy
 8006e2c:	f3bf 8f4f 	dsb	sy
 8006e30:	613b      	str	r3, [r7, #16]
}
 8006e32:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006e34:	4b13      	ldr	r3, [pc, #76]	@ (8006e84 <vTaskStartScheduler+0xc4>)
 8006e36:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006e3a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006e3c:	4b12      	ldr	r3, [pc, #72]	@ (8006e88 <vTaskStartScheduler+0xc8>)
 8006e3e:	2201      	movs	r2, #1
 8006e40:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006e42:	4b12      	ldr	r3, [pc, #72]	@ (8006e8c <vTaskStartScheduler+0xcc>)
 8006e44:	2200      	movs	r2, #0
 8006e46:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006e48:	f001 f9e2 	bl	8008210 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006e4c:	e00f      	b.n	8006e6e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006e54:	d10b      	bne.n	8006e6e <vTaskStartScheduler+0xae>
	__asm volatile
 8006e56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e5a:	f383 8811 	msr	BASEPRI, r3
 8006e5e:	f3bf 8f6f 	isb	sy
 8006e62:	f3bf 8f4f 	dsb	sy
 8006e66:	60fb      	str	r3, [r7, #12]
}
 8006e68:	bf00      	nop
 8006e6a:	bf00      	nop
 8006e6c:	e7fd      	b.n	8006e6a <vTaskStartScheduler+0xaa>
}
 8006e6e:	bf00      	nop
 8006e70:	3718      	adds	r7, #24
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	bf00      	nop
 8006e78:	0800b69c 	.word	0x0800b69c
 8006e7c:	080074b1 	.word	0x080074b1
 8006e80:	20001304 	.word	0x20001304
 8006e84:	20001300 	.word	0x20001300
 8006e88:	200012ec 	.word	0x200012ec
 8006e8c:	200012e4 	.word	0x200012e4

08006e90 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006e90:	b480      	push	{r7}
 8006e92:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006e94:	4b04      	ldr	r3, [pc, #16]	@ (8006ea8 <vTaskSuspendAll+0x18>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	3301      	adds	r3, #1
 8006e9a:	4a03      	ldr	r2, [pc, #12]	@ (8006ea8 <vTaskSuspendAll+0x18>)
 8006e9c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006e9e:	bf00      	nop
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea6:	4770      	bx	lr
 8006ea8:	20001308 	.word	0x20001308

08006eac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b084      	sub	sp, #16
 8006eb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006eba:	4b42      	ldr	r3, [pc, #264]	@ (8006fc4 <xTaskResumeAll+0x118>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d10b      	bne.n	8006eda <xTaskResumeAll+0x2e>
	__asm volatile
 8006ec2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ec6:	f383 8811 	msr	BASEPRI, r3
 8006eca:	f3bf 8f6f 	isb	sy
 8006ece:	f3bf 8f4f 	dsb	sy
 8006ed2:	603b      	str	r3, [r7, #0]
}
 8006ed4:	bf00      	nop
 8006ed6:	bf00      	nop
 8006ed8:	e7fd      	b.n	8006ed6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006eda:	f001 fa3d 	bl	8008358 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006ede:	4b39      	ldr	r3, [pc, #228]	@ (8006fc4 <xTaskResumeAll+0x118>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	3b01      	subs	r3, #1
 8006ee4:	4a37      	ldr	r2, [pc, #220]	@ (8006fc4 <xTaskResumeAll+0x118>)
 8006ee6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ee8:	4b36      	ldr	r3, [pc, #216]	@ (8006fc4 <xTaskResumeAll+0x118>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d162      	bne.n	8006fb6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006ef0:	4b35      	ldr	r3, [pc, #212]	@ (8006fc8 <xTaskResumeAll+0x11c>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d05e      	beq.n	8006fb6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ef8:	e02f      	b.n	8006f5a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006efa:	4b34      	ldr	r3, [pc, #208]	@ (8006fcc <xTaskResumeAll+0x120>)
 8006efc:	68db      	ldr	r3, [r3, #12]
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	3318      	adds	r3, #24
 8006f06:	4618      	mov	r0, r3
 8006f08:	f7fe fdbc 	bl	8005a84 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	3304      	adds	r3, #4
 8006f10:	4618      	mov	r0, r3
 8006f12:	f7fe fdb7 	bl	8005a84 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f1a:	4b2d      	ldr	r3, [pc, #180]	@ (8006fd0 <xTaskResumeAll+0x124>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	d903      	bls.n	8006f2a <xTaskResumeAll+0x7e>
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f26:	4a2a      	ldr	r2, [pc, #168]	@ (8006fd0 <xTaskResumeAll+0x124>)
 8006f28:	6013      	str	r3, [r2, #0]
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f2e:	4613      	mov	r3, r2
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	4413      	add	r3, r2
 8006f34:	009b      	lsls	r3, r3, #2
 8006f36:	4a27      	ldr	r2, [pc, #156]	@ (8006fd4 <xTaskResumeAll+0x128>)
 8006f38:	441a      	add	r2, r3
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	3304      	adds	r3, #4
 8006f3e:	4619      	mov	r1, r3
 8006f40:	4610      	mov	r0, r2
 8006f42:	f7fe fd42 	bl	80059ca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f4a:	4b23      	ldr	r3, [pc, #140]	@ (8006fd8 <xTaskResumeAll+0x12c>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f50:	429a      	cmp	r2, r3
 8006f52:	d302      	bcc.n	8006f5a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006f54:	4b21      	ldr	r3, [pc, #132]	@ (8006fdc <xTaskResumeAll+0x130>)
 8006f56:	2201      	movs	r2, #1
 8006f58:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f5a:	4b1c      	ldr	r3, [pc, #112]	@ (8006fcc <xTaskResumeAll+0x120>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d1cb      	bne.n	8006efa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d001      	beq.n	8006f6c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006f68:	f000 fb58 	bl	800761c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006f6c:	4b1c      	ldr	r3, [pc, #112]	@ (8006fe0 <xTaskResumeAll+0x134>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d010      	beq.n	8006f9a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006f78:	f000 f846 	bl	8007008 <xTaskIncrementTick>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d002      	beq.n	8006f88 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006f82:	4b16      	ldr	r3, [pc, #88]	@ (8006fdc <xTaskResumeAll+0x130>)
 8006f84:	2201      	movs	r2, #1
 8006f86:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	3b01      	subs	r3, #1
 8006f8c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d1f1      	bne.n	8006f78 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006f94:	4b12      	ldr	r3, [pc, #72]	@ (8006fe0 <xTaskResumeAll+0x134>)
 8006f96:	2200      	movs	r2, #0
 8006f98:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006f9a:	4b10      	ldr	r3, [pc, #64]	@ (8006fdc <xTaskResumeAll+0x130>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d009      	beq.n	8006fb6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006fa6:	4b0f      	ldr	r3, [pc, #60]	@ (8006fe4 <xTaskResumeAll+0x138>)
 8006fa8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006fac:	601a      	str	r2, [r3, #0]
 8006fae:	f3bf 8f4f 	dsb	sy
 8006fb2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006fb6:	f001 fa01 	bl	80083bc <vPortExitCritical>

	return xAlreadyYielded;
 8006fba:	68bb      	ldr	r3, [r7, #8]
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3710      	adds	r7, #16
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}
 8006fc4:	20001308 	.word	0x20001308
 8006fc8:	200012e0 	.word	0x200012e0
 8006fcc:	200012a0 	.word	0x200012a0
 8006fd0:	200012e8 	.word	0x200012e8
 8006fd4:	20000e10 	.word	0x20000e10
 8006fd8:	20000e0c 	.word	0x20000e0c
 8006fdc:	200012f4 	.word	0x200012f4
 8006fe0:	200012f0 	.word	0x200012f0
 8006fe4:	e000ed04 	.word	0xe000ed04

08006fe8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b083      	sub	sp, #12
 8006fec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006fee:	4b05      	ldr	r3, [pc, #20]	@ (8007004 <xTaskGetTickCount+0x1c>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006ff4:	687b      	ldr	r3, [r7, #4]
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	370c      	adds	r7, #12
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr
 8007002:	bf00      	nop
 8007004:	200012e4 	.word	0x200012e4

08007008 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b086      	sub	sp, #24
 800700c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800700e:	2300      	movs	r3, #0
 8007010:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007012:	4b4f      	ldr	r3, [pc, #316]	@ (8007150 <xTaskIncrementTick+0x148>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	2b00      	cmp	r3, #0
 8007018:	f040 8090 	bne.w	800713c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800701c:	4b4d      	ldr	r3, [pc, #308]	@ (8007154 <xTaskIncrementTick+0x14c>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	3301      	adds	r3, #1
 8007022:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007024:	4a4b      	ldr	r2, [pc, #300]	@ (8007154 <xTaskIncrementTick+0x14c>)
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d121      	bne.n	8007074 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007030:	4b49      	ldr	r3, [pc, #292]	@ (8007158 <xTaskIncrementTick+0x150>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d00b      	beq.n	8007052 <xTaskIncrementTick+0x4a>
	__asm volatile
 800703a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800703e:	f383 8811 	msr	BASEPRI, r3
 8007042:	f3bf 8f6f 	isb	sy
 8007046:	f3bf 8f4f 	dsb	sy
 800704a:	603b      	str	r3, [r7, #0]
}
 800704c:	bf00      	nop
 800704e:	bf00      	nop
 8007050:	e7fd      	b.n	800704e <xTaskIncrementTick+0x46>
 8007052:	4b41      	ldr	r3, [pc, #260]	@ (8007158 <xTaskIncrementTick+0x150>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	60fb      	str	r3, [r7, #12]
 8007058:	4b40      	ldr	r3, [pc, #256]	@ (800715c <xTaskIncrementTick+0x154>)
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	4a3e      	ldr	r2, [pc, #248]	@ (8007158 <xTaskIncrementTick+0x150>)
 800705e:	6013      	str	r3, [r2, #0]
 8007060:	4a3e      	ldr	r2, [pc, #248]	@ (800715c <xTaskIncrementTick+0x154>)
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	6013      	str	r3, [r2, #0]
 8007066:	4b3e      	ldr	r3, [pc, #248]	@ (8007160 <xTaskIncrementTick+0x158>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	3301      	adds	r3, #1
 800706c:	4a3c      	ldr	r2, [pc, #240]	@ (8007160 <xTaskIncrementTick+0x158>)
 800706e:	6013      	str	r3, [r2, #0]
 8007070:	f000 fad4 	bl	800761c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007074:	4b3b      	ldr	r3, [pc, #236]	@ (8007164 <xTaskIncrementTick+0x15c>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	693a      	ldr	r2, [r7, #16]
 800707a:	429a      	cmp	r2, r3
 800707c:	d349      	bcc.n	8007112 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800707e:	4b36      	ldr	r3, [pc, #216]	@ (8007158 <xTaskIncrementTick+0x150>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d104      	bne.n	8007092 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007088:	4b36      	ldr	r3, [pc, #216]	@ (8007164 <xTaskIncrementTick+0x15c>)
 800708a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800708e:	601a      	str	r2, [r3, #0]
					break;
 8007090:	e03f      	b.n	8007112 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007092:	4b31      	ldr	r3, [pc, #196]	@ (8007158 <xTaskIncrementTick+0x150>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	68db      	ldr	r3, [r3, #12]
 8007098:	68db      	ldr	r3, [r3, #12]
 800709a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80070a2:	693a      	ldr	r2, [r7, #16]
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	429a      	cmp	r2, r3
 80070a8:	d203      	bcs.n	80070b2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80070aa:	4a2e      	ldr	r2, [pc, #184]	@ (8007164 <xTaskIncrementTick+0x15c>)
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80070b0:	e02f      	b.n	8007112 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	3304      	adds	r3, #4
 80070b6:	4618      	mov	r0, r3
 80070b8:	f7fe fce4 	bl	8005a84 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d004      	beq.n	80070ce <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	3318      	adds	r3, #24
 80070c8:	4618      	mov	r0, r3
 80070ca:	f7fe fcdb 	bl	8005a84 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070d2:	4b25      	ldr	r3, [pc, #148]	@ (8007168 <xTaskIncrementTick+0x160>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d903      	bls.n	80070e2 <xTaskIncrementTick+0xda>
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070de:	4a22      	ldr	r2, [pc, #136]	@ (8007168 <xTaskIncrementTick+0x160>)
 80070e0:	6013      	str	r3, [r2, #0]
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070e6:	4613      	mov	r3, r2
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	4413      	add	r3, r2
 80070ec:	009b      	lsls	r3, r3, #2
 80070ee:	4a1f      	ldr	r2, [pc, #124]	@ (800716c <xTaskIncrementTick+0x164>)
 80070f0:	441a      	add	r2, r3
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	3304      	adds	r3, #4
 80070f6:	4619      	mov	r1, r3
 80070f8:	4610      	mov	r0, r2
 80070fa:	f7fe fc66 	bl	80059ca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007102:	4b1b      	ldr	r3, [pc, #108]	@ (8007170 <xTaskIncrementTick+0x168>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007108:	429a      	cmp	r2, r3
 800710a:	d3b8      	bcc.n	800707e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800710c:	2301      	movs	r3, #1
 800710e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007110:	e7b5      	b.n	800707e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007112:	4b17      	ldr	r3, [pc, #92]	@ (8007170 <xTaskIncrementTick+0x168>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007118:	4914      	ldr	r1, [pc, #80]	@ (800716c <xTaskIncrementTick+0x164>)
 800711a:	4613      	mov	r3, r2
 800711c:	009b      	lsls	r3, r3, #2
 800711e:	4413      	add	r3, r2
 8007120:	009b      	lsls	r3, r3, #2
 8007122:	440b      	add	r3, r1
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	2b01      	cmp	r3, #1
 8007128:	d901      	bls.n	800712e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800712a:	2301      	movs	r3, #1
 800712c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800712e:	4b11      	ldr	r3, [pc, #68]	@ (8007174 <xTaskIncrementTick+0x16c>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d007      	beq.n	8007146 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007136:	2301      	movs	r3, #1
 8007138:	617b      	str	r3, [r7, #20]
 800713a:	e004      	b.n	8007146 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800713c:	4b0e      	ldr	r3, [pc, #56]	@ (8007178 <xTaskIncrementTick+0x170>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	3301      	adds	r3, #1
 8007142:	4a0d      	ldr	r2, [pc, #52]	@ (8007178 <xTaskIncrementTick+0x170>)
 8007144:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007146:	697b      	ldr	r3, [r7, #20]
}
 8007148:	4618      	mov	r0, r3
 800714a:	3718      	adds	r7, #24
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}
 8007150:	20001308 	.word	0x20001308
 8007154:	200012e4 	.word	0x200012e4
 8007158:	20001298 	.word	0x20001298
 800715c:	2000129c 	.word	0x2000129c
 8007160:	200012f8 	.word	0x200012f8
 8007164:	20001300 	.word	0x20001300
 8007168:	200012e8 	.word	0x200012e8
 800716c:	20000e10 	.word	0x20000e10
 8007170:	20000e0c 	.word	0x20000e0c
 8007174:	200012f4 	.word	0x200012f4
 8007178:	200012f0 	.word	0x200012f0

0800717c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800717c:	b480      	push	{r7}
 800717e:	b085      	sub	sp, #20
 8007180:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007182:	4b28      	ldr	r3, [pc, #160]	@ (8007224 <vTaskSwitchContext+0xa8>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d003      	beq.n	8007192 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800718a:	4b27      	ldr	r3, [pc, #156]	@ (8007228 <vTaskSwitchContext+0xac>)
 800718c:	2201      	movs	r2, #1
 800718e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007190:	e042      	b.n	8007218 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8007192:	4b25      	ldr	r3, [pc, #148]	@ (8007228 <vTaskSwitchContext+0xac>)
 8007194:	2200      	movs	r2, #0
 8007196:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007198:	4b24      	ldr	r3, [pc, #144]	@ (800722c <vTaskSwitchContext+0xb0>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	60fb      	str	r3, [r7, #12]
 800719e:	e011      	b.n	80071c4 <vTaskSwitchContext+0x48>
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d10b      	bne.n	80071be <vTaskSwitchContext+0x42>
	__asm volatile
 80071a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071aa:	f383 8811 	msr	BASEPRI, r3
 80071ae:	f3bf 8f6f 	isb	sy
 80071b2:	f3bf 8f4f 	dsb	sy
 80071b6:	607b      	str	r3, [r7, #4]
}
 80071b8:	bf00      	nop
 80071ba:	bf00      	nop
 80071bc:	e7fd      	b.n	80071ba <vTaskSwitchContext+0x3e>
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	3b01      	subs	r3, #1
 80071c2:	60fb      	str	r3, [r7, #12]
 80071c4:	491a      	ldr	r1, [pc, #104]	@ (8007230 <vTaskSwitchContext+0xb4>)
 80071c6:	68fa      	ldr	r2, [r7, #12]
 80071c8:	4613      	mov	r3, r2
 80071ca:	009b      	lsls	r3, r3, #2
 80071cc:	4413      	add	r3, r2
 80071ce:	009b      	lsls	r3, r3, #2
 80071d0:	440b      	add	r3, r1
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d0e3      	beq.n	80071a0 <vTaskSwitchContext+0x24>
 80071d8:	68fa      	ldr	r2, [r7, #12]
 80071da:	4613      	mov	r3, r2
 80071dc:	009b      	lsls	r3, r3, #2
 80071de:	4413      	add	r3, r2
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	4a13      	ldr	r2, [pc, #76]	@ (8007230 <vTaskSwitchContext+0xb4>)
 80071e4:	4413      	add	r3, r2
 80071e6:	60bb      	str	r3, [r7, #8]
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	685a      	ldr	r2, [r3, #4]
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	605a      	str	r2, [r3, #4]
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	685a      	ldr	r2, [r3, #4]
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	3308      	adds	r3, #8
 80071fa:	429a      	cmp	r2, r3
 80071fc:	d104      	bne.n	8007208 <vTaskSwitchContext+0x8c>
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	685a      	ldr	r2, [r3, #4]
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	605a      	str	r2, [r3, #4]
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	68db      	ldr	r3, [r3, #12]
 800720e:	4a09      	ldr	r2, [pc, #36]	@ (8007234 <vTaskSwitchContext+0xb8>)
 8007210:	6013      	str	r3, [r2, #0]
 8007212:	4a06      	ldr	r2, [pc, #24]	@ (800722c <vTaskSwitchContext+0xb0>)
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	6013      	str	r3, [r2, #0]
}
 8007218:	bf00      	nop
 800721a:	3714      	adds	r7, #20
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr
 8007224:	20001308 	.word	0x20001308
 8007228:	200012f4 	.word	0x200012f4
 800722c:	200012e8 	.word	0x200012e8
 8007230:	20000e10 	.word	0x20000e10
 8007234:	20000e0c 	.word	0x20000e0c

08007238 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b084      	sub	sp, #16
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d10b      	bne.n	8007260 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007248:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800724c:	f383 8811 	msr	BASEPRI, r3
 8007250:	f3bf 8f6f 	isb	sy
 8007254:	f3bf 8f4f 	dsb	sy
 8007258:	60fb      	str	r3, [r7, #12]
}
 800725a:	bf00      	nop
 800725c:	bf00      	nop
 800725e:	e7fd      	b.n	800725c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007260:	4b07      	ldr	r3, [pc, #28]	@ (8007280 <vTaskPlaceOnEventList+0x48>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	3318      	adds	r3, #24
 8007266:	4619      	mov	r1, r3
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f7fe fbd2 	bl	8005a12 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800726e:	2101      	movs	r1, #1
 8007270:	6838      	ldr	r0, [r7, #0]
 8007272:	f000 fb91 	bl	8007998 <prvAddCurrentTaskToDelayedList>
}
 8007276:	bf00      	nop
 8007278:	3710      	adds	r7, #16
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
 800727e:	bf00      	nop
 8007280:	20000e0c 	.word	0x20000e0c

08007284 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007284:	b580      	push	{r7, lr}
 8007286:	b086      	sub	sp, #24
 8007288:	af00      	add	r7, sp, #0
 800728a:	60f8      	str	r0, [r7, #12]
 800728c:	60b9      	str	r1, [r7, #8]
 800728e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d10b      	bne.n	80072ae <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800729a:	f383 8811 	msr	BASEPRI, r3
 800729e:	f3bf 8f6f 	isb	sy
 80072a2:	f3bf 8f4f 	dsb	sy
 80072a6:	617b      	str	r3, [r7, #20]
}
 80072a8:	bf00      	nop
 80072aa:	bf00      	nop
 80072ac:	e7fd      	b.n	80072aa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80072ae:	4b0a      	ldr	r3, [pc, #40]	@ (80072d8 <vTaskPlaceOnEventListRestricted+0x54>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	3318      	adds	r3, #24
 80072b4:	4619      	mov	r1, r3
 80072b6:	68f8      	ldr	r0, [r7, #12]
 80072b8:	f7fe fb87 	bl	80059ca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d002      	beq.n	80072c8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80072c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80072c6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80072c8:	6879      	ldr	r1, [r7, #4]
 80072ca:	68b8      	ldr	r0, [r7, #8]
 80072cc:	f000 fb64 	bl	8007998 <prvAddCurrentTaskToDelayedList>
	}
 80072d0:	bf00      	nop
 80072d2:	3718      	adds	r7, #24
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}
 80072d8:	20000e0c 	.word	0x20000e0c

080072dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b086      	sub	sp, #24
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	68db      	ldr	r3, [r3, #12]
 80072e8:	68db      	ldr	r3, [r3, #12]
 80072ea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d10b      	bne.n	800730a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80072f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072f6:	f383 8811 	msr	BASEPRI, r3
 80072fa:	f3bf 8f6f 	isb	sy
 80072fe:	f3bf 8f4f 	dsb	sy
 8007302:	60fb      	str	r3, [r7, #12]
}
 8007304:	bf00      	nop
 8007306:	bf00      	nop
 8007308:	e7fd      	b.n	8007306 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	3318      	adds	r3, #24
 800730e:	4618      	mov	r0, r3
 8007310:	f7fe fbb8 	bl	8005a84 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007314:	4b1d      	ldr	r3, [pc, #116]	@ (800738c <xTaskRemoveFromEventList+0xb0>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d11d      	bne.n	8007358 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	3304      	adds	r3, #4
 8007320:	4618      	mov	r0, r3
 8007322:	f7fe fbaf 	bl	8005a84 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800732a:	4b19      	ldr	r3, [pc, #100]	@ (8007390 <xTaskRemoveFromEventList+0xb4>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	429a      	cmp	r2, r3
 8007330:	d903      	bls.n	800733a <xTaskRemoveFromEventList+0x5e>
 8007332:	693b      	ldr	r3, [r7, #16]
 8007334:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007336:	4a16      	ldr	r2, [pc, #88]	@ (8007390 <xTaskRemoveFromEventList+0xb4>)
 8007338:	6013      	str	r3, [r2, #0]
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800733e:	4613      	mov	r3, r2
 8007340:	009b      	lsls	r3, r3, #2
 8007342:	4413      	add	r3, r2
 8007344:	009b      	lsls	r3, r3, #2
 8007346:	4a13      	ldr	r2, [pc, #76]	@ (8007394 <xTaskRemoveFromEventList+0xb8>)
 8007348:	441a      	add	r2, r3
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	3304      	adds	r3, #4
 800734e:	4619      	mov	r1, r3
 8007350:	4610      	mov	r0, r2
 8007352:	f7fe fb3a 	bl	80059ca <vListInsertEnd>
 8007356:	e005      	b.n	8007364 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	3318      	adds	r3, #24
 800735c:	4619      	mov	r1, r3
 800735e:	480e      	ldr	r0, [pc, #56]	@ (8007398 <xTaskRemoveFromEventList+0xbc>)
 8007360:	f7fe fb33 	bl	80059ca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007368:	4b0c      	ldr	r3, [pc, #48]	@ (800739c <xTaskRemoveFromEventList+0xc0>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800736e:	429a      	cmp	r2, r3
 8007370:	d905      	bls.n	800737e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007372:	2301      	movs	r3, #1
 8007374:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007376:	4b0a      	ldr	r3, [pc, #40]	@ (80073a0 <xTaskRemoveFromEventList+0xc4>)
 8007378:	2201      	movs	r2, #1
 800737a:	601a      	str	r2, [r3, #0]
 800737c:	e001      	b.n	8007382 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800737e:	2300      	movs	r3, #0
 8007380:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007382:	697b      	ldr	r3, [r7, #20]
}
 8007384:	4618      	mov	r0, r3
 8007386:	3718      	adds	r7, #24
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}
 800738c:	20001308 	.word	0x20001308
 8007390:	200012e8 	.word	0x200012e8
 8007394:	20000e10 	.word	0x20000e10
 8007398:	200012a0 	.word	0x200012a0
 800739c:	20000e0c 	.word	0x20000e0c
 80073a0:	200012f4 	.word	0x200012f4

080073a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80073a4:	b480      	push	{r7}
 80073a6:	b083      	sub	sp, #12
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80073ac:	4b06      	ldr	r3, [pc, #24]	@ (80073c8 <vTaskInternalSetTimeOutState+0x24>)
 80073ae:	681a      	ldr	r2, [r3, #0]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80073b4:	4b05      	ldr	r3, [pc, #20]	@ (80073cc <vTaskInternalSetTimeOutState+0x28>)
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	605a      	str	r2, [r3, #4]
}
 80073bc:	bf00      	nop
 80073be:	370c      	adds	r7, #12
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr
 80073c8:	200012f8 	.word	0x200012f8
 80073cc:	200012e4 	.word	0x200012e4

080073d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b088      	sub	sp, #32
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d10b      	bne.n	80073f8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80073e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073e4:	f383 8811 	msr	BASEPRI, r3
 80073e8:	f3bf 8f6f 	isb	sy
 80073ec:	f3bf 8f4f 	dsb	sy
 80073f0:	613b      	str	r3, [r7, #16]
}
 80073f2:	bf00      	nop
 80073f4:	bf00      	nop
 80073f6:	e7fd      	b.n	80073f4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d10b      	bne.n	8007416 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80073fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007402:	f383 8811 	msr	BASEPRI, r3
 8007406:	f3bf 8f6f 	isb	sy
 800740a:	f3bf 8f4f 	dsb	sy
 800740e:	60fb      	str	r3, [r7, #12]
}
 8007410:	bf00      	nop
 8007412:	bf00      	nop
 8007414:	e7fd      	b.n	8007412 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007416:	f000 ff9f 	bl	8008358 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800741a:	4b1d      	ldr	r3, [pc, #116]	@ (8007490 <xTaskCheckForTimeOut+0xc0>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	69ba      	ldr	r2, [r7, #24]
 8007426:	1ad3      	subs	r3, r2, r3
 8007428:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007432:	d102      	bne.n	800743a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007434:	2300      	movs	r3, #0
 8007436:	61fb      	str	r3, [r7, #28]
 8007438:	e023      	b.n	8007482 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	4b15      	ldr	r3, [pc, #84]	@ (8007494 <xTaskCheckForTimeOut+0xc4>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	429a      	cmp	r2, r3
 8007444:	d007      	beq.n	8007456 <xTaskCheckForTimeOut+0x86>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	69ba      	ldr	r2, [r7, #24]
 800744c:	429a      	cmp	r2, r3
 800744e:	d302      	bcc.n	8007456 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007450:	2301      	movs	r3, #1
 8007452:	61fb      	str	r3, [r7, #28]
 8007454:	e015      	b.n	8007482 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	697a      	ldr	r2, [r7, #20]
 800745c:	429a      	cmp	r2, r3
 800745e:	d20b      	bcs.n	8007478 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	1ad2      	subs	r2, r2, r3
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f7ff ff99 	bl	80073a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007472:	2300      	movs	r3, #0
 8007474:	61fb      	str	r3, [r7, #28]
 8007476:	e004      	b.n	8007482 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	2200      	movs	r2, #0
 800747c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800747e:	2301      	movs	r3, #1
 8007480:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007482:	f000 ff9b 	bl	80083bc <vPortExitCritical>

	return xReturn;
 8007486:	69fb      	ldr	r3, [r7, #28]
}
 8007488:	4618      	mov	r0, r3
 800748a:	3720      	adds	r7, #32
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}
 8007490:	200012e4 	.word	0x200012e4
 8007494:	200012f8 	.word	0x200012f8

08007498 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007498:	b480      	push	{r7}
 800749a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800749c:	4b03      	ldr	r3, [pc, #12]	@ (80074ac <vTaskMissedYield+0x14>)
 800749e:	2201      	movs	r2, #1
 80074a0:	601a      	str	r2, [r3, #0]
}
 80074a2:	bf00      	nop
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr
 80074ac:	200012f4 	.word	0x200012f4

080074b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b082      	sub	sp, #8
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80074b8:	f000 f852 	bl	8007560 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80074bc:	4b06      	ldr	r3, [pc, #24]	@ (80074d8 <prvIdleTask+0x28>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d9f9      	bls.n	80074b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80074c4:	4b05      	ldr	r3, [pc, #20]	@ (80074dc <prvIdleTask+0x2c>)
 80074c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074ca:	601a      	str	r2, [r3, #0]
 80074cc:	f3bf 8f4f 	dsb	sy
 80074d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80074d4:	e7f0      	b.n	80074b8 <prvIdleTask+0x8>
 80074d6:	bf00      	nop
 80074d8:	20000e10 	.word	0x20000e10
 80074dc:	e000ed04 	.word	0xe000ed04

080074e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b082      	sub	sp, #8
 80074e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80074e6:	2300      	movs	r3, #0
 80074e8:	607b      	str	r3, [r7, #4]
 80074ea:	e00c      	b.n	8007506 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80074ec:	687a      	ldr	r2, [r7, #4]
 80074ee:	4613      	mov	r3, r2
 80074f0:	009b      	lsls	r3, r3, #2
 80074f2:	4413      	add	r3, r2
 80074f4:	009b      	lsls	r3, r3, #2
 80074f6:	4a12      	ldr	r2, [pc, #72]	@ (8007540 <prvInitialiseTaskLists+0x60>)
 80074f8:	4413      	add	r3, r2
 80074fa:	4618      	mov	r0, r3
 80074fc:	f7fe fa38 	bl	8005970 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	3301      	adds	r3, #1
 8007504:	607b      	str	r3, [r7, #4]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2b37      	cmp	r3, #55	@ 0x37
 800750a:	d9ef      	bls.n	80074ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800750c:	480d      	ldr	r0, [pc, #52]	@ (8007544 <prvInitialiseTaskLists+0x64>)
 800750e:	f7fe fa2f 	bl	8005970 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007512:	480d      	ldr	r0, [pc, #52]	@ (8007548 <prvInitialiseTaskLists+0x68>)
 8007514:	f7fe fa2c 	bl	8005970 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007518:	480c      	ldr	r0, [pc, #48]	@ (800754c <prvInitialiseTaskLists+0x6c>)
 800751a:	f7fe fa29 	bl	8005970 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800751e:	480c      	ldr	r0, [pc, #48]	@ (8007550 <prvInitialiseTaskLists+0x70>)
 8007520:	f7fe fa26 	bl	8005970 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007524:	480b      	ldr	r0, [pc, #44]	@ (8007554 <prvInitialiseTaskLists+0x74>)
 8007526:	f7fe fa23 	bl	8005970 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800752a:	4b0b      	ldr	r3, [pc, #44]	@ (8007558 <prvInitialiseTaskLists+0x78>)
 800752c:	4a05      	ldr	r2, [pc, #20]	@ (8007544 <prvInitialiseTaskLists+0x64>)
 800752e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007530:	4b0a      	ldr	r3, [pc, #40]	@ (800755c <prvInitialiseTaskLists+0x7c>)
 8007532:	4a05      	ldr	r2, [pc, #20]	@ (8007548 <prvInitialiseTaskLists+0x68>)
 8007534:	601a      	str	r2, [r3, #0]
}
 8007536:	bf00      	nop
 8007538:	3708      	adds	r7, #8
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}
 800753e:	bf00      	nop
 8007540:	20000e10 	.word	0x20000e10
 8007544:	20001270 	.word	0x20001270
 8007548:	20001284 	.word	0x20001284
 800754c:	200012a0 	.word	0x200012a0
 8007550:	200012b4 	.word	0x200012b4
 8007554:	200012cc 	.word	0x200012cc
 8007558:	20001298 	.word	0x20001298
 800755c:	2000129c 	.word	0x2000129c

08007560 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b082      	sub	sp, #8
 8007564:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007566:	e019      	b.n	800759c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007568:	f000 fef6 	bl	8008358 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800756c:	4b10      	ldr	r3, [pc, #64]	@ (80075b0 <prvCheckTasksWaitingTermination+0x50>)
 800756e:	68db      	ldr	r3, [r3, #12]
 8007570:	68db      	ldr	r3, [r3, #12]
 8007572:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	3304      	adds	r3, #4
 8007578:	4618      	mov	r0, r3
 800757a:	f7fe fa83 	bl	8005a84 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800757e:	4b0d      	ldr	r3, [pc, #52]	@ (80075b4 <prvCheckTasksWaitingTermination+0x54>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	3b01      	subs	r3, #1
 8007584:	4a0b      	ldr	r2, [pc, #44]	@ (80075b4 <prvCheckTasksWaitingTermination+0x54>)
 8007586:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007588:	4b0b      	ldr	r3, [pc, #44]	@ (80075b8 <prvCheckTasksWaitingTermination+0x58>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	3b01      	subs	r3, #1
 800758e:	4a0a      	ldr	r2, [pc, #40]	@ (80075b8 <prvCheckTasksWaitingTermination+0x58>)
 8007590:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007592:	f000 ff13 	bl	80083bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f000 f810 	bl	80075bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800759c:	4b06      	ldr	r3, [pc, #24]	@ (80075b8 <prvCheckTasksWaitingTermination+0x58>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d1e1      	bne.n	8007568 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80075a4:	bf00      	nop
 80075a6:	bf00      	nop
 80075a8:	3708      	adds	r7, #8
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}
 80075ae:	bf00      	nop
 80075b0:	200012b4 	.word	0x200012b4
 80075b4:	200012e0 	.word	0x200012e0
 80075b8:	200012c8 	.word	0x200012c8

080075bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b084      	sub	sp, #16
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d108      	bne.n	80075e0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075d2:	4618      	mov	r0, r3
 80075d4:	f001 f8b0 	bl	8008738 <vPortFree>
				vPortFree( pxTCB );
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f001 f8ad 	bl	8008738 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80075de:	e019      	b.n	8007614 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	d103      	bne.n	80075f2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f001 f8a4 	bl	8008738 <vPortFree>
	}
 80075f0:	e010      	b.n	8007614 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80075f8:	2b02      	cmp	r3, #2
 80075fa:	d00b      	beq.n	8007614 <prvDeleteTCB+0x58>
	__asm volatile
 80075fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007600:	f383 8811 	msr	BASEPRI, r3
 8007604:	f3bf 8f6f 	isb	sy
 8007608:	f3bf 8f4f 	dsb	sy
 800760c:	60fb      	str	r3, [r7, #12]
}
 800760e:	bf00      	nop
 8007610:	bf00      	nop
 8007612:	e7fd      	b.n	8007610 <prvDeleteTCB+0x54>
	}
 8007614:	bf00      	nop
 8007616:	3710      	adds	r7, #16
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}

0800761c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800761c:	b480      	push	{r7}
 800761e:	b083      	sub	sp, #12
 8007620:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007622:	4b0c      	ldr	r3, [pc, #48]	@ (8007654 <prvResetNextTaskUnblockTime+0x38>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d104      	bne.n	8007636 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800762c:	4b0a      	ldr	r3, [pc, #40]	@ (8007658 <prvResetNextTaskUnblockTime+0x3c>)
 800762e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007632:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007634:	e008      	b.n	8007648 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007636:	4b07      	ldr	r3, [pc, #28]	@ (8007654 <prvResetNextTaskUnblockTime+0x38>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	68db      	ldr	r3, [r3, #12]
 800763c:	68db      	ldr	r3, [r3, #12]
 800763e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	4a04      	ldr	r2, [pc, #16]	@ (8007658 <prvResetNextTaskUnblockTime+0x3c>)
 8007646:	6013      	str	r3, [r2, #0]
}
 8007648:	bf00      	nop
 800764a:	370c      	adds	r7, #12
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr
 8007654:	20001298 	.word	0x20001298
 8007658:	20001300 	.word	0x20001300

0800765c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800765c:	b480      	push	{r7}
 800765e:	b083      	sub	sp, #12
 8007660:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8007662:	4b05      	ldr	r3, [pc, #20]	@ (8007678 <xTaskGetCurrentTaskHandle+0x1c>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007668:	687b      	ldr	r3, [r7, #4]
	}
 800766a:	4618      	mov	r0, r3
 800766c:	370c      	adds	r7, #12
 800766e:	46bd      	mov	sp, r7
 8007670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007674:	4770      	bx	lr
 8007676:	bf00      	nop
 8007678:	20000e0c 	.word	0x20000e0c

0800767c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800767c:	b480      	push	{r7}
 800767e:	b083      	sub	sp, #12
 8007680:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007682:	4b0b      	ldr	r3, [pc, #44]	@ (80076b0 <xTaskGetSchedulerState+0x34>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d102      	bne.n	8007690 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800768a:	2301      	movs	r3, #1
 800768c:	607b      	str	r3, [r7, #4]
 800768e:	e008      	b.n	80076a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007690:	4b08      	ldr	r3, [pc, #32]	@ (80076b4 <xTaskGetSchedulerState+0x38>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d102      	bne.n	800769e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007698:	2302      	movs	r3, #2
 800769a:	607b      	str	r3, [r7, #4]
 800769c:	e001      	b.n	80076a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800769e:	2300      	movs	r3, #0
 80076a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80076a2:	687b      	ldr	r3, [r7, #4]
	}
 80076a4:	4618      	mov	r0, r3
 80076a6:	370c      	adds	r7, #12
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr
 80076b0:	200012ec 	.word	0x200012ec
 80076b4:	20001308 	.word	0x20001308

080076b8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b084      	sub	sp, #16
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80076c4:	2300      	movs	r3, #0
 80076c6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d051      	beq.n	8007772 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076d2:	4b2a      	ldr	r3, [pc, #168]	@ (800777c <xTaskPriorityInherit+0xc4>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076d8:	429a      	cmp	r2, r3
 80076da:	d241      	bcs.n	8007760 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	699b      	ldr	r3, [r3, #24]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	db06      	blt.n	80076f2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076e4:	4b25      	ldr	r3, [pc, #148]	@ (800777c <xTaskPriorityInherit+0xc4>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076ea:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	6959      	ldr	r1, [r3, #20]
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076fa:	4613      	mov	r3, r2
 80076fc:	009b      	lsls	r3, r3, #2
 80076fe:	4413      	add	r3, r2
 8007700:	009b      	lsls	r3, r3, #2
 8007702:	4a1f      	ldr	r2, [pc, #124]	@ (8007780 <xTaskPriorityInherit+0xc8>)
 8007704:	4413      	add	r3, r2
 8007706:	4299      	cmp	r1, r3
 8007708:	d122      	bne.n	8007750 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	3304      	adds	r3, #4
 800770e:	4618      	mov	r0, r3
 8007710:	f7fe f9b8 	bl	8005a84 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007714:	4b19      	ldr	r3, [pc, #100]	@ (800777c <xTaskPriorityInherit+0xc4>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007722:	4b18      	ldr	r3, [pc, #96]	@ (8007784 <xTaskPriorityInherit+0xcc>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	429a      	cmp	r2, r3
 8007728:	d903      	bls.n	8007732 <xTaskPriorityInherit+0x7a>
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800772e:	4a15      	ldr	r2, [pc, #84]	@ (8007784 <xTaskPriorityInherit+0xcc>)
 8007730:	6013      	str	r3, [r2, #0]
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007736:	4613      	mov	r3, r2
 8007738:	009b      	lsls	r3, r3, #2
 800773a:	4413      	add	r3, r2
 800773c:	009b      	lsls	r3, r3, #2
 800773e:	4a10      	ldr	r2, [pc, #64]	@ (8007780 <xTaskPriorityInherit+0xc8>)
 8007740:	441a      	add	r2, r3
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	3304      	adds	r3, #4
 8007746:	4619      	mov	r1, r3
 8007748:	4610      	mov	r0, r2
 800774a:	f7fe f93e 	bl	80059ca <vListInsertEnd>
 800774e:	e004      	b.n	800775a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007750:	4b0a      	ldr	r3, [pc, #40]	@ (800777c <xTaskPriorityInherit+0xc4>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800775a:	2301      	movs	r3, #1
 800775c:	60fb      	str	r3, [r7, #12]
 800775e:	e008      	b.n	8007772 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007764:	4b05      	ldr	r3, [pc, #20]	@ (800777c <xTaskPriorityInherit+0xc4>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800776a:	429a      	cmp	r2, r3
 800776c:	d201      	bcs.n	8007772 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800776e:	2301      	movs	r3, #1
 8007770:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007772:	68fb      	ldr	r3, [r7, #12]
	}
 8007774:	4618      	mov	r0, r3
 8007776:	3710      	adds	r7, #16
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}
 800777c:	20000e0c 	.word	0x20000e0c
 8007780:	20000e10 	.word	0x20000e10
 8007784:	200012e8 	.word	0x200012e8

08007788 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007788:	b580      	push	{r7, lr}
 800778a:	b086      	sub	sp, #24
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007794:	2300      	movs	r3, #0
 8007796:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d058      	beq.n	8007850 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800779e:	4b2f      	ldr	r3, [pc, #188]	@ (800785c <xTaskPriorityDisinherit+0xd4>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	693a      	ldr	r2, [r7, #16]
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d00b      	beq.n	80077c0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80077a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077ac:	f383 8811 	msr	BASEPRI, r3
 80077b0:	f3bf 8f6f 	isb	sy
 80077b4:	f3bf 8f4f 	dsb	sy
 80077b8:	60fb      	str	r3, [r7, #12]
}
 80077ba:	bf00      	nop
 80077bc:	bf00      	nop
 80077be:	e7fd      	b.n	80077bc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d10b      	bne.n	80077e0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80077c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077cc:	f383 8811 	msr	BASEPRI, r3
 80077d0:	f3bf 8f6f 	isb	sy
 80077d4:	f3bf 8f4f 	dsb	sy
 80077d8:	60bb      	str	r3, [r7, #8]
}
 80077da:	bf00      	nop
 80077dc:	bf00      	nop
 80077de:	e7fd      	b.n	80077dc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077e4:	1e5a      	subs	r2, r3, #1
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d02c      	beq.n	8007850 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d128      	bne.n	8007850 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	3304      	adds	r3, #4
 8007802:	4618      	mov	r0, r3
 8007804:	f7fe f93e 	bl	8005a84 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007814:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007820:	4b0f      	ldr	r3, [pc, #60]	@ (8007860 <xTaskPriorityDisinherit+0xd8>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	429a      	cmp	r2, r3
 8007826:	d903      	bls.n	8007830 <xTaskPriorityDisinherit+0xa8>
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800782c:	4a0c      	ldr	r2, [pc, #48]	@ (8007860 <xTaskPriorityDisinherit+0xd8>)
 800782e:	6013      	str	r3, [r2, #0]
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007834:	4613      	mov	r3, r2
 8007836:	009b      	lsls	r3, r3, #2
 8007838:	4413      	add	r3, r2
 800783a:	009b      	lsls	r3, r3, #2
 800783c:	4a09      	ldr	r2, [pc, #36]	@ (8007864 <xTaskPriorityDisinherit+0xdc>)
 800783e:	441a      	add	r2, r3
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	3304      	adds	r3, #4
 8007844:	4619      	mov	r1, r3
 8007846:	4610      	mov	r0, r2
 8007848:	f7fe f8bf 	bl	80059ca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800784c:	2301      	movs	r3, #1
 800784e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007850:	697b      	ldr	r3, [r7, #20]
	}
 8007852:	4618      	mov	r0, r3
 8007854:	3718      	adds	r7, #24
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
 800785a:	bf00      	nop
 800785c:	20000e0c 	.word	0x20000e0c
 8007860:	200012e8 	.word	0x200012e8
 8007864:	20000e10 	.word	0x20000e10

08007868 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007868:	b580      	push	{r7, lr}
 800786a:	b088      	sub	sp, #32
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
 8007870:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007876:	2301      	movs	r3, #1
 8007878:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d06c      	beq.n	800795a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007880:	69bb      	ldr	r3, [r7, #24]
 8007882:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007884:	2b00      	cmp	r3, #0
 8007886:	d10b      	bne.n	80078a0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8007888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800788c:	f383 8811 	msr	BASEPRI, r3
 8007890:	f3bf 8f6f 	isb	sy
 8007894:	f3bf 8f4f 	dsb	sy
 8007898:	60fb      	str	r3, [r7, #12]
}
 800789a:	bf00      	nop
 800789c:	bf00      	nop
 800789e:	e7fd      	b.n	800789c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80078a0:	69bb      	ldr	r3, [r7, #24]
 80078a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078a4:	683a      	ldr	r2, [r7, #0]
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d902      	bls.n	80078b0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	61fb      	str	r3, [r7, #28]
 80078ae:	e002      	b.n	80078b6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80078b0:	69bb      	ldr	r3, [r7, #24]
 80078b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80078b4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80078b6:	69bb      	ldr	r3, [r7, #24]
 80078b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078ba:	69fa      	ldr	r2, [r7, #28]
 80078bc:	429a      	cmp	r2, r3
 80078be:	d04c      	beq.n	800795a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80078c0:	69bb      	ldr	r3, [r7, #24]
 80078c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078c4:	697a      	ldr	r2, [r7, #20]
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d147      	bne.n	800795a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80078ca:	4b26      	ldr	r3, [pc, #152]	@ (8007964 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	69ba      	ldr	r2, [r7, #24]
 80078d0:	429a      	cmp	r2, r3
 80078d2:	d10b      	bne.n	80078ec <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80078d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078d8:	f383 8811 	msr	BASEPRI, r3
 80078dc:	f3bf 8f6f 	isb	sy
 80078e0:	f3bf 8f4f 	dsb	sy
 80078e4:	60bb      	str	r3, [r7, #8]
}
 80078e6:	bf00      	nop
 80078e8:	bf00      	nop
 80078ea:	e7fd      	b.n	80078e8 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80078ec:	69bb      	ldr	r3, [r7, #24]
 80078ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078f0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80078f2:	69bb      	ldr	r3, [r7, #24]
 80078f4:	69fa      	ldr	r2, [r7, #28]
 80078f6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80078f8:	69bb      	ldr	r3, [r7, #24]
 80078fa:	699b      	ldr	r3, [r3, #24]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	db04      	blt.n	800790a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007900:	69fb      	ldr	r3, [r7, #28]
 8007902:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007906:	69bb      	ldr	r3, [r7, #24]
 8007908:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800790a:	69bb      	ldr	r3, [r7, #24]
 800790c:	6959      	ldr	r1, [r3, #20]
 800790e:	693a      	ldr	r2, [r7, #16]
 8007910:	4613      	mov	r3, r2
 8007912:	009b      	lsls	r3, r3, #2
 8007914:	4413      	add	r3, r2
 8007916:	009b      	lsls	r3, r3, #2
 8007918:	4a13      	ldr	r2, [pc, #76]	@ (8007968 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800791a:	4413      	add	r3, r2
 800791c:	4299      	cmp	r1, r3
 800791e:	d11c      	bne.n	800795a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007920:	69bb      	ldr	r3, [r7, #24]
 8007922:	3304      	adds	r3, #4
 8007924:	4618      	mov	r0, r3
 8007926:	f7fe f8ad 	bl	8005a84 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800792a:	69bb      	ldr	r3, [r7, #24]
 800792c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800792e:	4b0f      	ldr	r3, [pc, #60]	@ (800796c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	429a      	cmp	r2, r3
 8007934:	d903      	bls.n	800793e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8007936:	69bb      	ldr	r3, [r7, #24]
 8007938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800793a:	4a0c      	ldr	r2, [pc, #48]	@ (800796c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800793c:	6013      	str	r3, [r2, #0]
 800793e:	69bb      	ldr	r3, [r7, #24]
 8007940:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007942:	4613      	mov	r3, r2
 8007944:	009b      	lsls	r3, r3, #2
 8007946:	4413      	add	r3, r2
 8007948:	009b      	lsls	r3, r3, #2
 800794a:	4a07      	ldr	r2, [pc, #28]	@ (8007968 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800794c:	441a      	add	r2, r3
 800794e:	69bb      	ldr	r3, [r7, #24]
 8007950:	3304      	adds	r3, #4
 8007952:	4619      	mov	r1, r3
 8007954:	4610      	mov	r0, r2
 8007956:	f7fe f838 	bl	80059ca <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800795a:	bf00      	nop
 800795c:	3720      	adds	r7, #32
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}
 8007962:	bf00      	nop
 8007964:	20000e0c 	.word	0x20000e0c
 8007968:	20000e10 	.word	0x20000e10
 800796c:	200012e8 	.word	0x200012e8

08007970 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007970:	b480      	push	{r7}
 8007972:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007974:	4b07      	ldr	r3, [pc, #28]	@ (8007994 <pvTaskIncrementMutexHeldCount+0x24>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d004      	beq.n	8007986 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800797c:	4b05      	ldr	r3, [pc, #20]	@ (8007994 <pvTaskIncrementMutexHeldCount+0x24>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007982:	3201      	adds	r2, #1
 8007984:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8007986:	4b03      	ldr	r3, [pc, #12]	@ (8007994 <pvTaskIncrementMutexHeldCount+0x24>)
 8007988:	681b      	ldr	r3, [r3, #0]
	}
 800798a:	4618      	mov	r0, r3
 800798c:	46bd      	mov	sp, r7
 800798e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007992:	4770      	bx	lr
 8007994:	20000e0c 	.word	0x20000e0c

08007998 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b084      	sub	sp, #16
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
 80079a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80079a2:	4b21      	ldr	r3, [pc, #132]	@ (8007a28 <prvAddCurrentTaskToDelayedList+0x90>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80079a8:	4b20      	ldr	r3, [pc, #128]	@ (8007a2c <prvAddCurrentTaskToDelayedList+0x94>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	3304      	adds	r3, #4
 80079ae:	4618      	mov	r0, r3
 80079b0:	f7fe f868 	bl	8005a84 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80079ba:	d10a      	bne.n	80079d2 <prvAddCurrentTaskToDelayedList+0x3a>
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d007      	beq.n	80079d2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80079c2:	4b1a      	ldr	r3, [pc, #104]	@ (8007a2c <prvAddCurrentTaskToDelayedList+0x94>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	3304      	adds	r3, #4
 80079c8:	4619      	mov	r1, r3
 80079ca:	4819      	ldr	r0, [pc, #100]	@ (8007a30 <prvAddCurrentTaskToDelayedList+0x98>)
 80079cc:	f7fd fffd 	bl	80059ca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80079d0:	e026      	b.n	8007a20 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80079d2:	68fa      	ldr	r2, [r7, #12]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	4413      	add	r3, r2
 80079d8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80079da:	4b14      	ldr	r3, [pc, #80]	@ (8007a2c <prvAddCurrentTaskToDelayedList+0x94>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	68ba      	ldr	r2, [r7, #8]
 80079e0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80079e2:	68ba      	ldr	r2, [r7, #8]
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d209      	bcs.n	80079fe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80079ea:	4b12      	ldr	r3, [pc, #72]	@ (8007a34 <prvAddCurrentTaskToDelayedList+0x9c>)
 80079ec:	681a      	ldr	r2, [r3, #0]
 80079ee:	4b0f      	ldr	r3, [pc, #60]	@ (8007a2c <prvAddCurrentTaskToDelayedList+0x94>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	3304      	adds	r3, #4
 80079f4:	4619      	mov	r1, r3
 80079f6:	4610      	mov	r0, r2
 80079f8:	f7fe f80b 	bl	8005a12 <vListInsert>
}
 80079fc:	e010      	b.n	8007a20 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80079fe:	4b0e      	ldr	r3, [pc, #56]	@ (8007a38 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007a00:	681a      	ldr	r2, [r3, #0]
 8007a02:	4b0a      	ldr	r3, [pc, #40]	@ (8007a2c <prvAddCurrentTaskToDelayedList+0x94>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	3304      	adds	r3, #4
 8007a08:	4619      	mov	r1, r3
 8007a0a:	4610      	mov	r0, r2
 8007a0c:	f7fe f801 	bl	8005a12 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007a10:	4b0a      	ldr	r3, [pc, #40]	@ (8007a3c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	68ba      	ldr	r2, [r7, #8]
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d202      	bcs.n	8007a20 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007a1a:	4a08      	ldr	r2, [pc, #32]	@ (8007a3c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	6013      	str	r3, [r2, #0]
}
 8007a20:	bf00      	nop
 8007a22:	3710      	adds	r7, #16
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}
 8007a28:	200012e4 	.word	0x200012e4
 8007a2c:	20000e0c 	.word	0x20000e0c
 8007a30:	200012cc 	.word	0x200012cc
 8007a34:	2000129c 	.word	0x2000129c
 8007a38:	20001298 	.word	0x20001298
 8007a3c:	20001300 	.word	0x20001300

08007a40 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b08a      	sub	sp, #40	@ 0x28
 8007a44:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007a46:	2300      	movs	r3, #0
 8007a48:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007a4a:	f000 fb13 	bl	8008074 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007a4e:	4b1d      	ldr	r3, [pc, #116]	@ (8007ac4 <xTimerCreateTimerTask+0x84>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d021      	beq.n	8007a9a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007a56:	2300      	movs	r3, #0
 8007a58:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007a5e:	1d3a      	adds	r2, r7, #4
 8007a60:	f107 0108 	add.w	r1, r7, #8
 8007a64:	f107 030c 	add.w	r3, r7, #12
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f7fd ff67 	bl	800593c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007a6e:	6879      	ldr	r1, [r7, #4]
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	68fa      	ldr	r2, [r7, #12]
 8007a74:	9202      	str	r2, [sp, #8]
 8007a76:	9301      	str	r3, [sp, #4]
 8007a78:	2302      	movs	r3, #2
 8007a7a:	9300      	str	r3, [sp, #0]
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	460a      	mov	r2, r1
 8007a80:	4911      	ldr	r1, [pc, #68]	@ (8007ac8 <xTimerCreateTimerTask+0x88>)
 8007a82:	4812      	ldr	r0, [pc, #72]	@ (8007acc <xTimerCreateTimerTask+0x8c>)
 8007a84:	f7fe ffc0 	bl	8006a08 <xTaskCreateStatic>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	4a11      	ldr	r2, [pc, #68]	@ (8007ad0 <xTimerCreateTimerTask+0x90>)
 8007a8c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007a8e:	4b10      	ldr	r3, [pc, #64]	@ (8007ad0 <xTimerCreateTimerTask+0x90>)
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d001      	beq.n	8007a9a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007a96:	2301      	movs	r3, #1
 8007a98:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007a9a:	697b      	ldr	r3, [r7, #20]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d10b      	bne.n	8007ab8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007aa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aa4:	f383 8811 	msr	BASEPRI, r3
 8007aa8:	f3bf 8f6f 	isb	sy
 8007aac:	f3bf 8f4f 	dsb	sy
 8007ab0:	613b      	str	r3, [r7, #16]
}
 8007ab2:	bf00      	nop
 8007ab4:	bf00      	nop
 8007ab6:	e7fd      	b.n	8007ab4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007ab8:	697b      	ldr	r3, [r7, #20]
}
 8007aba:	4618      	mov	r0, r3
 8007abc:	3718      	adds	r7, #24
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}
 8007ac2:	bf00      	nop
 8007ac4:	2000133c 	.word	0x2000133c
 8007ac8:	0800b6a4 	.word	0x0800b6a4
 8007acc:	08007c0d 	.word	0x08007c0d
 8007ad0:	20001340 	.word	0x20001340

08007ad4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b08a      	sub	sp, #40	@ 0x28
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	60f8      	str	r0, [r7, #12]
 8007adc:	60b9      	str	r1, [r7, #8]
 8007ade:	607a      	str	r2, [r7, #4]
 8007ae0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d10b      	bne.n	8007b04 <xTimerGenericCommand+0x30>
	__asm volatile
 8007aec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007af0:	f383 8811 	msr	BASEPRI, r3
 8007af4:	f3bf 8f6f 	isb	sy
 8007af8:	f3bf 8f4f 	dsb	sy
 8007afc:	623b      	str	r3, [r7, #32]
}
 8007afe:	bf00      	nop
 8007b00:	bf00      	nop
 8007b02:	e7fd      	b.n	8007b00 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007b04:	4b19      	ldr	r3, [pc, #100]	@ (8007b6c <xTimerGenericCommand+0x98>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d02a      	beq.n	8007b62 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007b18:	68bb      	ldr	r3, [r7, #8]
 8007b1a:	2b05      	cmp	r3, #5
 8007b1c:	dc18      	bgt.n	8007b50 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007b1e:	f7ff fdad 	bl	800767c <xTaskGetSchedulerState>
 8007b22:	4603      	mov	r3, r0
 8007b24:	2b02      	cmp	r3, #2
 8007b26:	d109      	bne.n	8007b3c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007b28:	4b10      	ldr	r3, [pc, #64]	@ (8007b6c <xTimerGenericCommand+0x98>)
 8007b2a:	6818      	ldr	r0, [r3, #0]
 8007b2c:	f107 0110 	add.w	r1, r7, #16
 8007b30:	2300      	movs	r3, #0
 8007b32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b34:	f7fe f9ce 	bl	8005ed4 <xQueueGenericSend>
 8007b38:	6278      	str	r0, [r7, #36]	@ 0x24
 8007b3a:	e012      	b.n	8007b62 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007b3c:	4b0b      	ldr	r3, [pc, #44]	@ (8007b6c <xTimerGenericCommand+0x98>)
 8007b3e:	6818      	ldr	r0, [r3, #0]
 8007b40:	f107 0110 	add.w	r1, r7, #16
 8007b44:	2300      	movs	r3, #0
 8007b46:	2200      	movs	r2, #0
 8007b48:	f7fe f9c4 	bl	8005ed4 <xQueueGenericSend>
 8007b4c:	6278      	str	r0, [r7, #36]	@ 0x24
 8007b4e:	e008      	b.n	8007b62 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007b50:	4b06      	ldr	r3, [pc, #24]	@ (8007b6c <xTimerGenericCommand+0x98>)
 8007b52:	6818      	ldr	r0, [r3, #0]
 8007b54:	f107 0110 	add.w	r1, r7, #16
 8007b58:	2300      	movs	r3, #0
 8007b5a:	683a      	ldr	r2, [r7, #0]
 8007b5c:	f7fe fabc 	bl	80060d8 <xQueueGenericSendFromISR>
 8007b60:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	3728      	adds	r7, #40	@ 0x28
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}
 8007b6c:	2000133c 	.word	0x2000133c

08007b70 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b088      	sub	sp, #32
 8007b74:	af02      	add	r7, sp, #8
 8007b76:	6078      	str	r0, [r7, #4]
 8007b78:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b7a:	4b23      	ldr	r3, [pc, #140]	@ (8007c08 <prvProcessExpiredTimer+0x98>)
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	68db      	ldr	r3, [r3, #12]
 8007b80:	68db      	ldr	r3, [r3, #12]
 8007b82:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	3304      	adds	r3, #4
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f7fd ff7b 	bl	8005a84 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007b94:	f003 0304 	and.w	r3, r3, #4
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d023      	beq.n	8007be4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	699a      	ldr	r2, [r3, #24]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	18d1      	adds	r1, r2, r3
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	683a      	ldr	r2, [r7, #0]
 8007ba8:	6978      	ldr	r0, [r7, #20]
 8007baa:	f000 f8d5 	bl	8007d58 <prvInsertTimerInActiveList>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d020      	beq.n	8007bf6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	9300      	str	r3, [sp, #0]
 8007bb8:	2300      	movs	r3, #0
 8007bba:	687a      	ldr	r2, [r7, #4]
 8007bbc:	2100      	movs	r1, #0
 8007bbe:	6978      	ldr	r0, [r7, #20]
 8007bc0:	f7ff ff88 	bl	8007ad4 <xTimerGenericCommand>
 8007bc4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d114      	bne.n	8007bf6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007bcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bd0:	f383 8811 	msr	BASEPRI, r3
 8007bd4:	f3bf 8f6f 	isb	sy
 8007bd8:	f3bf 8f4f 	dsb	sy
 8007bdc:	60fb      	str	r3, [r7, #12]
}
 8007bde:	bf00      	nop
 8007be0:	bf00      	nop
 8007be2:	e7fd      	b.n	8007be0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007bea:	f023 0301 	bic.w	r3, r3, #1
 8007bee:	b2da      	uxtb	r2, r3
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	6a1b      	ldr	r3, [r3, #32]
 8007bfa:	6978      	ldr	r0, [r7, #20]
 8007bfc:	4798      	blx	r3
}
 8007bfe:	bf00      	nop
 8007c00:	3718      	adds	r7, #24
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}
 8007c06:	bf00      	nop
 8007c08:	20001334 	.word	0x20001334

08007c0c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b084      	sub	sp, #16
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007c14:	f107 0308 	add.w	r3, r7, #8
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f000 f859 	bl	8007cd0 <prvGetNextExpireTime>
 8007c1e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	4619      	mov	r1, r3
 8007c24:	68f8      	ldr	r0, [r7, #12]
 8007c26:	f000 f805 	bl	8007c34 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007c2a:	f000 f8d7 	bl	8007ddc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007c2e:	bf00      	nop
 8007c30:	e7f0      	b.n	8007c14 <prvTimerTask+0x8>
	...

08007c34 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b084      	sub	sp, #16
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007c3e:	f7ff f927 	bl	8006e90 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007c42:	f107 0308 	add.w	r3, r7, #8
 8007c46:	4618      	mov	r0, r3
 8007c48:	f000 f866 	bl	8007d18 <prvSampleTimeNow>
 8007c4c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d130      	bne.n	8007cb6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d10a      	bne.n	8007c70 <prvProcessTimerOrBlockTask+0x3c>
 8007c5a:	687a      	ldr	r2, [r7, #4]
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	d806      	bhi.n	8007c70 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007c62:	f7ff f923 	bl	8006eac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007c66:	68f9      	ldr	r1, [r7, #12]
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f7ff ff81 	bl	8007b70 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007c6e:	e024      	b.n	8007cba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d008      	beq.n	8007c88 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007c76:	4b13      	ldr	r3, [pc, #76]	@ (8007cc4 <prvProcessTimerOrBlockTask+0x90>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d101      	bne.n	8007c84 <prvProcessTimerOrBlockTask+0x50>
 8007c80:	2301      	movs	r3, #1
 8007c82:	e000      	b.n	8007c86 <prvProcessTimerOrBlockTask+0x52>
 8007c84:	2300      	movs	r3, #0
 8007c86:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007c88:	4b0f      	ldr	r3, [pc, #60]	@ (8007cc8 <prvProcessTimerOrBlockTask+0x94>)
 8007c8a:	6818      	ldr	r0, [r3, #0]
 8007c8c:	687a      	ldr	r2, [r7, #4]
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	1ad3      	subs	r3, r2, r3
 8007c92:	683a      	ldr	r2, [r7, #0]
 8007c94:	4619      	mov	r1, r3
 8007c96:	f7fe fe83 	bl	80069a0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007c9a:	f7ff f907 	bl	8006eac <xTaskResumeAll>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d10a      	bne.n	8007cba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007ca4:	4b09      	ldr	r3, [pc, #36]	@ (8007ccc <prvProcessTimerOrBlockTask+0x98>)
 8007ca6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007caa:	601a      	str	r2, [r3, #0]
 8007cac:	f3bf 8f4f 	dsb	sy
 8007cb0:	f3bf 8f6f 	isb	sy
}
 8007cb4:	e001      	b.n	8007cba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007cb6:	f7ff f8f9 	bl	8006eac <xTaskResumeAll>
}
 8007cba:	bf00      	nop
 8007cbc:	3710      	adds	r7, #16
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	bd80      	pop	{r7, pc}
 8007cc2:	bf00      	nop
 8007cc4:	20001338 	.word	0x20001338
 8007cc8:	2000133c 	.word	0x2000133c
 8007ccc:	e000ed04 	.word	0xe000ed04

08007cd0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b085      	sub	sp, #20
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007cd8:	4b0e      	ldr	r3, [pc, #56]	@ (8007d14 <prvGetNextExpireTime+0x44>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d101      	bne.n	8007ce6 <prvGetNextExpireTime+0x16>
 8007ce2:	2201      	movs	r2, #1
 8007ce4:	e000      	b.n	8007ce8 <prvGetNextExpireTime+0x18>
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d105      	bne.n	8007d00 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007cf4:	4b07      	ldr	r3, [pc, #28]	@ (8007d14 <prvGetNextExpireTime+0x44>)
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	68db      	ldr	r3, [r3, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	60fb      	str	r3, [r7, #12]
 8007cfe:	e001      	b.n	8007d04 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007d00:	2300      	movs	r3, #0
 8007d02:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007d04:	68fb      	ldr	r3, [r7, #12]
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3714      	adds	r7, #20
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d10:	4770      	bx	lr
 8007d12:	bf00      	nop
 8007d14:	20001334 	.word	0x20001334

08007d18 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b084      	sub	sp, #16
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007d20:	f7ff f962 	bl	8006fe8 <xTaskGetTickCount>
 8007d24:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007d26:	4b0b      	ldr	r3, [pc, #44]	@ (8007d54 <prvSampleTimeNow+0x3c>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	68fa      	ldr	r2, [r7, #12]
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d205      	bcs.n	8007d3c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007d30:	f000 f93a 	bl	8007fa8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2201      	movs	r2, #1
 8007d38:	601a      	str	r2, [r3, #0]
 8007d3a:	e002      	b.n	8007d42 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007d42:	4a04      	ldr	r2, [pc, #16]	@ (8007d54 <prvSampleTimeNow+0x3c>)
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007d48:	68fb      	ldr	r3, [r7, #12]
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	3710      	adds	r7, #16
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}
 8007d52:	bf00      	nop
 8007d54:	20001344 	.word	0x20001344

08007d58 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b086      	sub	sp, #24
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	60f8      	str	r0, [r7, #12]
 8007d60:	60b9      	str	r1, [r7, #8]
 8007d62:	607a      	str	r2, [r7, #4]
 8007d64:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007d66:	2300      	movs	r3, #0
 8007d68:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	68ba      	ldr	r2, [r7, #8]
 8007d6e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	68fa      	ldr	r2, [r7, #12]
 8007d74:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007d76:	68ba      	ldr	r2, [r7, #8]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	d812      	bhi.n	8007da4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	1ad2      	subs	r2, r2, r3
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	699b      	ldr	r3, [r3, #24]
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	d302      	bcc.n	8007d92 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	617b      	str	r3, [r7, #20]
 8007d90:	e01b      	b.n	8007dca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007d92:	4b10      	ldr	r3, [pc, #64]	@ (8007dd4 <prvInsertTimerInActiveList+0x7c>)
 8007d94:	681a      	ldr	r2, [r3, #0]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	3304      	adds	r3, #4
 8007d9a:	4619      	mov	r1, r3
 8007d9c:	4610      	mov	r0, r2
 8007d9e:	f7fd fe38 	bl	8005a12 <vListInsert>
 8007da2:	e012      	b.n	8007dca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007da4:	687a      	ldr	r2, [r7, #4]
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	429a      	cmp	r2, r3
 8007daa:	d206      	bcs.n	8007dba <prvInsertTimerInActiveList+0x62>
 8007dac:	68ba      	ldr	r2, [r7, #8]
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	429a      	cmp	r2, r3
 8007db2:	d302      	bcc.n	8007dba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007db4:	2301      	movs	r3, #1
 8007db6:	617b      	str	r3, [r7, #20]
 8007db8:	e007      	b.n	8007dca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007dba:	4b07      	ldr	r3, [pc, #28]	@ (8007dd8 <prvInsertTimerInActiveList+0x80>)
 8007dbc:	681a      	ldr	r2, [r3, #0]
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	3304      	adds	r3, #4
 8007dc2:	4619      	mov	r1, r3
 8007dc4:	4610      	mov	r0, r2
 8007dc6:	f7fd fe24 	bl	8005a12 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007dca:	697b      	ldr	r3, [r7, #20]
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3718      	adds	r7, #24
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}
 8007dd4:	20001338 	.word	0x20001338
 8007dd8:	20001334 	.word	0x20001334

08007ddc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b08e      	sub	sp, #56	@ 0x38
 8007de0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007de2:	e0ce      	b.n	8007f82 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	da19      	bge.n	8007e1e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007dea:	1d3b      	adds	r3, r7, #4
 8007dec:	3304      	adds	r3, #4
 8007dee:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007df0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d10b      	bne.n	8007e0e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dfa:	f383 8811 	msr	BASEPRI, r3
 8007dfe:	f3bf 8f6f 	isb	sy
 8007e02:	f3bf 8f4f 	dsb	sy
 8007e06:	61fb      	str	r3, [r7, #28]
}
 8007e08:	bf00      	nop
 8007e0a:	bf00      	nop
 8007e0c:	e7fd      	b.n	8007e0a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007e0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e14:	6850      	ldr	r0, [r2, #4]
 8007e16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e18:	6892      	ldr	r2, [r2, #8]
 8007e1a:	4611      	mov	r1, r2
 8007e1c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	f2c0 80ae 	blt.w	8007f82 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e2c:	695b      	ldr	r3, [r3, #20]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d004      	beq.n	8007e3c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e34:	3304      	adds	r3, #4
 8007e36:	4618      	mov	r0, r3
 8007e38:	f7fd fe24 	bl	8005a84 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007e3c:	463b      	mov	r3, r7
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f7ff ff6a 	bl	8007d18 <prvSampleTimeNow>
 8007e44:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2b09      	cmp	r3, #9
 8007e4a:	f200 8097 	bhi.w	8007f7c <prvProcessReceivedCommands+0x1a0>
 8007e4e:	a201      	add	r2, pc, #4	@ (adr r2, 8007e54 <prvProcessReceivedCommands+0x78>)
 8007e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e54:	08007e7d 	.word	0x08007e7d
 8007e58:	08007e7d 	.word	0x08007e7d
 8007e5c:	08007e7d 	.word	0x08007e7d
 8007e60:	08007ef3 	.word	0x08007ef3
 8007e64:	08007f07 	.word	0x08007f07
 8007e68:	08007f53 	.word	0x08007f53
 8007e6c:	08007e7d 	.word	0x08007e7d
 8007e70:	08007e7d 	.word	0x08007e7d
 8007e74:	08007ef3 	.word	0x08007ef3
 8007e78:	08007f07 	.word	0x08007f07
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007e7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e7e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007e82:	f043 0301 	orr.w	r3, r3, #1
 8007e86:	b2da      	uxtb	r2, r3
 8007e88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e8a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007e8e:	68ba      	ldr	r2, [r7, #8]
 8007e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e92:	699b      	ldr	r3, [r3, #24]
 8007e94:	18d1      	adds	r1, r2, r3
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e9c:	f7ff ff5c 	bl	8007d58 <prvInsertTimerInActiveList>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d06c      	beq.n	8007f80 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ea8:	6a1b      	ldr	r3, [r3, #32]
 8007eaa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007eac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eb0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007eb4:	f003 0304 	and.w	r3, r3, #4
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d061      	beq.n	8007f80 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007ebc:	68ba      	ldr	r2, [r7, #8]
 8007ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ec0:	699b      	ldr	r3, [r3, #24]
 8007ec2:	441a      	add	r2, r3
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	9300      	str	r3, [sp, #0]
 8007ec8:	2300      	movs	r3, #0
 8007eca:	2100      	movs	r1, #0
 8007ecc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ece:	f7ff fe01 	bl	8007ad4 <xTimerGenericCommand>
 8007ed2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007ed4:	6a3b      	ldr	r3, [r7, #32]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d152      	bne.n	8007f80 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007eda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ede:	f383 8811 	msr	BASEPRI, r3
 8007ee2:	f3bf 8f6f 	isb	sy
 8007ee6:	f3bf 8f4f 	dsb	sy
 8007eea:	61bb      	str	r3, [r7, #24]
}
 8007eec:	bf00      	nop
 8007eee:	bf00      	nop
 8007ef0:	e7fd      	b.n	8007eee <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007ef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ef4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007ef8:	f023 0301 	bic.w	r3, r3, #1
 8007efc:	b2da      	uxtb	r2, r3
 8007efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f00:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007f04:	e03d      	b.n	8007f82 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f08:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007f0c:	f043 0301 	orr.w	r3, r3, #1
 8007f10:	b2da      	uxtb	r2, r3
 8007f12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f14:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007f18:	68ba      	ldr	r2, [r7, #8]
 8007f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f1c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f20:	699b      	ldr	r3, [r3, #24]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d10b      	bne.n	8007f3e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f2a:	f383 8811 	msr	BASEPRI, r3
 8007f2e:	f3bf 8f6f 	isb	sy
 8007f32:	f3bf 8f4f 	dsb	sy
 8007f36:	617b      	str	r3, [r7, #20]
}
 8007f38:	bf00      	nop
 8007f3a:	bf00      	nop
 8007f3c:	e7fd      	b.n	8007f3a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f40:	699a      	ldr	r2, [r3, #24]
 8007f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f44:	18d1      	adds	r1, r2, r3
 8007f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f4c:	f7ff ff04 	bl	8007d58 <prvInsertTimerInActiveList>
					break;
 8007f50:	e017      	b.n	8007f82 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007f52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f54:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007f58:	f003 0302 	and.w	r3, r3, #2
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d103      	bne.n	8007f68 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007f60:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f62:	f000 fbe9 	bl	8008738 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007f66:	e00c      	b.n	8007f82 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007f68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f6a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007f6e:	f023 0301 	bic.w	r3, r3, #1
 8007f72:	b2da      	uxtb	r2, r3
 8007f74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f76:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007f7a:	e002      	b.n	8007f82 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007f7c:	bf00      	nop
 8007f7e:	e000      	b.n	8007f82 <prvProcessReceivedCommands+0x1a6>
					break;
 8007f80:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007f82:	4b08      	ldr	r3, [pc, #32]	@ (8007fa4 <prvProcessReceivedCommands+0x1c8>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	1d39      	adds	r1, r7, #4
 8007f88:	2200      	movs	r2, #0
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f7fe f942 	bl	8006214 <xQueueReceive>
 8007f90:	4603      	mov	r3, r0
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	f47f af26 	bne.w	8007de4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007f98:	bf00      	nop
 8007f9a:	bf00      	nop
 8007f9c:	3730      	adds	r7, #48	@ 0x30
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}
 8007fa2:	bf00      	nop
 8007fa4:	2000133c 	.word	0x2000133c

08007fa8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b088      	sub	sp, #32
 8007fac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007fae:	e049      	b.n	8008044 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007fb0:	4b2e      	ldr	r3, [pc, #184]	@ (800806c <prvSwitchTimerLists+0xc4>)
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	68db      	ldr	r3, [r3, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fba:	4b2c      	ldr	r3, [pc, #176]	@ (800806c <prvSwitchTimerLists+0xc4>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	68db      	ldr	r3, [r3, #12]
 8007fc0:	68db      	ldr	r3, [r3, #12]
 8007fc2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	3304      	adds	r3, #4
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f7fd fd5b 	bl	8005a84 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	6a1b      	ldr	r3, [r3, #32]
 8007fd2:	68f8      	ldr	r0, [r7, #12]
 8007fd4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007fdc:	f003 0304 	and.w	r3, r3, #4
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d02f      	beq.n	8008044 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	699b      	ldr	r3, [r3, #24]
 8007fe8:	693a      	ldr	r2, [r7, #16]
 8007fea:	4413      	add	r3, r2
 8007fec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007fee:	68ba      	ldr	r2, [r7, #8]
 8007ff0:	693b      	ldr	r3, [r7, #16]
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	d90e      	bls.n	8008014 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	68ba      	ldr	r2, [r7, #8]
 8007ffa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	68fa      	ldr	r2, [r7, #12]
 8008000:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008002:	4b1a      	ldr	r3, [pc, #104]	@ (800806c <prvSwitchTimerLists+0xc4>)
 8008004:	681a      	ldr	r2, [r3, #0]
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	3304      	adds	r3, #4
 800800a:	4619      	mov	r1, r3
 800800c:	4610      	mov	r0, r2
 800800e:	f7fd fd00 	bl	8005a12 <vListInsert>
 8008012:	e017      	b.n	8008044 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008014:	2300      	movs	r3, #0
 8008016:	9300      	str	r3, [sp, #0]
 8008018:	2300      	movs	r3, #0
 800801a:	693a      	ldr	r2, [r7, #16]
 800801c:	2100      	movs	r1, #0
 800801e:	68f8      	ldr	r0, [r7, #12]
 8008020:	f7ff fd58 	bl	8007ad4 <xTimerGenericCommand>
 8008024:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d10b      	bne.n	8008044 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800802c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008030:	f383 8811 	msr	BASEPRI, r3
 8008034:	f3bf 8f6f 	isb	sy
 8008038:	f3bf 8f4f 	dsb	sy
 800803c:	603b      	str	r3, [r7, #0]
}
 800803e:	bf00      	nop
 8008040:	bf00      	nop
 8008042:	e7fd      	b.n	8008040 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008044:	4b09      	ldr	r3, [pc, #36]	@ (800806c <prvSwitchTimerLists+0xc4>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d1b0      	bne.n	8007fb0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800804e:	4b07      	ldr	r3, [pc, #28]	@ (800806c <prvSwitchTimerLists+0xc4>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008054:	4b06      	ldr	r3, [pc, #24]	@ (8008070 <prvSwitchTimerLists+0xc8>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a04      	ldr	r2, [pc, #16]	@ (800806c <prvSwitchTimerLists+0xc4>)
 800805a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800805c:	4a04      	ldr	r2, [pc, #16]	@ (8008070 <prvSwitchTimerLists+0xc8>)
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	6013      	str	r3, [r2, #0]
}
 8008062:	bf00      	nop
 8008064:	3718      	adds	r7, #24
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
 800806a:	bf00      	nop
 800806c:	20001334 	.word	0x20001334
 8008070:	20001338 	.word	0x20001338

08008074 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b082      	sub	sp, #8
 8008078:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800807a:	f000 f96d 	bl	8008358 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800807e:	4b15      	ldr	r3, [pc, #84]	@ (80080d4 <prvCheckForValidListAndQueue+0x60>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d120      	bne.n	80080c8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008086:	4814      	ldr	r0, [pc, #80]	@ (80080d8 <prvCheckForValidListAndQueue+0x64>)
 8008088:	f7fd fc72 	bl	8005970 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800808c:	4813      	ldr	r0, [pc, #76]	@ (80080dc <prvCheckForValidListAndQueue+0x68>)
 800808e:	f7fd fc6f 	bl	8005970 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008092:	4b13      	ldr	r3, [pc, #76]	@ (80080e0 <prvCheckForValidListAndQueue+0x6c>)
 8008094:	4a10      	ldr	r2, [pc, #64]	@ (80080d8 <prvCheckForValidListAndQueue+0x64>)
 8008096:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008098:	4b12      	ldr	r3, [pc, #72]	@ (80080e4 <prvCheckForValidListAndQueue+0x70>)
 800809a:	4a10      	ldr	r2, [pc, #64]	@ (80080dc <prvCheckForValidListAndQueue+0x68>)
 800809c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800809e:	2300      	movs	r3, #0
 80080a0:	9300      	str	r3, [sp, #0]
 80080a2:	4b11      	ldr	r3, [pc, #68]	@ (80080e8 <prvCheckForValidListAndQueue+0x74>)
 80080a4:	4a11      	ldr	r2, [pc, #68]	@ (80080ec <prvCheckForValidListAndQueue+0x78>)
 80080a6:	2110      	movs	r1, #16
 80080a8:	200a      	movs	r0, #10
 80080aa:	f7fd fd7f 	bl	8005bac <xQueueGenericCreateStatic>
 80080ae:	4603      	mov	r3, r0
 80080b0:	4a08      	ldr	r2, [pc, #32]	@ (80080d4 <prvCheckForValidListAndQueue+0x60>)
 80080b2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80080b4:	4b07      	ldr	r3, [pc, #28]	@ (80080d4 <prvCheckForValidListAndQueue+0x60>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d005      	beq.n	80080c8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80080bc:	4b05      	ldr	r3, [pc, #20]	@ (80080d4 <prvCheckForValidListAndQueue+0x60>)
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	490b      	ldr	r1, [pc, #44]	@ (80080f0 <prvCheckForValidListAndQueue+0x7c>)
 80080c2:	4618      	mov	r0, r3
 80080c4:	f7fe fc42 	bl	800694c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80080c8:	f000 f978 	bl	80083bc <vPortExitCritical>
}
 80080cc:	bf00      	nop
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
 80080d2:	bf00      	nop
 80080d4:	2000133c 	.word	0x2000133c
 80080d8:	2000130c 	.word	0x2000130c
 80080dc:	20001320 	.word	0x20001320
 80080e0:	20001334 	.word	0x20001334
 80080e4:	20001338 	.word	0x20001338
 80080e8:	200013e8 	.word	0x200013e8
 80080ec:	20001348 	.word	0x20001348
 80080f0:	0800b6ac 	.word	0x0800b6ac

080080f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80080f4:	b480      	push	{r7}
 80080f6:	b085      	sub	sp, #20
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	60f8      	str	r0, [r7, #12]
 80080fc:	60b9      	str	r1, [r7, #8]
 80080fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	3b04      	subs	r3, #4
 8008104:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800810c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	3b04      	subs	r3, #4
 8008112:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	f023 0201 	bic.w	r2, r3, #1
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	3b04      	subs	r3, #4
 8008122:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008124:	4a0c      	ldr	r2, [pc, #48]	@ (8008158 <pxPortInitialiseStack+0x64>)
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	3b14      	subs	r3, #20
 800812e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008130:	687a      	ldr	r2, [r7, #4]
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	3b04      	subs	r3, #4
 800813a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	f06f 0202 	mvn.w	r2, #2
 8008142:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	3b20      	subs	r3, #32
 8008148:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800814a:	68fb      	ldr	r3, [r7, #12]
}
 800814c:	4618      	mov	r0, r3
 800814e:	3714      	adds	r7, #20
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr
 8008158:	0800815d 	.word	0x0800815d

0800815c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800815c:	b480      	push	{r7}
 800815e:	b085      	sub	sp, #20
 8008160:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008162:	2300      	movs	r3, #0
 8008164:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008166:	4b13      	ldr	r3, [pc, #76]	@ (80081b4 <prvTaskExitError+0x58>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800816e:	d00b      	beq.n	8008188 <prvTaskExitError+0x2c>
	__asm volatile
 8008170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008174:	f383 8811 	msr	BASEPRI, r3
 8008178:	f3bf 8f6f 	isb	sy
 800817c:	f3bf 8f4f 	dsb	sy
 8008180:	60fb      	str	r3, [r7, #12]
}
 8008182:	bf00      	nop
 8008184:	bf00      	nop
 8008186:	e7fd      	b.n	8008184 <prvTaskExitError+0x28>
	__asm volatile
 8008188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800818c:	f383 8811 	msr	BASEPRI, r3
 8008190:	f3bf 8f6f 	isb	sy
 8008194:	f3bf 8f4f 	dsb	sy
 8008198:	60bb      	str	r3, [r7, #8]
}
 800819a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800819c:	bf00      	nop
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d0fc      	beq.n	800819e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80081a4:	bf00      	nop
 80081a6:	bf00      	nop
 80081a8:	3714      	adds	r7, #20
 80081aa:	46bd      	mov	sp, r7
 80081ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b0:	4770      	bx	lr
 80081b2:	bf00      	nop
 80081b4:	2000001c 	.word	0x2000001c
	...

080081c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80081c0:	4b07      	ldr	r3, [pc, #28]	@ (80081e0 <pxCurrentTCBConst2>)
 80081c2:	6819      	ldr	r1, [r3, #0]
 80081c4:	6808      	ldr	r0, [r1, #0]
 80081c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081ca:	f380 8809 	msr	PSP, r0
 80081ce:	f3bf 8f6f 	isb	sy
 80081d2:	f04f 0000 	mov.w	r0, #0
 80081d6:	f380 8811 	msr	BASEPRI, r0
 80081da:	4770      	bx	lr
 80081dc:	f3af 8000 	nop.w

080081e0 <pxCurrentTCBConst2>:
 80081e0:	20000e0c 	.word	0x20000e0c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80081e4:	bf00      	nop
 80081e6:	bf00      	nop

080081e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80081e8:	4808      	ldr	r0, [pc, #32]	@ (800820c <prvPortStartFirstTask+0x24>)
 80081ea:	6800      	ldr	r0, [r0, #0]
 80081ec:	6800      	ldr	r0, [r0, #0]
 80081ee:	f380 8808 	msr	MSP, r0
 80081f2:	f04f 0000 	mov.w	r0, #0
 80081f6:	f380 8814 	msr	CONTROL, r0
 80081fa:	b662      	cpsie	i
 80081fc:	b661      	cpsie	f
 80081fe:	f3bf 8f4f 	dsb	sy
 8008202:	f3bf 8f6f 	isb	sy
 8008206:	df00      	svc	0
 8008208:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800820a:	bf00      	nop
 800820c:	e000ed08 	.word	0xe000ed08

08008210 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b086      	sub	sp, #24
 8008214:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008216:	4b47      	ldr	r3, [pc, #284]	@ (8008334 <xPortStartScheduler+0x124>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a47      	ldr	r2, [pc, #284]	@ (8008338 <xPortStartScheduler+0x128>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d10b      	bne.n	8008238 <xPortStartScheduler+0x28>
	__asm volatile
 8008220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008224:	f383 8811 	msr	BASEPRI, r3
 8008228:	f3bf 8f6f 	isb	sy
 800822c:	f3bf 8f4f 	dsb	sy
 8008230:	60fb      	str	r3, [r7, #12]
}
 8008232:	bf00      	nop
 8008234:	bf00      	nop
 8008236:	e7fd      	b.n	8008234 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008238:	4b3e      	ldr	r3, [pc, #248]	@ (8008334 <xPortStartScheduler+0x124>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a3f      	ldr	r2, [pc, #252]	@ (800833c <xPortStartScheduler+0x12c>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d10b      	bne.n	800825a <xPortStartScheduler+0x4a>
	__asm volatile
 8008242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008246:	f383 8811 	msr	BASEPRI, r3
 800824a:	f3bf 8f6f 	isb	sy
 800824e:	f3bf 8f4f 	dsb	sy
 8008252:	613b      	str	r3, [r7, #16]
}
 8008254:	bf00      	nop
 8008256:	bf00      	nop
 8008258:	e7fd      	b.n	8008256 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800825a:	4b39      	ldr	r3, [pc, #228]	@ (8008340 <xPortStartScheduler+0x130>)
 800825c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	781b      	ldrb	r3, [r3, #0]
 8008262:	b2db      	uxtb	r3, r3
 8008264:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	22ff      	movs	r2, #255	@ 0xff
 800826a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	781b      	ldrb	r3, [r3, #0]
 8008270:	b2db      	uxtb	r3, r3
 8008272:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008274:	78fb      	ldrb	r3, [r7, #3]
 8008276:	b2db      	uxtb	r3, r3
 8008278:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800827c:	b2da      	uxtb	r2, r3
 800827e:	4b31      	ldr	r3, [pc, #196]	@ (8008344 <xPortStartScheduler+0x134>)
 8008280:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008282:	4b31      	ldr	r3, [pc, #196]	@ (8008348 <xPortStartScheduler+0x138>)
 8008284:	2207      	movs	r2, #7
 8008286:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008288:	e009      	b.n	800829e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800828a:	4b2f      	ldr	r3, [pc, #188]	@ (8008348 <xPortStartScheduler+0x138>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	3b01      	subs	r3, #1
 8008290:	4a2d      	ldr	r2, [pc, #180]	@ (8008348 <xPortStartScheduler+0x138>)
 8008292:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008294:	78fb      	ldrb	r3, [r7, #3]
 8008296:	b2db      	uxtb	r3, r3
 8008298:	005b      	lsls	r3, r3, #1
 800829a:	b2db      	uxtb	r3, r3
 800829c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800829e:	78fb      	ldrb	r3, [r7, #3]
 80082a0:	b2db      	uxtb	r3, r3
 80082a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80082a6:	2b80      	cmp	r3, #128	@ 0x80
 80082a8:	d0ef      	beq.n	800828a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80082aa:	4b27      	ldr	r3, [pc, #156]	@ (8008348 <xPortStartScheduler+0x138>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f1c3 0307 	rsb	r3, r3, #7
 80082b2:	2b04      	cmp	r3, #4
 80082b4:	d00b      	beq.n	80082ce <xPortStartScheduler+0xbe>
	__asm volatile
 80082b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082ba:	f383 8811 	msr	BASEPRI, r3
 80082be:	f3bf 8f6f 	isb	sy
 80082c2:	f3bf 8f4f 	dsb	sy
 80082c6:	60bb      	str	r3, [r7, #8]
}
 80082c8:	bf00      	nop
 80082ca:	bf00      	nop
 80082cc:	e7fd      	b.n	80082ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80082ce:	4b1e      	ldr	r3, [pc, #120]	@ (8008348 <xPortStartScheduler+0x138>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	021b      	lsls	r3, r3, #8
 80082d4:	4a1c      	ldr	r2, [pc, #112]	@ (8008348 <xPortStartScheduler+0x138>)
 80082d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80082d8:	4b1b      	ldr	r3, [pc, #108]	@ (8008348 <xPortStartScheduler+0x138>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80082e0:	4a19      	ldr	r2, [pc, #100]	@ (8008348 <xPortStartScheduler+0x138>)
 80082e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	b2da      	uxtb	r2, r3
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80082ec:	4b17      	ldr	r3, [pc, #92]	@ (800834c <xPortStartScheduler+0x13c>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a16      	ldr	r2, [pc, #88]	@ (800834c <xPortStartScheduler+0x13c>)
 80082f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80082f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80082f8:	4b14      	ldr	r3, [pc, #80]	@ (800834c <xPortStartScheduler+0x13c>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	4a13      	ldr	r2, [pc, #76]	@ (800834c <xPortStartScheduler+0x13c>)
 80082fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008302:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008304:	f000 f8da 	bl	80084bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008308:	4b11      	ldr	r3, [pc, #68]	@ (8008350 <xPortStartScheduler+0x140>)
 800830a:	2200      	movs	r2, #0
 800830c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800830e:	f000 f8f9 	bl	8008504 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008312:	4b10      	ldr	r3, [pc, #64]	@ (8008354 <xPortStartScheduler+0x144>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a0f      	ldr	r2, [pc, #60]	@ (8008354 <xPortStartScheduler+0x144>)
 8008318:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800831c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800831e:	f7ff ff63 	bl	80081e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008322:	f7fe ff2b 	bl	800717c <vTaskSwitchContext>
	prvTaskExitError();
 8008326:	f7ff ff19 	bl	800815c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800832a:	2300      	movs	r3, #0
}
 800832c:	4618      	mov	r0, r3
 800832e:	3718      	adds	r7, #24
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}
 8008334:	e000ed00 	.word	0xe000ed00
 8008338:	410fc271 	.word	0x410fc271
 800833c:	410fc270 	.word	0x410fc270
 8008340:	e000e400 	.word	0xe000e400
 8008344:	20001438 	.word	0x20001438
 8008348:	2000143c 	.word	0x2000143c
 800834c:	e000ed20 	.word	0xe000ed20
 8008350:	2000001c 	.word	0x2000001c
 8008354:	e000ef34 	.word	0xe000ef34

08008358 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008358:	b480      	push	{r7}
 800835a:	b083      	sub	sp, #12
 800835c:	af00      	add	r7, sp, #0
	__asm volatile
 800835e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008362:	f383 8811 	msr	BASEPRI, r3
 8008366:	f3bf 8f6f 	isb	sy
 800836a:	f3bf 8f4f 	dsb	sy
 800836e:	607b      	str	r3, [r7, #4]
}
 8008370:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008372:	4b10      	ldr	r3, [pc, #64]	@ (80083b4 <vPortEnterCritical+0x5c>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	3301      	adds	r3, #1
 8008378:	4a0e      	ldr	r2, [pc, #56]	@ (80083b4 <vPortEnterCritical+0x5c>)
 800837a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800837c:	4b0d      	ldr	r3, [pc, #52]	@ (80083b4 <vPortEnterCritical+0x5c>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	2b01      	cmp	r3, #1
 8008382:	d110      	bne.n	80083a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008384:	4b0c      	ldr	r3, [pc, #48]	@ (80083b8 <vPortEnterCritical+0x60>)
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	b2db      	uxtb	r3, r3
 800838a:	2b00      	cmp	r3, #0
 800838c:	d00b      	beq.n	80083a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800838e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008392:	f383 8811 	msr	BASEPRI, r3
 8008396:	f3bf 8f6f 	isb	sy
 800839a:	f3bf 8f4f 	dsb	sy
 800839e:	603b      	str	r3, [r7, #0]
}
 80083a0:	bf00      	nop
 80083a2:	bf00      	nop
 80083a4:	e7fd      	b.n	80083a2 <vPortEnterCritical+0x4a>
	}
}
 80083a6:	bf00      	nop
 80083a8:	370c      	adds	r7, #12
 80083aa:	46bd      	mov	sp, r7
 80083ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b0:	4770      	bx	lr
 80083b2:	bf00      	nop
 80083b4:	2000001c 	.word	0x2000001c
 80083b8:	e000ed04 	.word	0xe000ed04

080083bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80083bc:	b480      	push	{r7}
 80083be:	b083      	sub	sp, #12
 80083c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80083c2:	4b12      	ldr	r3, [pc, #72]	@ (800840c <vPortExitCritical+0x50>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d10b      	bne.n	80083e2 <vPortExitCritical+0x26>
	__asm volatile
 80083ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083ce:	f383 8811 	msr	BASEPRI, r3
 80083d2:	f3bf 8f6f 	isb	sy
 80083d6:	f3bf 8f4f 	dsb	sy
 80083da:	607b      	str	r3, [r7, #4]
}
 80083dc:	bf00      	nop
 80083de:	bf00      	nop
 80083e0:	e7fd      	b.n	80083de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80083e2:	4b0a      	ldr	r3, [pc, #40]	@ (800840c <vPortExitCritical+0x50>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	3b01      	subs	r3, #1
 80083e8:	4a08      	ldr	r2, [pc, #32]	@ (800840c <vPortExitCritical+0x50>)
 80083ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80083ec:	4b07      	ldr	r3, [pc, #28]	@ (800840c <vPortExitCritical+0x50>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d105      	bne.n	8008400 <vPortExitCritical+0x44>
 80083f4:	2300      	movs	r3, #0
 80083f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	f383 8811 	msr	BASEPRI, r3
}
 80083fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008400:	bf00      	nop
 8008402:	370c      	adds	r7, #12
 8008404:	46bd      	mov	sp, r7
 8008406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840a:	4770      	bx	lr
 800840c:	2000001c 	.word	0x2000001c

08008410 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008410:	f3ef 8009 	mrs	r0, PSP
 8008414:	f3bf 8f6f 	isb	sy
 8008418:	4b15      	ldr	r3, [pc, #84]	@ (8008470 <pxCurrentTCBConst>)
 800841a:	681a      	ldr	r2, [r3, #0]
 800841c:	f01e 0f10 	tst.w	lr, #16
 8008420:	bf08      	it	eq
 8008422:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008426:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800842a:	6010      	str	r0, [r2, #0]
 800842c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008430:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008434:	f380 8811 	msr	BASEPRI, r0
 8008438:	f3bf 8f4f 	dsb	sy
 800843c:	f3bf 8f6f 	isb	sy
 8008440:	f7fe fe9c 	bl	800717c <vTaskSwitchContext>
 8008444:	f04f 0000 	mov.w	r0, #0
 8008448:	f380 8811 	msr	BASEPRI, r0
 800844c:	bc09      	pop	{r0, r3}
 800844e:	6819      	ldr	r1, [r3, #0]
 8008450:	6808      	ldr	r0, [r1, #0]
 8008452:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008456:	f01e 0f10 	tst.w	lr, #16
 800845a:	bf08      	it	eq
 800845c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008460:	f380 8809 	msr	PSP, r0
 8008464:	f3bf 8f6f 	isb	sy
 8008468:	4770      	bx	lr
 800846a:	bf00      	nop
 800846c:	f3af 8000 	nop.w

08008470 <pxCurrentTCBConst>:
 8008470:	20000e0c 	.word	0x20000e0c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008474:	bf00      	nop
 8008476:	bf00      	nop

08008478 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b082      	sub	sp, #8
 800847c:	af00      	add	r7, sp, #0
	__asm volatile
 800847e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008482:	f383 8811 	msr	BASEPRI, r3
 8008486:	f3bf 8f6f 	isb	sy
 800848a:	f3bf 8f4f 	dsb	sy
 800848e:	607b      	str	r3, [r7, #4]
}
 8008490:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008492:	f7fe fdb9 	bl	8007008 <xTaskIncrementTick>
 8008496:	4603      	mov	r3, r0
 8008498:	2b00      	cmp	r3, #0
 800849a:	d003      	beq.n	80084a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800849c:	4b06      	ldr	r3, [pc, #24]	@ (80084b8 <xPortSysTickHandler+0x40>)
 800849e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084a2:	601a      	str	r2, [r3, #0]
 80084a4:	2300      	movs	r3, #0
 80084a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	f383 8811 	msr	BASEPRI, r3
}
 80084ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80084b0:	bf00      	nop
 80084b2:	3708      	adds	r7, #8
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}
 80084b8:	e000ed04 	.word	0xe000ed04

080084bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80084bc:	b480      	push	{r7}
 80084be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80084c0:	4b0b      	ldr	r3, [pc, #44]	@ (80084f0 <vPortSetupTimerInterrupt+0x34>)
 80084c2:	2200      	movs	r2, #0
 80084c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80084c6:	4b0b      	ldr	r3, [pc, #44]	@ (80084f4 <vPortSetupTimerInterrupt+0x38>)
 80084c8:	2200      	movs	r2, #0
 80084ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80084cc:	4b0a      	ldr	r3, [pc, #40]	@ (80084f8 <vPortSetupTimerInterrupt+0x3c>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a0a      	ldr	r2, [pc, #40]	@ (80084fc <vPortSetupTimerInterrupt+0x40>)
 80084d2:	fba2 2303 	umull	r2, r3, r2, r3
 80084d6:	099b      	lsrs	r3, r3, #6
 80084d8:	4a09      	ldr	r2, [pc, #36]	@ (8008500 <vPortSetupTimerInterrupt+0x44>)
 80084da:	3b01      	subs	r3, #1
 80084dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80084de:	4b04      	ldr	r3, [pc, #16]	@ (80084f0 <vPortSetupTimerInterrupt+0x34>)
 80084e0:	2207      	movs	r2, #7
 80084e2:	601a      	str	r2, [r3, #0]
}
 80084e4:	bf00      	nop
 80084e6:	46bd      	mov	sp, r7
 80084e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ec:	4770      	bx	lr
 80084ee:	bf00      	nop
 80084f0:	e000e010 	.word	0xe000e010
 80084f4:	e000e018 	.word	0xe000e018
 80084f8:	20000010 	.word	0x20000010
 80084fc:	10624dd3 	.word	0x10624dd3
 8008500:	e000e014 	.word	0xe000e014

08008504 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008504:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008514 <vPortEnableVFP+0x10>
 8008508:	6801      	ldr	r1, [r0, #0]
 800850a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800850e:	6001      	str	r1, [r0, #0]
 8008510:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008512:	bf00      	nop
 8008514:	e000ed88 	.word	0xe000ed88

08008518 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008518:	b480      	push	{r7}
 800851a:	b085      	sub	sp, #20
 800851c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800851e:	f3ef 8305 	mrs	r3, IPSR
 8008522:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	2b0f      	cmp	r3, #15
 8008528:	d915      	bls.n	8008556 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800852a:	4a18      	ldr	r2, [pc, #96]	@ (800858c <vPortValidateInterruptPriority+0x74>)
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	4413      	add	r3, r2
 8008530:	781b      	ldrb	r3, [r3, #0]
 8008532:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008534:	4b16      	ldr	r3, [pc, #88]	@ (8008590 <vPortValidateInterruptPriority+0x78>)
 8008536:	781b      	ldrb	r3, [r3, #0]
 8008538:	7afa      	ldrb	r2, [r7, #11]
 800853a:	429a      	cmp	r2, r3
 800853c:	d20b      	bcs.n	8008556 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800853e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008542:	f383 8811 	msr	BASEPRI, r3
 8008546:	f3bf 8f6f 	isb	sy
 800854a:	f3bf 8f4f 	dsb	sy
 800854e:	607b      	str	r3, [r7, #4]
}
 8008550:	bf00      	nop
 8008552:	bf00      	nop
 8008554:	e7fd      	b.n	8008552 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008556:	4b0f      	ldr	r3, [pc, #60]	@ (8008594 <vPortValidateInterruptPriority+0x7c>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800855e:	4b0e      	ldr	r3, [pc, #56]	@ (8008598 <vPortValidateInterruptPriority+0x80>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	429a      	cmp	r2, r3
 8008564:	d90b      	bls.n	800857e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800856a:	f383 8811 	msr	BASEPRI, r3
 800856e:	f3bf 8f6f 	isb	sy
 8008572:	f3bf 8f4f 	dsb	sy
 8008576:	603b      	str	r3, [r7, #0]
}
 8008578:	bf00      	nop
 800857a:	bf00      	nop
 800857c:	e7fd      	b.n	800857a <vPortValidateInterruptPriority+0x62>
	}
 800857e:	bf00      	nop
 8008580:	3714      	adds	r7, #20
 8008582:	46bd      	mov	sp, r7
 8008584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008588:	4770      	bx	lr
 800858a:	bf00      	nop
 800858c:	e000e3f0 	.word	0xe000e3f0
 8008590:	20001438 	.word	0x20001438
 8008594:	e000ed0c 	.word	0xe000ed0c
 8008598:	2000143c 	.word	0x2000143c

0800859c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b08a      	sub	sp, #40	@ 0x28
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80085a4:	2300      	movs	r3, #0
 80085a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80085a8:	f7fe fc72 	bl	8006e90 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80085ac:	4b5c      	ldr	r3, [pc, #368]	@ (8008720 <pvPortMalloc+0x184>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d101      	bne.n	80085b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80085b4:	f000 f924 	bl	8008800 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80085b8:	4b5a      	ldr	r3, [pc, #360]	@ (8008724 <pvPortMalloc+0x188>)
 80085ba:	681a      	ldr	r2, [r3, #0]
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	4013      	ands	r3, r2
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	f040 8095 	bne.w	80086f0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d01e      	beq.n	800860a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80085cc:	2208      	movs	r2, #8
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	4413      	add	r3, r2
 80085d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f003 0307 	and.w	r3, r3, #7
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d015      	beq.n	800860a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f023 0307 	bic.w	r3, r3, #7
 80085e4:	3308      	adds	r3, #8
 80085e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f003 0307 	and.w	r3, r3, #7
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d00b      	beq.n	800860a <pvPortMalloc+0x6e>
	__asm volatile
 80085f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085f6:	f383 8811 	msr	BASEPRI, r3
 80085fa:	f3bf 8f6f 	isb	sy
 80085fe:	f3bf 8f4f 	dsb	sy
 8008602:	617b      	str	r3, [r7, #20]
}
 8008604:	bf00      	nop
 8008606:	bf00      	nop
 8008608:	e7fd      	b.n	8008606 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d06f      	beq.n	80086f0 <pvPortMalloc+0x154>
 8008610:	4b45      	ldr	r3, [pc, #276]	@ (8008728 <pvPortMalloc+0x18c>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	687a      	ldr	r2, [r7, #4]
 8008616:	429a      	cmp	r2, r3
 8008618:	d86a      	bhi.n	80086f0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800861a:	4b44      	ldr	r3, [pc, #272]	@ (800872c <pvPortMalloc+0x190>)
 800861c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800861e:	4b43      	ldr	r3, [pc, #268]	@ (800872c <pvPortMalloc+0x190>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008624:	e004      	b.n	8008630 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008628:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800862a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008632:	685b      	ldr	r3, [r3, #4]
 8008634:	687a      	ldr	r2, [r7, #4]
 8008636:	429a      	cmp	r2, r3
 8008638:	d903      	bls.n	8008642 <pvPortMalloc+0xa6>
 800863a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	2b00      	cmp	r3, #0
 8008640:	d1f1      	bne.n	8008626 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008642:	4b37      	ldr	r3, [pc, #220]	@ (8008720 <pvPortMalloc+0x184>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008648:	429a      	cmp	r2, r3
 800864a:	d051      	beq.n	80086f0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800864c:	6a3b      	ldr	r3, [r7, #32]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	2208      	movs	r2, #8
 8008652:	4413      	add	r3, r2
 8008654:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008658:	681a      	ldr	r2, [r3, #0]
 800865a:	6a3b      	ldr	r3, [r7, #32]
 800865c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800865e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008660:	685a      	ldr	r2, [r3, #4]
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	1ad2      	subs	r2, r2, r3
 8008666:	2308      	movs	r3, #8
 8008668:	005b      	lsls	r3, r3, #1
 800866a:	429a      	cmp	r2, r3
 800866c:	d920      	bls.n	80086b0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800866e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	4413      	add	r3, r2
 8008674:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008676:	69bb      	ldr	r3, [r7, #24]
 8008678:	f003 0307 	and.w	r3, r3, #7
 800867c:	2b00      	cmp	r3, #0
 800867e:	d00b      	beq.n	8008698 <pvPortMalloc+0xfc>
	__asm volatile
 8008680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008684:	f383 8811 	msr	BASEPRI, r3
 8008688:	f3bf 8f6f 	isb	sy
 800868c:	f3bf 8f4f 	dsb	sy
 8008690:	613b      	str	r3, [r7, #16]
}
 8008692:	bf00      	nop
 8008694:	bf00      	nop
 8008696:	e7fd      	b.n	8008694 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800869a:	685a      	ldr	r2, [r3, #4]
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	1ad2      	subs	r2, r2, r3
 80086a0:	69bb      	ldr	r3, [r7, #24]
 80086a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80086a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086a6:	687a      	ldr	r2, [r7, #4]
 80086a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80086aa:	69b8      	ldr	r0, [r7, #24]
 80086ac:	f000 f90a 	bl	80088c4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80086b0:	4b1d      	ldr	r3, [pc, #116]	@ (8008728 <pvPortMalloc+0x18c>)
 80086b2:	681a      	ldr	r2, [r3, #0]
 80086b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086b6:	685b      	ldr	r3, [r3, #4]
 80086b8:	1ad3      	subs	r3, r2, r3
 80086ba:	4a1b      	ldr	r2, [pc, #108]	@ (8008728 <pvPortMalloc+0x18c>)
 80086bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80086be:	4b1a      	ldr	r3, [pc, #104]	@ (8008728 <pvPortMalloc+0x18c>)
 80086c0:	681a      	ldr	r2, [r3, #0]
 80086c2:	4b1b      	ldr	r3, [pc, #108]	@ (8008730 <pvPortMalloc+0x194>)
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	429a      	cmp	r2, r3
 80086c8:	d203      	bcs.n	80086d2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80086ca:	4b17      	ldr	r3, [pc, #92]	@ (8008728 <pvPortMalloc+0x18c>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	4a18      	ldr	r2, [pc, #96]	@ (8008730 <pvPortMalloc+0x194>)
 80086d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80086d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086d4:	685a      	ldr	r2, [r3, #4]
 80086d6:	4b13      	ldr	r3, [pc, #76]	@ (8008724 <pvPortMalloc+0x188>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	431a      	orrs	r2, r3
 80086dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80086e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086e2:	2200      	movs	r2, #0
 80086e4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80086e6:	4b13      	ldr	r3, [pc, #76]	@ (8008734 <pvPortMalloc+0x198>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	3301      	adds	r3, #1
 80086ec:	4a11      	ldr	r2, [pc, #68]	@ (8008734 <pvPortMalloc+0x198>)
 80086ee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80086f0:	f7fe fbdc 	bl	8006eac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80086f4:	69fb      	ldr	r3, [r7, #28]
 80086f6:	f003 0307 	and.w	r3, r3, #7
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d00b      	beq.n	8008716 <pvPortMalloc+0x17a>
	__asm volatile
 80086fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008702:	f383 8811 	msr	BASEPRI, r3
 8008706:	f3bf 8f6f 	isb	sy
 800870a:	f3bf 8f4f 	dsb	sy
 800870e:	60fb      	str	r3, [r7, #12]
}
 8008710:	bf00      	nop
 8008712:	bf00      	nop
 8008714:	e7fd      	b.n	8008712 <pvPortMalloc+0x176>
	return pvReturn;
 8008716:	69fb      	ldr	r3, [r7, #28]
}
 8008718:	4618      	mov	r0, r3
 800871a:	3728      	adds	r7, #40	@ 0x28
 800871c:	46bd      	mov	sp, r7
 800871e:	bd80      	pop	{r7, pc}
 8008720:	20005048 	.word	0x20005048
 8008724:	2000505c 	.word	0x2000505c
 8008728:	2000504c 	.word	0x2000504c
 800872c:	20005040 	.word	0x20005040
 8008730:	20005050 	.word	0x20005050
 8008734:	20005054 	.word	0x20005054

08008738 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b086      	sub	sp, #24
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d04f      	beq.n	80087ea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800874a:	2308      	movs	r3, #8
 800874c:	425b      	negs	r3, r3
 800874e:	697a      	ldr	r2, [r7, #20]
 8008750:	4413      	add	r3, r2
 8008752:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008758:	693b      	ldr	r3, [r7, #16]
 800875a:	685a      	ldr	r2, [r3, #4]
 800875c:	4b25      	ldr	r3, [pc, #148]	@ (80087f4 <vPortFree+0xbc>)
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4013      	ands	r3, r2
 8008762:	2b00      	cmp	r3, #0
 8008764:	d10b      	bne.n	800877e <vPortFree+0x46>
	__asm volatile
 8008766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800876a:	f383 8811 	msr	BASEPRI, r3
 800876e:	f3bf 8f6f 	isb	sy
 8008772:	f3bf 8f4f 	dsb	sy
 8008776:	60fb      	str	r3, [r7, #12]
}
 8008778:	bf00      	nop
 800877a:	bf00      	nop
 800877c:	e7fd      	b.n	800877a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800877e:	693b      	ldr	r3, [r7, #16]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d00b      	beq.n	800879e <vPortFree+0x66>
	__asm volatile
 8008786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800878a:	f383 8811 	msr	BASEPRI, r3
 800878e:	f3bf 8f6f 	isb	sy
 8008792:	f3bf 8f4f 	dsb	sy
 8008796:	60bb      	str	r3, [r7, #8]
}
 8008798:	bf00      	nop
 800879a:	bf00      	nop
 800879c:	e7fd      	b.n	800879a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800879e:	693b      	ldr	r3, [r7, #16]
 80087a0:	685a      	ldr	r2, [r3, #4]
 80087a2:	4b14      	ldr	r3, [pc, #80]	@ (80087f4 <vPortFree+0xbc>)
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4013      	ands	r3, r2
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d01e      	beq.n	80087ea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d11a      	bne.n	80087ea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80087b4:	693b      	ldr	r3, [r7, #16]
 80087b6:	685a      	ldr	r2, [r3, #4]
 80087b8:	4b0e      	ldr	r3, [pc, #56]	@ (80087f4 <vPortFree+0xbc>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	43db      	mvns	r3, r3
 80087be:	401a      	ands	r2, r3
 80087c0:	693b      	ldr	r3, [r7, #16]
 80087c2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80087c4:	f7fe fb64 	bl	8006e90 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	685a      	ldr	r2, [r3, #4]
 80087cc:	4b0a      	ldr	r3, [pc, #40]	@ (80087f8 <vPortFree+0xc0>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	4413      	add	r3, r2
 80087d2:	4a09      	ldr	r2, [pc, #36]	@ (80087f8 <vPortFree+0xc0>)
 80087d4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80087d6:	6938      	ldr	r0, [r7, #16]
 80087d8:	f000 f874 	bl	80088c4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80087dc:	4b07      	ldr	r3, [pc, #28]	@ (80087fc <vPortFree+0xc4>)
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	3301      	adds	r3, #1
 80087e2:	4a06      	ldr	r2, [pc, #24]	@ (80087fc <vPortFree+0xc4>)
 80087e4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80087e6:	f7fe fb61 	bl	8006eac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80087ea:	bf00      	nop
 80087ec:	3718      	adds	r7, #24
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}
 80087f2:	bf00      	nop
 80087f4:	2000505c 	.word	0x2000505c
 80087f8:	2000504c 	.word	0x2000504c
 80087fc:	20005058 	.word	0x20005058

08008800 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008800:	b480      	push	{r7}
 8008802:	b085      	sub	sp, #20
 8008804:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008806:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800880a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800880c:	4b27      	ldr	r3, [pc, #156]	@ (80088ac <prvHeapInit+0xac>)
 800880e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	f003 0307 	and.w	r3, r3, #7
 8008816:	2b00      	cmp	r3, #0
 8008818:	d00c      	beq.n	8008834 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	3307      	adds	r3, #7
 800881e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	f023 0307 	bic.w	r3, r3, #7
 8008826:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008828:	68ba      	ldr	r2, [r7, #8]
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	1ad3      	subs	r3, r2, r3
 800882e:	4a1f      	ldr	r2, [pc, #124]	@ (80088ac <prvHeapInit+0xac>)
 8008830:	4413      	add	r3, r2
 8008832:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008838:	4a1d      	ldr	r2, [pc, #116]	@ (80088b0 <prvHeapInit+0xb0>)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800883e:	4b1c      	ldr	r3, [pc, #112]	@ (80088b0 <prvHeapInit+0xb0>)
 8008840:	2200      	movs	r2, #0
 8008842:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	68ba      	ldr	r2, [r7, #8]
 8008848:	4413      	add	r3, r2
 800884a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800884c:	2208      	movs	r2, #8
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	1a9b      	subs	r3, r3, r2
 8008852:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	f023 0307 	bic.w	r3, r3, #7
 800885a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	4a15      	ldr	r2, [pc, #84]	@ (80088b4 <prvHeapInit+0xb4>)
 8008860:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008862:	4b14      	ldr	r3, [pc, #80]	@ (80088b4 <prvHeapInit+0xb4>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	2200      	movs	r2, #0
 8008868:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800886a:	4b12      	ldr	r3, [pc, #72]	@ (80088b4 <prvHeapInit+0xb4>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	2200      	movs	r2, #0
 8008870:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	68fa      	ldr	r2, [r7, #12]
 800887a:	1ad2      	subs	r2, r2, r3
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008880:	4b0c      	ldr	r3, [pc, #48]	@ (80088b4 <prvHeapInit+0xb4>)
 8008882:	681a      	ldr	r2, [r3, #0]
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	685b      	ldr	r3, [r3, #4]
 800888c:	4a0a      	ldr	r2, [pc, #40]	@ (80088b8 <prvHeapInit+0xb8>)
 800888e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	685b      	ldr	r3, [r3, #4]
 8008894:	4a09      	ldr	r2, [pc, #36]	@ (80088bc <prvHeapInit+0xbc>)
 8008896:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008898:	4b09      	ldr	r3, [pc, #36]	@ (80088c0 <prvHeapInit+0xc0>)
 800889a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800889e:	601a      	str	r2, [r3, #0]
}
 80088a0:	bf00      	nop
 80088a2:	3714      	adds	r7, #20
 80088a4:	46bd      	mov	sp, r7
 80088a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088aa:	4770      	bx	lr
 80088ac:	20001440 	.word	0x20001440
 80088b0:	20005040 	.word	0x20005040
 80088b4:	20005048 	.word	0x20005048
 80088b8:	20005050 	.word	0x20005050
 80088bc:	2000504c 	.word	0x2000504c
 80088c0:	2000505c 	.word	0x2000505c

080088c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80088c4:	b480      	push	{r7}
 80088c6:	b085      	sub	sp, #20
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80088cc:	4b28      	ldr	r3, [pc, #160]	@ (8008970 <prvInsertBlockIntoFreeList+0xac>)
 80088ce:	60fb      	str	r3, [r7, #12]
 80088d0:	e002      	b.n	80088d8 <prvInsertBlockIntoFreeList+0x14>
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	60fb      	str	r3, [r7, #12]
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	687a      	ldr	r2, [r7, #4]
 80088de:	429a      	cmp	r2, r3
 80088e0:	d8f7      	bhi.n	80088d2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	685b      	ldr	r3, [r3, #4]
 80088ea:	68ba      	ldr	r2, [r7, #8]
 80088ec:	4413      	add	r3, r2
 80088ee:	687a      	ldr	r2, [r7, #4]
 80088f0:	429a      	cmp	r2, r3
 80088f2:	d108      	bne.n	8008906 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	685a      	ldr	r2, [r3, #4]
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	685b      	ldr	r3, [r3, #4]
 80088fc:	441a      	add	r2, r3
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	685b      	ldr	r3, [r3, #4]
 800890e:	68ba      	ldr	r2, [r7, #8]
 8008910:	441a      	add	r2, r3
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	429a      	cmp	r2, r3
 8008918:	d118      	bne.n	800894c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681a      	ldr	r2, [r3, #0]
 800891e:	4b15      	ldr	r3, [pc, #84]	@ (8008974 <prvInsertBlockIntoFreeList+0xb0>)
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	429a      	cmp	r2, r3
 8008924:	d00d      	beq.n	8008942 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	685a      	ldr	r2, [r3, #4]
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	441a      	add	r2, r3
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	681a      	ldr	r2, [r3, #0]
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	601a      	str	r2, [r3, #0]
 8008940:	e008      	b.n	8008954 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008942:	4b0c      	ldr	r3, [pc, #48]	@ (8008974 <prvInsertBlockIntoFreeList+0xb0>)
 8008944:	681a      	ldr	r2, [r3, #0]
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	601a      	str	r2, [r3, #0]
 800894a:	e003      	b.n	8008954 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681a      	ldr	r2, [r3, #0]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008954:	68fa      	ldr	r2, [r7, #12]
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	429a      	cmp	r2, r3
 800895a:	d002      	beq.n	8008962 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	687a      	ldr	r2, [r7, #4]
 8008960:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008962:	bf00      	nop
 8008964:	3714      	adds	r7, #20
 8008966:	46bd      	mov	sp, r7
 8008968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896c:	4770      	bx	lr
 800896e:	bf00      	nop
 8008970:	20005040 	.word	0x20005040
 8008974:	20005048 	.word	0x20005048

08008978 <__cvt>:
 8008978:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800897c:	ec57 6b10 	vmov	r6, r7, d0
 8008980:	2f00      	cmp	r7, #0
 8008982:	460c      	mov	r4, r1
 8008984:	4619      	mov	r1, r3
 8008986:	463b      	mov	r3, r7
 8008988:	bfbb      	ittet	lt
 800898a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800898e:	461f      	movlt	r7, r3
 8008990:	2300      	movge	r3, #0
 8008992:	232d      	movlt	r3, #45	@ 0x2d
 8008994:	700b      	strb	r3, [r1, #0]
 8008996:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008998:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800899c:	4691      	mov	r9, r2
 800899e:	f023 0820 	bic.w	r8, r3, #32
 80089a2:	bfbc      	itt	lt
 80089a4:	4632      	movlt	r2, r6
 80089a6:	4616      	movlt	r6, r2
 80089a8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80089ac:	d005      	beq.n	80089ba <__cvt+0x42>
 80089ae:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80089b2:	d100      	bne.n	80089b6 <__cvt+0x3e>
 80089b4:	3401      	adds	r4, #1
 80089b6:	2102      	movs	r1, #2
 80089b8:	e000      	b.n	80089bc <__cvt+0x44>
 80089ba:	2103      	movs	r1, #3
 80089bc:	ab03      	add	r3, sp, #12
 80089be:	9301      	str	r3, [sp, #4]
 80089c0:	ab02      	add	r3, sp, #8
 80089c2:	9300      	str	r3, [sp, #0]
 80089c4:	ec47 6b10 	vmov	d0, r6, r7
 80089c8:	4653      	mov	r3, sl
 80089ca:	4622      	mov	r2, r4
 80089cc:	f000 fdf4 	bl	80095b8 <_dtoa_r>
 80089d0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80089d4:	4605      	mov	r5, r0
 80089d6:	d119      	bne.n	8008a0c <__cvt+0x94>
 80089d8:	f019 0f01 	tst.w	r9, #1
 80089dc:	d00e      	beq.n	80089fc <__cvt+0x84>
 80089de:	eb00 0904 	add.w	r9, r0, r4
 80089e2:	2200      	movs	r2, #0
 80089e4:	2300      	movs	r3, #0
 80089e6:	4630      	mov	r0, r6
 80089e8:	4639      	mov	r1, r7
 80089ea:	f7f8 f88d 	bl	8000b08 <__aeabi_dcmpeq>
 80089ee:	b108      	cbz	r0, 80089f4 <__cvt+0x7c>
 80089f0:	f8cd 900c 	str.w	r9, [sp, #12]
 80089f4:	2230      	movs	r2, #48	@ 0x30
 80089f6:	9b03      	ldr	r3, [sp, #12]
 80089f8:	454b      	cmp	r3, r9
 80089fa:	d31e      	bcc.n	8008a3a <__cvt+0xc2>
 80089fc:	9b03      	ldr	r3, [sp, #12]
 80089fe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008a00:	1b5b      	subs	r3, r3, r5
 8008a02:	4628      	mov	r0, r5
 8008a04:	6013      	str	r3, [r2, #0]
 8008a06:	b004      	add	sp, #16
 8008a08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a0c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008a10:	eb00 0904 	add.w	r9, r0, r4
 8008a14:	d1e5      	bne.n	80089e2 <__cvt+0x6a>
 8008a16:	7803      	ldrb	r3, [r0, #0]
 8008a18:	2b30      	cmp	r3, #48	@ 0x30
 8008a1a:	d10a      	bne.n	8008a32 <__cvt+0xba>
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	2300      	movs	r3, #0
 8008a20:	4630      	mov	r0, r6
 8008a22:	4639      	mov	r1, r7
 8008a24:	f7f8 f870 	bl	8000b08 <__aeabi_dcmpeq>
 8008a28:	b918      	cbnz	r0, 8008a32 <__cvt+0xba>
 8008a2a:	f1c4 0401 	rsb	r4, r4, #1
 8008a2e:	f8ca 4000 	str.w	r4, [sl]
 8008a32:	f8da 3000 	ldr.w	r3, [sl]
 8008a36:	4499      	add	r9, r3
 8008a38:	e7d3      	b.n	80089e2 <__cvt+0x6a>
 8008a3a:	1c59      	adds	r1, r3, #1
 8008a3c:	9103      	str	r1, [sp, #12]
 8008a3e:	701a      	strb	r2, [r3, #0]
 8008a40:	e7d9      	b.n	80089f6 <__cvt+0x7e>

08008a42 <__exponent>:
 8008a42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a44:	2900      	cmp	r1, #0
 8008a46:	bfba      	itte	lt
 8008a48:	4249      	neglt	r1, r1
 8008a4a:	232d      	movlt	r3, #45	@ 0x2d
 8008a4c:	232b      	movge	r3, #43	@ 0x2b
 8008a4e:	2909      	cmp	r1, #9
 8008a50:	7002      	strb	r2, [r0, #0]
 8008a52:	7043      	strb	r3, [r0, #1]
 8008a54:	dd29      	ble.n	8008aaa <__exponent+0x68>
 8008a56:	f10d 0307 	add.w	r3, sp, #7
 8008a5a:	461d      	mov	r5, r3
 8008a5c:	270a      	movs	r7, #10
 8008a5e:	461a      	mov	r2, r3
 8008a60:	fbb1 f6f7 	udiv	r6, r1, r7
 8008a64:	fb07 1416 	mls	r4, r7, r6, r1
 8008a68:	3430      	adds	r4, #48	@ 0x30
 8008a6a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008a6e:	460c      	mov	r4, r1
 8008a70:	2c63      	cmp	r4, #99	@ 0x63
 8008a72:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8008a76:	4631      	mov	r1, r6
 8008a78:	dcf1      	bgt.n	8008a5e <__exponent+0x1c>
 8008a7a:	3130      	adds	r1, #48	@ 0x30
 8008a7c:	1e94      	subs	r4, r2, #2
 8008a7e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008a82:	1c41      	adds	r1, r0, #1
 8008a84:	4623      	mov	r3, r4
 8008a86:	42ab      	cmp	r3, r5
 8008a88:	d30a      	bcc.n	8008aa0 <__exponent+0x5e>
 8008a8a:	f10d 0309 	add.w	r3, sp, #9
 8008a8e:	1a9b      	subs	r3, r3, r2
 8008a90:	42ac      	cmp	r4, r5
 8008a92:	bf88      	it	hi
 8008a94:	2300      	movhi	r3, #0
 8008a96:	3302      	adds	r3, #2
 8008a98:	4403      	add	r3, r0
 8008a9a:	1a18      	subs	r0, r3, r0
 8008a9c:	b003      	add	sp, #12
 8008a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008aa0:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008aa4:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008aa8:	e7ed      	b.n	8008a86 <__exponent+0x44>
 8008aaa:	2330      	movs	r3, #48	@ 0x30
 8008aac:	3130      	adds	r1, #48	@ 0x30
 8008aae:	7083      	strb	r3, [r0, #2]
 8008ab0:	70c1      	strb	r1, [r0, #3]
 8008ab2:	1d03      	adds	r3, r0, #4
 8008ab4:	e7f1      	b.n	8008a9a <__exponent+0x58>
	...

08008ab8 <_printf_float>:
 8008ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008abc:	b08d      	sub	sp, #52	@ 0x34
 8008abe:	460c      	mov	r4, r1
 8008ac0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008ac4:	4616      	mov	r6, r2
 8008ac6:	461f      	mov	r7, r3
 8008ac8:	4605      	mov	r5, r0
 8008aca:	f000 fcd9 	bl	8009480 <_localeconv_r>
 8008ace:	6803      	ldr	r3, [r0, #0]
 8008ad0:	9304      	str	r3, [sp, #16]
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f7f7 fbec 	bl	80002b0 <strlen>
 8008ad8:	2300      	movs	r3, #0
 8008ada:	930a      	str	r3, [sp, #40]	@ 0x28
 8008adc:	f8d8 3000 	ldr.w	r3, [r8]
 8008ae0:	9005      	str	r0, [sp, #20]
 8008ae2:	3307      	adds	r3, #7
 8008ae4:	f023 0307 	bic.w	r3, r3, #7
 8008ae8:	f103 0208 	add.w	r2, r3, #8
 8008aec:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008af0:	f8d4 b000 	ldr.w	fp, [r4]
 8008af4:	f8c8 2000 	str.w	r2, [r8]
 8008af8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008afc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008b00:	9307      	str	r3, [sp, #28]
 8008b02:	f8cd 8018 	str.w	r8, [sp, #24]
 8008b06:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008b0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008b0e:	4b9c      	ldr	r3, [pc, #624]	@ (8008d80 <_printf_float+0x2c8>)
 8008b10:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008b14:	f7f8 f82a 	bl	8000b6c <__aeabi_dcmpun>
 8008b18:	bb70      	cbnz	r0, 8008b78 <_printf_float+0xc0>
 8008b1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008b1e:	4b98      	ldr	r3, [pc, #608]	@ (8008d80 <_printf_float+0x2c8>)
 8008b20:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008b24:	f7f8 f804 	bl	8000b30 <__aeabi_dcmple>
 8008b28:	bb30      	cbnz	r0, 8008b78 <_printf_float+0xc0>
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	4640      	mov	r0, r8
 8008b30:	4649      	mov	r1, r9
 8008b32:	f7f7 fff3 	bl	8000b1c <__aeabi_dcmplt>
 8008b36:	b110      	cbz	r0, 8008b3e <_printf_float+0x86>
 8008b38:	232d      	movs	r3, #45	@ 0x2d
 8008b3a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b3e:	4a91      	ldr	r2, [pc, #580]	@ (8008d84 <_printf_float+0x2cc>)
 8008b40:	4b91      	ldr	r3, [pc, #580]	@ (8008d88 <_printf_float+0x2d0>)
 8008b42:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008b46:	bf8c      	ite	hi
 8008b48:	4690      	movhi	r8, r2
 8008b4a:	4698      	movls	r8, r3
 8008b4c:	2303      	movs	r3, #3
 8008b4e:	6123      	str	r3, [r4, #16]
 8008b50:	f02b 0304 	bic.w	r3, fp, #4
 8008b54:	6023      	str	r3, [r4, #0]
 8008b56:	f04f 0900 	mov.w	r9, #0
 8008b5a:	9700      	str	r7, [sp, #0]
 8008b5c:	4633      	mov	r3, r6
 8008b5e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008b60:	4621      	mov	r1, r4
 8008b62:	4628      	mov	r0, r5
 8008b64:	f000 f9d2 	bl	8008f0c <_printf_common>
 8008b68:	3001      	adds	r0, #1
 8008b6a:	f040 808d 	bne.w	8008c88 <_printf_float+0x1d0>
 8008b6e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008b72:	b00d      	add	sp, #52	@ 0x34
 8008b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b78:	4642      	mov	r2, r8
 8008b7a:	464b      	mov	r3, r9
 8008b7c:	4640      	mov	r0, r8
 8008b7e:	4649      	mov	r1, r9
 8008b80:	f7f7 fff4 	bl	8000b6c <__aeabi_dcmpun>
 8008b84:	b140      	cbz	r0, 8008b98 <_printf_float+0xe0>
 8008b86:	464b      	mov	r3, r9
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	bfbc      	itt	lt
 8008b8c:	232d      	movlt	r3, #45	@ 0x2d
 8008b8e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008b92:	4a7e      	ldr	r2, [pc, #504]	@ (8008d8c <_printf_float+0x2d4>)
 8008b94:	4b7e      	ldr	r3, [pc, #504]	@ (8008d90 <_printf_float+0x2d8>)
 8008b96:	e7d4      	b.n	8008b42 <_printf_float+0x8a>
 8008b98:	6863      	ldr	r3, [r4, #4]
 8008b9a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008b9e:	9206      	str	r2, [sp, #24]
 8008ba0:	1c5a      	adds	r2, r3, #1
 8008ba2:	d13b      	bne.n	8008c1c <_printf_float+0x164>
 8008ba4:	2306      	movs	r3, #6
 8008ba6:	6063      	str	r3, [r4, #4]
 8008ba8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008bac:	2300      	movs	r3, #0
 8008bae:	6022      	str	r2, [r4, #0]
 8008bb0:	9303      	str	r3, [sp, #12]
 8008bb2:	ab0a      	add	r3, sp, #40	@ 0x28
 8008bb4:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008bb8:	ab09      	add	r3, sp, #36	@ 0x24
 8008bba:	9300      	str	r3, [sp, #0]
 8008bbc:	6861      	ldr	r1, [r4, #4]
 8008bbe:	ec49 8b10 	vmov	d0, r8, r9
 8008bc2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008bc6:	4628      	mov	r0, r5
 8008bc8:	f7ff fed6 	bl	8008978 <__cvt>
 8008bcc:	9b06      	ldr	r3, [sp, #24]
 8008bce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008bd0:	2b47      	cmp	r3, #71	@ 0x47
 8008bd2:	4680      	mov	r8, r0
 8008bd4:	d129      	bne.n	8008c2a <_printf_float+0x172>
 8008bd6:	1cc8      	adds	r0, r1, #3
 8008bd8:	db02      	blt.n	8008be0 <_printf_float+0x128>
 8008bda:	6863      	ldr	r3, [r4, #4]
 8008bdc:	4299      	cmp	r1, r3
 8008bde:	dd41      	ble.n	8008c64 <_printf_float+0x1ac>
 8008be0:	f1aa 0a02 	sub.w	sl, sl, #2
 8008be4:	fa5f fa8a 	uxtb.w	sl, sl
 8008be8:	3901      	subs	r1, #1
 8008bea:	4652      	mov	r2, sl
 8008bec:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008bf0:	9109      	str	r1, [sp, #36]	@ 0x24
 8008bf2:	f7ff ff26 	bl	8008a42 <__exponent>
 8008bf6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008bf8:	1813      	adds	r3, r2, r0
 8008bfa:	2a01      	cmp	r2, #1
 8008bfc:	4681      	mov	r9, r0
 8008bfe:	6123      	str	r3, [r4, #16]
 8008c00:	dc02      	bgt.n	8008c08 <_printf_float+0x150>
 8008c02:	6822      	ldr	r2, [r4, #0]
 8008c04:	07d2      	lsls	r2, r2, #31
 8008c06:	d501      	bpl.n	8008c0c <_printf_float+0x154>
 8008c08:	3301      	adds	r3, #1
 8008c0a:	6123      	str	r3, [r4, #16]
 8008c0c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d0a2      	beq.n	8008b5a <_printf_float+0xa2>
 8008c14:	232d      	movs	r3, #45	@ 0x2d
 8008c16:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c1a:	e79e      	b.n	8008b5a <_printf_float+0xa2>
 8008c1c:	9a06      	ldr	r2, [sp, #24]
 8008c1e:	2a47      	cmp	r2, #71	@ 0x47
 8008c20:	d1c2      	bne.n	8008ba8 <_printf_float+0xf0>
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d1c0      	bne.n	8008ba8 <_printf_float+0xf0>
 8008c26:	2301      	movs	r3, #1
 8008c28:	e7bd      	b.n	8008ba6 <_printf_float+0xee>
 8008c2a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008c2e:	d9db      	bls.n	8008be8 <_printf_float+0x130>
 8008c30:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008c34:	d118      	bne.n	8008c68 <_printf_float+0x1b0>
 8008c36:	2900      	cmp	r1, #0
 8008c38:	6863      	ldr	r3, [r4, #4]
 8008c3a:	dd0b      	ble.n	8008c54 <_printf_float+0x19c>
 8008c3c:	6121      	str	r1, [r4, #16]
 8008c3e:	b913      	cbnz	r3, 8008c46 <_printf_float+0x18e>
 8008c40:	6822      	ldr	r2, [r4, #0]
 8008c42:	07d0      	lsls	r0, r2, #31
 8008c44:	d502      	bpl.n	8008c4c <_printf_float+0x194>
 8008c46:	3301      	adds	r3, #1
 8008c48:	440b      	add	r3, r1
 8008c4a:	6123      	str	r3, [r4, #16]
 8008c4c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008c4e:	f04f 0900 	mov.w	r9, #0
 8008c52:	e7db      	b.n	8008c0c <_printf_float+0x154>
 8008c54:	b913      	cbnz	r3, 8008c5c <_printf_float+0x1a4>
 8008c56:	6822      	ldr	r2, [r4, #0]
 8008c58:	07d2      	lsls	r2, r2, #31
 8008c5a:	d501      	bpl.n	8008c60 <_printf_float+0x1a8>
 8008c5c:	3302      	adds	r3, #2
 8008c5e:	e7f4      	b.n	8008c4a <_printf_float+0x192>
 8008c60:	2301      	movs	r3, #1
 8008c62:	e7f2      	b.n	8008c4a <_printf_float+0x192>
 8008c64:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008c68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c6a:	4299      	cmp	r1, r3
 8008c6c:	db05      	blt.n	8008c7a <_printf_float+0x1c2>
 8008c6e:	6823      	ldr	r3, [r4, #0]
 8008c70:	6121      	str	r1, [r4, #16]
 8008c72:	07d8      	lsls	r0, r3, #31
 8008c74:	d5ea      	bpl.n	8008c4c <_printf_float+0x194>
 8008c76:	1c4b      	adds	r3, r1, #1
 8008c78:	e7e7      	b.n	8008c4a <_printf_float+0x192>
 8008c7a:	2900      	cmp	r1, #0
 8008c7c:	bfd4      	ite	le
 8008c7e:	f1c1 0202 	rsble	r2, r1, #2
 8008c82:	2201      	movgt	r2, #1
 8008c84:	4413      	add	r3, r2
 8008c86:	e7e0      	b.n	8008c4a <_printf_float+0x192>
 8008c88:	6823      	ldr	r3, [r4, #0]
 8008c8a:	055a      	lsls	r2, r3, #21
 8008c8c:	d407      	bmi.n	8008c9e <_printf_float+0x1e6>
 8008c8e:	6923      	ldr	r3, [r4, #16]
 8008c90:	4642      	mov	r2, r8
 8008c92:	4631      	mov	r1, r6
 8008c94:	4628      	mov	r0, r5
 8008c96:	47b8      	blx	r7
 8008c98:	3001      	adds	r0, #1
 8008c9a:	d12b      	bne.n	8008cf4 <_printf_float+0x23c>
 8008c9c:	e767      	b.n	8008b6e <_printf_float+0xb6>
 8008c9e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008ca2:	f240 80dd 	bls.w	8008e60 <_printf_float+0x3a8>
 8008ca6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008caa:	2200      	movs	r2, #0
 8008cac:	2300      	movs	r3, #0
 8008cae:	f7f7 ff2b 	bl	8000b08 <__aeabi_dcmpeq>
 8008cb2:	2800      	cmp	r0, #0
 8008cb4:	d033      	beq.n	8008d1e <_printf_float+0x266>
 8008cb6:	4a37      	ldr	r2, [pc, #220]	@ (8008d94 <_printf_float+0x2dc>)
 8008cb8:	2301      	movs	r3, #1
 8008cba:	4631      	mov	r1, r6
 8008cbc:	4628      	mov	r0, r5
 8008cbe:	47b8      	blx	r7
 8008cc0:	3001      	adds	r0, #1
 8008cc2:	f43f af54 	beq.w	8008b6e <_printf_float+0xb6>
 8008cc6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008cca:	4543      	cmp	r3, r8
 8008ccc:	db02      	blt.n	8008cd4 <_printf_float+0x21c>
 8008cce:	6823      	ldr	r3, [r4, #0]
 8008cd0:	07d8      	lsls	r0, r3, #31
 8008cd2:	d50f      	bpl.n	8008cf4 <_printf_float+0x23c>
 8008cd4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008cd8:	4631      	mov	r1, r6
 8008cda:	4628      	mov	r0, r5
 8008cdc:	47b8      	blx	r7
 8008cde:	3001      	adds	r0, #1
 8008ce0:	f43f af45 	beq.w	8008b6e <_printf_float+0xb6>
 8008ce4:	f04f 0900 	mov.w	r9, #0
 8008ce8:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8008cec:	f104 0a1a 	add.w	sl, r4, #26
 8008cf0:	45c8      	cmp	r8, r9
 8008cf2:	dc09      	bgt.n	8008d08 <_printf_float+0x250>
 8008cf4:	6823      	ldr	r3, [r4, #0]
 8008cf6:	079b      	lsls	r3, r3, #30
 8008cf8:	f100 8103 	bmi.w	8008f02 <_printf_float+0x44a>
 8008cfc:	68e0      	ldr	r0, [r4, #12]
 8008cfe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008d00:	4298      	cmp	r0, r3
 8008d02:	bfb8      	it	lt
 8008d04:	4618      	movlt	r0, r3
 8008d06:	e734      	b.n	8008b72 <_printf_float+0xba>
 8008d08:	2301      	movs	r3, #1
 8008d0a:	4652      	mov	r2, sl
 8008d0c:	4631      	mov	r1, r6
 8008d0e:	4628      	mov	r0, r5
 8008d10:	47b8      	blx	r7
 8008d12:	3001      	adds	r0, #1
 8008d14:	f43f af2b 	beq.w	8008b6e <_printf_float+0xb6>
 8008d18:	f109 0901 	add.w	r9, r9, #1
 8008d1c:	e7e8      	b.n	8008cf0 <_printf_float+0x238>
 8008d1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	dc39      	bgt.n	8008d98 <_printf_float+0x2e0>
 8008d24:	4a1b      	ldr	r2, [pc, #108]	@ (8008d94 <_printf_float+0x2dc>)
 8008d26:	2301      	movs	r3, #1
 8008d28:	4631      	mov	r1, r6
 8008d2a:	4628      	mov	r0, r5
 8008d2c:	47b8      	blx	r7
 8008d2e:	3001      	adds	r0, #1
 8008d30:	f43f af1d 	beq.w	8008b6e <_printf_float+0xb6>
 8008d34:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008d38:	ea59 0303 	orrs.w	r3, r9, r3
 8008d3c:	d102      	bne.n	8008d44 <_printf_float+0x28c>
 8008d3e:	6823      	ldr	r3, [r4, #0]
 8008d40:	07d9      	lsls	r1, r3, #31
 8008d42:	d5d7      	bpl.n	8008cf4 <_printf_float+0x23c>
 8008d44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d48:	4631      	mov	r1, r6
 8008d4a:	4628      	mov	r0, r5
 8008d4c:	47b8      	blx	r7
 8008d4e:	3001      	adds	r0, #1
 8008d50:	f43f af0d 	beq.w	8008b6e <_printf_float+0xb6>
 8008d54:	f04f 0a00 	mov.w	sl, #0
 8008d58:	f104 0b1a 	add.w	fp, r4, #26
 8008d5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d5e:	425b      	negs	r3, r3
 8008d60:	4553      	cmp	r3, sl
 8008d62:	dc01      	bgt.n	8008d68 <_printf_float+0x2b0>
 8008d64:	464b      	mov	r3, r9
 8008d66:	e793      	b.n	8008c90 <_printf_float+0x1d8>
 8008d68:	2301      	movs	r3, #1
 8008d6a:	465a      	mov	r2, fp
 8008d6c:	4631      	mov	r1, r6
 8008d6e:	4628      	mov	r0, r5
 8008d70:	47b8      	blx	r7
 8008d72:	3001      	adds	r0, #1
 8008d74:	f43f aefb 	beq.w	8008b6e <_printf_float+0xb6>
 8008d78:	f10a 0a01 	add.w	sl, sl, #1
 8008d7c:	e7ee      	b.n	8008d5c <_printf_float+0x2a4>
 8008d7e:	bf00      	nop
 8008d80:	7fefffff 	.word	0x7fefffff
 8008d84:	0800c4c0 	.word	0x0800c4c0
 8008d88:	0800c4bc 	.word	0x0800c4bc
 8008d8c:	0800c4c8 	.word	0x0800c4c8
 8008d90:	0800c4c4 	.word	0x0800c4c4
 8008d94:	0800c4cc 	.word	0x0800c4cc
 8008d98:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008d9a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008d9e:	4553      	cmp	r3, sl
 8008da0:	bfa8      	it	ge
 8008da2:	4653      	movge	r3, sl
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	4699      	mov	r9, r3
 8008da8:	dc36      	bgt.n	8008e18 <_printf_float+0x360>
 8008daa:	f04f 0b00 	mov.w	fp, #0
 8008dae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008db2:	f104 021a 	add.w	r2, r4, #26
 8008db6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008db8:	9306      	str	r3, [sp, #24]
 8008dba:	eba3 0309 	sub.w	r3, r3, r9
 8008dbe:	455b      	cmp	r3, fp
 8008dc0:	dc31      	bgt.n	8008e26 <_printf_float+0x36e>
 8008dc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008dc4:	459a      	cmp	sl, r3
 8008dc6:	dc3a      	bgt.n	8008e3e <_printf_float+0x386>
 8008dc8:	6823      	ldr	r3, [r4, #0]
 8008dca:	07da      	lsls	r2, r3, #31
 8008dcc:	d437      	bmi.n	8008e3e <_printf_float+0x386>
 8008dce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008dd0:	ebaa 0903 	sub.w	r9, sl, r3
 8008dd4:	9b06      	ldr	r3, [sp, #24]
 8008dd6:	ebaa 0303 	sub.w	r3, sl, r3
 8008dda:	4599      	cmp	r9, r3
 8008ddc:	bfa8      	it	ge
 8008dde:	4699      	movge	r9, r3
 8008de0:	f1b9 0f00 	cmp.w	r9, #0
 8008de4:	dc33      	bgt.n	8008e4e <_printf_float+0x396>
 8008de6:	f04f 0800 	mov.w	r8, #0
 8008dea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008dee:	f104 0b1a 	add.w	fp, r4, #26
 8008df2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008df4:	ebaa 0303 	sub.w	r3, sl, r3
 8008df8:	eba3 0309 	sub.w	r3, r3, r9
 8008dfc:	4543      	cmp	r3, r8
 8008dfe:	f77f af79 	ble.w	8008cf4 <_printf_float+0x23c>
 8008e02:	2301      	movs	r3, #1
 8008e04:	465a      	mov	r2, fp
 8008e06:	4631      	mov	r1, r6
 8008e08:	4628      	mov	r0, r5
 8008e0a:	47b8      	blx	r7
 8008e0c:	3001      	adds	r0, #1
 8008e0e:	f43f aeae 	beq.w	8008b6e <_printf_float+0xb6>
 8008e12:	f108 0801 	add.w	r8, r8, #1
 8008e16:	e7ec      	b.n	8008df2 <_printf_float+0x33a>
 8008e18:	4642      	mov	r2, r8
 8008e1a:	4631      	mov	r1, r6
 8008e1c:	4628      	mov	r0, r5
 8008e1e:	47b8      	blx	r7
 8008e20:	3001      	adds	r0, #1
 8008e22:	d1c2      	bne.n	8008daa <_printf_float+0x2f2>
 8008e24:	e6a3      	b.n	8008b6e <_printf_float+0xb6>
 8008e26:	2301      	movs	r3, #1
 8008e28:	4631      	mov	r1, r6
 8008e2a:	4628      	mov	r0, r5
 8008e2c:	9206      	str	r2, [sp, #24]
 8008e2e:	47b8      	blx	r7
 8008e30:	3001      	adds	r0, #1
 8008e32:	f43f ae9c 	beq.w	8008b6e <_printf_float+0xb6>
 8008e36:	9a06      	ldr	r2, [sp, #24]
 8008e38:	f10b 0b01 	add.w	fp, fp, #1
 8008e3c:	e7bb      	b.n	8008db6 <_printf_float+0x2fe>
 8008e3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e42:	4631      	mov	r1, r6
 8008e44:	4628      	mov	r0, r5
 8008e46:	47b8      	blx	r7
 8008e48:	3001      	adds	r0, #1
 8008e4a:	d1c0      	bne.n	8008dce <_printf_float+0x316>
 8008e4c:	e68f      	b.n	8008b6e <_printf_float+0xb6>
 8008e4e:	9a06      	ldr	r2, [sp, #24]
 8008e50:	464b      	mov	r3, r9
 8008e52:	4442      	add	r2, r8
 8008e54:	4631      	mov	r1, r6
 8008e56:	4628      	mov	r0, r5
 8008e58:	47b8      	blx	r7
 8008e5a:	3001      	adds	r0, #1
 8008e5c:	d1c3      	bne.n	8008de6 <_printf_float+0x32e>
 8008e5e:	e686      	b.n	8008b6e <_printf_float+0xb6>
 8008e60:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008e64:	f1ba 0f01 	cmp.w	sl, #1
 8008e68:	dc01      	bgt.n	8008e6e <_printf_float+0x3b6>
 8008e6a:	07db      	lsls	r3, r3, #31
 8008e6c:	d536      	bpl.n	8008edc <_printf_float+0x424>
 8008e6e:	2301      	movs	r3, #1
 8008e70:	4642      	mov	r2, r8
 8008e72:	4631      	mov	r1, r6
 8008e74:	4628      	mov	r0, r5
 8008e76:	47b8      	blx	r7
 8008e78:	3001      	adds	r0, #1
 8008e7a:	f43f ae78 	beq.w	8008b6e <_printf_float+0xb6>
 8008e7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e82:	4631      	mov	r1, r6
 8008e84:	4628      	mov	r0, r5
 8008e86:	47b8      	blx	r7
 8008e88:	3001      	adds	r0, #1
 8008e8a:	f43f ae70 	beq.w	8008b6e <_printf_float+0xb6>
 8008e8e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008e92:	2200      	movs	r2, #0
 8008e94:	2300      	movs	r3, #0
 8008e96:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8008e9a:	f7f7 fe35 	bl	8000b08 <__aeabi_dcmpeq>
 8008e9e:	b9c0      	cbnz	r0, 8008ed2 <_printf_float+0x41a>
 8008ea0:	4653      	mov	r3, sl
 8008ea2:	f108 0201 	add.w	r2, r8, #1
 8008ea6:	4631      	mov	r1, r6
 8008ea8:	4628      	mov	r0, r5
 8008eaa:	47b8      	blx	r7
 8008eac:	3001      	adds	r0, #1
 8008eae:	d10c      	bne.n	8008eca <_printf_float+0x412>
 8008eb0:	e65d      	b.n	8008b6e <_printf_float+0xb6>
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	465a      	mov	r2, fp
 8008eb6:	4631      	mov	r1, r6
 8008eb8:	4628      	mov	r0, r5
 8008eba:	47b8      	blx	r7
 8008ebc:	3001      	adds	r0, #1
 8008ebe:	f43f ae56 	beq.w	8008b6e <_printf_float+0xb6>
 8008ec2:	f108 0801 	add.w	r8, r8, #1
 8008ec6:	45d0      	cmp	r8, sl
 8008ec8:	dbf3      	blt.n	8008eb2 <_printf_float+0x3fa>
 8008eca:	464b      	mov	r3, r9
 8008ecc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008ed0:	e6df      	b.n	8008c92 <_printf_float+0x1da>
 8008ed2:	f04f 0800 	mov.w	r8, #0
 8008ed6:	f104 0b1a 	add.w	fp, r4, #26
 8008eda:	e7f4      	b.n	8008ec6 <_printf_float+0x40e>
 8008edc:	2301      	movs	r3, #1
 8008ede:	4642      	mov	r2, r8
 8008ee0:	e7e1      	b.n	8008ea6 <_printf_float+0x3ee>
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	464a      	mov	r2, r9
 8008ee6:	4631      	mov	r1, r6
 8008ee8:	4628      	mov	r0, r5
 8008eea:	47b8      	blx	r7
 8008eec:	3001      	adds	r0, #1
 8008eee:	f43f ae3e 	beq.w	8008b6e <_printf_float+0xb6>
 8008ef2:	f108 0801 	add.w	r8, r8, #1
 8008ef6:	68e3      	ldr	r3, [r4, #12]
 8008ef8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008efa:	1a5b      	subs	r3, r3, r1
 8008efc:	4543      	cmp	r3, r8
 8008efe:	dcf0      	bgt.n	8008ee2 <_printf_float+0x42a>
 8008f00:	e6fc      	b.n	8008cfc <_printf_float+0x244>
 8008f02:	f04f 0800 	mov.w	r8, #0
 8008f06:	f104 0919 	add.w	r9, r4, #25
 8008f0a:	e7f4      	b.n	8008ef6 <_printf_float+0x43e>

08008f0c <_printf_common>:
 8008f0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f10:	4616      	mov	r6, r2
 8008f12:	4698      	mov	r8, r3
 8008f14:	688a      	ldr	r2, [r1, #8]
 8008f16:	690b      	ldr	r3, [r1, #16]
 8008f18:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	bfb8      	it	lt
 8008f20:	4613      	movlt	r3, r2
 8008f22:	6033      	str	r3, [r6, #0]
 8008f24:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008f28:	4607      	mov	r7, r0
 8008f2a:	460c      	mov	r4, r1
 8008f2c:	b10a      	cbz	r2, 8008f32 <_printf_common+0x26>
 8008f2e:	3301      	adds	r3, #1
 8008f30:	6033      	str	r3, [r6, #0]
 8008f32:	6823      	ldr	r3, [r4, #0]
 8008f34:	0699      	lsls	r1, r3, #26
 8008f36:	bf42      	ittt	mi
 8008f38:	6833      	ldrmi	r3, [r6, #0]
 8008f3a:	3302      	addmi	r3, #2
 8008f3c:	6033      	strmi	r3, [r6, #0]
 8008f3e:	6825      	ldr	r5, [r4, #0]
 8008f40:	f015 0506 	ands.w	r5, r5, #6
 8008f44:	d106      	bne.n	8008f54 <_printf_common+0x48>
 8008f46:	f104 0a19 	add.w	sl, r4, #25
 8008f4a:	68e3      	ldr	r3, [r4, #12]
 8008f4c:	6832      	ldr	r2, [r6, #0]
 8008f4e:	1a9b      	subs	r3, r3, r2
 8008f50:	42ab      	cmp	r3, r5
 8008f52:	dc26      	bgt.n	8008fa2 <_printf_common+0x96>
 8008f54:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008f58:	6822      	ldr	r2, [r4, #0]
 8008f5a:	3b00      	subs	r3, #0
 8008f5c:	bf18      	it	ne
 8008f5e:	2301      	movne	r3, #1
 8008f60:	0692      	lsls	r2, r2, #26
 8008f62:	d42b      	bmi.n	8008fbc <_printf_common+0xb0>
 8008f64:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008f68:	4641      	mov	r1, r8
 8008f6a:	4638      	mov	r0, r7
 8008f6c:	47c8      	blx	r9
 8008f6e:	3001      	adds	r0, #1
 8008f70:	d01e      	beq.n	8008fb0 <_printf_common+0xa4>
 8008f72:	6823      	ldr	r3, [r4, #0]
 8008f74:	6922      	ldr	r2, [r4, #16]
 8008f76:	f003 0306 	and.w	r3, r3, #6
 8008f7a:	2b04      	cmp	r3, #4
 8008f7c:	bf02      	ittt	eq
 8008f7e:	68e5      	ldreq	r5, [r4, #12]
 8008f80:	6833      	ldreq	r3, [r6, #0]
 8008f82:	1aed      	subeq	r5, r5, r3
 8008f84:	68a3      	ldr	r3, [r4, #8]
 8008f86:	bf0c      	ite	eq
 8008f88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008f8c:	2500      	movne	r5, #0
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	bfc4      	itt	gt
 8008f92:	1a9b      	subgt	r3, r3, r2
 8008f94:	18ed      	addgt	r5, r5, r3
 8008f96:	2600      	movs	r6, #0
 8008f98:	341a      	adds	r4, #26
 8008f9a:	42b5      	cmp	r5, r6
 8008f9c:	d11a      	bne.n	8008fd4 <_printf_common+0xc8>
 8008f9e:	2000      	movs	r0, #0
 8008fa0:	e008      	b.n	8008fb4 <_printf_common+0xa8>
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	4652      	mov	r2, sl
 8008fa6:	4641      	mov	r1, r8
 8008fa8:	4638      	mov	r0, r7
 8008faa:	47c8      	blx	r9
 8008fac:	3001      	adds	r0, #1
 8008fae:	d103      	bne.n	8008fb8 <_printf_common+0xac>
 8008fb0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008fb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fb8:	3501      	adds	r5, #1
 8008fba:	e7c6      	b.n	8008f4a <_printf_common+0x3e>
 8008fbc:	18e1      	adds	r1, r4, r3
 8008fbe:	1c5a      	adds	r2, r3, #1
 8008fc0:	2030      	movs	r0, #48	@ 0x30
 8008fc2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008fc6:	4422      	add	r2, r4
 8008fc8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008fcc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008fd0:	3302      	adds	r3, #2
 8008fd2:	e7c7      	b.n	8008f64 <_printf_common+0x58>
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	4622      	mov	r2, r4
 8008fd8:	4641      	mov	r1, r8
 8008fda:	4638      	mov	r0, r7
 8008fdc:	47c8      	blx	r9
 8008fde:	3001      	adds	r0, #1
 8008fe0:	d0e6      	beq.n	8008fb0 <_printf_common+0xa4>
 8008fe2:	3601      	adds	r6, #1
 8008fe4:	e7d9      	b.n	8008f9a <_printf_common+0x8e>
	...

08008fe8 <_printf_i>:
 8008fe8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008fec:	7e0f      	ldrb	r7, [r1, #24]
 8008fee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008ff0:	2f78      	cmp	r7, #120	@ 0x78
 8008ff2:	4691      	mov	r9, r2
 8008ff4:	4680      	mov	r8, r0
 8008ff6:	460c      	mov	r4, r1
 8008ff8:	469a      	mov	sl, r3
 8008ffa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008ffe:	d807      	bhi.n	8009010 <_printf_i+0x28>
 8009000:	2f62      	cmp	r7, #98	@ 0x62
 8009002:	d80a      	bhi.n	800901a <_printf_i+0x32>
 8009004:	2f00      	cmp	r7, #0
 8009006:	f000 80d1 	beq.w	80091ac <_printf_i+0x1c4>
 800900a:	2f58      	cmp	r7, #88	@ 0x58
 800900c:	f000 80b8 	beq.w	8009180 <_printf_i+0x198>
 8009010:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009014:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009018:	e03a      	b.n	8009090 <_printf_i+0xa8>
 800901a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800901e:	2b15      	cmp	r3, #21
 8009020:	d8f6      	bhi.n	8009010 <_printf_i+0x28>
 8009022:	a101      	add	r1, pc, #4	@ (adr r1, 8009028 <_printf_i+0x40>)
 8009024:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009028:	08009081 	.word	0x08009081
 800902c:	08009095 	.word	0x08009095
 8009030:	08009011 	.word	0x08009011
 8009034:	08009011 	.word	0x08009011
 8009038:	08009011 	.word	0x08009011
 800903c:	08009011 	.word	0x08009011
 8009040:	08009095 	.word	0x08009095
 8009044:	08009011 	.word	0x08009011
 8009048:	08009011 	.word	0x08009011
 800904c:	08009011 	.word	0x08009011
 8009050:	08009011 	.word	0x08009011
 8009054:	08009193 	.word	0x08009193
 8009058:	080090bf 	.word	0x080090bf
 800905c:	0800914d 	.word	0x0800914d
 8009060:	08009011 	.word	0x08009011
 8009064:	08009011 	.word	0x08009011
 8009068:	080091b5 	.word	0x080091b5
 800906c:	08009011 	.word	0x08009011
 8009070:	080090bf 	.word	0x080090bf
 8009074:	08009011 	.word	0x08009011
 8009078:	08009011 	.word	0x08009011
 800907c:	08009155 	.word	0x08009155
 8009080:	6833      	ldr	r3, [r6, #0]
 8009082:	1d1a      	adds	r2, r3, #4
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	6032      	str	r2, [r6, #0]
 8009088:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800908c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009090:	2301      	movs	r3, #1
 8009092:	e09c      	b.n	80091ce <_printf_i+0x1e6>
 8009094:	6833      	ldr	r3, [r6, #0]
 8009096:	6820      	ldr	r0, [r4, #0]
 8009098:	1d19      	adds	r1, r3, #4
 800909a:	6031      	str	r1, [r6, #0]
 800909c:	0606      	lsls	r6, r0, #24
 800909e:	d501      	bpl.n	80090a4 <_printf_i+0xbc>
 80090a0:	681d      	ldr	r5, [r3, #0]
 80090a2:	e003      	b.n	80090ac <_printf_i+0xc4>
 80090a4:	0645      	lsls	r5, r0, #25
 80090a6:	d5fb      	bpl.n	80090a0 <_printf_i+0xb8>
 80090a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80090ac:	2d00      	cmp	r5, #0
 80090ae:	da03      	bge.n	80090b8 <_printf_i+0xd0>
 80090b0:	232d      	movs	r3, #45	@ 0x2d
 80090b2:	426d      	negs	r5, r5
 80090b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80090b8:	4858      	ldr	r0, [pc, #352]	@ (800921c <_printf_i+0x234>)
 80090ba:	230a      	movs	r3, #10
 80090bc:	e011      	b.n	80090e2 <_printf_i+0xfa>
 80090be:	6821      	ldr	r1, [r4, #0]
 80090c0:	6833      	ldr	r3, [r6, #0]
 80090c2:	0608      	lsls	r0, r1, #24
 80090c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80090c8:	d402      	bmi.n	80090d0 <_printf_i+0xe8>
 80090ca:	0649      	lsls	r1, r1, #25
 80090cc:	bf48      	it	mi
 80090ce:	b2ad      	uxthmi	r5, r5
 80090d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80090d2:	4852      	ldr	r0, [pc, #328]	@ (800921c <_printf_i+0x234>)
 80090d4:	6033      	str	r3, [r6, #0]
 80090d6:	bf14      	ite	ne
 80090d8:	230a      	movne	r3, #10
 80090da:	2308      	moveq	r3, #8
 80090dc:	2100      	movs	r1, #0
 80090de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80090e2:	6866      	ldr	r6, [r4, #4]
 80090e4:	60a6      	str	r6, [r4, #8]
 80090e6:	2e00      	cmp	r6, #0
 80090e8:	db05      	blt.n	80090f6 <_printf_i+0x10e>
 80090ea:	6821      	ldr	r1, [r4, #0]
 80090ec:	432e      	orrs	r6, r5
 80090ee:	f021 0104 	bic.w	r1, r1, #4
 80090f2:	6021      	str	r1, [r4, #0]
 80090f4:	d04b      	beq.n	800918e <_printf_i+0x1a6>
 80090f6:	4616      	mov	r6, r2
 80090f8:	fbb5 f1f3 	udiv	r1, r5, r3
 80090fc:	fb03 5711 	mls	r7, r3, r1, r5
 8009100:	5dc7      	ldrb	r7, [r0, r7]
 8009102:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009106:	462f      	mov	r7, r5
 8009108:	42bb      	cmp	r3, r7
 800910a:	460d      	mov	r5, r1
 800910c:	d9f4      	bls.n	80090f8 <_printf_i+0x110>
 800910e:	2b08      	cmp	r3, #8
 8009110:	d10b      	bne.n	800912a <_printf_i+0x142>
 8009112:	6823      	ldr	r3, [r4, #0]
 8009114:	07df      	lsls	r7, r3, #31
 8009116:	d508      	bpl.n	800912a <_printf_i+0x142>
 8009118:	6923      	ldr	r3, [r4, #16]
 800911a:	6861      	ldr	r1, [r4, #4]
 800911c:	4299      	cmp	r1, r3
 800911e:	bfde      	ittt	le
 8009120:	2330      	movle	r3, #48	@ 0x30
 8009122:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009126:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800912a:	1b92      	subs	r2, r2, r6
 800912c:	6122      	str	r2, [r4, #16]
 800912e:	f8cd a000 	str.w	sl, [sp]
 8009132:	464b      	mov	r3, r9
 8009134:	aa03      	add	r2, sp, #12
 8009136:	4621      	mov	r1, r4
 8009138:	4640      	mov	r0, r8
 800913a:	f7ff fee7 	bl	8008f0c <_printf_common>
 800913e:	3001      	adds	r0, #1
 8009140:	d14a      	bne.n	80091d8 <_printf_i+0x1f0>
 8009142:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009146:	b004      	add	sp, #16
 8009148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800914c:	6823      	ldr	r3, [r4, #0]
 800914e:	f043 0320 	orr.w	r3, r3, #32
 8009152:	6023      	str	r3, [r4, #0]
 8009154:	4832      	ldr	r0, [pc, #200]	@ (8009220 <_printf_i+0x238>)
 8009156:	2778      	movs	r7, #120	@ 0x78
 8009158:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800915c:	6823      	ldr	r3, [r4, #0]
 800915e:	6831      	ldr	r1, [r6, #0]
 8009160:	061f      	lsls	r7, r3, #24
 8009162:	f851 5b04 	ldr.w	r5, [r1], #4
 8009166:	d402      	bmi.n	800916e <_printf_i+0x186>
 8009168:	065f      	lsls	r7, r3, #25
 800916a:	bf48      	it	mi
 800916c:	b2ad      	uxthmi	r5, r5
 800916e:	6031      	str	r1, [r6, #0]
 8009170:	07d9      	lsls	r1, r3, #31
 8009172:	bf44      	itt	mi
 8009174:	f043 0320 	orrmi.w	r3, r3, #32
 8009178:	6023      	strmi	r3, [r4, #0]
 800917a:	b11d      	cbz	r5, 8009184 <_printf_i+0x19c>
 800917c:	2310      	movs	r3, #16
 800917e:	e7ad      	b.n	80090dc <_printf_i+0xf4>
 8009180:	4826      	ldr	r0, [pc, #152]	@ (800921c <_printf_i+0x234>)
 8009182:	e7e9      	b.n	8009158 <_printf_i+0x170>
 8009184:	6823      	ldr	r3, [r4, #0]
 8009186:	f023 0320 	bic.w	r3, r3, #32
 800918a:	6023      	str	r3, [r4, #0]
 800918c:	e7f6      	b.n	800917c <_printf_i+0x194>
 800918e:	4616      	mov	r6, r2
 8009190:	e7bd      	b.n	800910e <_printf_i+0x126>
 8009192:	6833      	ldr	r3, [r6, #0]
 8009194:	6825      	ldr	r5, [r4, #0]
 8009196:	6961      	ldr	r1, [r4, #20]
 8009198:	1d18      	adds	r0, r3, #4
 800919a:	6030      	str	r0, [r6, #0]
 800919c:	062e      	lsls	r6, r5, #24
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	d501      	bpl.n	80091a6 <_printf_i+0x1be>
 80091a2:	6019      	str	r1, [r3, #0]
 80091a4:	e002      	b.n	80091ac <_printf_i+0x1c4>
 80091a6:	0668      	lsls	r0, r5, #25
 80091a8:	d5fb      	bpl.n	80091a2 <_printf_i+0x1ba>
 80091aa:	8019      	strh	r1, [r3, #0]
 80091ac:	2300      	movs	r3, #0
 80091ae:	6123      	str	r3, [r4, #16]
 80091b0:	4616      	mov	r6, r2
 80091b2:	e7bc      	b.n	800912e <_printf_i+0x146>
 80091b4:	6833      	ldr	r3, [r6, #0]
 80091b6:	1d1a      	adds	r2, r3, #4
 80091b8:	6032      	str	r2, [r6, #0]
 80091ba:	681e      	ldr	r6, [r3, #0]
 80091bc:	6862      	ldr	r2, [r4, #4]
 80091be:	2100      	movs	r1, #0
 80091c0:	4630      	mov	r0, r6
 80091c2:	f7f7 f825 	bl	8000210 <memchr>
 80091c6:	b108      	cbz	r0, 80091cc <_printf_i+0x1e4>
 80091c8:	1b80      	subs	r0, r0, r6
 80091ca:	6060      	str	r0, [r4, #4]
 80091cc:	6863      	ldr	r3, [r4, #4]
 80091ce:	6123      	str	r3, [r4, #16]
 80091d0:	2300      	movs	r3, #0
 80091d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80091d6:	e7aa      	b.n	800912e <_printf_i+0x146>
 80091d8:	6923      	ldr	r3, [r4, #16]
 80091da:	4632      	mov	r2, r6
 80091dc:	4649      	mov	r1, r9
 80091de:	4640      	mov	r0, r8
 80091e0:	47d0      	blx	sl
 80091e2:	3001      	adds	r0, #1
 80091e4:	d0ad      	beq.n	8009142 <_printf_i+0x15a>
 80091e6:	6823      	ldr	r3, [r4, #0]
 80091e8:	079b      	lsls	r3, r3, #30
 80091ea:	d413      	bmi.n	8009214 <_printf_i+0x22c>
 80091ec:	68e0      	ldr	r0, [r4, #12]
 80091ee:	9b03      	ldr	r3, [sp, #12]
 80091f0:	4298      	cmp	r0, r3
 80091f2:	bfb8      	it	lt
 80091f4:	4618      	movlt	r0, r3
 80091f6:	e7a6      	b.n	8009146 <_printf_i+0x15e>
 80091f8:	2301      	movs	r3, #1
 80091fa:	4632      	mov	r2, r6
 80091fc:	4649      	mov	r1, r9
 80091fe:	4640      	mov	r0, r8
 8009200:	47d0      	blx	sl
 8009202:	3001      	adds	r0, #1
 8009204:	d09d      	beq.n	8009142 <_printf_i+0x15a>
 8009206:	3501      	adds	r5, #1
 8009208:	68e3      	ldr	r3, [r4, #12]
 800920a:	9903      	ldr	r1, [sp, #12]
 800920c:	1a5b      	subs	r3, r3, r1
 800920e:	42ab      	cmp	r3, r5
 8009210:	dcf2      	bgt.n	80091f8 <_printf_i+0x210>
 8009212:	e7eb      	b.n	80091ec <_printf_i+0x204>
 8009214:	2500      	movs	r5, #0
 8009216:	f104 0619 	add.w	r6, r4, #25
 800921a:	e7f5      	b.n	8009208 <_printf_i+0x220>
 800921c:	0800c4ce 	.word	0x0800c4ce
 8009220:	0800c4df 	.word	0x0800c4df

08009224 <sniprintf>:
 8009224:	b40c      	push	{r2, r3}
 8009226:	b530      	push	{r4, r5, lr}
 8009228:	4b18      	ldr	r3, [pc, #96]	@ (800928c <sniprintf+0x68>)
 800922a:	1e0c      	subs	r4, r1, #0
 800922c:	681d      	ldr	r5, [r3, #0]
 800922e:	b09d      	sub	sp, #116	@ 0x74
 8009230:	da08      	bge.n	8009244 <sniprintf+0x20>
 8009232:	238b      	movs	r3, #139	@ 0x8b
 8009234:	602b      	str	r3, [r5, #0]
 8009236:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800923a:	b01d      	add	sp, #116	@ 0x74
 800923c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009240:	b002      	add	sp, #8
 8009242:	4770      	bx	lr
 8009244:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009248:	f8ad 3014 	strh.w	r3, [sp, #20]
 800924c:	f04f 0300 	mov.w	r3, #0
 8009250:	931b      	str	r3, [sp, #108]	@ 0x6c
 8009252:	bf14      	ite	ne
 8009254:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8009258:	4623      	moveq	r3, r4
 800925a:	9304      	str	r3, [sp, #16]
 800925c:	9307      	str	r3, [sp, #28]
 800925e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009262:	9002      	str	r0, [sp, #8]
 8009264:	9006      	str	r0, [sp, #24]
 8009266:	f8ad 3016 	strh.w	r3, [sp, #22]
 800926a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800926c:	ab21      	add	r3, sp, #132	@ 0x84
 800926e:	a902      	add	r1, sp, #8
 8009270:	4628      	mov	r0, r5
 8009272:	9301      	str	r3, [sp, #4]
 8009274:	f000 ffcc 	bl	800a210 <_svfiprintf_r>
 8009278:	1c43      	adds	r3, r0, #1
 800927a:	bfbc      	itt	lt
 800927c:	238b      	movlt	r3, #139	@ 0x8b
 800927e:	602b      	strlt	r3, [r5, #0]
 8009280:	2c00      	cmp	r4, #0
 8009282:	d0da      	beq.n	800923a <sniprintf+0x16>
 8009284:	9b02      	ldr	r3, [sp, #8]
 8009286:	2200      	movs	r2, #0
 8009288:	701a      	strb	r2, [r3, #0]
 800928a:	e7d6      	b.n	800923a <sniprintf+0x16>
 800928c:	2000002c 	.word	0x2000002c

08009290 <std>:
 8009290:	2300      	movs	r3, #0
 8009292:	b510      	push	{r4, lr}
 8009294:	4604      	mov	r4, r0
 8009296:	e9c0 3300 	strd	r3, r3, [r0]
 800929a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800929e:	6083      	str	r3, [r0, #8]
 80092a0:	8181      	strh	r1, [r0, #12]
 80092a2:	6643      	str	r3, [r0, #100]	@ 0x64
 80092a4:	81c2      	strh	r2, [r0, #14]
 80092a6:	6183      	str	r3, [r0, #24]
 80092a8:	4619      	mov	r1, r3
 80092aa:	2208      	movs	r2, #8
 80092ac:	305c      	adds	r0, #92	@ 0x5c
 80092ae:	f000 f8b1 	bl	8009414 <memset>
 80092b2:	4b0d      	ldr	r3, [pc, #52]	@ (80092e8 <std+0x58>)
 80092b4:	6263      	str	r3, [r4, #36]	@ 0x24
 80092b6:	4b0d      	ldr	r3, [pc, #52]	@ (80092ec <std+0x5c>)
 80092b8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80092ba:	4b0d      	ldr	r3, [pc, #52]	@ (80092f0 <std+0x60>)
 80092bc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80092be:	4b0d      	ldr	r3, [pc, #52]	@ (80092f4 <std+0x64>)
 80092c0:	6323      	str	r3, [r4, #48]	@ 0x30
 80092c2:	4b0d      	ldr	r3, [pc, #52]	@ (80092f8 <std+0x68>)
 80092c4:	6224      	str	r4, [r4, #32]
 80092c6:	429c      	cmp	r4, r3
 80092c8:	d006      	beq.n	80092d8 <std+0x48>
 80092ca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80092ce:	4294      	cmp	r4, r2
 80092d0:	d002      	beq.n	80092d8 <std+0x48>
 80092d2:	33d0      	adds	r3, #208	@ 0xd0
 80092d4:	429c      	cmp	r4, r3
 80092d6:	d105      	bne.n	80092e4 <std+0x54>
 80092d8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80092dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092e0:	f000 b8ca 	b.w	8009478 <__retarget_lock_init_recursive>
 80092e4:	bd10      	pop	{r4, pc}
 80092e6:	bf00      	nop
 80092e8:	0800adc1 	.word	0x0800adc1
 80092ec:	0800ade3 	.word	0x0800ade3
 80092f0:	0800ae1b 	.word	0x0800ae1b
 80092f4:	0800ae3f 	.word	0x0800ae3f
 80092f8:	20005060 	.word	0x20005060

080092fc <stdio_exit_handler>:
 80092fc:	4a02      	ldr	r2, [pc, #8]	@ (8009308 <stdio_exit_handler+0xc>)
 80092fe:	4903      	ldr	r1, [pc, #12]	@ (800930c <stdio_exit_handler+0x10>)
 8009300:	4803      	ldr	r0, [pc, #12]	@ (8009310 <stdio_exit_handler+0x14>)
 8009302:	f000 b869 	b.w	80093d8 <_fwalk_sglue>
 8009306:	bf00      	nop
 8009308:	20000020 	.word	0x20000020
 800930c:	0800a665 	.word	0x0800a665
 8009310:	20000030 	.word	0x20000030

08009314 <cleanup_stdio>:
 8009314:	6841      	ldr	r1, [r0, #4]
 8009316:	4b0c      	ldr	r3, [pc, #48]	@ (8009348 <cleanup_stdio+0x34>)
 8009318:	4299      	cmp	r1, r3
 800931a:	b510      	push	{r4, lr}
 800931c:	4604      	mov	r4, r0
 800931e:	d001      	beq.n	8009324 <cleanup_stdio+0x10>
 8009320:	f001 f9a0 	bl	800a664 <_fflush_r>
 8009324:	68a1      	ldr	r1, [r4, #8]
 8009326:	4b09      	ldr	r3, [pc, #36]	@ (800934c <cleanup_stdio+0x38>)
 8009328:	4299      	cmp	r1, r3
 800932a:	d002      	beq.n	8009332 <cleanup_stdio+0x1e>
 800932c:	4620      	mov	r0, r4
 800932e:	f001 f999 	bl	800a664 <_fflush_r>
 8009332:	68e1      	ldr	r1, [r4, #12]
 8009334:	4b06      	ldr	r3, [pc, #24]	@ (8009350 <cleanup_stdio+0x3c>)
 8009336:	4299      	cmp	r1, r3
 8009338:	d004      	beq.n	8009344 <cleanup_stdio+0x30>
 800933a:	4620      	mov	r0, r4
 800933c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009340:	f001 b990 	b.w	800a664 <_fflush_r>
 8009344:	bd10      	pop	{r4, pc}
 8009346:	bf00      	nop
 8009348:	20005060 	.word	0x20005060
 800934c:	200050c8 	.word	0x200050c8
 8009350:	20005130 	.word	0x20005130

08009354 <global_stdio_init.part.0>:
 8009354:	b510      	push	{r4, lr}
 8009356:	4b0b      	ldr	r3, [pc, #44]	@ (8009384 <global_stdio_init.part.0+0x30>)
 8009358:	4c0b      	ldr	r4, [pc, #44]	@ (8009388 <global_stdio_init.part.0+0x34>)
 800935a:	4a0c      	ldr	r2, [pc, #48]	@ (800938c <global_stdio_init.part.0+0x38>)
 800935c:	601a      	str	r2, [r3, #0]
 800935e:	4620      	mov	r0, r4
 8009360:	2200      	movs	r2, #0
 8009362:	2104      	movs	r1, #4
 8009364:	f7ff ff94 	bl	8009290 <std>
 8009368:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800936c:	2201      	movs	r2, #1
 800936e:	2109      	movs	r1, #9
 8009370:	f7ff ff8e 	bl	8009290 <std>
 8009374:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009378:	2202      	movs	r2, #2
 800937a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800937e:	2112      	movs	r1, #18
 8009380:	f7ff bf86 	b.w	8009290 <std>
 8009384:	20005198 	.word	0x20005198
 8009388:	20005060 	.word	0x20005060
 800938c:	080092fd 	.word	0x080092fd

08009390 <__sfp_lock_acquire>:
 8009390:	4801      	ldr	r0, [pc, #4]	@ (8009398 <__sfp_lock_acquire+0x8>)
 8009392:	f000 b872 	b.w	800947a <__retarget_lock_acquire_recursive>
 8009396:	bf00      	nop
 8009398:	2000519d 	.word	0x2000519d

0800939c <__sfp_lock_release>:
 800939c:	4801      	ldr	r0, [pc, #4]	@ (80093a4 <__sfp_lock_release+0x8>)
 800939e:	f000 b86d 	b.w	800947c <__retarget_lock_release_recursive>
 80093a2:	bf00      	nop
 80093a4:	2000519d 	.word	0x2000519d

080093a8 <__sinit>:
 80093a8:	b510      	push	{r4, lr}
 80093aa:	4604      	mov	r4, r0
 80093ac:	f7ff fff0 	bl	8009390 <__sfp_lock_acquire>
 80093b0:	6a23      	ldr	r3, [r4, #32]
 80093b2:	b11b      	cbz	r3, 80093bc <__sinit+0x14>
 80093b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093b8:	f7ff bff0 	b.w	800939c <__sfp_lock_release>
 80093bc:	4b04      	ldr	r3, [pc, #16]	@ (80093d0 <__sinit+0x28>)
 80093be:	6223      	str	r3, [r4, #32]
 80093c0:	4b04      	ldr	r3, [pc, #16]	@ (80093d4 <__sinit+0x2c>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d1f5      	bne.n	80093b4 <__sinit+0xc>
 80093c8:	f7ff ffc4 	bl	8009354 <global_stdio_init.part.0>
 80093cc:	e7f2      	b.n	80093b4 <__sinit+0xc>
 80093ce:	bf00      	nop
 80093d0:	08009315 	.word	0x08009315
 80093d4:	20005198 	.word	0x20005198

080093d8 <_fwalk_sglue>:
 80093d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093dc:	4607      	mov	r7, r0
 80093de:	4688      	mov	r8, r1
 80093e0:	4614      	mov	r4, r2
 80093e2:	2600      	movs	r6, #0
 80093e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80093e8:	f1b9 0901 	subs.w	r9, r9, #1
 80093ec:	d505      	bpl.n	80093fa <_fwalk_sglue+0x22>
 80093ee:	6824      	ldr	r4, [r4, #0]
 80093f0:	2c00      	cmp	r4, #0
 80093f2:	d1f7      	bne.n	80093e4 <_fwalk_sglue+0xc>
 80093f4:	4630      	mov	r0, r6
 80093f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093fa:	89ab      	ldrh	r3, [r5, #12]
 80093fc:	2b01      	cmp	r3, #1
 80093fe:	d907      	bls.n	8009410 <_fwalk_sglue+0x38>
 8009400:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009404:	3301      	adds	r3, #1
 8009406:	d003      	beq.n	8009410 <_fwalk_sglue+0x38>
 8009408:	4629      	mov	r1, r5
 800940a:	4638      	mov	r0, r7
 800940c:	47c0      	blx	r8
 800940e:	4306      	orrs	r6, r0
 8009410:	3568      	adds	r5, #104	@ 0x68
 8009412:	e7e9      	b.n	80093e8 <_fwalk_sglue+0x10>

08009414 <memset>:
 8009414:	4402      	add	r2, r0
 8009416:	4603      	mov	r3, r0
 8009418:	4293      	cmp	r3, r2
 800941a:	d100      	bne.n	800941e <memset+0xa>
 800941c:	4770      	bx	lr
 800941e:	f803 1b01 	strb.w	r1, [r3], #1
 8009422:	e7f9      	b.n	8009418 <memset+0x4>

08009424 <__errno>:
 8009424:	4b01      	ldr	r3, [pc, #4]	@ (800942c <__errno+0x8>)
 8009426:	6818      	ldr	r0, [r3, #0]
 8009428:	4770      	bx	lr
 800942a:	bf00      	nop
 800942c:	2000002c 	.word	0x2000002c

08009430 <__libc_init_array>:
 8009430:	b570      	push	{r4, r5, r6, lr}
 8009432:	4d0d      	ldr	r5, [pc, #52]	@ (8009468 <__libc_init_array+0x38>)
 8009434:	4c0d      	ldr	r4, [pc, #52]	@ (800946c <__libc_init_array+0x3c>)
 8009436:	1b64      	subs	r4, r4, r5
 8009438:	10a4      	asrs	r4, r4, #2
 800943a:	2600      	movs	r6, #0
 800943c:	42a6      	cmp	r6, r4
 800943e:	d109      	bne.n	8009454 <__libc_init_array+0x24>
 8009440:	4d0b      	ldr	r5, [pc, #44]	@ (8009470 <__libc_init_array+0x40>)
 8009442:	4c0c      	ldr	r4, [pc, #48]	@ (8009474 <__libc_init_array+0x44>)
 8009444:	f002 f8f8 	bl	800b638 <_init>
 8009448:	1b64      	subs	r4, r4, r5
 800944a:	10a4      	asrs	r4, r4, #2
 800944c:	2600      	movs	r6, #0
 800944e:	42a6      	cmp	r6, r4
 8009450:	d105      	bne.n	800945e <__libc_init_array+0x2e>
 8009452:	bd70      	pop	{r4, r5, r6, pc}
 8009454:	f855 3b04 	ldr.w	r3, [r5], #4
 8009458:	4798      	blx	r3
 800945a:	3601      	adds	r6, #1
 800945c:	e7ee      	b.n	800943c <__libc_init_array+0xc>
 800945e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009462:	4798      	blx	r3
 8009464:	3601      	adds	r6, #1
 8009466:	e7f2      	b.n	800944e <__libc_init_array+0x1e>
 8009468:	0800c83c 	.word	0x0800c83c
 800946c:	0800c83c 	.word	0x0800c83c
 8009470:	0800c83c 	.word	0x0800c83c
 8009474:	0800c840 	.word	0x0800c840

08009478 <__retarget_lock_init_recursive>:
 8009478:	4770      	bx	lr

0800947a <__retarget_lock_acquire_recursive>:
 800947a:	4770      	bx	lr

0800947c <__retarget_lock_release_recursive>:
 800947c:	4770      	bx	lr
	...

08009480 <_localeconv_r>:
 8009480:	4800      	ldr	r0, [pc, #0]	@ (8009484 <_localeconv_r+0x4>)
 8009482:	4770      	bx	lr
 8009484:	2000016c 	.word	0x2000016c

08009488 <memcpy>:
 8009488:	440a      	add	r2, r1
 800948a:	4291      	cmp	r1, r2
 800948c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009490:	d100      	bne.n	8009494 <memcpy+0xc>
 8009492:	4770      	bx	lr
 8009494:	b510      	push	{r4, lr}
 8009496:	f811 4b01 	ldrb.w	r4, [r1], #1
 800949a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800949e:	4291      	cmp	r1, r2
 80094a0:	d1f9      	bne.n	8009496 <memcpy+0xe>
 80094a2:	bd10      	pop	{r4, pc}

080094a4 <quorem>:
 80094a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094a8:	6903      	ldr	r3, [r0, #16]
 80094aa:	690c      	ldr	r4, [r1, #16]
 80094ac:	42a3      	cmp	r3, r4
 80094ae:	4607      	mov	r7, r0
 80094b0:	db7e      	blt.n	80095b0 <quorem+0x10c>
 80094b2:	3c01      	subs	r4, #1
 80094b4:	f101 0814 	add.w	r8, r1, #20
 80094b8:	00a3      	lsls	r3, r4, #2
 80094ba:	f100 0514 	add.w	r5, r0, #20
 80094be:	9300      	str	r3, [sp, #0]
 80094c0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80094c4:	9301      	str	r3, [sp, #4]
 80094c6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80094ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80094ce:	3301      	adds	r3, #1
 80094d0:	429a      	cmp	r2, r3
 80094d2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80094d6:	fbb2 f6f3 	udiv	r6, r2, r3
 80094da:	d32e      	bcc.n	800953a <quorem+0x96>
 80094dc:	f04f 0a00 	mov.w	sl, #0
 80094e0:	46c4      	mov	ip, r8
 80094e2:	46ae      	mov	lr, r5
 80094e4:	46d3      	mov	fp, sl
 80094e6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80094ea:	b298      	uxth	r0, r3
 80094ec:	fb06 a000 	mla	r0, r6, r0, sl
 80094f0:	0c02      	lsrs	r2, r0, #16
 80094f2:	0c1b      	lsrs	r3, r3, #16
 80094f4:	fb06 2303 	mla	r3, r6, r3, r2
 80094f8:	f8de 2000 	ldr.w	r2, [lr]
 80094fc:	b280      	uxth	r0, r0
 80094fe:	b292      	uxth	r2, r2
 8009500:	1a12      	subs	r2, r2, r0
 8009502:	445a      	add	r2, fp
 8009504:	f8de 0000 	ldr.w	r0, [lr]
 8009508:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800950c:	b29b      	uxth	r3, r3
 800950e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009512:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009516:	b292      	uxth	r2, r2
 8009518:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800951c:	45e1      	cmp	r9, ip
 800951e:	f84e 2b04 	str.w	r2, [lr], #4
 8009522:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009526:	d2de      	bcs.n	80094e6 <quorem+0x42>
 8009528:	9b00      	ldr	r3, [sp, #0]
 800952a:	58eb      	ldr	r3, [r5, r3]
 800952c:	b92b      	cbnz	r3, 800953a <quorem+0x96>
 800952e:	9b01      	ldr	r3, [sp, #4]
 8009530:	3b04      	subs	r3, #4
 8009532:	429d      	cmp	r5, r3
 8009534:	461a      	mov	r2, r3
 8009536:	d32f      	bcc.n	8009598 <quorem+0xf4>
 8009538:	613c      	str	r4, [r7, #16]
 800953a:	4638      	mov	r0, r7
 800953c:	f001 fb38 	bl	800abb0 <__mcmp>
 8009540:	2800      	cmp	r0, #0
 8009542:	db25      	blt.n	8009590 <quorem+0xec>
 8009544:	4629      	mov	r1, r5
 8009546:	2000      	movs	r0, #0
 8009548:	f858 2b04 	ldr.w	r2, [r8], #4
 800954c:	f8d1 c000 	ldr.w	ip, [r1]
 8009550:	fa1f fe82 	uxth.w	lr, r2
 8009554:	fa1f f38c 	uxth.w	r3, ip
 8009558:	eba3 030e 	sub.w	r3, r3, lr
 800955c:	4403      	add	r3, r0
 800955e:	0c12      	lsrs	r2, r2, #16
 8009560:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009564:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009568:	b29b      	uxth	r3, r3
 800956a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800956e:	45c1      	cmp	r9, r8
 8009570:	f841 3b04 	str.w	r3, [r1], #4
 8009574:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009578:	d2e6      	bcs.n	8009548 <quorem+0xa4>
 800957a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800957e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009582:	b922      	cbnz	r2, 800958e <quorem+0xea>
 8009584:	3b04      	subs	r3, #4
 8009586:	429d      	cmp	r5, r3
 8009588:	461a      	mov	r2, r3
 800958a:	d30b      	bcc.n	80095a4 <quorem+0x100>
 800958c:	613c      	str	r4, [r7, #16]
 800958e:	3601      	adds	r6, #1
 8009590:	4630      	mov	r0, r6
 8009592:	b003      	add	sp, #12
 8009594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009598:	6812      	ldr	r2, [r2, #0]
 800959a:	3b04      	subs	r3, #4
 800959c:	2a00      	cmp	r2, #0
 800959e:	d1cb      	bne.n	8009538 <quorem+0x94>
 80095a0:	3c01      	subs	r4, #1
 80095a2:	e7c6      	b.n	8009532 <quorem+0x8e>
 80095a4:	6812      	ldr	r2, [r2, #0]
 80095a6:	3b04      	subs	r3, #4
 80095a8:	2a00      	cmp	r2, #0
 80095aa:	d1ef      	bne.n	800958c <quorem+0xe8>
 80095ac:	3c01      	subs	r4, #1
 80095ae:	e7ea      	b.n	8009586 <quorem+0xe2>
 80095b0:	2000      	movs	r0, #0
 80095b2:	e7ee      	b.n	8009592 <quorem+0xee>
 80095b4:	0000      	movs	r0, r0
	...

080095b8 <_dtoa_r>:
 80095b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095bc:	69c7      	ldr	r7, [r0, #28]
 80095be:	b097      	sub	sp, #92	@ 0x5c
 80095c0:	ed8d 0b04 	vstr	d0, [sp, #16]
 80095c4:	ec55 4b10 	vmov	r4, r5, d0
 80095c8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80095ca:	9107      	str	r1, [sp, #28]
 80095cc:	4681      	mov	r9, r0
 80095ce:	920c      	str	r2, [sp, #48]	@ 0x30
 80095d0:	9311      	str	r3, [sp, #68]	@ 0x44
 80095d2:	b97f      	cbnz	r7, 80095f4 <_dtoa_r+0x3c>
 80095d4:	2010      	movs	r0, #16
 80095d6:	f000 ff17 	bl	800a408 <malloc>
 80095da:	4602      	mov	r2, r0
 80095dc:	f8c9 001c 	str.w	r0, [r9, #28]
 80095e0:	b920      	cbnz	r0, 80095ec <_dtoa_r+0x34>
 80095e2:	4ba9      	ldr	r3, [pc, #676]	@ (8009888 <_dtoa_r+0x2d0>)
 80095e4:	21ef      	movs	r1, #239	@ 0xef
 80095e6:	48a9      	ldr	r0, [pc, #676]	@ (800988c <_dtoa_r+0x2d4>)
 80095e8:	f001 fccc 	bl	800af84 <__assert_func>
 80095ec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80095f0:	6007      	str	r7, [r0, #0]
 80095f2:	60c7      	str	r7, [r0, #12]
 80095f4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80095f8:	6819      	ldr	r1, [r3, #0]
 80095fa:	b159      	cbz	r1, 8009614 <_dtoa_r+0x5c>
 80095fc:	685a      	ldr	r2, [r3, #4]
 80095fe:	604a      	str	r2, [r1, #4]
 8009600:	2301      	movs	r3, #1
 8009602:	4093      	lsls	r3, r2
 8009604:	608b      	str	r3, [r1, #8]
 8009606:	4648      	mov	r0, r9
 8009608:	f001 f8a0 	bl	800a74c <_Bfree>
 800960c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009610:	2200      	movs	r2, #0
 8009612:	601a      	str	r2, [r3, #0]
 8009614:	1e2b      	subs	r3, r5, #0
 8009616:	bfb9      	ittee	lt
 8009618:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800961c:	9305      	strlt	r3, [sp, #20]
 800961e:	2300      	movge	r3, #0
 8009620:	6033      	strge	r3, [r6, #0]
 8009622:	9f05      	ldr	r7, [sp, #20]
 8009624:	4b9a      	ldr	r3, [pc, #616]	@ (8009890 <_dtoa_r+0x2d8>)
 8009626:	bfbc      	itt	lt
 8009628:	2201      	movlt	r2, #1
 800962a:	6032      	strlt	r2, [r6, #0]
 800962c:	43bb      	bics	r3, r7
 800962e:	d112      	bne.n	8009656 <_dtoa_r+0x9e>
 8009630:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009632:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009636:	6013      	str	r3, [r2, #0]
 8009638:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800963c:	4323      	orrs	r3, r4
 800963e:	f000 855a 	beq.w	800a0f6 <_dtoa_r+0xb3e>
 8009642:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009644:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80098a4 <_dtoa_r+0x2ec>
 8009648:	2b00      	cmp	r3, #0
 800964a:	f000 855c 	beq.w	800a106 <_dtoa_r+0xb4e>
 800964e:	f10a 0303 	add.w	r3, sl, #3
 8009652:	f000 bd56 	b.w	800a102 <_dtoa_r+0xb4a>
 8009656:	ed9d 7b04 	vldr	d7, [sp, #16]
 800965a:	2200      	movs	r2, #0
 800965c:	ec51 0b17 	vmov	r0, r1, d7
 8009660:	2300      	movs	r3, #0
 8009662:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8009666:	f7f7 fa4f 	bl	8000b08 <__aeabi_dcmpeq>
 800966a:	4680      	mov	r8, r0
 800966c:	b158      	cbz	r0, 8009686 <_dtoa_r+0xce>
 800966e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009670:	2301      	movs	r3, #1
 8009672:	6013      	str	r3, [r2, #0]
 8009674:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009676:	b113      	cbz	r3, 800967e <_dtoa_r+0xc6>
 8009678:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800967a:	4b86      	ldr	r3, [pc, #536]	@ (8009894 <_dtoa_r+0x2dc>)
 800967c:	6013      	str	r3, [r2, #0]
 800967e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80098a8 <_dtoa_r+0x2f0>
 8009682:	f000 bd40 	b.w	800a106 <_dtoa_r+0xb4e>
 8009686:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800968a:	aa14      	add	r2, sp, #80	@ 0x50
 800968c:	a915      	add	r1, sp, #84	@ 0x54
 800968e:	4648      	mov	r0, r9
 8009690:	f001 fb3e 	bl	800ad10 <__d2b>
 8009694:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009698:	9002      	str	r0, [sp, #8]
 800969a:	2e00      	cmp	r6, #0
 800969c:	d078      	beq.n	8009790 <_dtoa_r+0x1d8>
 800969e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80096a0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80096a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80096a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80096ac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80096b0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80096b4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80096b8:	4619      	mov	r1, r3
 80096ba:	2200      	movs	r2, #0
 80096bc:	4b76      	ldr	r3, [pc, #472]	@ (8009898 <_dtoa_r+0x2e0>)
 80096be:	f7f6 fe03 	bl	80002c8 <__aeabi_dsub>
 80096c2:	a36b      	add	r3, pc, #428	@ (adr r3, 8009870 <_dtoa_r+0x2b8>)
 80096c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c8:	f7f6 ffb6 	bl	8000638 <__aeabi_dmul>
 80096cc:	a36a      	add	r3, pc, #424	@ (adr r3, 8009878 <_dtoa_r+0x2c0>)
 80096ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096d2:	f7f6 fdfb 	bl	80002cc <__adddf3>
 80096d6:	4604      	mov	r4, r0
 80096d8:	4630      	mov	r0, r6
 80096da:	460d      	mov	r5, r1
 80096dc:	f7f6 ff42 	bl	8000564 <__aeabi_i2d>
 80096e0:	a367      	add	r3, pc, #412	@ (adr r3, 8009880 <_dtoa_r+0x2c8>)
 80096e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096e6:	f7f6 ffa7 	bl	8000638 <__aeabi_dmul>
 80096ea:	4602      	mov	r2, r0
 80096ec:	460b      	mov	r3, r1
 80096ee:	4620      	mov	r0, r4
 80096f0:	4629      	mov	r1, r5
 80096f2:	f7f6 fdeb 	bl	80002cc <__adddf3>
 80096f6:	4604      	mov	r4, r0
 80096f8:	460d      	mov	r5, r1
 80096fa:	f7f7 fa4d 	bl	8000b98 <__aeabi_d2iz>
 80096fe:	2200      	movs	r2, #0
 8009700:	4607      	mov	r7, r0
 8009702:	2300      	movs	r3, #0
 8009704:	4620      	mov	r0, r4
 8009706:	4629      	mov	r1, r5
 8009708:	f7f7 fa08 	bl	8000b1c <__aeabi_dcmplt>
 800970c:	b140      	cbz	r0, 8009720 <_dtoa_r+0x168>
 800970e:	4638      	mov	r0, r7
 8009710:	f7f6 ff28 	bl	8000564 <__aeabi_i2d>
 8009714:	4622      	mov	r2, r4
 8009716:	462b      	mov	r3, r5
 8009718:	f7f7 f9f6 	bl	8000b08 <__aeabi_dcmpeq>
 800971c:	b900      	cbnz	r0, 8009720 <_dtoa_r+0x168>
 800971e:	3f01      	subs	r7, #1
 8009720:	2f16      	cmp	r7, #22
 8009722:	d852      	bhi.n	80097ca <_dtoa_r+0x212>
 8009724:	4b5d      	ldr	r3, [pc, #372]	@ (800989c <_dtoa_r+0x2e4>)
 8009726:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800972a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800972e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009732:	f7f7 f9f3 	bl	8000b1c <__aeabi_dcmplt>
 8009736:	2800      	cmp	r0, #0
 8009738:	d049      	beq.n	80097ce <_dtoa_r+0x216>
 800973a:	3f01      	subs	r7, #1
 800973c:	2300      	movs	r3, #0
 800973e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009740:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009742:	1b9b      	subs	r3, r3, r6
 8009744:	1e5a      	subs	r2, r3, #1
 8009746:	bf45      	ittet	mi
 8009748:	f1c3 0301 	rsbmi	r3, r3, #1
 800974c:	9300      	strmi	r3, [sp, #0]
 800974e:	2300      	movpl	r3, #0
 8009750:	2300      	movmi	r3, #0
 8009752:	9206      	str	r2, [sp, #24]
 8009754:	bf54      	ite	pl
 8009756:	9300      	strpl	r3, [sp, #0]
 8009758:	9306      	strmi	r3, [sp, #24]
 800975a:	2f00      	cmp	r7, #0
 800975c:	db39      	blt.n	80097d2 <_dtoa_r+0x21a>
 800975e:	9b06      	ldr	r3, [sp, #24]
 8009760:	970d      	str	r7, [sp, #52]	@ 0x34
 8009762:	443b      	add	r3, r7
 8009764:	9306      	str	r3, [sp, #24]
 8009766:	2300      	movs	r3, #0
 8009768:	9308      	str	r3, [sp, #32]
 800976a:	9b07      	ldr	r3, [sp, #28]
 800976c:	2b09      	cmp	r3, #9
 800976e:	d863      	bhi.n	8009838 <_dtoa_r+0x280>
 8009770:	2b05      	cmp	r3, #5
 8009772:	bfc4      	itt	gt
 8009774:	3b04      	subgt	r3, #4
 8009776:	9307      	strgt	r3, [sp, #28]
 8009778:	9b07      	ldr	r3, [sp, #28]
 800977a:	f1a3 0302 	sub.w	r3, r3, #2
 800977e:	bfcc      	ite	gt
 8009780:	2400      	movgt	r4, #0
 8009782:	2401      	movle	r4, #1
 8009784:	2b03      	cmp	r3, #3
 8009786:	d863      	bhi.n	8009850 <_dtoa_r+0x298>
 8009788:	e8df f003 	tbb	[pc, r3]
 800978c:	2b375452 	.word	0x2b375452
 8009790:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009794:	441e      	add	r6, r3
 8009796:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800979a:	2b20      	cmp	r3, #32
 800979c:	bfc1      	itttt	gt
 800979e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80097a2:	409f      	lslgt	r7, r3
 80097a4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80097a8:	fa24 f303 	lsrgt.w	r3, r4, r3
 80097ac:	bfd6      	itet	le
 80097ae:	f1c3 0320 	rsble	r3, r3, #32
 80097b2:	ea47 0003 	orrgt.w	r0, r7, r3
 80097b6:	fa04 f003 	lslle.w	r0, r4, r3
 80097ba:	f7f6 fec3 	bl	8000544 <__aeabi_ui2d>
 80097be:	2201      	movs	r2, #1
 80097c0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80097c4:	3e01      	subs	r6, #1
 80097c6:	9212      	str	r2, [sp, #72]	@ 0x48
 80097c8:	e776      	b.n	80096b8 <_dtoa_r+0x100>
 80097ca:	2301      	movs	r3, #1
 80097cc:	e7b7      	b.n	800973e <_dtoa_r+0x186>
 80097ce:	9010      	str	r0, [sp, #64]	@ 0x40
 80097d0:	e7b6      	b.n	8009740 <_dtoa_r+0x188>
 80097d2:	9b00      	ldr	r3, [sp, #0]
 80097d4:	1bdb      	subs	r3, r3, r7
 80097d6:	9300      	str	r3, [sp, #0]
 80097d8:	427b      	negs	r3, r7
 80097da:	9308      	str	r3, [sp, #32]
 80097dc:	2300      	movs	r3, #0
 80097de:	930d      	str	r3, [sp, #52]	@ 0x34
 80097e0:	e7c3      	b.n	800976a <_dtoa_r+0x1b2>
 80097e2:	2301      	movs	r3, #1
 80097e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80097e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80097e8:	eb07 0b03 	add.w	fp, r7, r3
 80097ec:	f10b 0301 	add.w	r3, fp, #1
 80097f0:	2b01      	cmp	r3, #1
 80097f2:	9303      	str	r3, [sp, #12]
 80097f4:	bfb8      	it	lt
 80097f6:	2301      	movlt	r3, #1
 80097f8:	e006      	b.n	8009808 <_dtoa_r+0x250>
 80097fa:	2301      	movs	r3, #1
 80097fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80097fe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009800:	2b00      	cmp	r3, #0
 8009802:	dd28      	ble.n	8009856 <_dtoa_r+0x29e>
 8009804:	469b      	mov	fp, r3
 8009806:	9303      	str	r3, [sp, #12]
 8009808:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800980c:	2100      	movs	r1, #0
 800980e:	2204      	movs	r2, #4
 8009810:	f102 0514 	add.w	r5, r2, #20
 8009814:	429d      	cmp	r5, r3
 8009816:	d926      	bls.n	8009866 <_dtoa_r+0x2ae>
 8009818:	6041      	str	r1, [r0, #4]
 800981a:	4648      	mov	r0, r9
 800981c:	f000 ff56 	bl	800a6cc <_Balloc>
 8009820:	4682      	mov	sl, r0
 8009822:	2800      	cmp	r0, #0
 8009824:	d142      	bne.n	80098ac <_dtoa_r+0x2f4>
 8009826:	4b1e      	ldr	r3, [pc, #120]	@ (80098a0 <_dtoa_r+0x2e8>)
 8009828:	4602      	mov	r2, r0
 800982a:	f240 11af 	movw	r1, #431	@ 0x1af
 800982e:	e6da      	b.n	80095e6 <_dtoa_r+0x2e>
 8009830:	2300      	movs	r3, #0
 8009832:	e7e3      	b.n	80097fc <_dtoa_r+0x244>
 8009834:	2300      	movs	r3, #0
 8009836:	e7d5      	b.n	80097e4 <_dtoa_r+0x22c>
 8009838:	2401      	movs	r4, #1
 800983a:	2300      	movs	r3, #0
 800983c:	9307      	str	r3, [sp, #28]
 800983e:	9409      	str	r4, [sp, #36]	@ 0x24
 8009840:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8009844:	2200      	movs	r2, #0
 8009846:	f8cd b00c 	str.w	fp, [sp, #12]
 800984a:	2312      	movs	r3, #18
 800984c:	920c      	str	r2, [sp, #48]	@ 0x30
 800984e:	e7db      	b.n	8009808 <_dtoa_r+0x250>
 8009850:	2301      	movs	r3, #1
 8009852:	9309      	str	r3, [sp, #36]	@ 0x24
 8009854:	e7f4      	b.n	8009840 <_dtoa_r+0x288>
 8009856:	f04f 0b01 	mov.w	fp, #1
 800985a:	f8cd b00c 	str.w	fp, [sp, #12]
 800985e:	465b      	mov	r3, fp
 8009860:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8009864:	e7d0      	b.n	8009808 <_dtoa_r+0x250>
 8009866:	3101      	adds	r1, #1
 8009868:	0052      	lsls	r2, r2, #1
 800986a:	e7d1      	b.n	8009810 <_dtoa_r+0x258>
 800986c:	f3af 8000 	nop.w
 8009870:	636f4361 	.word	0x636f4361
 8009874:	3fd287a7 	.word	0x3fd287a7
 8009878:	8b60c8b3 	.word	0x8b60c8b3
 800987c:	3fc68a28 	.word	0x3fc68a28
 8009880:	509f79fb 	.word	0x509f79fb
 8009884:	3fd34413 	.word	0x3fd34413
 8009888:	0800c4fd 	.word	0x0800c4fd
 800988c:	0800c514 	.word	0x0800c514
 8009890:	7ff00000 	.word	0x7ff00000
 8009894:	0800c4cd 	.word	0x0800c4cd
 8009898:	3ff80000 	.word	0x3ff80000
 800989c:	0800c668 	.word	0x0800c668
 80098a0:	0800c56c 	.word	0x0800c56c
 80098a4:	0800c4f9 	.word	0x0800c4f9
 80098a8:	0800c4cc 	.word	0x0800c4cc
 80098ac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80098b0:	6018      	str	r0, [r3, #0]
 80098b2:	9b03      	ldr	r3, [sp, #12]
 80098b4:	2b0e      	cmp	r3, #14
 80098b6:	f200 80a1 	bhi.w	80099fc <_dtoa_r+0x444>
 80098ba:	2c00      	cmp	r4, #0
 80098bc:	f000 809e 	beq.w	80099fc <_dtoa_r+0x444>
 80098c0:	2f00      	cmp	r7, #0
 80098c2:	dd33      	ble.n	800992c <_dtoa_r+0x374>
 80098c4:	4b9c      	ldr	r3, [pc, #624]	@ (8009b38 <_dtoa_r+0x580>)
 80098c6:	f007 020f 	and.w	r2, r7, #15
 80098ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80098ce:	ed93 7b00 	vldr	d7, [r3]
 80098d2:	05f8      	lsls	r0, r7, #23
 80098d4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80098d8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80098dc:	d516      	bpl.n	800990c <_dtoa_r+0x354>
 80098de:	4b97      	ldr	r3, [pc, #604]	@ (8009b3c <_dtoa_r+0x584>)
 80098e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80098e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80098e8:	f7f6 ffd0 	bl	800088c <__aeabi_ddiv>
 80098ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80098f0:	f004 040f 	and.w	r4, r4, #15
 80098f4:	2603      	movs	r6, #3
 80098f6:	4d91      	ldr	r5, [pc, #580]	@ (8009b3c <_dtoa_r+0x584>)
 80098f8:	b954      	cbnz	r4, 8009910 <_dtoa_r+0x358>
 80098fa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80098fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009902:	f7f6 ffc3 	bl	800088c <__aeabi_ddiv>
 8009906:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800990a:	e028      	b.n	800995e <_dtoa_r+0x3a6>
 800990c:	2602      	movs	r6, #2
 800990e:	e7f2      	b.n	80098f6 <_dtoa_r+0x33e>
 8009910:	07e1      	lsls	r1, r4, #31
 8009912:	d508      	bpl.n	8009926 <_dtoa_r+0x36e>
 8009914:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009918:	e9d5 2300 	ldrd	r2, r3, [r5]
 800991c:	f7f6 fe8c 	bl	8000638 <__aeabi_dmul>
 8009920:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009924:	3601      	adds	r6, #1
 8009926:	1064      	asrs	r4, r4, #1
 8009928:	3508      	adds	r5, #8
 800992a:	e7e5      	b.n	80098f8 <_dtoa_r+0x340>
 800992c:	f000 80af 	beq.w	8009a8e <_dtoa_r+0x4d6>
 8009930:	427c      	negs	r4, r7
 8009932:	4b81      	ldr	r3, [pc, #516]	@ (8009b38 <_dtoa_r+0x580>)
 8009934:	4d81      	ldr	r5, [pc, #516]	@ (8009b3c <_dtoa_r+0x584>)
 8009936:	f004 020f 	and.w	r2, r4, #15
 800993a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800993e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009942:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009946:	f7f6 fe77 	bl	8000638 <__aeabi_dmul>
 800994a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800994e:	1124      	asrs	r4, r4, #4
 8009950:	2300      	movs	r3, #0
 8009952:	2602      	movs	r6, #2
 8009954:	2c00      	cmp	r4, #0
 8009956:	f040 808f 	bne.w	8009a78 <_dtoa_r+0x4c0>
 800995a:	2b00      	cmp	r3, #0
 800995c:	d1d3      	bne.n	8009906 <_dtoa_r+0x34e>
 800995e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009960:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009964:	2b00      	cmp	r3, #0
 8009966:	f000 8094 	beq.w	8009a92 <_dtoa_r+0x4da>
 800996a:	4b75      	ldr	r3, [pc, #468]	@ (8009b40 <_dtoa_r+0x588>)
 800996c:	2200      	movs	r2, #0
 800996e:	4620      	mov	r0, r4
 8009970:	4629      	mov	r1, r5
 8009972:	f7f7 f8d3 	bl	8000b1c <__aeabi_dcmplt>
 8009976:	2800      	cmp	r0, #0
 8009978:	f000 808b 	beq.w	8009a92 <_dtoa_r+0x4da>
 800997c:	9b03      	ldr	r3, [sp, #12]
 800997e:	2b00      	cmp	r3, #0
 8009980:	f000 8087 	beq.w	8009a92 <_dtoa_r+0x4da>
 8009984:	f1bb 0f00 	cmp.w	fp, #0
 8009988:	dd34      	ble.n	80099f4 <_dtoa_r+0x43c>
 800998a:	4620      	mov	r0, r4
 800998c:	4b6d      	ldr	r3, [pc, #436]	@ (8009b44 <_dtoa_r+0x58c>)
 800998e:	2200      	movs	r2, #0
 8009990:	4629      	mov	r1, r5
 8009992:	f7f6 fe51 	bl	8000638 <__aeabi_dmul>
 8009996:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800999a:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800999e:	3601      	adds	r6, #1
 80099a0:	465c      	mov	r4, fp
 80099a2:	4630      	mov	r0, r6
 80099a4:	f7f6 fdde 	bl	8000564 <__aeabi_i2d>
 80099a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80099ac:	f7f6 fe44 	bl	8000638 <__aeabi_dmul>
 80099b0:	4b65      	ldr	r3, [pc, #404]	@ (8009b48 <_dtoa_r+0x590>)
 80099b2:	2200      	movs	r2, #0
 80099b4:	f7f6 fc8a 	bl	80002cc <__adddf3>
 80099b8:	4605      	mov	r5, r0
 80099ba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80099be:	2c00      	cmp	r4, #0
 80099c0:	d16a      	bne.n	8009a98 <_dtoa_r+0x4e0>
 80099c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80099c6:	4b61      	ldr	r3, [pc, #388]	@ (8009b4c <_dtoa_r+0x594>)
 80099c8:	2200      	movs	r2, #0
 80099ca:	f7f6 fc7d 	bl	80002c8 <__aeabi_dsub>
 80099ce:	4602      	mov	r2, r0
 80099d0:	460b      	mov	r3, r1
 80099d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80099d6:	462a      	mov	r2, r5
 80099d8:	4633      	mov	r3, r6
 80099da:	f7f7 f8bd 	bl	8000b58 <__aeabi_dcmpgt>
 80099de:	2800      	cmp	r0, #0
 80099e0:	f040 8298 	bne.w	8009f14 <_dtoa_r+0x95c>
 80099e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80099e8:	462a      	mov	r2, r5
 80099ea:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80099ee:	f7f7 f895 	bl	8000b1c <__aeabi_dcmplt>
 80099f2:	bb38      	cbnz	r0, 8009a44 <_dtoa_r+0x48c>
 80099f4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80099f8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80099fc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	f2c0 8157 	blt.w	8009cb2 <_dtoa_r+0x6fa>
 8009a04:	2f0e      	cmp	r7, #14
 8009a06:	f300 8154 	bgt.w	8009cb2 <_dtoa_r+0x6fa>
 8009a0a:	4b4b      	ldr	r3, [pc, #300]	@ (8009b38 <_dtoa_r+0x580>)
 8009a0c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009a10:	ed93 7b00 	vldr	d7, [r3]
 8009a14:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	ed8d 7b00 	vstr	d7, [sp]
 8009a1c:	f280 80e5 	bge.w	8009bea <_dtoa_r+0x632>
 8009a20:	9b03      	ldr	r3, [sp, #12]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	f300 80e1 	bgt.w	8009bea <_dtoa_r+0x632>
 8009a28:	d10c      	bne.n	8009a44 <_dtoa_r+0x48c>
 8009a2a:	4b48      	ldr	r3, [pc, #288]	@ (8009b4c <_dtoa_r+0x594>)
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	ec51 0b17 	vmov	r0, r1, d7
 8009a32:	f7f6 fe01 	bl	8000638 <__aeabi_dmul>
 8009a36:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a3a:	f7f7 f883 	bl	8000b44 <__aeabi_dcmpge>
 8009a3e:	2800      	cmp	r0, #0
 8009a40:	f000 8266 	beq.w	8009f10 <_dtoa_r+0x958>
 8009a44:	2400      	movs	r4, #0
 8009a46:	4625      	mov	r5, r4
 8009a48:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009a4a:	4656      	mov	r6, sl
 8009a4c:	ea6f 0803 	mvn.w	r8, r3
 8009a50:	2700      	movs	r7, #0
 8009a52:	4621      	mov	r1, r4
 8009a54:	4648      	mov	r0, r9
 8009a56:	f000 fe79 	bl	800a74c <_Bfree>
 8009a5a:	2d00      	cmp	r5, #0
 8009a5c:	f000 80bd 	beq.w	8009bda <_dtoa_r+0x622>
 8009a60:	b12f      	cbz	r7, 8009a6e <_dtoa_r+0x4b6>
 8009a62:	42af      	cmp	r7, r5
 8009a64:	d003      	beq.n	8009a6e <_dtoa_r+0x4b6>
 8009a66:	4639      	mov	r1, r7
 8009a68:	4648      	mov	r0, r9
 8009a6a:	f000 fe6f 	bl	800a74c <_Bfree>
 8009a6e:	4629      	mov	r1, r5
 8009a70:	4648      	mov	r0, r9
 8009a72:	f000 fe6b 	bl	800a74c <_Bfree>
 8009a76:	e0b0      	b.n	8009bda <_dtoa_r+0x622>
 8009a78:	07e2      	lsls	r2, r4, #31
 8009a7a:	d505      	bpl.n	8009a88 <_dtoa_r+0x4d0>
 8009a7c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009a80:	f7f6 fdda 	bl	8000638 <__aeabi_dmul>
 8009a84:	3601      	adds	r6, #1
 8009a86:	2301      	movs	r3, #1
 8009a88:	1064      	asrs	r4, r4, #1
 8009a8a:	3508      	adds	r5, #8
 8009a8c:	e762      	b.n	8009954 <_dtoa_r+0x39c>
 8009a8e:	2602      	movs	r6, #2
 8009a90:	e765      	b.n	800995e <_dtoa_r+0x3a6>
 8009a92:	9c03      	ldr	r4, [sp, #12]
 8009a94:	46b8      	mov	r8, r7
 8009a96:	e784      	b.n	80099a2 <_dtoa_r+0x3ea>
 8009a98:	4b27      	ldr	r3, [pc, #156]	@ (8009b38 <_dtoa_r+0x580>)
 8009a9a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009a9c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009aa0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009aa4:	4454      	add	r4, sl
 8009aa6:	2900      	cmp	r1, #0
 8009aa8:	d054      	beq.n	8009b54 <_dtoa_r+0x59c>
 8009aaa:	4929      	ldr	r1, [pc, #164]	@ (8009b50 <_dtoa_r+0x598>)
 8009aac:	2000      	movs	r0, #0
 8009aae:	f7f6 feed 	bl	800088c <__aeabi_ddiv>
 8009ab2:	4633      	mov	r3, r6
 8009ab4:	462a      	mov	r2, r5
 8009ab6:	f7f6 fc07 	bl	80002c8 <__aeabi_dsub>
 8009aba:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009abe:	4656      	mov	r6, sl
 8009ac0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009ac4:	f7f7 f868 	bl	8000b98 <__aeabi_d2iz>
 8009ac8:	4605      	mov	r5, r0
 8009aca:	f7f6 fd4b 	bl	8000564 <__aeabi_i2d>
 8009ace:	4602      	mov	r2, r0
 8009ad0:	460b      	mov	r3, r1
 8009ad2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009ad6:	f7f6 fbf7 	bl	80002c8 <__aeabi_dsub>
 8009ada:	3530      	adds	r5, #48	@ 0x30
 8009adc:	4602      	mov	r2, r0
 8009ade:	460b      	mov	r3, r1
 8009ae0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009ae4:	f806 5b01 	strb.w	r5, [r6], #1
 8009ae8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009aec:	f7f7 f816 	bl	8000b1c <__aeabi_dcmplt>
 8009af0:	2800      	cmp	r0, #0
 8009af2:	d172      	bne.n	8009bda <_dtoa_r+0x622>
 8009af4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009af8:	4911      	ldr	r1, [pc, #68]	@ (8009b40 <_dtoa_r+0x588>)
 8009afa:	2000      	movs	r0, #0
 8009afc:	f7f6 fbe4 	bl	80002c8 <__aeabi_dsub>
 8009b00:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009b04:	f7f7 f80a 	bl	8000b1c <__aeabi_dcmplt>
 8009b08:	2800      	cmp	r0, #0
 8009b0a:	f040 80b4 	bne.w	8009c76 <_dtoa_r+0x6be>
 8009b0e:	42a6      	cmp	r6, r4
 8009b10:	f43f af70 	beq.w	80099f4 <_dtoa_r+0x43c>
 8009b14:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009b18:	4b0a      	ldr	r3, [pc, #40]	@ (8009b44 <_dtoa_r+0x58c>)
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	f7f6 fd8c 	bl	8000638 <__aeabi_dmul>
 8009b20:	4b08      	ldr	r3, [pc, #32]	@ (8009b44 <_dtoa_r+0x58c>)
 8009b22:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009b26:	2200      	movs	r2, #0
 8009b28:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b2c:	f7f6 fd84 	bl	8000638 <__aeabi_dmul>
 8009b30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009b34:	e7c4      	b.n	8009ac0 <_dtoa_r+0x508>
 8009b36:	bf00      	nop
 8009b38:	0800c668 	.word	0x0800c668
 8009b3c:	0800c640 	.word	0x0800c640
 8009b40:	3ff00000 	.word	0x3ff00000
 8009b44:	40240000 	.word	0x40240000
 8009b48:	401c0000 	.word	0x401c0000
 8009b4c:	40140000 	.word	0x40140000
 8009b50:	3fe00000 	.word	0x3fe00000
 8009b54:	4631      	mov	r1, r6
 8009b56:	4628      	mov	r0, r5
 8009b58:	f7f6 fd6e 	bl	8000638 <__aeabi_dmul>
 8009b5c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009b60:	9413      	str	r4, [sp, #76]	@ 0x4c
 8009b62:	4656      	mov	r6, sl
 8009b64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b68:	f7f7 f816 	bl	8000b98 <__aeabi_d2iz>
 8009b6c:	4605      	mov	r5, r0
 8009b6e:	f7f6 fcf9 	bl	8000564 <__aeabi_i2d>
 8009b72:	4602      	mov	r2, r0
 8009b74:	460b      	mov	r3, r1
 8009b76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b7a:	f7f6 fba5 	bl	80002c8 <__aeabi_dsub>
 8009b7e:	3530      	adds	r5, #48	@ 0x30
 8009b80:	f806 5b01 	strb.w	r5, [r6], #1
 8009b84:	4602      	mov	r2, r0
 8009b86:	460b      	mov	r3, r1
 8009b88:	42a6      	cmp	r6, r4
 8009b8a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009b8e:	f04f 0200 	mov.w	r2, #0
 8009b92:	d124      	bne.n	8009bde <_dtoa_r+0x626>
 8009b94:	4baf      	ldr	r3, [pc, #700]	@ (8009e54 <_dtoa_r+0x89c>)
 8009b96:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009b9a:	f7f6 fb97 	bl	80002cc <__adddf3>
 8009b9e:	4602      	mov	r2, r0
 8009ba0:	460b      	mov	r3, r1
 8009ba2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009ba6:	f7f6 ffd7 	bl	8000b58 <__aeabi_dcmpgt>
 8009baa:	2800      	cmp	r0, #0
 8009bac:	d163      	bne.n	8009c76 <_dtoa_r+0x6be>
 8009bae:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009bb2:	49a8      	ldr	r1, [pc, #672]	@ (8009e54 <_dtoa_r+0x89c>)
 8009bb4:	2000      	movs	r0, #0
 8009bb6:	f7f6 fb87 	bl	80002c8 <__aeabi_dsub>
 8009bba:	4602      	mov	r2, r0
 8009bbc:	460b      	mov	r3, r1
 8009bbe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009bc2:	f7f6 ffab 	bl	8000b1c <__aeabi_dcmplt>
 8009bc6:	2800      	cmp	r0, #0
 8009bc8:	f43f af14 	beq.w	80099f4 <_dtoa_r+0x43c>
 8009bcc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009bce:	1e73      	subs	r3, r6, #1
 8009bd0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009bd2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009bd6:	2b30      	cmp	r3, #48	@ 0x30
 8009bd8:	d0f8      	beq.n	8009bcc <_dtoa_r+0x614>
 8009bda:	4647      	mov	r7, r8
 8009bdc:	e03b      	b.n	8009c56 <_dtoa_r+0x69e>
 8009bde:	4b9e      	ldr	r3, [pc, #632]	@ (8009e58 <_dtoa_r+0x8a0>)
 8009be0:	f7f6 fd2a 	bl	8000638 <__aeabi_dmul>
 8009be4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009be8:	e7bc      	b.n	8009b64 <_dtoa_r+0x5ac>
 8009bea:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009bee:	4656      	mov	r6, sl
 8009bf0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009bf4:	4620      	mov	r0, r4
 8009bf6:	4629      	mov	r1, r5
 8009bf8:	f7f6 fe48 	bl	800088c <__aeabi_ddiv>
 8009bfc:	f7f6 ffcc 	bl	8000b98 <__aeabi_d2iz>
 8009c00:	4680      	mov	r8, r0
 8009c02:	f7f6 fcaf 	bl	8000564 <__aeabi_i2d>
 8009c06:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c0a:	f7f6 fd15 	bl	8000638 <__aeabi_dmul>
 8009c0e:	4602      	mov	r2, r0
 8009c10:	460b      	mov	r3, r1
 8009c12:	4620      	mov	r0, r4
 8009c14:	4629      	mov	r1, r5
 8009c16:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009c1a:	f7f6 fb55 	bl	80002c8 <__aeabi_dsub>
 8009c1e:	f806 4b01 	strb.w	r4, [r6], #1
 8009c22:	9d03      	ldr	r5, [sp, #12]
 8009c24:	eba6 040a 	sub.w	r4, r6, sl
 8009c28:	42a5      	cmp	r5, r4
 8009c2a:	4602      	mov	r2, r0
 8009c2c:	460b      	mov	r3, r1
 8009c2e:	d133      	bne.n	8009c98 <_dtoa_r+0x6e0>
 8009c30:	f7f6 fb4c 	bl	80002cc <__adddf3>
 8009c34:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c38:	4604      	mov	r4, r0
 8009c3a:	460d      	mov	r5, r1
 8009c3c:	f7f6 ff8c 	bl	8000b58 <__aeabi_dcmpgt>
 8009c40:	b9c0      	cbnz	r0, 8009c74 <_dtoa_r+0x6bc>
 8009c42:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c46:	4620      	mov	r0, r4
 8009c48:	4629      	mov	r1, r5
 8009c4a:	f7f6 ff5d 	bl	8000b08 <__aeabi_dcmpeq>
 8009c4e:	b110      	cbz	r0, 8009c56 <_dtoa_r+0x69e>
 8009c50:	f018 0f01 	tst.w	r8, #1
 8009c54:	d10e      	bne.n	8009c74 <_dtoa_r+0x6bc>
 8009c56:	9902      	ldr	r1, [sp, #8]
 8009c58:	4648      	mov	r0, r9
 8009c5a:	f000 fd77 	bl	800a74c <_Bfree>
 8009c5e:	2300      	movs	r3, #0
 8009c60:	7033      	strb	r3, [r6, #0]
 8009c62:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009c64:	3701      	adds	r7, #1
 8009c66:	601f      	str	r7, [r3, #0]
 8009c68:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	f000 824b 	beq.w	800a106 <_dtoa_r+0xb4e>
 8009c70:	601e      	str	r6, [r3, #0]
 8009c72:	e248      	b.n	800a106 <_dtoa_r+0xb4e>
 8009c74:	46b8      	mov	r8, r7
 8009c76:	4633      	mov	r3, r6
 8009c78:	461e      	mov	r6, r3
 8009c7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009c7e:	2a39      	cmp	r2, #57	@ 0x39
 8009c80:	d106      	bne.n	8009c90 <_dtoa_r+0x6d8>
 8009c82:	459a      	cmp	sl, r3
 8009c84:	d1f8      	bne.n	8009c78 <_dtoa_r+0x6c0>
 8009c86:	2230      	movs	r2, #48	@ 0x30
 8009c88:	f108 0801 	add.w	r8, r8, #1
 8009c8c:	f88a 2000 	strb.w	r2, [sl]
 8009c90:	781a      	ldrb	r2, [r3, #0]
 8009c92:	3201      	adds	r2, #1
 8009c94:	701a      	strb	r2, [r3, #0]
 8009c96:	e7a0      	b.n	8009bda <_dtoa_r+0x622>
 8009c98:	4b6f      	ldr	r3, [pc, #444]	@ (8009e58 <_dtoa_r+0x8a0>)
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	f7f6 fccc 	bl	8000638 <__aeabi_dmul>
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	4604      	mov	r4, r0
 8009ca6:	460d      	mov	r5, r1
 8009ca8:	f7f6 ff2e 	bl	8000b08 <__aeabi_dcmpeq>
 8009cac:	2800      	cmp	r0, #0
 8009cae:	d09f      	beq.n	8009bf0 <_dtoa_r+0x638>
 8009cb0:	e7d1      	b.n	8009c56 <_dtoa_r+0x69e>
 8009cb2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009cb4:	2a00      	cmp	r2, #0
 8009cb6:	f000 80ea 	beq.w	8009e8e <_dtoa_r+0x8d6>
 8009cba:	9a07      	ldr	r2, [sp, #28]
 8009cbc:	2a01      	cmp	r2, #1
 8009cbe:	f300 80cd 	bgt.w	8009e5c <_dtoa_r+0x8a4>
 8009cc2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009cc4:	2a00      	cmp	r2, #0
 8009cc6:	f000 80c1 	beq.w	8009e4c <_dtoa_r+0x894>
 8009cca:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009cce:	9c08      	ldr	r4, [sp, #32]
 8009cd0:	9e00      	ldr	r6, [sp, #0]
 8009cd2:	9a00      	ldr	r2, [sp, #0]
 8009cd4:	441a      	add	r2, r3
 8009cd6:	9200      	str	r2, [sp, #0]
 8009cd8:	9a06      	ldr	r2, [sp, #24]
 8009cda:	2101      	movs	r1, #1
 8009cdc:	441a      	add	r2, r3
 8009cde:	4648      	mov	r0, r9
 8009ce0:	9206      	str	r2, [sp, #24]
 8009ce2:	f000 fde7 	bl	800a8b4 <__i2b>
 8009ce6:	4605      	mov	r5, r0
 8009ce8:	b166      	cbz	r6, 8009d04 <_dtoa_r+0x74c>
 8009cea:	9b06      	ldr	r3, [sp, #24]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	dd09      	ble.n	8009d04 <_dtoa_r+0x74c>
 8009cf0:	42b3      	cmp	r3, r6
 8009cf2:	9a00      	ldr	r2, [sp, #0]
 8009cf4:	bfa8      	it	ge
 8009cf6:	4633      	movge	r3, r6
 8009cf8:	1ad2      	subs	r2, r2, r3
 8009cfa:	9200      	str	r2, [sp, #0]
 8009cfc:	9a06      	ldr	r2, [sp, #24]
 8009cfe:	1af6      	subs	r6, r6, r3
 8009d00:	1ad3      	subs	r3, r2, r3
 8009d02:	9306      	str	r3, [sp, #24]
 8009d04:	9b08      	ldr	r3, [sp, #32]
 8009d06:	b30b      	cbz	r3, 8009d4c <_dtoa_r+0x794>
 8009d08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	f000 80c6 	beq.w	8009e9c <_dtoa_r+0x8e4>
 8009d10:	2c00      	cmp	r4, #0
 8009d12:	f000 80c0 	beq.w	8009e96 <_dtoa_r+0x8de>
 8009d16:	4629      	mov	r1, r5
 8009d18:	4622      	mov	r2, r4
 8009d1a:	4648      	mov	r0, r9
 8009d1c:	f000 fe82 	bl	800aa24 <__pow5mult>
 8009d20:	9a02      	ldr	r2, [sp, #8]
 8009d22:	4601      	mov	r1, r0
 8009d24:	4605      	mov	r5, r0
 8009d26:	4648      	mov	r0, r9
 8009d28:	f000 fdda 	bl	800a8e0 <__multiply>
 8009d2c:	9902      	ldr	r1, [sp, #8]
 8009d2e:	4680      	mov	r8, r0
 8009d30:	4648      	mov	r0, r9
 8009d32:	f000 fd0b 	bl	800a74c <_Bfree>
 8009d36:	9b08      	ldr	r3, [sp, #32]
 8009d38:	1b1b      	subs	r3, r3, r4
 8009d3a:	9308      	str	r3, [sp, #32]
 8009d3c:	f000 80b1 	beq.w	8009ea2 <_dtoa_r+0x8ea>
 8009d40:	9a08      	ldr	r2, [sp, #32]
 8009d42:	4641      	mov	r1, r8
 8009d44:	4648      	mov	r0, r9
 8009d46:	f000 fe6d 	bl	800aa24 <__pow5mult>
 8009d4a:	9002      	str	r0, [sp, #8]
 8009d4c:	2101      	movs	r1, #1
 8009d4e:	4648      	mov	r0, r9
 8009d50:	f000 fdb0 	bl	800a8b4 <__i2b>
 8009d54:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009d56:	4604      	mov	r4, r0
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	f000 81d8 	beq.w	800a10e <_dtoa_r+0xb56>
 8009d5e:	461a      	mov	r2, r3
 8009d60:	4601      	mov	r1, r0
 8009d62:	4648      	mov	r0, r9
 8009d64:	f000 fe5e 	bl	800aa24 <__pow5mult>
 8009d68:	9b07      	ldr	r3, [sp, #28]
 8009d6a:	2b01      	cmp	r3, #1
 8009d6c:	4604      	mov	r4, r0
 8009d6e:	f300 809f 	bgt.w	8009eb0 <_dtoa_r+0x8f8>
 8009d72:	9b04      	ldr	r3, [sp, #16]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	f040 8097 	bne.w	8009ea8 <_dtoa_r+0x8f0>
 8009d7a:	9b05      	ldr	r3, [sp, #20]
 8009d7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	f040 8093 	bne.w	8009eac <_dtoa_r+0x8f4>
 8009d86:	9b05      	ldr	r3, [sp, #20]
 8009d88:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009d8c:	0d1b      	lsrs	r3, r3, #20
 8009d8e:	051b      	lsls	r3, r3, #20
 8009d90:	b133      	cbz	r3, 8009da0 <_dtoa_r+0x7e8>
 8009d92:	9b00      	ldr	r3, [sp, #0]
 8009d94:	3301      	adds	r3, #1
 8009d96:	9300      	str	r3, [sp, #0]
 8009d98:	9b06      	ldr	r3, [sp, #24]
 8009d9a:	3301      	adds	r3, #1
 8009d9c:	9306      	str	r3, [sp, #24]
 8009d9e:	2301      	movs	r3, #1
 8009da0:	9308      	str	r3, [sp, #32]
 8009da2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	f000 81b8 	beq.w	800a11a <_dtoa_r+0xb62>
 8009daa:	6923      	ldr	r3, [r4, #16]
 8009dac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009db0:	6918      	ldr	r0, [r3, #16]
 8009db2:	f000 fd33 	bl	800a81c <__hi0bits>
 8009db6:	f1c0 0020 	rsb	r0, r0, #32
 8009dba:	9b06      	ldr	r3, [sp, #24]
 8009dbc:	4418      	add	r0, r3
 8009dbe:	f010 001f 	ands.w	r0, r0, #31
 8009dc2:	f000 8082 	beq.w	8009eca <_dtoa_r+0x912>
 8009dc6:	f1c0 0320 	rsb	r3, r0, #32
 8009dca:	2b04      	cmp	r3, #4
 8009dcc:	dd73      	ble.n	8009eb6 <_dtoa_r+0x8fe>
 8009dce:	9b00      	ldr	r3, [sp, #0]
 8009dd0:	f1c0 001c 	rsb	r0, r0, #28
 8009dd4:	4403      	add	r3, r0
 8009dd6:	9300      	str	r3, [sp, #0]
 8009dd8:	9b06      	ldr	r3, [sp, #24]
 8009dda:	4403      	add	r3, r0
 8009ddc:	4406      	add	r6, r0
 8009dde:	9306      	str	r3, [sp, #24]
 8009de0:	9b00      	ldr	r3, [sp, #0]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	dd05      	ble.n	8009df2 <_dtoa_r+0x83a>
 8009de6:	9902      	ldr	r1, [sp, #8]
 8009de8:	461a      	mov	r2, r3
 8009dea:	4648      	mov	r0, r9
 8009dec:	f000 fe74 	bl	800aad8 <__lshift>
 8009df0:	9002      	str	r0, [sp, #8]
 8009df2:	9b06      	ldr	r3, [sp, #24]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	dd05      	ble.n	8009e04 <_dtoa_r+0x84c>
 8009df8:	4621      	mov	r1, r4
 8009dfa:	461a      	mov	r2, r3
 8009dfc:	4648      	mov	r0, r9
 8009dfe:	f000 fe6b 	bl	800aad8 <__lshift>
 8009e02:	4604      	mov	r4, r0
 8009e04:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d061      	beq.n	8009ece <_dtoa_r+0x916>
 8009e0a:	9802      	ldr	r0, [sp, #8]
 8009e0c:	4621      	mov	r1, r4
 8009e0e:	f000 fecf 	bl	800abb0 <__mcmp>
 8009e12:	2800      	cmp	r0, #0
 8009e14:	da5b      	bge.n	8009ece <_dtoa_r+0x916>
 8009e16:	2300      	movs	r3, #0
 8009e18:	9902      	ldr	r1, [sp, #8]
 8009e1a:	220a      	movs	r2, #10
 8009e1c:	4648      	mov	r0, r9
 8009e1e:	f000 fcb7 	bl	800a790 <__multadd>
 8009e22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e24:	9002      	str	r0, [sp, #8]
 8009e26:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	f000 8177 	beq.w	800a11e <_dtoa_r+0xb66>
 8009e30:	4629      	mov	r1, r5
 8009e32:	2300      	movs	r3, #0
 8009e34:	220a      	movs	r2, #10
 8009e36:	4648      	mov	r0, r9
 8009e38:	f000 fcaa 	bl	800a790 <__multadd>
 8009e3c:	f1bb 0f00 	cmp.w	fp, #0
 8009e40:	4605      	mov	r5, r0
 8009e42:	dc6f      	bgt.n	8009f24 <_dtoa_r+0x96c>
 8009e44:	9b07      	ldr	r3, [sp, #28]
 8009e46:	2b02      	cmp	r3, #2
 8009e48:	dc49      	bgt.n	8009ede <_dtoa_r+0x926>
 8009e4a:	e06b      	b.n	8009f24 <_dtoa_r+0x96c>
 8009e4c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009e4e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009e52:	e73c      	b.n	8009cce <_dtoa_r+0x716>
 8009e54:	3fe00000 	.word	0x3fe00000
 8009e58:	40240000 	.word	0x40240000
 8009e5c:	9b03      	ldr	r3, [sp, #12]
 8009e5e:	1e5c      	subs	r4, r3, #1
 8009e60:	9b08      	ldr	r3, [sp, #32]
 8009e62:	42a3      	cmp	r3, r4
 8009e64:	db09      	blt.n	8009e7a <_dtoa_r+0x8c2>
 8009e66:	1b1c      	subs	r4, r3, r4
 8009e68:	9b03      	ldr	r3, [sp, #12]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	f6bf af30 	bge.w	8009cd0 <_dtoa_r+0x718>
 8009e70:	9b00      	ldr	r3, [sp, #0]
 8009e72:	9a03      	ldr	r2, [sp, #12]
 8009e74:	1a9e      	subs	r6, r3, r2
 8009e76:	2300      	movs	r3, #0
 8009e78:	e72b      	b.n	8009cd2 <_dtoa_r+0x71a>
 8009e7a:	9b08      	ldr	r3, [sp, #32]
 8009e7c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009e7e:	9408      	str	r4, [sp, #32]
 8009e80:	1ae3      	subs	r3, r4, r3
 8009e82:	441a      	add	r2, r3
 8009e84:	9e00      	ldr	r6, [sp, #0]
 8009e86:	9b03      	ldr	r3, [sp, #12]
 8009e88:	920d      	str	r2, [sp, #52]	@ 0x34
 8009e8a:	2400      	movs	r4, #0
 8009e8c:	e721      	b.n	8009cd2 <_dtoa_r+0x71a>
 8009e8e:	9c08      	ldr	r4, [sp, #32]
 8009e90:	9e00      	ldr	r6, [sp, #0]
 8009e92:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8009e94:	e728      	b.n	8009ce8 <_dtoa_r+0x730>
 8009e96:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009e9a:	e751      	b.n	8009d40 <_dtoa_r+0x788>
 8009e9c:	9a08      	ldr	r2, [sp, #32]
 8009e9e:	9902      	ldr	r1, [sp, #8]
 8009ea0:	e750      	b.n	8009d44 <_dtoa_r+0x78c>
 8009ea2:	f8cd 8008 	str.w	r8, [sp, #8]
 8009ea6:	e751      	b.n	8009d4c <_dtoa_r+0x794>
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	e779      	b.n	8009da0 <_dtoa_r+0x7e8>
 8009eac:	9b04      	ldr	r3, [sp, #16]
 8009eae:	e777      	b.n	8009da0 <_dtoa_r+0x7e8>
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	9308      	str	r3, [sp, #32]
 8009eb4:	e779      	b.n	8009daa <_dtoa_r+0x7f2>
 8009eb6:	d093      	beq.n	8009de0 <_dtoa_r+0x828>
 8009eb8:	9a00      	ldr	r2, [sp, #0]
 8009eba:	331c      	adds	r3, #28
 8009ebc:	441a      	add	r2, r3
 8009ebe:	9200      	str	r2, [sp, #0]
 8009ec0:	9a06      	ldr	r2, [sp, #24]
 8009ec2:	441a      	add	r2, r3
 8009ec4:	441e      	add	r6, r3
 8009ec6:	9206      	str	r2, [sp, #24]
 8009ec8:	e78a      	b.n	8009de0 <_dtoa_r+0x828>
 8009eca:	4603      	mov	r3, r0
 8009ecc:	e7f4      	b.n	8009eb8 <_dtoa_r+0x900>
 8009ece:	9b03      	ldr	r3, [sp, #12]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	46b8      	mov	r8, r7
 8009ed4:	dc20      	bgt.n	8009f18 <_dtoa_r+0x960>
 8009ed6:	469b      	mov	fp, r3
 8009ed8:	9b07      	ldr	r3, [sp, #28]
 8009eda:	2b02      	cmp	r3, #2
 8009edc:	dd1e      	ble.n	8009f1c <_dtoa_r+0x964>
 8009ede:	f1bb 0f00 	cmp.w	fp, #0
 8009ee2:	f47f adb1 	bne.w	8009a48 <_dtoa_r+0x490>
 8009ee6:	4621      	mov	r1, r4
 8009ee8:	465b      	mov	r3, fp
 8009eea:	2205      	movs	r2, #5
 8009eec:	4648      	mov	r0, r9
 8009eee:	f000 fc4f 	bl	800a790 <__multadd>
 8009ef2:	4601      	mov	r1, r0
 8009ef4:	4604      	mov	r4, r0
 8009ef6:	9802      	ldr	r0, [sp, #8]
 8009ef8:	f000 fe5a 	bl	800abb0 <__mcmp>
 8009efc:	2800      	cmp	r0, #0
 8009efe:	f77f ada3 	ble.w	8009a48 <_dtoa_r+0x490>
 8009f02:	4656      	mov	r6, sl
 8009f04:	2331      	movs	r3, #49	@ 0x31
 8009f06:	f806 3b01 	strb.w	r3, [r6], #1
 8009f0a:	f108 0801 	add.w	r8, r8, #1
 8009f0e:	e59f      	b.n	8009a50 <_dtoa_r+0x498>
 8009f10:	9c03      	ldr	r4, [sp, #12]
 8009f12:	46b8      	mov	r8, r7
 8009f14:	4625      	mov	r5, r4
 8009f16:	e7f4      	b.n	8009f02 <_dtoa_r+0x94a>
 8009f18:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8009f1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	f000 8101 	beq.w	800a126 <_dtoa_r+0xb6e>
 8009f24:	2e00      	cmp	r6, #0
 8009f26:	dd05      	ble.n	8009f34 <_dtoa_r+0x97c>
 8009f28:	4629      	mov	r1, r5
 8009f2a:	4632      	mov	r2, r6
 8009f2c:	4648      	mov	r0, r9
 8009f2e:	f000 fdd3 	bl	800aad8 <__lshift>
 8009f32:	4605      	mov	r5, r0
 8009f34:	9b08      	ldr	r3, [sp, #32]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d05c      	beq.n	8009ff4 <_dtoa_r+0xa3c>
 8009f3a:	6869      	ldr	r1, [r5, #4]
 8009f3c:	4648      	mov	r0, r9
 8009f3e:	f000 fbc5 	bl	800a6cc <_Balloc>
 8009f42:	4606      	mov	r6, r0
 8009f44:	b928      	cbnz	r0, 8009f52 <_dtoa_r+0x99a>
 8009f46:	4b82      	ldr	r3, [pc, #520]	@ (800a150 <_dtoa_r+0xb98>)
 8009f48:	4602      	mov	r2, r0
 8009f4a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009f4e:	f7ff bb4a 	b.w	80095e6 <_dtoa_r+0x2e>
 8009f52:	692a      	ldr	r2, [r5, #16]
 8009f54:	3202      	adds	r2, #2
 8009f56:	0092      	lsls	r2, r2, #2
 8009f58:	f105 010c 	add.w	r1, r5, #12
 8009f5c:	300c      	adds	r0, #12
 8009f5e:	f7ff fa93 	bl	8009488 <memcpy>
 8009f62:	2201      	movs	r2, #1
 8009f64:	4631      	mov	r1, r6
 8009f66:	4648      	mov	r0, r9
 8009f68:	f000 fdb6 	bl	800aad8 <__lshift>
 8009f6c:	f10a 0301 	add.w	r3, sl, #1
 8009f70:	9300      	str	r3, [sp, #0]
 8009f72:	eb0a 030b 	add.w	r3, sl, fp
 8009f76:	9308      	str	r3, [sp, #32]
 8009f78:	9b04      	ldr	r3, [sp, #16]
 8009f7a:	f003 0301 	and.w	r3, r3, #1
 8009f7e:	462f      	mov	r7, r5
 8009f80:	9306      	str	r3, [sp, #24]
 8009f82:	4605      	mov	r5, r0
 8009f84:	9b00      	ldr	r3, [sp, #0]
 8009f86:	9802      	ldr	r0, [sp, #8]
 8009f88:	4621      	mov	r1, r4
 8009f8a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8009f8e:	f7ff fa89 	bl	80094a4 <quorem>
 8009f92:	4603      	mov	r3, r0
 8009f94:	3330      	adds	r3, #48	@ 0x30
 8009f96:	9003      	str	r0, [sp, #12]
 8009f98:	4639      	mov	r1, r7
 8009f9a:	9802      	ldr	r0, [sp, #8]
 8009f9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f9e:	f000 fe07 	bl	800abb0 <__mcmp>
 8009fa2:	462a      	mov	r2, r5
 8009fa4:	9004      	str	r0, [sp, #16]
 8009fa6:	4621      	mov	r1, r4
 8009fa8:	4648      	mov	r0, r9
 8009faa:	f000 fe1d 	bl	800abe8 <__mdiff>
 8009fae:	68c2      	ldr	r2, [r0, #12]
 8009fb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fb2:	4606      	mov	r6, r0
 8009fb4:	bb02      	cbnz	r2, 8009ff8 <_dtoa_r+0xa40>
 8009fb6:	4601      	mov	r1, r0
 8009fb8:	9802      	ldr	r0, [sp, #8]
 8009fba:	f000 fdf9 	bl	800abb0 <__mcmp>
 8009fbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fc0:	4602      	mov	r2, r0
 8009fc2:	4631      	mov	r1, r6
 8009fc4:	4648      	mov	r0, r9
 8009fc6:	920c      	str	r2, [sp, #48]	@ 0x30
 8009fc8:	9309      	str	r3, [sp, #36]	@ 0x24
 8009fca:	f000 fbbf 	bl	800a74c <_Bfree>
 8009fce:	9b07      	ldr	r3, [sp, #28]
 8009fd0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009fd2:	9e00      	ldr	r6, [sp, #0]
 8009fd4:	ea42 0103 	orr.w	r1, r2, r3
 8009fd8:	9b06      	ldr	r3, [sp, #24]
 8009fda:	4319      	orrs	r1, r3
 8009fdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009fde:	d10d      	bne.n	8009ffc <_dtoa_r+0xa44>
 8009fe0:	2b39      	cmp	r3, #57	@ 0x39
 8009fe2:	d027      	beq.n	800a034 <_dtoa_r+0xa7c>
 8009fe4:	9a04      	ldr	r2, [sp, #16]
 8009fe6:	2a00      	cmp	r2, #0
 8009fe8:	dd01      	ble.n	8009fee <_dtoa_r+0xa36>
 8009fea:	9b03      	ldr	r3, [sp, #12]
 8009fec:	3331      	adds	r3, #49	@ 0x31
 8009fee:	f88b 3000 	strb.w	r3, [fp]
 8009ff2:	e52e      	b.n	8009a52 <_dtoa_r+0x49a>
 8009ff4:	4628      	mov	r0, r5
 8009ff6:	e7b9      	b.n	8009f6c <_dtoa_r+0x9b4>
 8009ff8:	2201      	movs	r2, #1
 8009ffa:	e7e2      	b.n	8009fc2 <_dtoa_r+0xa0a>
 8009ffc:	9904      	ldr	r1, [sp, #16]
 8009ffe:	2900      	cmp	r1, #0
 800a000:	db04      	blt.n	800a00c <_dtoa_r+0xa54>
 800a002:	9807      	ldr	r0, [sp, #28]
 800a004:	4301      	orrs	r1, r0
 800a006:	9806      	ldr	r0, [sp, #24]
 800a008:	4301      	orrs	r1, r0
 800a00a:	d120      	bne.n	800a04e <_dtoa_r+0xa96>
 800a00c:	2a00      	cmp	r2, #0
 800a00e:	ddee      	ble.n	8009fee <_dtoa_r+0xa36>
 800a010:	9902      	ldr	r1, [sp, #8]
 800a012:	9300      	str	r3, [sp, #0]
 800a014:	2201      	movs	r2, #1
 800a016:	4648      	mov	r0, r9
 800a018:	f000 fd5e 	bl	800aad8 <__lshift>
 800a01c:	4621      	mov	r1, r4
 800a01e:	9002      	str	r0, [sp, #8]
 800a020:	f000 fdc6 	bl	800abb0 <__mcmp>
 800a024:	2800      	cmp	r0, #0
 800a026:	9b00      	ldr	r3, [sp, #0]
 800a028:	dc02      	bgt.n	800a030 <_dtoa_r+0xa78>
 800a02a:	d1e0      	bne.n	8009fee <_dtoa_r+0xa36>
 800a02c:	07da      	lsls	r2, r3, #31
 800a02e:	d5de      	bpl.n	8009fee <_dtoa_r+0xa36>
 800a030:	2b39      	cmp	r3, #57	@ 0x39
 800a032:	d1da      	bne.n	8009fea <_dtoa_r+0xa32>
 800a034:	2339      	movs	r3, #57	@ 0x39
 800a036:	f88b 3000 	strb.w	r3, [fp]
 800a03a:	4633      	mov	r3, r6
 800a03c:	461e      	mov	r6, r3
 800a03e:	3b01      	subs	r3, #1
 800a040:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a044:	2a39      	cmp	r2, #57	@ 0x39
 800a046:	d04e      	beq.n	800a0e6 <_dtoa_r+0xb2e>
 800a048:	3201      	adds	r2, #1
 800a04a:	701a      	strb	r2, [r3, #0]
 800a04c:	e501      	b.n	8009a52 <_dtoa_r+0x49a>
 800a04e:	2a00      	cmp	r2, #0
 800a050:	dd03      	ble.n	800a05a <_dtoa_r+0xaa2>
 800a052:	2b39      	cmp	r3, #57	@ 0x39
 800a054:	d0ee      	beq.n	800a034 <_dtoa_r+0xa7c>
 800a056:	3301      	adds	r3, #1
 800a058:	e7c9      	b.n	8009fee <_dtoa_r+0xa36>
 800a05a:	9a00      	ldr	r2, [sp, #0]
 800a05c:	9908      	ldr	r1, [sp, #32]
 800a05e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a062:	428a      	cmp	r2, r1
 800a064:	d028      	beq.n	800a0b8 <_dtoa_r+0xb00>
 800a066:	9902      	ldr	r1, [sp, #8]
 800a068:	2300      	movs	r3, #0
 800a06a:	220a      	movs	r2, #10
 800a06c:	4648      	mov	r0, r9
 800a06e:	f000 fb8f 	bl	800a790 <__multadd>
 800a072:	42af      	cmp	r7, r5
 800a074:	9002      	str	r0, [sp, #8]
 800a076:	f04f 0300 	mov.w	r3, #0
 800a07a:	f04f 020a 	mov.w	r2, #10
 800a07e:	4639      	mov	r1, r7
 800a080:	4648      	mov	r0, r9
 800a082:	d107      	bne.n	800a094 <_dtoa_r+0xadc>
 800a084:	f000 fb84 	bl	800a790 <__multadd>
 800a088:	4607      	mov	r7, r0
 800a08a:	4605      	mov	r5, r0
 800a08c:	9b00      	ldr	r3, [sp, #0]
 800a08e:	3301      	adds	r3, #1
 800a090:	9300      	str	r3, [sp, #0]
 800a092:	e777      	b.n	8009f84 <_dtoa_r+0x9cc>
 800a094:	f000 fb7c 	bl	800a790 <__multadd>
 800a098:	4629      	mov	r1, r5
 800a09a:	4607      	mov	r7, r0
 800a09c:	2300      	movs	r3, #0
 800a09e:	220a      	movs	r2, #10
 800a0a0:	4648      	mov	r0, r9
 800a0a2:	f000 fb75 	bl	800a790 <__multadd>
 800a0a6:	4605      	mov	r5, r0
 800a0a8:	e7f0      	b.n	800a08c <_dtoa_r+0xad4>
 800a0aa:	f1bb 0f00 	cmp.w	fp, #0
 800a0ae:	bfcc      	ite	gt
 800a0b0:	465e      	movgt	r6, fp
 800a0b2:	2601      	movle	r6, #1
 800a0b4:	4456      	add	r6, sl
 800a0b6:	2700      	movs	r7, #0
 800a0b8:	9902      	ldr	r1, [sp, #8]
 800a0ba:	9300      	str	r3, [sp, #0]
 800a0bc:	2201      	movs	r2, #1
 800a0be:	4648      	mov	r0, r9
 800a0c0:	f000 fd0a 	bl	800aad8 <__lshift>
 800a0c4:	4621      	mov	r1, r4
 800a0c6:	9002      	str	r0, [sp, #8]
 800a0c8:	f000 fd72 	bl	800abb0 <__mcmp>
 800a0cc:	2800      	cmp	r0, #0
 800a0ce:	dcb4      	bgt.n	800a03a <_dtoa_r+0xa82>
 800a0d0:	d102      	bne.n	800a0d8 <_dtoa_r+0xb20>
 800a0d2:	9b00      	ldr	r3, [sp, #0]
 800a0d4:	07db      	lsls	r3, r3, #31
 800a0d6:	d4b0      	bmi.n	800a03a <_dtoa_r+0xa82>
 800a0d8:	4633      	mov	r3, r6
 800a0da:	461e      	mov	r6, r3
 800a0dc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a0e0:	2a30      	cmp	r2, #48	@ 0x30
 800a0e2:	d0fa      	beq.n	800a0da <_dtoa_r+0xb22>
 800a0e4:	e4b5      	b.n	8009a52 <_dtoa_r+0x49a>
 800a0e6:	459a      	cmp	sl, r3
 800a0e8:	d1a8      	bne.n	800a03c <_dtoa_r+0xa84>
 800a0ea:	2331      	movs	r3, #49	@ 0x31
 800a0ec:	f108 0801 	add.w	r8, r8, #1
 800a0f0:	f88a 3000 	strb.w	r3, [sl]
 800a0f4:	e4ad      	b.n	8009a52 <_dtoa_r+0x49a>
 800a0f6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a0f8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800a154 <_dtoa_r+0xb9c>
 800a0fc:	b11b      	cbz	r3, 800a106 <_dtoa_r+0xb4e>
 800a0fe:	f10a 0308 	add.w	r3, sl, #8
 800a102:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a104:	6013      	str	r3, [r2, #0]
 800a106:	4650      	mov	r0, sl
 800a108:	b017      	add	sp, #92	@ 0x5c
 800a10a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a10e:	9b07      	ldr	r3, [sp, #28]
 800a110:	2b01      	cmp	r3, #1
 800a112:	f77f ae2e 	ble.w	8009d72 <_dtoa_r+0x7ba>
 800a116:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a118:	9308      	str	r3, [sp, #32]
 800a11a:	2001      	movs	r0, #1
 800a11c:	e64d      	b.n	8009dba <_dtoa_r+0x802>
 800a11e:	f1bb 0f00 	cmp.w	fp, #0
 800a122:	f77f aed9 	ble.w	8009ed8 <_dtoa_r+0x920>
 800a126:	4656      	mov	r6, sl
 800a128:	9802      	ldr	r0, [sp, #8]
 800a12a:	4621      	mov	r1, r4
 800a12c:	f7ff f9ba 	bl	80094a4 <quorem>
 800a130:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800a134:	f806 3b01 	strb.w	r3, [r6], #1
 800a138:	eba6 020a 	sub.w	r2, r6, sl
 800a13c:	4593      	cmp	fp, r2
 800a13e:	ddb4      	ble.n	800a0aa <_dtoa_r+0xaf2>
 800a140:	9902      	ldr	r1, [sp, #8]
 800a142:	2300      	movs	r3, #0
 800a144:	220a      	movs	r2, #10
 800a146:	4648      	mov	r0, r9
 800a148:	f000 fb22 	bl	800a790 <__multadd>
 800a14c:	9002      	str	r0, [sp, #8]
 800a14e:	e7eb      	b.n	800a128 <_dtoa_r+0xb70>
 800a150:	0800c56c 	.word	0x0800c56c
 800a154:	0800c4f0 	.word	0x0800c4f0

0800a158 <__ssputs_r>:
 800a158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a15c:	688e      	ldr	r6, [r1, #8]
 800a15e:	461f      	mov	r7, r3
 800a160:	42be      	cmp	r6, r7
 800a162:	680b      	ldr	r3, [r1, #0]
 800a164:	4682      	mov	sl, r0
 800a166:	460c      	mov	r4, r1
 800a168:	4690      	mov	r8, r2
 800a16a:	d82d      	bhi.n	800a1c8 <__ssputs_r+0x70>
 800a16c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a170:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a174:	d026      	beq.n	800a1c4 <__ssputs_r+0x6c>
 800a176:	6965      	ldr	r5, [r4, #20]
 800a178:	6909      	ldr	r1, [r1, #16]
 800a17a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a17e:	eba3 0901 	sub.w	r9, r3, r1
 800a182:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a186:	1c7b      	adds	r3, r7, #1
 800a188:	444b      	add	r3, r9
 800a18a:	106d      	asrs	r5, r5, #1
 800a18c:	429d      	cmp	r5, r3
 800a18e:	bf38      	it	cc
 800a190:	461d      	movcc	r5, r3
 800a192:	0553      	lsls	r3, r2, #21
 800a194:	d527      	bpl.n	800a1e6 <__ssputs_r+0x8e>
 800a196:	4629      	mov	r1, r5
 800a198:	f000 f960 	bl	800a45c <_malloc_r>
 800a19c:	4606      	mov	r6, r0
 800a19e:	b360      	cbz	r0, 800a1fa <__ssputs_r+0xa2>
 800a1a0:	6921      	ldr	r1, [r4, #16]
 800a1a2:	464a      	mov	r2, r9
 800a1a4:	f7ff f970 	bl	8009488 <memcpy>
 800a1a8:	89a3      	ldrh	r3, [r4, #12]
 800a1aa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a1ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a1b2:	81a3      	strh	r3, [r4, #12]
 800a1b4:	6126      	str	r6, [r4, #16]
 800a1b6:	6165      	str	r5, [r4, #20]
 800a1b8:	444e      	add	r6, r9
 800a1ba:	eba5 0509 	sub.w	r5, r5, r9
 800a1be:	6026      	str	r6, [r4, #0]
 800a1c0:	60a5      	str	r5, [r4, #8]
 800a1c2:	463e      	mov	r6, r7
 800a1c4:	42be      	cmp	r6, r7
 800a1c6:	d900      	bls.n	800a1ca <__ssputs_r+0x72>
 800a1c8:	463e      	mov	r6, r7
 800a1ca:	6820      	ldr	r0, [r4, #0]
 800a1cc:	4632      	mov	r2, r6
 800a1ce:	4641      	mov	r1, r8
 800a1d0:	f000 fe67 	bl	800aea2 <memmove>
 800a1d4:	68a3      	ldr	r3, [r4, #8]
 800a1d6:	1b9b      	subs	r3, r3, r6
 800a1d8:	60a3      	str	r3, [r4, #8]
 800a1da:	6823      	ldr	r3, [r4, #0]
 800a1dc:	4433      	add	r3, r6
 800a1de:	6023      	str	r3, [r4, #0]
 800a1e0:	2000      	movs	r0, #0
 800a1e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1e6:	462a      	mov	r2, r5
 800a1e8:	f000 fe2d 	bl	800ae46 <_realloc_r>
 800a1ec:	4606      	mov	r6, r0
 800a1ee:	2800      	cmp	r0, #0
 800a1f0:	d1e0      	bne.n	800a1b4 <__ssputs_r+0x5c>
 800a1f2:	6921      	ldr	r1, [r4, #16]
 800a1f4:	4650      	mov	r0, sl
 800a1f6:	f000 fef7 	bl	800afe8 <_free_r>
 800a1fa:	230c      	movs	r3, #12
 800a1fc:	f8ca 3000 	str.w	r3, [sl]
 800a200:	89a3      	ldrh	r3, [r4, #12]
 800a202:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a206:	81a3      	strh	r3, [r4, #12]
 800a208:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a20c:	e7e9      	b.n	800a1e2 <__ssputs_r+0x8a>
	...

0800a210 <_svfiprintf_r>:
 800a210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a214:	4698      	mov	r8, r3
 800a216:	898b      	ldrh	r3, [r1, #12]
 800a218:	061b      	lsls	r3, r3, #24
 800a21a:	b09d      	sub	sp, #116	@ 0x74
 800a21c:	4607      	mov	r7, r0
 800a21e:	460d      	mov	r5, r1
 800a220:	4614      	mov	r4, r2
 800a222:	d510      	bpl.n	800a246 <_svfiprintf_r+0x36>
 800a224:	690b      	ldr	r3, [r1, #16]
 800a226:	b973      	cbnz	r3, 800a246 <_svfiprintf_r+0x36>
 800a228:	2140      	movs	r1, #64	@ 0x40
 800a22a:	f000 f917 	bl	800a45c <_malloc_r>
 800a22e:	6028      	str	r0, [r5, #0]
 800a230:	6128      	str	r0, [r5, #16]
 800a232:	b930      	cbnz	r0, 800a242 <_svfiprintf_r+0x32>
 800a234:	230c      	movs	r3, #12
 800a236:	603b      	str	r3, [r7, #0]
 800a238:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a23c:	b01d      	add	sp, #116	@ 0x74
 800a23e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a242:	2340      	movs	r3, #64	@ 0x40
 800a244:	616b      	str	r3, [r5, #20]
 800a246:	2300      	movs	r3, #0
 800a248:	9309      	str	r3, [sp, #36]	@ 0x24
 800a24a:	2320      	movs	r3, #32
 800a24c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a250:	f8cd 800c 	str.w	r8, [sp, #12]
 800a254:	2330      	movs	r3, #48	@ 0x30
 800a256:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a3f4 <_svfiprintf_r+0x1e4>
 800a25a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a25e:	f04f 0901 	mov.w	r9, #1
 800a262:	4623      	mov	r3, r4
 800a264:	469a      	mov	sl, r3
 800a266:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a26a:	b10a      	cbz	r2, 800a270 <_svfiprintf_r+0x60>
 800a26c:	2a25      	cmp	r2, #37	@ 0x25
 800a26e:	d1f9      	bne.n	800a264 <_svfiprintf_r+0x54>
 800a270:	ebba 0b04 	subs.w	fp, sl, r4
 800a274:	d00b      	beq.n	800a28e <_svfiprintf_r+0x7e>
 800a276:	465b      	mov	r3, fp
 800a278:	4622      	mov	r2, r4
 800a27a:	4629      	mov	r1, r5
 800a27c:	4638      	mov	r0, r7
 800a27e:	f7ff ff6b 	bl	800a158 <__ssputs_r>
 800a282:	3001      	adds	r0, #1
 800a284:	f000 80a7 	beq.w	800a3d6 <_svfiprintf_r+0x1c6>
 800a288:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a28a:	445a      	add	r2, fp
 800a28c:	9209      	str	r2, [sp, #36]	@ 0x24
 800a28e:	f89a 3000 	ldrb.w	r3, [sl]
 800a292:	2b00      	cmp	r3, #0
 800a294:	f000 809f 	beq.w	800a3d6 <_svfiprintf_r+0x1c6>
 800a298:	2300      	movs	r3, #0
 800a29a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a29e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a2a2:	f10a 0a01 	add.w	sl, sl, #1
 800a2a6:	9304      	str	r3, [sp, #16]
 800a2a8:	9307      	str	r3, [sp, #28]
 800a2aa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a2ae:	931a      	str	r3, [sp, #104]	@ 0x68
 800a2b0:	4654      	mov	r4, sl
 800a2b2:	2205      	movs	r2, #5
 800a2b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2b8:	484e      	ldr	r0, [pc, #312]	@ (800a3f4 <_svfiprintf_r+0x1e4>)
 800a2ba:	f7f5 ffa9 	bl	8000210 <memchr>
 800a2be:	9a04      	ldr	r2, [sp, #16]
 800a2c0:	b9d8      	cbnz	r0, 800a2fa <_svfiprintf_r+0xea>
 800a2c2:	06d0      	lsls	r0, r2, #27
 800a2c4:	bf44      	itt	mi
 800a2c6:	2320      	movmi	r3, #32
 800a2c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a2cc:	0711      	lsls	r1, r2, #28
 800a2ce:	bf44      	itt	mi
 800a2d0:	232b      	movmi	r3, #43	@ 0x2b
 800a2d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a2d6:	f89a 3000 	ldrb.w	r3, [sl]
 800a2da:	2b2a      	cmp	r3, #42	@ 0x2a
 800a2dc:	d015      	beq.n	800a30a <_svfiprintf_r+0xfa>
 800a2de:	9a07      	ldr	r2, [sp, #28]
 800a2e0:	4654      	mov	r4, sl
 800a2e2:	2000      	movs	r0, #0
 800a2e4:	f04f 0c0a 	mov.w	ip, #10
 800a2e8:	4621      	mov	r1, r4
 800a2ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a2ee:	3b30      	subs	r3, #48	@ 0x30
 800a2f0:	2b09      	cmp	r3, #9
 800a2f2:	d94b      	bls.n	800a38c <_svfiprintf_r+0x17c>
 800a2f4:	b1b0      	cbz	r0, 800a324 <_svfiprintf_r+0x114>
 800a2f6:	9207      	str	r2, [sp, #28]
 800a2f8:	e014      	b.n	800a324 <_svfiprintf_r+0x114>
 800a2fa:	eba0 0308 	sub.w	r3, r0, r8
 800a2fe:	fa09 f303 	lsl.w	r3, r9, r3
 800a302:	4313      	orrs	r3, r2
 800a304:	9304      	str	r3, [sp, #16]
 800a306:	46a2      	mov	sl, r4
 800a308:	e7d2      	b.n	800a2b0 <_svfiprintf_r+0xa0>
 800a30a:	9b03      	ldr	r3, [sp, #12]
 800a30c:	1d19      	adds	r1, r3, #4
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	9103      	str	r1, [sp, #12]
 800a312:	2b00      	cmp	r3, #0
 800a314:	bfbb      	ittet	lt
 800a316:	425b      	neglt	r3, r3
 800a318:	f042 0202 	orrlt.w	r2, r2, #2
 800a31c:	9307      	strge	r3, [sp, #28]
 800a31e:	9307      	strlt	r3, [sp, #28]
 800a320:	bfb8      	it	lt
 800a322:	9204      	strlt	r2, [sp, #16]
 800a324:	7823      	ldrb	r3, [r4, #0]
 800a326:	2b2e      	cmp	r3, #46	@ 0x2e
 800a328:	d10a      	bne.n	800a340 <_svfiprintf_r+0x130>
 800a32a:	7863      	ldrb	r3, [r4, #1]
 800a32c:	2b2a      	cmp	r3, #42	@ 0x2a
 800a32e:	d132      	bne.n	800a396 <_svfiprintf_r+0x186>
 800a330:	9b03      	ldr	r3, [sp, #12]
 800a332:	1d1a      	adds	r2, r3, #4
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	9203      	str	r2, [sp, #12]
 800a338:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a33c:	3402      	adds	r4, #2
 800a33e:	9305      	str	r3, [sp, #20]
 800a340:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a404 <_svfiprintf_r+0x1f4>
 800a344:	7821      	ldrb	r1, [r4, #0]
 800a346:	2203      	movs	r2, #3
 800a348:	4650      	mov	r0, sl
 800a34a:	f7f5 ff61 	bl	8000210 <memchr>
 800a34e:	b138      	cbz	r0, 800a360 <_svfiprintf_r+0x150>
 800a350:	9b04      	ldr	r3, [sp, #16]
 800a352:	eba0 000a 	sub.w	r0, r0, sl
 800a356:	2240      	movs	r2, #64	@ 0x40
 800a358:	4082      	lsls	r2, r0
 800a35a:	4313      	orrs	r3, r2
 800a35c:	3401      	adds	r4, #1
 800a35e:	9304      	str	r3, [sp, #16]
 800a360:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a364:	4824      	ldr	r0, [pc, #144]	@ (800a3f8 <_svfiprintf_r+0x1e8>)
 800a366:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a36a:	2206      	movs	r2, #6
 800a36c:	f7f5 ff50 	bl	8000210 <memchr>
 800a370:	2800      	cmp	r0, #0
 800a372:	d036      	beq.n	800a3e2 <_svfiprintf_r+0x1d2>
 800a374:	4b21      	ldr	r3, [pc, #132]	@ (800a3fc <_svfiprintf_r+0x1ec>)
 800a376:	bb1b      	cbnz	r3, 800a3c0 <_svfiprintf_r+0x1b0>
 800a378:	9b03      	ldr	r3, [sp, #12]
 800a37a:	3307      	adds	r3, #7
 800a37c:	f023 0307 	bic.w	r3, r3, #7
 800a380:	3308      	adds	r3, #8
 800a382:	9303      	str	r3, [sp, #12]
 800a384:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a386:	4433      	add	r3, r6
 800a388:	9309      	str	r3, [sp, #36]	@ 0x24
 800a38a:	e76a      	b.n	800a262 <_svfiprintf_r+0x52>
 800a38c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a390:	460c      	mov	r4, r1
 800a392:	2001      	movs	r0, #1
 800a394:	e7a8      	b.n	800a2e8 <_svfiprintf_r+0xd8>
 800a396:	2300      	movs	r3, #0
 800a398:	3401      	adds	r4, #1
 800a39a:	9305      	str	r3, [sp, #20]
 800a39c:	4619      	mov	r1, r3
 800a39e:	f04f 0c0a 	mov.w	ip, #10
 800a3a2:	4620      	mov	r0, r4
 800a3a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3a8:	3a30      	subs	r2, #48	@ 0x30
 800a3aa:	2a09      	cmp	r2, #9
 800a3ac:	d903      	bls.n	800a3b6 <_svfiprintf_r+0x1a6>
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d0c6      	beq.n	800a340 <_svfiprintf_r+0x130>
 800a3b2:	9105      	str	r1, [sp, #20]
 800a3b4:	e7c4      	b.n	800a340 <_svfiprintf_r+0x130>
 800a3b6:	fb0c 2101 	mla	r1, ip, r1, r2
 800a3ba:	4604      	mov	r4, r0
 800a3bc:	2301      	movs	r3, #1
 800a3be:	e7f0      	b.n	800a3a2 <_svfiprintf_r+0x192>
 800a3c0:	ab03      	add	r3, sp, #12
 800a3c2:	9300      	str	r3, [sp, #0]
 800a3c4:	462a      	mov	r2, r5
 800a3c6:	4b0e      	ldr	r3, [pc, #56]	@ (800a400 <_svfiprintf_r+0x1f0>)
 800a3c8:	a904      	add	r1, sp, #16
 800a3ca:	4638      	mov	r0, r7
 800a3cc:	f7fe fb74 	bl	8008ab8 <_printf_float>
 800a3d0:	1c42      	adds	r2, r0, #1
 800a3d2:	4606      	mov	r6, r0
 800a3d4:	d1d6      	bne.n	800a384 <_svfiprintf_r+0x174>
 800a3d6:	89ab      	ldrh	r3, [r5, #12]
 800a3d8:	065b      	lsls	r3, r3, #25
 800a3da:	f53f af2d 	bmi.w	800a238 <_svfiprintf_r+0x28>
 800a3de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a3e0:	e72c      	b.n	800a23c <_svfiprintf_r+0x2c>
 800a3e2:	ab03      	add	r3, sp, #12
 800a3e4:	9300      	str	r3, [sp, #0]
 800a3e6:	462a      	mov	r2, r5
 800a3e8:	4b05      	ldr	r3, [pc, #20]	@ (800a400 <_svfiprintf_r+0x1f0>)
 800a3ea:	a904      	add	r1, sp, #16
 800a3ec:	4638      	mov	r0, r7
 800a3ee:	f7fe fdfb 	bl	8008fe8 <_printf_i>
 800a3f2:	e7ed      	b.n	800a3d0 <_svfiprintf_r+0x1c0>
 800a3f4:	0800c57d 	.word	0x0800c57d
 800a3f8:	0800c587 	.word	0x0800c587
 800a3fc:	08008ab9 	.word	0x08008ab9
 800a400:	0800a159 	.word	0x0800a159
 800a404:	0800c583 	.word	0x0800c583

0800a408 <malloc>:
 800a408:	4b02      	ldr	r3, [pc, #8]	@ (800a414 <malloc+0xc>)
 800a40a:	4601      	mov	r1, r0
 800a40c:	6818      	ldr	r0, [r3, #0]
 800a40e:	f000 b825 	b.w	800a45c <_malloc_r>
 800a412:	bf00      	nop
 800a414:	2000002c 	.word	0x2000002c

0800a418 <sbrk_aligned>:
 800a418:	b570      	push	{r4, r5, r6, lr}
 800a41a:	4e0f      	ldr	r6, [pc, #60]	@ (800a458 <sbrk_aligned+0x40>)
 800a41c:	460c      	mov	r4, r1
 800a41e:	6831      	ldr	r1, [r6, #0]
 800a420:	4605      	mov	r5, r0
 800a422:	b911      	cbnz	r1, 800a42a <sbrk_aligned+0x12>
 800a424:	f000 fd7c 	bl	800af20 <_sbrk_r>
 800a428:	6030      	str	r0, [r6, #0]
 800a42a:	4621      	mov	r1, r4
 800a42c:	4628      	mov	r0, r5
 800a42e:	f000 fd77 	bl	800af20 <_sbrk_r>
 800a432:	1c43      	adds	r3, r0, #1
 800a434:	d103      	bne.n	800a43e <sbrk_aligned+0x26>
 800a436:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800a43a:	4620      	mov	r0, r4
 800a43c:	bd70      	pop	{r4, r5, r6, pc}
 800a43e:	1cc4      	adds	r4, r0, #3
 800a440:	f024 0403 	bic.w	r4, r4, #3
 800a444:	42a0      	cmp	r0, r4
 800a446:	d0f8      	beq.n	800a43a <sbrk_aligned+0x22>
 800a448:	1a21      	subs	r1, r4, r0
 800a44a:	4628      	mov	r0, r5
 800a44c:	f000 fd68 	bl	800af20 <_sbrk_r>
 800a450:	3001      	adds	r0, #1
 800a452:	d1f2      	bne.n	800a43a <sbrk_aligned+0x22>
 800a454:	e7ef      	b.n	800a436 <sbrk_aligned+0x1e>
 800a456:	bf00      	nop
 800a458:	200051a0 	.word	0x200051a0

0800a45c <_malloc_r>:
 800a45c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a460:	1ccd      	adds	r5, r1, #3
 800a462:	f025 0503 	bic.w	r5, r5, #3
 800a466:	3508      	adds	r5, #8
 800a468:	2d0c      	cmp	r5, #12
 800a46a:	bf38      	it	cc
 800a46c:	250c      	movcc	r5, #12
 800a46e:	2d00      	cmp	r5, #0
 800a470:	4606      	mov	r6, r0
 800a472:	db01      	blt.n	800a478 <_malloc_r+0x1c>
 800a474:	42a9      	cmp	r1, r5
 800a476:	d904      	bls.n	800a482 <_malloc_r+0x26>
 800a478:	230c      	movs	r3, #12
 800a47a:	6033      	str	r3, [r6, #0]
 800a47c:	2000      	movs	r0, #0
 800a47e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a482:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a558 <_malloc_r+0xfc>
 800a486:	f000 f915 	bl	800a6b4 <__malloc_lock>
 800a48a:	f8d8 3000 	ldr.w	r3, [r8]
 800a48e:	461c      	mov	r4, r3
 800a490:	bb44      	cbnz	r4, 800a4e4 <_malloc_r+0x88>
 800a492:	4629      	mov	r1, r5
 800a494:	4630      	mov	r0, r6
 800a496:	f7ff ffbf 	bl	800a418 <sbrk_aligned>
 800a49a:	1c43      	adds	r3, r0, #1
 800a49c:	4604      	mov	r4, r0
 800a49e:	d158      	bne.n	800a552 <_malloc_r+0xf6>
 800a4a0:	f8d8 4000 	ldr.w	r4, [r8]
 800a4a4:	4627      	mov	r7, r4
 800a4a6:	2f00      	cmp	r7, #0
 800a4a8:	d143      	bne.n	800a532 <_malloc_r+0xd6>
 800a4aa:	2c00      	cmp	r4, #0
 800a4ac:	d04b      	beq.n	800a546 <_malloc_r+0xea>
 800a4ae:	6823      	ldr	r3, [r4, #0]
 800a4b0:	4639      	mov	r1, r7
 800a4b2:	4630      	mov	r0, r6
 800a4b4:	eb04 0903 	add.w	r9, r4, r3
 800a4b8:	f000 fd32 	bl	800af20 <_sbrk_r>
 800a4bc:	4581      	cmp	r9, r0
 800a4be:	d142      	bne.n	800a546 <_malloc_r+0xea>
 800a4c0:	6821      	ldr	r1, [r4, #0]
 800a4c2:	1a6d      	subs	r5, r5, r1
 800a4c4:	4629      	mov	r1, r5
 800a4c6:	4630      	mov	r0, r6
 800a4c8:	f7ff ffa6 	bl	800a418 <sbrk_aligned>
 800a4cc:	3001      	adds	r0, #1
 800a4ce:	d03a      	beq.n	800a546 <_malloc_r+0xea>
 800a4d0:	6823      	ldr	r3, [r4, #0]
 800a4d2:	442b      	add	r3, r5
 800a4d4:	6023      	str	r3, [r4, #0]
 800a4d6:	f8d8 3000 	ldr.w	r3, [r8]
 800a4da:	685a      	ldr	r2, [r3, #4]
 800a4dc:	bb62      	cbnz	r2, 800a538 <_malloc_r+0xdc>
 800a4de:	f8c8 7000 	str.w	r7, [r8]
 800a4e2:	e00f      	b.n	800a504 <_malloc_r+0xa8>
 800a4e4:	6822      	ldr	r2, [r4, #0]
 800a4e6:	1b52      	subs	r2, r2, r5
 800a4e8:	d420      	bmi.n	800a52c <_malloc_r+0xd0>
 800a4ea:	2a0b      	cmp	r2, #11
 800a4ec:	d917      	bls.n	800a51e <_malloc_r+0xc2>
 800a4ee:	1961      	adds	r1, r4, r5
 800a4f0:	42a3      	cmp	r3, r4
 800a4f2:	6025      	str	r5, [r4, #0]
 800a4f4:	bf18      	it	ne
 800a4f6:	6059      	strne	r1, [r3, #4]
 800a4f8:	6863      	ldr	r3, [r4, #4]
 800a4fa:	bf08      	it	eq
 800a4fc:	f8c8 1000 	streq.w	r1, [r8]
 800a500:	5162      	str	r2, [r4, r5]
 800a502:	604b      	str	r3, [r1, #4]
 800a504:	4630      	mov	r0, r6
 800a506:	f000 f8db 	bl	800a6c0 <__malloc_unlock>
 800a50a:	f104 000b 	add.w	r0, r4, #11
 800a50e:	1d23      	adds	r3, r4, #4
 800a510:	f020 0007 	bic.w	r0, r0, #7
 800a514:	1ac2      	subs	r2, r0, r3
 800a516:	bf1c      	itt	ne
 800a518:	1a1b      	subne	r3, r3, r0
 800a51a:	50a3      	strne	r3, [r4, r2]
 800a51c:	e7af      	b.n	800a47e <_malloc_r+0x22>
 800a51e:	6862      	ldr	r2, [r4, #4]
 800a520:	42a3      	cmp	r3, r4
 800a522:	bf0c      	ite	eq
 800a524:	f8c8 2000 	streq.w	r2, [r8]
 800a528:	605a      	strne	r2, [r3, #4]
 800a52a:	e7eb      	b.n	800a504 <_malloc_r+0xa8>
 800a52c:	4623      	mov	r3, r4
 800a52e:	6864      	ldr	r4, [r4, #4]
 800a530:	e7ae      	b.n	800a490 <_malloc_r+0x34>
 800a532:	463c      	mov	r4, r7
 800a534:	687f      	ldr	r7, [r7, #4]
 800a536:	e7b6      	b.n	800a4a6 <_malloc_r+0x4a>
 800a538:	461a      	mov	r2, r3
 800a53a:	685b      	ldr	r3, [r3, #4]
 800a53c:	42a3      	cmp	r3, r4
 800a53e:	d1fb      	bne.n	800a538 <_malloc_r+0xdc>
 800a540:	2300      	movs	r3, #0
 800a542:	6053      	str	r3, [r2, #4]
 800a544:	e7de      	b.n	800a504 <_malloc_r+0xa8>
 800a546:	230c      	movs	r3, #12
 800a548:	6033      	str	r3, [r6, #0]
 800a54a:	4630      	mov	r0, r6
 800a54c:	f000 f8b8 	bl	800a6c0 <__malloc_unlock>
 800a550:	e794      	b.n	800a47c <_malloc_r+0x20>
 800a552:	6005      	str	r5, [r0, #0]
 800a554:	e7d6      	b.n	800a504 <_malloc_r+0xa8>
 800a556:	bf00      	nop
 800a558:	200051a4 	.word	0x200051a4

0800a55c <__sflush_r>:
 800a55c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a564:	0716      	lsls	r6, r2, #28
 800a566:	4605      	mov	r5, r0
 800a568:	460c      	mov	r4, r1
 800a56a:	d454      	bmi.n	800a616 <__sflush_r+0xba>
 800a56c:	684b      	ldr	r3, [r1, #4]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	dc02      	bgt.n	800a578 <__sflush_r+0x1c>
 800a572:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a574:	2b00      	cmp	r3, #0
 800a576:	dd48      	ble.n	800a60a <__sflush_r+0xae>
 800a578:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a57a:	2e00      	cmp	r6, #0
 800a57c:	d045      	beq.n	800a60a <__sflush_r+0xae>
 800a57e:	2300      	movs	r3, #0
 800a580:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a584:	682f      	ldr	r7, [r5, #0]
 800a586:	6a21      	ldr	r1, [r4, #32]
 800a588:	602b      	str	r3, [r5, #0]
 800a58a:	d030      	beq.n	800a5ee <__sflush_r+0x92>
 800a58c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a58e:	89a3      	ldrh	r3, [r4, #12]
 800a590:	0759      	lsls	r1, r3, #29
 800a592:	d505      	bpl.n	800a5a0 <__sflush_r+0x44>
 800a594:	6863      	ldr	r3, [r4, #4]
 800a596:	1ad2      	subs	r2, r2, r3
 800a598:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a59a:	b10b      	cbz	r3, 800a5a0 <__sflush_r+0x44>
 800a59c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a59e:	1ad2      	subs	r2, r2, r3
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a5a4:	6a21      	ldr	r1, [r4, #32]
 800a5a6:	4628      	mov	r0, r5
 800a5a8:	47b0      	blx	r6
 800a5aa:	1c43      	adds	r3, r0, #1
 800a5ac:	89a3      	ldrh	r3, [r4, #12]
 800a5ae:	d106      	bne.n	800a5be <__sflush_r+0x62>
 800a5b0:	6829      	ldr	r1, [r5, #0]
 800a5b2:	291d      	cmp	r1, #29
 800a5b4:	d82b      	bhi.n	800a60e <__sflush_r+0xb2>
 800a5b6:	4a2a      	ldr	r2, [pc, #168]	@ (800a660 <__sflush_r+0x104>)
 800a5b8:	40ca      	lsrs	r2, r1
 800a5ba:	07d6      	lsls	r6, r2, #31
 800a5bc:	d527      	bpl.n	800a60e <__sflush_r+0xb2>
 800a5be:	2200      	movs	r2, #0
 800a5c0:	6062      	str	r2, [r4, #4]
 800a5c2:	04d9      	lsls	r1, r3, #19
 800a5c4:	6922      	ldr	r2, [r4, #16]
 800a5c6:	6022      	str	r2, [r4, #0]
 800a5c8:	d504      	bpl.n	800a5d4 <__sflush_r+0x78>
 800a5ca:	1c42      	adds	r2, r0, #1
 800a5cc:	d101      	bne.n	800a5d2 <__sflush_r+0x76>
 800a5ce:	682b      	ldr	r3, [r5, #0]
 800a5d0:	b903      	cbnz	r3, 800a5d4 <__sflush_r+0x78>
 800a5d2:	6560      	str	r0, [r4, #84]	@ 0x54
 800a5d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a5d6:	602f      	str	r7, [r5, #0]
 800a5d8:	b1b9      	cbz	r1, 800a60a <__sflush_r+0xae>
 800a5da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a5de:	4299      	cmp	r1, r3
 800a5e0:	d002      	beq.n	800a5e8 <__sflush_r+0x8c>
 800a5e2:	4628      	mov	r0, r5
 800a5e4:	f000 fd00 	bl	800afe8 <_free_r>
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	6363      	str	r3, [r4, #52]	@ 0x34
 800a5ec:	e00d      	b.n	800a60a <__sflush_r+0xae>
 800a5ee:	2301      	movs	r3, #1
 800a5f0:	4628      	mov	r0, r5
 800a5f2:	47b0      	blx	r6
 800a5f4:	4602      	mov	r2, r0
 800a5f6:	1c50      	adds	r0, r2, #1
 800a5f8:	d1c9      	bne.n	800a58e <__sflush_r+0x32>
 800a5fa:	682b      	ldr	r3, [r5, #0]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d0c6      	beq.n	800a58e <__sflush_r+0x32>
 800a600:	2b1d      	cmp	r3, #29
 800a602:	d001      	beq.n	800a608 <__sflush_r+0xac>
 800a604:	2b16      	cmp	r3, #22
 800a606:	d11e      	bne.n	800a646 <__sflush_r+0xea>
 800a608:	602f      	str	r7, [r5, #0]
 800a60a:	2000      	movs	r0, #0
 800a60c:	e022      	b.n	800a654 <__sflush_r+0xf8>
 800a60e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a612:	b21b      	sxth	r3, r3
 800a614:	e01b      	b.n	800a64e <__sflush_r+0xf2>
 800a616:	690f      	ldr	r7, [r1, #16]
 800a618:	2f00      	cmp	r7, #0
 800a61a:	d0f6      	beq.n	800a60a <__sflush_r+0xae>
 800a61c:	0793      	lsls	r3, r2, #30
 800a61e:	680e      	ldr	r6, [r1, #0]
 800a620:	bf08      	it	eq
 800a622:	694b      	ldreq	r3, [r1, #20]
 800a624:	600f      	str	r7, [r1, #0]
 800a626:	bf18      	it	ne
 800a628:	2300      	movne	r3, #0
 800a62a:	eba6 0807 	sub.w	r8, r6, r7
 800a62e:	608b      	str	r3, [r1, #8]
 800a630:	f1b8 0f00 	cmp.w	r8, #0
 800a634:	dde9      	ble.n	800a60a <__sflush_r+0xae>
 800a636:	6a21      	ldr	r1, [r4, #32]
 800a638:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a63a:	4643      	mov	r3, r8
 800a63c:	463a      	mov	r2, r7
 800a63e:	4628      	mov	r0, r5
 800a640:	47b0      	blx	r6
 800a642:	2800      	cmp	r0, #0
 800a644:	dc08      	bgt.n	800a658 <__sflush_r+0xfc>
 800a646:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a64a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a64e:	81a3      	strh	r3, [r4, #12]
 800a650:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a658:	4407      	add	r7, r0
 800a65a:	eba8 0800 	sub.w	r8, r8, r0
 800a65e:	e7e7      	b.n	800a630 <__sflush_r+0xd4>
 800a660:	20400001 	.word	0x20400001

0800a664 <_fflush_r>:
 800a664:	b538      	push	{r3, r4, r5, lr}
 800a666:	690b      	ldr	r3, [r1, #16]
 800a668:	4605      	mov	r5, r0
 800a66a:	460c      	mov	r4, r1
 800a66c:	b913      	cbnz	r3, 800a674 <_fflush_r+0x10>
 800a66e:	2500      	movs	r5, #0
 800a670:	4628      	mov	r0, r5
 800a672:	bd38      	pop	{r3, r4, r5, pc}
 800a674:	b118      	cbz	r0, 800a67e <_fflush_r+0x1a>
 800a676:	6a03      	ldr	r3, [r0, #32]
 800a678:	b90b      	cbnz	r3, 800a67e <_fflush_r+0x1a>
 800a67a:	f7fe fe95 	bl	80093a8 <__sinit>
 800a67e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d0f3      	beq.n	800a66e <_fflush_r+0xa>
 800a686:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a688:	07d0      	lsls	r0, r2, #31
 800a68a:	d404      	bmi.n	800a696 <_fflush_r+0x32>
 800a68c:	0599      	lsls	r1, r3, #22
 800a68e:	d402      	bmi.n	800a696 <_fflush_r+0x32>
 800a690:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a692:	f7fe fef2 	bl	800947a <__retarget_lock_acquire_recursive>
 800a696:	4628      	mov	r0, r5
 800a698:	4621      	mov	r1, r4
 800a69a:	f7ff ff5f 	bl	800a55c <__sflush_r>
 800a69e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a6a0:	07da      	lsls	r2, r3, #31
 800a6a2:	4605      	mov	r5, r0
 800a6a4:	d4e4      	bmi.n	800a670 <_fflush_r+0xc>
 800a6a6:	89a3      	ldrh	r3, [r4, #12]
 800a6a8:	059b      	lsls	r3, r3, #22
 800a6aa:	d4e1      	bmi.n	800a670 <_fflush_r+0xc>
 800a6ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a6ae:	f7fe fee5 	bl	800947c <__retarget_lock_release_recursive>
 800a6b2:	e7dd      	b.n	800a670 <_fflush_r+0xc>

0800a6b4 <__malloc_lock>:
 800a6b4:	4801      	ldr	r0, [pc, #4]	@ (800a6bc <__malloc_lock+0x8>)
 800a6b6:	f7fe bee0 	b.w	800947a <__retarget_lock_acquire_recursive>
 800a6ba:	bf00      	nop
 800a6bc:	2000519c 	.word	0x2000519c

0800a6c0 <__malloc_unlock>:
 800a6c0:	4801      	ldr	r0, [pc, #4]	@ (800a6c8 <__malloc_unlock+0x8>)
 800a6c2:	f7fe bedb 	b.w	800947c <__retarget_lock_release_recursive>
 800a6c6:	bf00      	nop
 800a6c8:	2000519c 	.word	0x2000519c

0800a6cc <_Balloc>:
 800a6cc:	b570      	push	{r4, r5, r6, lr}
 800a6ce:	69c6      	ldr	r6, [r0, #28]
 800a6d0:	4604      	mov	r4, r0
 800a6d2:	460d      	mov	r5, r1
 800a6d4:	b976      	cbnz	r6, 800a6f4 <_Balloc+0x28>
 800a6d6:	2010      	movs	r0, #16
 800a6d8:	f7ff fe96 	bl	800a408 <malloc>
 800a6dc:	4602      	mov	r2, r0
 800a6de:	61e0      	str	r0, [r4, #28]
 800a6e0:	b920      	cbnz	r0, 800a6ec <_Balloc+0x20>
 800a6e2:	4b18      	ldr	r3, [pc, #96]	@ (800a744 <_Balloc+0x78>)
 800a6e4:	4818      	ldr	r0, [pc, #96]	@ (800a748 <_Balloc+0x7c>)
 800a6e6:	216b      	movs	r1, #107	@ 0x6b
 800a6e8:	f000 fc4c 	bl	800af84 <__assert_func>
 800a6ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a6f0:	6006      	str	r6, [r0, #0]
 800a6f2:	60c6      	str	r6, [r0, #12]
 800a6f4:	69e6      	ldr	r6, [r4, #28]
 800a6f6:	68f3      	ldr	r3, [r6, #12]
 800a6f8:	b183      	cbz	r3, 800a71c <_Balloc+0x50>
 800a6fa:	69e3      	ldr	r3, [r4, #28]
 800a6fc:	68db      	ldr	r3, [r3, #12]
 800a6fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a702:	b9b8      	cbnz	r0, 800a734 <_Balloc+0x68>
 800a704:	2101      	movs	r1, #1
 800a706:	fa01 f605 	lsl.w	r6, r1, r5
 800a70a:	1d72      	adds	r2, r6, #5
 800a70c:	0092      	lsls	r2, r2, #2
 800a70e:	4620      	mov	r0, r4
 800a710:	f000 fc56 	bl	800afc0 <_calloc_r>
 800a714:	b160      	cbz	r0, 800a730 <_Balloc+0x64>
 800a716:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a71a:	e00e      	b.n	800a73a <_Balloc+0x6e>
 800a71c:	2221      	movs	r2, #33	@ 0x21
 800a71e:	2104      	movs	r1, #4
 800a720:	4620      	mov	r0, r4
 800a722:	f000 fc4d 	bl	800afc0 <_calloc_r>
 800a726:	69e3      	ldr	r3, [r4, #28]
 800a728:	60f0      	str	r0, [r6, #12]
 800a72a:	68db      	ldr	r3, [r3, #12]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d1e4      	bne.n	800a6fa <_Balloc+0x2e>
 800a730:	2000      	movs	r0, #0
 800a732:	bd70      	pop	{r4, r5, r6, pc}
 800a734:	6802      	ldr	r2, [r0, #0]
 800a736:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a73a:	2300      	movs	r3, #0
 800a73c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a740:	e7f7      	b.n	800a732 <_Balloc+0x66>
 800a742:	bf00      	nop
 800a744:	0800c4fd 	.word	0x0800c4fd
 800a748:	0800c58e 	.word	0x0800c58e

0800a74c <_Bfree>:
 800a74c:	b570      	push	{r4, r5, r6, lr}
 800a74e:	69c6      	ldr	r6, [r0, #28]
 800a750:	4605      	mov	r5, r0
 800a752:	460c      	mov	r4, r1
 800a754:	b976      	cbnz	r6, 800a774 <_Bfree+0x28>
 800a756:	2010      	movs	r0, #16
 800a758:	f7ff fe56 	bl	800a408 <malloc>
 800a75c:	4602      	mov	r2, r0
 800a75e:	61e8      	str	r0, [r5, #28]
 800a760:	b920      	cbnz	r0, 800a76c <_Bfree+0x20>
 800a762:	4b09      	ldr	r3, [pc, #36]	@ (800a788 <_Bfree+0x3c>)
 800a764:	4809      	ldr	r0, [pc, #36]	@ (800a78c <_Bfree+0x40>)
 800a766:	218f      	movs	r1, #143	@ 0x8f
 800a768:	f000 fc0c 	bl	800af84 <__assert_func>
 800a76c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a770:	6006      	str	r6, [r0, #0]
 800a772:	60c6      	str	r6, [r0, #12]
 800a774:	b13c      	cbz	r4, 800a786 <_Bfree+0x3a>
 800a776:	69eb      	ldr	r3, [r5, #28]
 800a778:	6862      	ldr	r2, [r4, #4]
 800a77a:	68db      	ldr	r3, [r3, #12]
 800a77c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a780:	6021      	str	r1, [r4, #0]
 800a782:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a786:	bd70      	pop	{r4, r5, r6, pc}
 800a788:	0800c4fd 	.word	0x0800c4fd
 800a78c:	0800c58e 	.word	0x0800c58e

0800a790 <__multadd>:
 800a790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a794:	690d      	ldr	r5, [r1, #16]
 800a796:	4607      	mov	r7, r0
 800a798:	460c      	mov	r4, r1
 800a79a:	461e      	mov	r6, r3
 800a79c:	f101 0c14 	add.w	ip, r1, #20
 800a7a0:	2000      	movs	r0, #0
 800a7a2:	f8dc 3000 	ldr.w	r3, [ip]
 800a7a6:	b299      	uxth	r1, r3
 800a7a8:	fb02 6101 	mla	r1, r2, r1, r6
 800a7ac:	0c1e      	lsrs	r6, r3, #16
 800a7ae:	0c0b      	lsrs	r3, r1, #16
 800a7b0:	fb02 3306 	mla	r3, r2, r6, r3
 800a7b4:	b289      	uxth	r1, r1
 800a7b6:	3001      	adds	r0, #1
 800a7b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a7bc:	4285      	cmp	r5, r0
 800a7be:	f84c 1b04 	str.w	r1, [ip], #4
 800a7c2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a7c6:	dcec      	bgt.n	800a7a2 <__multadd+0x12>
 800a7c8:	b30e      	cbz	r6, 800a80e <__multadd+0x7e>
 800a7ca:	68a3      	ldr	r3, [r4, #8]
 800a7cc:	42ab      	cmp	r3, r5
 800a7ce:	dc19      	bgt.n	800a804 <__multadd+0x74>
 800a7d0:	6861      	ldr	r1, [r4, #4]
 800a7d2:	4638      	mov	r0, r7
 800a7d4:	3101      	adds	r1, #1
 800a7d6:	f7ff ff79 	bl	800a6cc <_Balloc>
 800a7da:	4680      	mov	r8, r0
 800a7dc:	b928      	cbnz	r0, 800a7ea <__multadd+0x5a>
 800a7de:	4602      	mov	r2, r0
 800a7e0:	4b0c      	ldr	r3, [pc, #48]	@ (800a814 <__multadd+0x84>)
 800a7e2:	480d      	ldr	r0, [pc, #52]	@ (800a818 <__multadd+0x88>)
 800a7e4:	21ba      	movs	r1, #186	@ 0xba
 800a7e6:	f000 fbcd 	bl	800af84 <__assert_func>
 800a7ea:	6922      	ldr	r2, [r4, #16]
 800a7ec:	3202      	adds	r2, #2
 800a7ee:	f104 010c 	add.w	r1, r4, #12
 800a7f2:	0092      	lsls	r2, r2, #2
 800a7f4:	300c      	adds	r0, #12
 800a7f6:	f7fe fe47 	bl	8009488 <memcpy>
 800a7fa:	4621      	mov	r1, r4
 800a7fc:	4638      	mov	r0, r7
 800a7fe:	f7ff ffa5 	bl	800a74c <_Bfree>
 800a802:	4644      	mov	r4, r8
 800a804:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a808:	3501      	adds	r5, #1
 800a80a:	615e      	str	r6, [r3, #20]
 800a80c:	6125      	str	r5, [r4, #16]
 800a80e:	4620      	mov	r0, r4
 800a810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a814:	0800c56c 	.word	0x0800c56c
 800a818:	0800c58e 	.word	0x0800c58e

0800a81c <__hi0bits>:
 800a81c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a820:	4603      	mov	r3, r0
 800a822:	bf36      	itet	cc
 800a824:	0403      	lslcc	r3, r0, #16
 800a826:	2000      	movcs	r0, #0
 800a828:	2010      	movcc	r0, #16
 800a82a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a82e:	bf3c      	itt	cc
 800a830:	021b      	lslcc	r3, r3, #8
 800a832:	3008      	addcc	r0, #8
 800a834:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a838:	bf3c      	itt	cc
 800a83a:	011b      	lslcc	r3, r3, #4
 800a83c:	3004      	addcc	r0, #4
 800a83e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a842:	bf3c      	itt	cc
 800a844:	009b      	lslcc	r3, r3, #2
 800a846:	3002      	addcc	r0, #2
 800a848:	2b00      	cmp	r3, #0
 800a84a:	db05      	blt.n	800a858 <__hi0bits+0x3c>
 800a84c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a850:	f100 0001 	add.w	r0, r0, #1
 800a854:	bf08      	it	eq
 800a856:	2020      	moveq	r0, #32
 800a858:	4770      	bx	lr

0800a85a <__lo0bits>:
 800a85a:	6803      	ldr	r3, [r0, #0]
 800a85c:	4602      	mov	r2, r0
 800a85e:	f013 0007 	ands.w	r0, r3, #7
 800a862:	d00b      	beq.n	800a87c <__lo0bits+0x22>
 800a864:	07d9      	lsls	r1, r3, #31
 800a866:	d421      	bmi.n	800a8ac <__lo0bits+0x52>
 800a868:	0798      	lsls	r0, r3, #30
 800a86a:	bf49      	itett	mi
 800a86c:	085b      	lsrmi	r3, r3, #1
 800a86e:	089b      	lsrpl	r3, r3, #2
 800a870:	2001      	movmi	r0, #1
 800a872:	6013      	strmi	r3, [r2, #0]
 800a874:	bf5c      	itt	pl
 800a876:	6013      	strpl	r3, [r2, #0]
 800a878:	2002      	movpl	r0, #2
 800a87a:	4770      	bx	lr
 800a87c:	b299      	uxth	r1, r3
 800a87e:	b909      	cbnz	r1, 800a884 <__lo0bits+0x2a>
 800a880:	0c1b      	lsrs	r3, r3, #16
 800a882:	2010      	movs	r0, #16
 800a884:	b2d9      	uxtb	r1, r3
 800a886:	b909      	cbnz	r1, 800a88c <__lo0bits+0x32>
 800a888:	3008      	adds	r0, #8
 800a88a:	0a1b      	lsrs	r3, r3, #8
 800a88c:	0719      	lsls	r1, r3, #28
 800a88e:	bf04      	itt	eq
 800a890:	091b      	lsreq	r3, r3, #4
 800a892:	3004      	addeq	r0, #4
 800a894:	0799      	lsls	r1, r3, #30
 800a896:	bf04      	itt	eq
 800a898:	089b      	lsreq	r3, r3, #2
 800a89a:	3002      	addeq	r0, #2
 800a89c:	07d9      	lsls	r1, r3, #31
 800a89e:	d403      	bmi.n	800a8a8 <__lo0bits+0x4e>
 800a8a0:	085b      	lsrs	r3, r3, #1
 800a8a2:	f100 0001 	add.w	r0, r0, #1
 800a8a6:	d003      	beq.n	800a8b0 <__lo0bits+0x56>
 800a8a8:	6013      	str	r3, [r2, #0]
 800a8aa:	4770      	bx	lr
 800a8ac:	2000      	movs	r0, #0
 800a8ae:	4770      	bx	lr
 800a8b0:	2020      	movs	r0, #32
 800a8b2:	4770      	bx	lr

0800a8b4 <__i2b>:
 800a8b4:	b510      	push	{r4, lr}
 800a8b6:	460c      	mov	r4, r1
 800a8b8:	2101      	movs	r1, #1
 800a8ba:	f7ff ff07 	bl	800a6cc <_Balloc>
 800a8be:	4602      	mov	r2, r0
 800a8c0:	b928      	cbnz	r0, 800a8ce <__i2b+0x1a>
 800a8c2:	4b05      	ldr	r3, [pc, #20]	@ (800a8d8 <__i2b+0x24>)
 800a8c4:	4805      	ldr	r0, [pc, #20]	@ (800a8dc <__i2b+0x28>)
 800a8c6:	f240 1145 	movw	r1, #325	@ 0x145
 800a8ca:	f000 fb5b 	bl	800af84 <__assert_func>
 800a8ce:	2301      	movs	r3, #1
 800a8d0:	6144      	str	r4, [r0, #20]
 800a8d2:	6103      	str	r3, [r0, #16]
 800a8d4:	bd10      	pop	{r4, pc}
 800a8d6:	bf00      	nop
 800a8d8:	0800c56c 	.word	0x0800c56c
 800a8dc:	0800c58e 	.word	0x0800c58e

0800a8e0 <__multiply>:
 800a8e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8e4:	4617      	mov	r7, r2
 800a8e6:	690a      	ldr	r2, [r1, #16]
 800a8e8:	693b      	ldr	r3, [r7, #16]
 800a8ea:	429a      	cmp	r2, r3
 800a8ec:	bfa8      	it	ge
 800a8ee:	463b      	movge	r3, r7
 800a8f0:	4689      	mov	r9, r1
 800a8f2:	bfa4      	itt	ge
 800a8f4:	460f      	movge	r7, r1
 800a8f6:	4699      	movge	r9, r3
 800a8f8:	693d      	ldr	r5, [r7, #16]
 800a8fa:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a8fe:	68bb      	ldr	r3, [r7, #8]
 800a900:	6879      	ldr	r1, [r7, #4]
 800a902:	eb05 060a 	add.w	r6, r5, sl
 800a906:	42b3      	cmp	r3, r6
 800a908:	b085      	sub	sp, #20
 800a90a:	bfb8      	it	lt
 800a90c:	3101      	addlt	r1, #1
 800a90e:	f7ff fedd 	bl	800a6cc <_Balloc>
 800a912:	b930      	cbnz	r0, 800a922 <__multiply+0x42>
 800a914:	4602      	mov	r2, r0
 800a916:	4b41      	ldr	r3, [pc, #260]	@ (800aa1c <__multiply+0x13c>)
 800a918:	4841      	ldr	r0, [pc, #260]	@ (800aa20 <__multiply+0x140>)
 800a91a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a91e:	f000 fb31 	bl	800af84 <__assert_func>
 800a922:	f100 0414 	add.w	r4, r0, #20
 800a926:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a92a:	4623      	mov	r3, r4
 800a92c:	2200      	movs	r2, #0
 800a92e:	4573      	cmp	r3, lr
 800a930:	d320      	bcc.n	800a974 <__multiply+0x94>
 800a932:	f107 0814 	add.w	r8, r7, #20
 800a936:	f109 0114 	add.w	r1, r9, #20
 800a93a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a93e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a942:	9302      	str	r3, [sp, #8]
 800a944:	1beb      	subs	r3, r5, r7
 800a946:	3b15      	subs	r3, #21
 800a948:	f023 0303 	bic.w	r3, r3, #3
 800a94c:	3304      	adds	r3, #4
 800a94e:	3715      	adds	r7, #21
 800a950:	42bd      	cmp	r5, r7
 800a952:	bf38      	it	cc
 800a954:	2304      	movcc	r3, #4
 800a956:	9301      	str	r3, [sp, #4]
 800a958:	9b02      	ldr	r3, [sp, #8]
 800a95a:	9103      	str	r1, [sp, #12]
 800a95c:	428b      	cmp	r3, r1
 800a95e:	d80c      	bhi.n	800a97a <__multiply+0x9a>
 800a960:	2e00      	cmp	r6, #0
 800a962:	dd03      	ble.n	800a96c <__multiply+0x8c>
 800a964:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d055      	beq.n	800aa18 <__multiply+0x138>
 800a96c:	6106      	str	r6, [r0, #16]
 800a96e:	b005      	add	sp, #20
 800a970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a974:	f843 2b04 	str.w	r2, [r3], #4
 800a978:	e7d9      	b.n	800a92e <__multiply+0x4e>
 800a97a:	f8b1 a000 	ldrh.w	sl, [r1]
 800a97e:	f1ba 0f00 	cmp.w	sl, #0
 800a982:	d01f      	beq.n	800a9c4 <__multiply+0xe4>
 800a984:	46c4      	mov	ip, r8
 800a986:	46a1      	mov	r9, r4
 800a988:	2700      	movs	r7, #0
 800a98a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a98e:	f8d9 3000 	ldr.w	r3, [r9]
 800a992:	fa1f fb82 	uxth.w	fp, r2
 800a996:	b29b      	uxth	r3, r3
 800a998:	fb0a 330b 	mla	r3, sl, fp, r3
 800a99c:	443b      	add	r3, r7
 800a99e:	f8d9 7000 	ldr.w	r7, [r9]
 800a9a2:	0c12      	lsrs	r2, r2, #16
 800a9a4:	0c3f      	lsrs	r7, r7, #16
 800a9a6:	fb0a 7202 	mla	r2, sl, r2, r7
 800a9aa:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a9ae:	b29b      	uxth	r3, r3
 800a9b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a9b4:	4565      	cmp	r5, ip
 800a9b6:	f849 3b04 	str.w	r3, [r9], #4
 800a9ba:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a9be:	d8e4      	bhi.n	800a98a <__multiply+0xaa>
 800a9c0:	9b01      	ldr	r3, [sp, #4]
 800a9c2:	50e7      	str	r7, [r4, r3]
 800a9c4:	9b03      	ldr	r3, [sp, #12]
 800a9c6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a9ca:	3104      	adds	r1, #4
 800a9cc:	f1b9 0f00 	cmp.w	r9, #0
 800a9d0:	d020      	beq.n	800aa14 <__multiply+0x134>
 800a9d2:	6823      	ldr	r3, [r4, #0]
 800a9d4:	4647      	mov	r7, r8
 800a9d6:	46a4      	mov	ip, r4
 800a9d8:	f04f 0a00 	mov.w	sl, #0
 800a9dc:	f8b7 b000 	ldrh.w	fp, [r7]
 800a9e0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a9e4:	fb09 220b 	mla	r2, r9, fp, r2
 800a9e8:	4452      	add	r2, sl
 800a9ea:	b29b      	uxth	r3, r3
 800a9ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a9f0:	f84c 3b04 	str.w	r3, [ip], #4
 800a9f4:	f857 3b04 	ldr.w	r3, [r7], #4
 800a9f8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a9fc:	f8bc 3000 	ldrh.w	r3, [ip]
 800aa00:	fb09 330a 	mla	r3, r9, sl, r3
 800aa04:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800aa08:	42bd      	cmp	r5, r7
 800aa0a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800aa0e:	d8e5      	bhi.n	800a9dc <__multiply+0xfc>
 800aa10:	9a01      	ldr	r2, [sp, #4]
 800aa12:	50a3      	str	r3, [r4, r2]
 800aa14:	3404      	adds	r4, #4
 800aa16:	e79f      	b.n	800a958 <__multiply+0x78>
 800aa18:	3e01      	subs	r6, #1
 800aa1a:	e7a1      	b.n	800a960 <__multiply+0x80>
 800aa1c:	0800c56c 	.word	0x0800c56c
 800aa20:	0800c58e 	.word	0x0800c58e

0800aa24 <__pow5mult>:
 800aa24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa28:	4615      	mov	r5, r2
 800aa2a:	f012 0203 	ands.w	r2, r2, #3
 800aa2e:	4607      	mov	r7, r0
 800aa30:	460e      	mov	r6, r1
 800aa32:	d007      	beq.n	800aa44 <__pow5mult+0x20>
 800aa34:	4c25      	ldr	r4, [pc, #148]	@ (800aacc <__pow5mult+0xa8>)
 800aa36:	3a01      	subs	r2, #1
 800aa38:	2300      	movs	r3, #0
 800aa3a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aa3e:	f7ff fea7 	bl	800a790 <__multadd>
 800aa42:	4606      	mov	r6, r0
 800aa44:	10ad      	asrs	r5, r5, #2
 800aa46:	d03d      	beq.n	800aac4 <__pow5mult+0xa0>
 800aa48:	69fc      	ldr	r4, [r7, #28]
 800aa4a:	b97c      	cbnz	r4, 800aa6c <__pow5mult+0x48>
 800aa4c:	2010      	movs	r0, #16
 800aa4e:	f7ff fcdb 	bl	800a408 <malloc>
 800aa52:	4602      	mov	r2, r0
 800aa54:	61f8      	str	r0, [r7, #28]
 800aa56:	b928      	cbnz	r0, 800aa64 <__pow5mult+0x40>
 800aa58:	4b1d      	ldr	r3, [pc, #116]	@ (800aad0 <__pow5mult+0xac>)
 800aa5a:	481e      	ldr	r0, [pc, #120]	@ (800aad4 <__pow5mult+0xb0>)
 800aa5c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800aa60:	f000 fa90 	bl	800af84 <__assert_func>
 800aa64:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aa68:	6004      	str	r4, [r0, #0]
 800aa6a:	60c4      	str	r4, [r0, #12]
 800aa6c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800aa70:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aa74:	b94c      	cbnz	r4, 800aa8a <__pow5mult+0x66>
 800aa76:	f240 2171 	movw	r1, #625	@ 0x271
 800aa7a:	4638      	mov	r0, r7
 800aa7c:	f7ff ff1a 	bl	800a8b4 <__i2b>
 800aa80:	2300      	movs	r3, #0
 800aa82:	f8c8 0008 	str.w	r0, [r8, #8]
 800aa86:	4604      	mov	r4, r0
 800aa88:	6003      	str	r3, [r0, #0]
 800aa8a:	f04f 0900 	mov.w	r9, #0
 800aa8e:	07eb      	lsls	r3, r5, #31
 800aa90:	d50a      	bpl.n	800aaa8 <__pow5mult+0x84>
 800aa92:	4631      	mov	r1, r6
 800aa94:	4622      	mov	r2, r4
 800aa96:	4638      	mov	r0, r7
 800aa98:	f7ff ff22 	bl	800a8e0 <__multiply>
 800aa9c:	4631      	mov	r1, r6
 800aa9e:	4680      	mov	r8, r0
 800aaa0:	4638      	mov	r0, r7
 800aaa2:	f7ff fe53 	bl	800a74c <_Bfree>
 800aaa6:	4646      	mov	r6, r8
 800aaa8:	106d      	asrs	r5, r5, #1
 800aaaa:	d00b      	beq.n	800aac4 <__pow5mult+0xa0>
 800aaac:	6820      	ldr	r0, [r4, #0]
 800aaae:	b938      	cbnz	r0, 800aac0 <__pow5mult+0x9c>
 800aab0:	4622      	mov	r2, r4
 800aab2:	4621      	mov	r1, r4
 800aab4:	4638      	mov	r0, r7
 800aab6:	f7ff ff13 	bl	800a8e0 <__multiply>
 800aaba:	6020      	str	r0, [r4, #0]
 800aabc:	f8c0 9000 	str.w	r9, [r0]
 800aac0:	4604      	mov	r4, r0
 800aac2:	e7e4      	b.n	800aa8e <__pow5mult+0x6a>
 800aac4:	4630      	mov	r0, r6
 800aac6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aaca:	bf00      	nop
 800aacc:	0800c630 	.word	0x0800c630
 800aad0:	0800c4fd 	.word	0x0800c4fd
 800aad4:	0800c58e 	.word	0x0800c58e

0800aad8 <__lshift>:
 800aad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aadc:	460c      	mov	r4, r1
 800aade:	6849      	ldr	r1, [r1, #4]
 800aae0:	6923      	ldr	r3, [r4, #16]
 800aae2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800aae6:	68a3      	ldr	r3, [r4, #8]
 800aae8:	4607      	mov	r7, r0
 800aaea:	4691      	mov	r9, r2
 800aaec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aaf0:	f108 0601 	add.w	r6, r8, #1
 800aaf4:	42b3      	cmp	r3, r6
 800aaf6:	db0b      	blt.n	800ab10 <__lshift+0x38>
 800aaf8:	4638      	mov	r0, r7
 800aafa:	f7ff fde7 	bl	800a6cc <_Balloc>
 800aafe:	4605      	mov	r5, r0
 800ab00:	b948      	cbnz	r0, 800ab16 <__lshift+0x3e>
 800ab02:	4602      	mov	r2, r0
 800ab04:	4b28      	ldr	r3, [pc, #160]	@ (800aba8 <__lshift+0xd0>)
 800ab06:	4829      	ldr	r0, [pc, #164]	@ (800abac <__lshift+0xd4>)
 800ab08:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ab0c:	f000 fa3a 	bl	800af84 <__assert_func>
 800ab10:	3101      	adds	r1, #1
 800ab12:	005b      	lsls	r3, r3, #1
 800ab14:	e7ee      	b.n	800aaf4 <__lshift+0x1c>
 800ab16:	2300      	movs	r3, #0
 800ab18:	f100 0114 	add.w	r1, r0, #20
 800ab1c:	f100 0210 	add.w	r2, r0, #16
 800ab20:	4618      	mov	r0, r3
 800ab22:	4553      	cmp	r3, sl
 800ab24:	db33      	blt.n	800ab8e <__lshift+0xb6>
 800ab26:	6920      	ldr	r0, [r4, #16]
 800ab28:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ab2c:	f104 0314 	add.w	r3, r4, #20
 800ab30:	f019 091f 	ands.w	r9, r9, #31
 800ab34:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ab38:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ab3c:	d02b      	beq.n	800ab96 <__lshift+0xbe>
 800ab3e:	f1c9 0e20 	rsb	lr, r9, #32
 800ab42:	468a      	mov	sl, r1
 800ab44:	2200      	movs	r2, #0
 800ab46:	6818      	ldr	r0, [r3, #0]
 800ab48:	fa00 f009 	lsl.w	r0, r0, r9
 800ab4c:	4310      	orrs	r0, r2
 800ab4e:	f84a 0b04 	str.w	r0, [sl], #4
 800ab52:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab56:	459c      	cmp	ip, r3
 800ab58:	fa22 f20e 	lsr.w	r2, r2, lr
 800ab5c:	d8f3      	bhi.n	800ab46 <__lshift+0x6e>
 800ab5e:	ebac 0304 	sub.w	r3, ip, r4
 800ab62:	3b15      	subs	r3, #21
 800ab64:	f023 0303 	bic.w	r3, r3, #3
 800ab68:	3304      	adds	r3, #4
 800ab6a:	f104 0015 	add.w	r0, r4, #21
 800ab6e:	4560      	cmp	r0, ip
 800ab70:	bf88      	it	hi
 800ab72:	2304      	movhi	r3, #4
 800ab74:	50ca      	str	r2, [r1, r3]
 800ab76:	b10a      	cbz	r2, 800ab7c <__lshift+0xa4>
 800ab78:	f108 0602 	add.w	r6, r8, #2
 800ab7c:	3e01      	subs	r6, #1
 800ab7e:	4638      	mov	r0, r7
 800ab80:	612e      	str	r6, [r5, #16]
 800ab82:	4621      	mov	r1, r4
 800ab84:	f7ff fde2 	bl	800a74c <_Bfree>
 800ab88:	4628      	mov	r0, r5
 800ab8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab8e:	f842 0f04 	str.w	r0, [r2, #4]!
 800ab92:	3301      	adds	r3, #1
 800ab94:	e7c5      	b.n	800ab22 <__lshift+0x4a>
 800ab96:	3904      	subs	r1, #4
 800ab98:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab9c:	f841 2f04 	str.w	r2, [r1, #4]!
 800aba0:	459c      	cmp	ip, r3
 800aba2:	d8f9      	bhi.n	800ab98 <__lshift+0xc0>
 800aba4:	e7ea      	b.n	800ab7c <__lshift+0xa4>
 800aba6:	bf00      	nop
 800aba8:	0800c56c 	.word	0x0800c56c
 800abac:	0800c58e 	.word	0x0800c58e

0800abb0 <__mcmp>:
 800abb0:	690a      	ldr	r2, [r1, #16]
 800abb2:	4603      	mov	r3, r0
 800abb4:	6900      	ldr	r0, [r0, #16]
 800abb6:	1a80      	subs	r0, r0, r2
 800abb8:	b530      	push	{r4, r5, lr}
 800abba:	d10e      	bne.n	800abda <__mcmp+0x2a>
 800abbc:	3314      	adds	r3, #20
 800abbe:	3114      	adds	r1, #20
 800abc0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800abc4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800abc8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800abcc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800abd0:	4295      	cmp	r5, r2
 800abd2:	d003      	beq.n	800abdc <__mcmp+0x2c>
 800abd4:	d205      	bcs.n	800abe2 <__mcmp+0x32>
 800abd6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800abda:	bd30      	pop	{r4, r5, pc}
 800abdc:	42a3      	cmp	r3, r4
 800abde:	d3f3      	bcc.n	800abc8 <__mcmp+0x18>
 800abe0:	e7fb      	b.n	800abda <__mcmp+0x2a>
 800abe2:	2001      	movs	r0, #1
 800abe4:	e7f9      	b.n	800abda <__mcmp+0x2a>
	...

0800abe8 <__mdiff>:
 800abe8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abec:	4689      	mov	r9, r1
 800abee:	4606      	mov	r6, r0
 800abf0:	4611      	mov	r1, r2
 800abf2:	4648      	mov	r0, r9
 800abf4:	4614      	mov	r4, r2
 800abf6:	f7ff ffdb 	bl	800abb0 <__mcmp>
 800abfa:	1e05      	subs	r5, r0, #0
 800abfc:	d112      	bne.n	800ac24 <__mdiff+0x3c>
 800abfe:	4629      	mov	r1, r5
 800ac00:	4630      	mov	r0, r6
 800ac02:	f7ff fd63 	bl	800a6cc <_Balloc>
 800ac06:	4602      	mov	r2, r0
 800ac08:	b928      	cbnz	r0, 800ac16 <__mdiff+0x2e>
 800ac0a:	4b3f      	ldr	r3, [pc, #252]	@ (800ad08 <__mdiff+0x120>)
 800ac0c:	f240 2137 	movw	r1, #567	@ 0x237
 800ac10:	483e      	ldr	r0, [pc, #248]	@ (800ad0c <__mdiff+0x124>)
 800ac12:	f000 f9b7 	bl	800af84 <__assert_func>
 800ac16:	2301      	movs	r3, #1
 800ac18:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ac1c:	4610      	mov	r0, r2
 800ac1e:	b003      	add	sp, #12
 800ac20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac24:	bfbc      	itt	lt
 800ac26:	464b      	movlt	r3, r9
 800ac28:	46a1      	movlt	r9, r4
 800ac2a:	4630      	mov	r0, r6
 800ac2c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ac30:	bfba      	itte	lt
 800ac32:	461c      	movlt	r4, r3
 800ac34:	2501      	movlt	r5, #1
 800ac36:	2500      	movge	r5, #0
 800ac38:	f7ff fd48 	bl	800a6cc <_Balloc>
 800ac3c:	4602      	mov	r2, r0
 800ac3e:	b918      	cbnz	r0, 800ac48 <__mdiff+0x60>
 800ac40:	4b31      	ldr	r3, [pc, #196]	@ (800ad08 <__mdiff+0x120>)
 800ac42:	f240 2145 	movw	r1, #581	@ 0x245
 800ac46:	e7e3      	b.n	800ac10 <__mdiff+0x28>
 800ac48:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ac4c:	6926      	ldr	r6, [r4, #16]
 800ac4e:	60c5      	str	r5, [r0, #12]
 800ac50:	f109 0310 	add.w	r3, r9, #16
 800ac54:	f109 0514 	add.w	r5, r9, #20
 800ac58:	f104 0e14 	add.w	lr, r4, #20
 800ac5c:	f100 0b14 	add.w	fp, r0, #20
 800ac60:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ac64:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ac68:	9301      	str	r3, [sp, #4]
 800ac6a:	46d9      	mov	r9, fp
 800ac6c:	f04f 0c00 	mov.w	ip, #0
 800ac70:	9b01      	ldr	r3, [sp, #4]
 800ac72:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ac76:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ac7a:	9301      	str	r3, [sp, #4]
 800ac7c:	fa1f f38a 	uxth.w	r3, sl
 800ac80:	4619      	mov	r1, r3
 800ac82:	b283      	uxth	r3, r0
 800ac84:	1acb      	subs	r3, r1, r3
 800ac86:	0c00      	lsrs	r0, r0, #16
 800ac88:	4463      	add	r3, ip
 800ac8a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ac8e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ac92:	b29b      	uxth	r3, r3
 800ac94:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ac98:	4576      	cmp	r6, lr
 800ac9a:	f849 3b04 	str.w	r3, [r9], #4
 800ac9e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800aca2:	d8e5      	bhi.n	800ac70 <__mdiff+0x88>
 800aca4:	1b33      	subs	r3, r6, r4
 800aca6:	3b15      	subs	r3, #21
 800aca8:	f023 0303 	bic.w	r3, r3, #3
 800acac:	3415      	adds	r4, #21
 800acae:	3304      	adds	r3, #4
 800acb0:	42a6      	cmp	r6, r4
 800acb2:	bf38      	it	cc
 800acb4:	2304      	movcc	r3, #4
 800acb6:	441d      	add	r5, r3
 800acb8:	445b      	add	r3, fp
 800acba:	461e      	mov	r6, r3
 800acbc:	462c      	mov	r4, r5
 800acbe:	4544      	cmp	r4, r8
 800acc0:	d30e      	bcc.n	800ace0 <__mdiff+0xf8>
 800acc2:	f108 0103 	add.w	r1, r8, #3
 800acc6:	1b49      	subs	r1, r1, r5
 800acc8:	f021 0103 	bic.w	r1, r1, #3
 800accc:	3d03      	subs	r5, #3
 800acce:	45a8      	cmp	r8, r5
 800acd0:	bf38      	it	cc
 800acd2:	2100      	movcc	r1, #0
 800acd4:	440b      	add	r3, r1
 800acd6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800acda:	b191      	cbz	r1, 800ad02 <__mdiff+0x11a>
 800acdc:	6117      	str	r7, [r2, #16]
 800acde:	e79d      	b.n	800ac1c <__mdiff+0x34>
 800ace0:	f854 1b04 	ldr.w	r1, [r4], #4
 800ace4:	46e6      	mov	lr, ip
 800ace6:	0c08      	lsrs	r0, r1, #16
 800ace8:	fa1c fc81 	uxtah	ip, ip, r1
 800acec:	4471      	add	r1, lr
 800acee:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800acf2:	b289      	uxth	r1, r1
 800acf4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800acf8:	f846 1b04 	str.w	r1, [r6], #4
 800acfc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ad00:	e7dd      	b.n	800acbe <__mdiff+0xd6>
 800ad02:	3f01      	subs	r7, #1
 800ad04:	e7e7      	b.n	800acd6 <__mdiff+0xee>
 800ad06:	bf00      	nop
 800ad08:	0800c56c 	.word	0x0800c56c
 800ad0c:	0800c58e 	.word	0x0800c58e

0800ad10 <__d2b>:
 800ad10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ad14:	460f      	mov	r7, r1
 800ad16:	2101      	movs	r1, #1
 800ad18:	ec59 8b10 	vmov	r8, r9, d0
 800ad1c:	4616      	mov	r6, r2
 800ad1e:	f7ff fcd5 	bl	800a6cc <_Balloc>
 800ad22:	4604      	mov	r4, r0
 800ad24:	b930      	cbnz	r0, 800ad34 <__d2b+0x24>
 800ad26:	4602      	mov	r2, r0
 800ad28:	4b23      	ldr	r3, [pc, #140]	@ (800adb8 <__d2b+0xa8>)
 800ad2a:	4824      	ldr	r0, [pc, #144]	@ (800adbc <__d2b+0xac>)
 800ad2c:	f240 310f 	movw	r1, #783	@ 0x30f
 800ad30:	f000 f928 	bl	800af84 <__assert_func>
 800ad34:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ad38:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ad3c:	b10d      	cbz	r5, 800ad42 <__d2b+0x32>
 800ad3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ad42:	9301      	str	r3, [sp, #4]
 800ad44:	f1b8 0300 	subs.w	r3, r8, #0
 800ad48:	d023      	beq.n	800ad92 <__d2b+0x82>
 800ad4a:	4668      	mov	r0, sp
 800ad4c:	9300      	str	r3, [sp, #0]
 800ad4e:	f7ff fd84 	bl	800a85a <__lo0bits>
 800ad52:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ad56:	b1d0      	cbz	r0, 800ad8e <__d2b+0x7e>
 800ad58:	f1c0 0320 	rsb	r3, r0, #32
 800ad5c:	fa02 f303 	lsl.w	r3, r2, r3
 800ad60:	430b      	orrs	r3, r1
 800ad62:	40c2      	lsrs	r2, r0
 800ad64:	6163      	str	r3, [r4, #20]
 800ad66:	9201      	str	r2, [sp, #4]
 800ad68:	9b01      	ldr	r3, [sp, #4]
 800ad6a:	61a3      	str	r3, [r4, #24]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	bf0c      	ite	eq
 800ad70:	2201      	moveq	r2, #1
 800ad72:	2202      	movne	r2, #2
 800ad74:	6122      	str	r2, [r4, #16]
 800ad76:	b1a5      	cbz	r5, 800ada2 <__d2b+0x92>
 800ad78:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ad7c:	4405      	add	r5, r0
 800ad7e:	603d      	str	r5, [r7, #0]
 800ad80:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ad84:	6030      	str	r0, [r6, #0]
 800ad86:	4620      	mov	r0, r4
 800ad88:	b003      	add	sp, #12
 800ad8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad8e:	6161      	str	r1, [r4, #20]
 800ad90:	e7ea      	b.n	800ad68 <__d2b+0x58>
 800ad92:	a801      	add	r0, sp, #4
 800ad94:	f7ff fd61 	bl	800a85a <__lo0bits>
 800ad98:	9b01      	ldr	r3, [sp, #4]
 800ad9a:	6163      	str	r3, [r4, #20]
 800ad9c:	3020      	adds	r0, #32
 800ad9e:	2201      	movs	r2, #1
 800ada0:	e7e8      	b.n	800ad74 <__d2b+0x64>
 800ada2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ada6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800adaa:	6038      	str	r0, [r7, #0]
 800adac:	6918      	ldr	r0, [r3, #16]
 800adae:	f7ff fd35 	bl	800a81c <__hi0bits>
 800adb2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800adb6:	e7e5      	b.n	800ad84 <__d2b+0x74>
 800adb8:	0800c56c 	.word	0x0800c56c
 800adbc:	0800c58e 	.word	0x0800c58e

0800adc0 <__sread>:
 800adc0:	b510      	push	{r4, lr}
 800adc2:	460c      	mov	r4, r1
 800adc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adc8:	f000 f898 	bl	800aefc <_read_r>
 800adcc:	2800      	cmp	r0, #0
 800adce:	bfab      	itete	ge
 800add0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800add2:	89a3      	ldrhlt	r3, [r4, #12]
 800add4:	181b      	addge	r3, r3, r0
 800add6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800adda:	bfac      	ite	ge
 800addc:	6563      	strge	r3, [r4, #84]	@ 0x54
 800adde:	81a3      	strhlt	r3, [r4, #12]
 800ade0:	bd10      	pop	{r4, pc}

0800ade2 <__swrite>:
 800ade2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ade6:	461f      	mov	r7, r3
 800ade8:	898b      	ldrh	r3, [r1, #12]
 800adea:	05db      	lsls	r3, r3, #23
 800adec:	4605      	mov	r5, r0
 800adee:	460c      	mov	r4, r1
 800adf0:	4616      	mov	r6, r2
 800adf2:	d505      	bpl.n	800ae00 <__swrite+0x1e>
 800adf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adf8:	2302      	movs	r3, #2
 800adfa:	2200      	movs	r2, #0
 800adfc:	f000 f86c 	bl	800aed8 <_lseek_r>
 800ae00:	89a3      	ldrh	r3, [r4, #12]
 800ae02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae06:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ae0a:	81a3      	strh	r3, [r4, #12]
 800ae0c:	4632      	mov	r2, r6
 800ae0e:	463b      	mov	r3, r7
 800ae10:	4628      	mov	r0, r5
 800ae12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae16:	f000 b893 	b.w	800af40 <_write_r>

0800ae1a <__sseek>:
 800ae1a:	b510      	push	{r4, lr}
 800ae1c:	460c      	mov	r4, r1
 800ae1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae22:	f000 f859 	bl	800aed8 <_lseek_r>
 800ae26:	1c43      	adds	r3, r0, #1
 800ae28:	89a3      	ldrh	r3, [r4, #12]
 800ae2a:	bf15      	itete	ne
 800ae2c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ae2e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ae32:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ae36:	81a3      	strheq	r3, [r4, #12]
 800ae38:	bf18      	it	ne
 800ae3a:	81a3      	strhne	r3, [r4, #12]
 800ae3c:	bd10      	pop	{r4, pc}

0800ae3e <__sclose>:
 800ae3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae42:	f000 b88f 	b.w	800af64 <_close_r>

0800ae46 <_realloc_r>:
 800ae46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae4a:	4607      	mov	r7, r0
 800ae4c:	4614      	mov	r4, r2
 800ae4e:	460d      	mov	r5, r1
 800ae50:	b921      	cbnz	r1, 800ae5c <_realloc_r+0x16>
 800ae52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae56:	4611      	mov	r1, r2
 800ae58:	f7ff bb00 	b.w	800a45c <_malloc_r>
 800ae5c:	b92a      	cbnz	r2, 800ae6a <_realloc_r+0x24>
 800ae5e:	f000 f8c3 	bl	800afe8 <_free_r>
 800ae62:	4625      	mov	r5, r4
 800ae64:	4628      	mov	r0, r5
 800ae66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae6a:	f000 f919 	bl	800b0a0 <_malloc_usable_size_r>
 800ae6e:	4284      	cmp	r4, r0
 800ae70:	4606      	mov	r6, r0
 800ae72:	d802      	bhi.n	800ae7a <_realloc_r+0x34>
 800ae74:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ae78:	d8f4      	bhi.n	800ae64 <_realloc_r+0x1e>
 800ae7a:	4621      	mov	r1, r4
 800ae7c:	4638      	mov	r0, r7
 800ae7e:	f7ff faed 	bl	800a45c <_malloc_r>
 800ae82:	4680      	mov	r8, r0
 800ae84:	b908      	cbnz	r0, 800ae8a <_realloc_r+0x44>
 800ae86:	4645      	mov	r5, r8
 800ae88:	e7ec      	b.n	800ae64 <_realloc_r+0x1e>
 800ae8a:	42b4      	cmp	r4, r6
 800ae8c:	4622      	mov	r2, r4
 800ae8e:	4629      	mov	r1, r5
 800ae90:	bf28      	it	cs
 800ae92:	4632      	movcs	r2, r6
 800ae94:	f7fe faf8 	bl	8009488 <memcpy>
 800ae98:	4629      	mov	r1, r5
 800ae9a:	4638      	mov	r0, r7
 800ae9c:	f000 f8a4 	bl	800afe8 <_free_r>
 800aea0:	e7f1      	b.n	800ae86 <_realloc_r+0x40>

0800aea2 <memmove>:
 800aea2:	4288      	cmp	r0, r1
 800aea4:	b510      	push	{r4, lr}
 800aea6:	eb01 0402 	add.w	r4, r1, r2
 800aeaa:	d902      	bls.n	800aeb2 <memmove+0x10>
 800aeac:	4284      	cmp	r4, r0
 800aeae:	4623      	mov	r3, r4
 800aeb0:	d807      	bhi.n	800aec2 <memmove+0x20>
 800aeb2:	1e43      	subs	r3, r0, #1
 800aeb4:	42a1      	cmp	r1, r4
 800aeb6:	d008      	beq.n	800aeca <memmove+0x28>
 800aeb8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aebc:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aec0:	e7f8      	b.n	800aeb4 <memmove+0x12>
 800aec2:	4402      	add	r2, r0
 800aec4:	4601      	mov	r1, r0
 800aec6:	428a      	cmp	r2, r1
 800aec8:	d100      	bne.n	800aecc <memmove+0x2a>
 800aeca:	bd10      	pop	{r4, pc}
 800aecc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aed0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aed4:	e7f7      	b.n	800aec6 <memmove+0x24>
	...

0800aed8 <_lseek_r>:
 800aed8:	b538      	push	{r3, r4, r5, lr}
 800aeda:	4d07      	ldr	r5, [pc, #28]	@ (800aef8 <_lseek_r+0x20>)
 800aedc:	4604      	mov	r4, r0
 800aede:	4608      	mov	r0, r1
 800aee0:	4611      	mov	r1, r2
 800aee2:	2200      	movs	r2, #0
 800aee4:	602a      	str	r2, [r5, #0]
 800aee6:	461a      	mov	r2, r3
 800aee8:	f7f7 f8a3 	bl	8002032 <_lseek>
 800aeec:	1c43      	adds	r3, r0, #1
 800aeee:	d102      	bne.n	800aef6 <_lseek_r+0x1e>
 800aef0:	682b      	ldr	r3, [r5, #0]
 800aef2:	b103      	cbz	r3, 800aef6 <_lseek_r+0x1e>
 800aef4:	6023      	str	r3, [r4, #0]
 800aef6:	bd38      	pop	{r3, r4, r5, pc}
 800aef8:	200051a8 	.word	0x200051a8

0800aefc <_read_r>:
 800aefc:	b538      	push	{r3, r4, r5, lr}
 800aefe:	4d07      	ldr	r5, [pc, #28]	@ (800af1c <_read_r+0x20>)
 800af00:	4604      	mov	r4, r0
 800af02:	4608      	mov	r0, r1
 800af04:	4611      	mov	r1, r2
 800af06:	2200      	movs	r2, #0
 800af08:	602a      	str	r2, [r5, #0]
 800af0a:	461a      	mov	r2, r3
 800af0c:	f7f7 f84d 	bl	8001faa <_read>
 800af10:	1c43      	adds	r3, r0, #1
 800af12:	d102      	bne.n	800af1a <_read_r+0x1e>
 800af14:	682b      	ldr	r3, [r5, #0]
 800af16:	b103      	cbz	r3, 800af1a <_read_r+0x1e>
 800af18:	6023      	str	r3, [r4, #0]
 800af1a:	bd38      	pop	{r3, r4, r5, pc}
 800af1c:	200051a8 	.word	0x200051a8

0800af20 <_sbrk_r>:
 800af20:	b538      	push	{r3, r4, r5, lr}
 800af22:	4d06      	ldr	r5, [pc, #24]	@ (800af3c <_sbrk_r+0x1c>)
 800af24:	2300      	movs	r3, #0
 800af26:	4604      	mov	r4, r0
 800af28:	4608      	mov	r0, r1
 800af2a:	602b      	str	r3, [r5, #0]
 800af2c:	f7f7 f88e 	bl	800204c <_sbrk>
 800af30:	1c43      	adds	r3, r0, #1
 800af32:	d102      	bne.n	800af3a <_sbrk_r+0x1a>
 800af34:	682b      	ldr	r3, [r5, #0]
 800af36:	b103      	cbz	r3, 800af3a <_sbrk_r+0x1a>
 800af38:	6023      	str	r3, [r4, #0]
 800af3a:	bd38      	pop	{r3, r4, r5, pc}
 800af3c:	200051a8 	.word	0x200051a8

0800af40 <_write_r>:
 800af40:	b538      	push	{r3, r4, r5, lr}
 800af42:	4d07      	ldr	r5, [pc, #28]	@ (800af60 <_write_r+0x20>)
 800af44:	4604      	mov	r4, r0
 800af46:	4608      	mov	r0, r1
 800af48:	4611      	mov	r1, r2
 800af4a:	2200      	movs	r2, #0
 800af4c:	602a      	str	r2, [r5, #0]
 800af4e:	461a      	mov	r2, r3
 800af50:	f7f5 ffe0 	bl	8000f14 <_write>
 800af54:	1c43      	adds	r3, r0, #1
 800af56:	d102      	bne.n	800af5e <_write_r+0x1e>
 800af58:	682b      	ldr	r3, [r5, #0]
 800af5a:	b103      	cbz	r3, 800af5e <_write_r+0x1e>
 800af5c:	6023      	str	r3, [r4, #0]
 800af5e:	bd38      	pop	{r3, r4, r5, pc}
 800af60:	200051a8 	.word	0x200051a8

0800af64 <_close_r>:
 800af64:	b538      	push	{r3, r4, r5, lr}
 800af66:	4d06      	ldr	r5, [pc, #24]	@ (800af80 <_close_r+0x1c>)
 800af68:	2300      	movs	r3, #0
 800af6a:	4604      	mov	r4, r0
 800af6c:	4608      	mov	r0, r1
 800af6e:	602b      	str	r3, [r5, #0]
 800af70:	f7f7 f838 	bl	8001fe4 <_close>
 800af74:	1c43      	adds	r3, r0, #1
 800af76:	d102      	bne.n	800af7e <_close_r+0x1a>
 800af78:	682b      	ldr	r3, [r5, #0]
 800af7a:	b103      	cbz	r3, 800af7e <_close_r+0x1a>
 800af7c:	6023      	str	r3, [r4, #0]
 800af7e:	bd38      	pop	{r3, r4, r5, pc}
 800af80:	200051a8 	.word	0x200051a8

0800af84 <__assert_func>:
 800af84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800af86:	4614      	mov	r4, r2
 800af88:	461a      	mov	r2, r3
 800af8a:	4b09      	ldr	r3, [pc, #36]	@ (800afb0 <__assert_func+0x2c>)
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	4605      	mov	r5, r0
 800af90:	68d8      	ldr	r0, [r3, #12]
 800af92:	b14c      	cbz	r4, 800afa8 <__assert_func+0x24>
 800af94:	4b07      	ldr	r3, [pc, #28]	@ (800afb4 <__assert_func+0x30>)
 800af96:	9100      	str	r1, [sp, #0]
 800af98:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800af9c:	4906      	ldr	r1, [pc, #24]	@ (800afb8 <__assert_func+0x34>)
 800af9e:	462b      	mov	r3, r5
 800afa0:	f000 f886 	bl	800b0b0 <fiprintf>
 800afa4:	f000 f8a3 	bl	800b0ee <abort>
 800afa8:	4b04      	ldr	r3, [pc, #16]	@ (800afbc <__assert_func+0x38>)
 800afaa:	461c      	mov	r4, r3
 800afac:	e7f3      	b.n	800af96 <__assert_func+0x12>
 800afae:	bf00      	nop
 800afb0:	2000002c 	.word	0x2000002c
 800afb4:	0800c5f1 	.word	0x0800c5f1
 800afb8:	0800c5fe 	.word	0x0800c5fe
 800afbc:	0800c62c 	.word	0x0800c62c

0800afc0 <_calloc_r>:
 800afc0:	b570      	push	{r4, r5, r6, lr}
 800afc2:	fba1 5402 	umull	r5, r4, r1, r2
 800afc6:	b934      	cbnz	r4, 800afd6 <_calloc_r+0x16>
 800afc8:	4629      	mov	r1, r5
 800afca:	f7ff fa47 	bl	800a45c <_malloc_r>
 800afce:	4606      	mov	r6, r0
 800afd0:	b928      	cbnz	r0, 800afde <_calloc_r+0x1e>
 800afd2:	4630      	mov	r0, r6
 800afd4:	bd70      	pop	{r4, r5, r6, pc}
 800afd6:	220c      	movs	r2, #12
 800afd8:	6002      	str	r2, [r0, #0]
 800afda:	2600      	movs	r6, #0
 800afdc:	e7f9      	b.n	800afd2 <_calloc_r+0x12>
 800afde:	462a      	mov	r2, r5
 800afe0:	4621      	mov	r1, r4
 800afe2:	f7fe fa17 	bl	8009414 <memset>
 800afe6:	e7f4      	b.n	800afd2 <_calloc_r+0x12>

0800afe8 <_free_r>:
 800afe8:	b538      	push	{r3, r4, r5, lr}
 800afea:	4605      	mov	r5, r0
 800afec:	2900      	cmp	r1, #0
 800afee:	d041      	beq.n	800b074 <_free_r+0x8c>
 800aff0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aff4:	1f0c      	subs	r4, r1, #4
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	bfb8      	it	lt
 800affa:	18e4      	addlt	r4, r4, r3
 800affc:	f7ff fb5a 	bl	800a6b4 <__malloc_lock>
 800b000:	4a1d      	ldr	r2, [pc, #116]	@ (800b078 <_free_r+0x90>)
 800b002:	6813      	ldr	r3, [r2, #0]
 800b004:	b933      	cbnz	r3, 800b014 <_free_r+0x2c>
 800b006:	6063      	str	r3, [r4, #4]
 800b008:	6014      	str	r4, [r2, #0]
 800b00a:	4628      	mov	r0, r5
 800b00c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b010:	f7ff bb56 	b.w	800a6c0 <__malloc_unlock>
 800b014:	42a3      	cmp	r3, r4
 800b016:	d908      	bls.n	800b02a <_free_r+0x42>
 800b018:	6820      	ldr	r0, [r4, #0]
 800b01a:	1821      	adds	r1, r4, r0
 800b01c:	428b      	cmp	r3, r1
 800b01e:	bf01      	itttt	eq
 800b020:	6819      	ldreq	r1, [r3, #0]
 800b022:	685b      	ldreq	r3, [r3, #4]
 800b024:	1809      	addeq	r1, r1, r0
 800b026:	6021      	streq	r1, [r4, #0]
 800b028:	e7ed      	b.n	800b006 <_free_r+0x1e>
 800b02a:	461a      	mov	r2, r3
 800b02c:	685b      	ldr	r3, [r3, #4]
 800b02e:	b10b      	cbz	r3, 800b034 <_free_r+0x4c>
 800b030:	42a3      	cmp	r3, r4
 800b032:	d9fa      	bls.n	800b02a <_free_r+0x42>
 800b034:	6811      	ldr	r1, [r2, #0]
 800b036:	1850      	adds	r0, r2, r1
 800b038:	42a0      	cmp	r0, r4
 800b03a:	d10b      	bne.n	800b054 <_free_r+0x6c>
 800b03c:	6820      	ldr	r0, [r4, #0]
 800b03e:	4401      	add	r1, r0
 800b040:	1850      	adds	r0, r2, r1
 800b042:	4283      	cmp	r3, r0
 800b044:	6011      	str	r1, [r2, #0]
 800b046:	d1e0      	bne.n	800b00a <_free_r+0x22>
 800b048:	6818      	ldr	r0, [r3, #0]
 800b04a:	685b      	ldr	r3, [r3, #4]
 800b04c:	6053      	str	r3, [r2, #4]
 800b04e:	4408      	add	r0, r1
 800b050:	6010      	str	r0, [r2, #0]
 800b052:	e7da      	b.n	800b00a <_free_r+0x22>
 800b054:	d902      	bls.n	800b05c <_free_r+0x74>
 800b056:	230c      	movs	r3, #12
 800b058:	602b      	str	r3, [r5, #0]
 800b05a:	e7d6      	b.n	800b00a <_free_r+0x22>
 800b05c:	6820      	ldr	r0, [r4, #0]
 800b05e:	1821      	adds	r1, r4, r0
 800b060:	428b      	cmp	r3, r1
 800b062:	bf04      	itt	eq
 800b064:	6819      	ldreq	r1, [r3, #0]
 800b066:	685b      	ldreq	r3, [r3, #4]
 800b068:	6063      	str	r3, [r4, #4]
 800b06a:	bf04      	itt	eq
 800b06c:	1809      	addeq	r1, r1, r0
 800b06e:	6021      	streq	r1, [r4, #0]
 800b070:	6054      	str	r4, [r2, #4]
 800b072:	e7ca      	b.n	800b00a <_free_r+0x22>
 800b074:	bd38      	pop	{r3, r4, r5, pc}
 800b076:	bf00      	nop
 800b078:	200051a4 	.word	0x200051a4

0800b07c <__ascii_mbtowc>:
 800b07c:	b082      	sub	sp, #8
 800b07e:	b901      	cbnz	r1, 800b082 <__ascii_mbtowc+0x6>
 800b080:	a901      	add	r1, sp, #4
 800b082:	b142      	cbz	r2, 800b096 <__ascii_mbtowc+0x1a>
 800b084:	b14b      	cbz	r3, 800b09a <__ascii_mbtowc+0x1e>
 800b086:	7813      	ldrb	r3, [r2, #0]
 800b088:	600b      	str	r3, [r1, #0]
 800b08a:	7812      	ldrb	r2, [r2, #0]
 800b08c:	1e10      	subs	r0, r2, #0
 800b08e:	bf18      	it	ne
 800b090:	2001      	movne	r0, #1
 800b092:	b002      	add	sp, #8
 800b094:	4770      	bx	lr
 800b096:	4610      	mov	r0, r2
 800b098:	e7fb      	b.n	800b092 <__ascii_mbtowc+0x16>
 800b09a:	f06f 0001 	mvn.w	r0, #1
 800b09e:	e7f8      	b.n	800b092 <__ascii_mbtowc+0x16>

0800b0a0 <_malloc_usable_size_r>:
 800b0a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b0a4:	1f18      	subs	r0, r3, #4
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	bfbc      	itt	lt
 800b0aa:	580b      	ldrlt	r3, [r1, r0]
 800b0ac:	18c0      	addlt	r0, r0, r3
 800b0ae:	4770      	bx	lr

0800b0b0 <fiprintf>:
 800b0b0:	b40e      	push	{r1, r2, r3}
 800b0b2:	b503      	push	{r0, r1, lr}
 800b0b4:	4601      	mov	r1, r0
 800b0b6:	ab03      	add	r3, sp, #12
 800b0b8:	4805      	ldr	r0, [pc, #20]	@ (800b0d0 <fiprintf+0x20>)
 800b0ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0be:	6800      	ldr	r0, [r0, #0]
 800b0c0:	9301      	str	r3, [sp, #4]
 800b0c2:	f000 f845 	bl	800b150 <_vfiprintf_r>
 800b0c6:	b002      	add	sp, #8
 800b0c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b0cc:	b003      	add	sp, #12
 800b0ce:	4770      	bx	lr
 800b0d0:	2000002c 	.word	0x2000002c

0800b0d4 <__ascii_wctomb>:
 800b0d4:	4603      	mov	r3, r0
 800b0d6:	4608      	mov	r0, r1
 800b0d8:	b141      	cbz	r1, 800b0ec <__ascii_wctomb+0x18>
 800b0da:	2aff      	cmp	r2, #255	@ 0xff
 800b0dc:	d904      	bls.n	800b0e8 <__ascii_wctomb+0x14>
 800b0de:	228a      	movs	r2, #138	@ 0x8a
 800b0e0:	601a      	str	r2, [r3, #0]
 800b0e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b0e6:	4770      	bx	lr
 800b0e8:	700a      	strb	r2, [r1, #0]
 800b0ea:	2001      	movs	r0, #1
 800b0ec:	4770      	bx	lr

0800b0ee <abort>:
 800b0ee:	b508      	push	{r3, lr}
 800b0f0:	2006      	movs	r0, #6
 800b0f2:	f000 fa63 	bl	800b5bc <raise>
 800b0f6:	2001      	movs	r0, #1
 800b0f8:	f7f6 ff4c 	bl	8001f94 <_exit>

0800b0fc <__sfputc_r>:
 800b0fc:	6893      	ldr	r3, [r2, #8]
 800b0fe:	3b01      	subs	r3, #1
 800b100:	2b00      	cmp	r3, #0
 800b102:	b410      	push	{r4}
 800b104:	6093      	str	r3, [r2, #8]
 800b106:	da08      	bge.n	800b11a <__sfputc_r+0x1e>
 800b108:	6994      	ldr	r4, [r2, #24]
 800b10a:	42a3      	cmp	r3, r4
 800b10c:	db01      	blt.n	800b112 <__sfputc_r+0x16>
 800b10e:	290a      	cmp	r1, #10
 800b110:	d103      	bne.n	800b11a <__sfputc_r+0x1e>
 800b112:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b116:	f000 b933 	b.w	800b380 <__swbuf_r>
 800b11a:	6813      	ldr	r3, [r2, #0]
 800b11c:	1c58      	adds	r0, r3, #1
 800b11e:	6010      	str	r0, [r2, #0]
 800b120:	7019      	strb	r1, [r3, #0]
 800b122:	4608      	mov	r0, r1
 800b124:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b128:	4770      	bx	lr

0800b12a <__sfputs_r>:
 800b12a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b12c:	4606      	mov	r6, r0
 800b12e:	460f      	mov	r7, r1
 800b130:	4614      	mov	r4, r2
 800b132:	18d5      	adds	r5, r2, r3
 800b134:	42ac      	cmp	r4, r5
 800b136:	d101      	bne.n	800b13c <__sfputs_r+0x12>
 800b138:	2000      	movs	r0, #0
 800b13a:	e007      	b.n	800b14c <__sfputs_r+0x22>
 800b13c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b140:	463a      	mov	r2, r7
 800b142:	4630      	mov	r0, r6
 800b144:	f7ff ffda 	bl	800b0fc <__sfputc_r>
 800b148:	1c43      	adds	r3, r0, #1
 800b14a:	d1f3      	bne.n	800b134 <__sfputs_r+0xa>
 800b14c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b150 <_vfiprintf_r>:
 800b150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b154:	460d      	mov	r5, r1
 800b156:	b09d      	sub	sp, #116	@ 0x74
 800b158:	4614      	mov	r4, r2
 800b15a:	4698      	mov	r8, r3
 800b15c:	4606      	mov	r6, r0
 800b15e:	b118      	cbz	r0, 800b168 <_vfiprintf_r+0x18>
 800b160:	6a03      	ldr	r3, [r0, #32]
 800b162:	b90b      	cbnz	r3, 800b168 <_vfiprintf_r+0x18>
 800b164:	f7fe f920 	bl	80093a8 <__sinit>
 800b168:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b16a:	07d9      	lsls	r1, r3, #31
 800b16c:	d405      	bmi.n	800b17a <_vfiprintf_r+0x2a>
 800b16e:	89ab      	ldrh	r3, [r5, #12]
 800b170:	059a      	lsls	r2, r3, #22
 800b172:	d402      	bmi.n	800b17a <_vfiprintf_r+0x2a>
 800b174:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b176:	f7fe f980 	bl	800947a <__retarget_lock_acquire_recursive>
 800b17a:	89ab      	ldrh	r3, [r5, #12]
 800b17c:	071b      	lsls	r3, r3, #28
 800b17e:	d501      	bpl.n	800b184 <_vfiprintf_r+0x34>
 800b180:	692b      	ldr	r3, [r5, #16]
 800b182:	b99b      	cbnz	r3, 800b1ac <_vfiprintf_r+0x5c>
 800b184:	4629      	mov	r1, r5
 800b186:	4630      	mov	r0, r6
 800b188:	f000 f938 	bl	800b3fc <__swsetup_r>
 800b18c:	b170      	cbz	r0, 800b1ac <_vfiprintf_r+0x5c>
 800b18e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b190:	07dc      	lsls	r4, r3, #31
 800b192:	d504      	bpl.n	800b19e <_vfiprintf_r+0x4e>
 800b194:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b198:	b01d      	add	sp, #116	@ 0x74
 800b19a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b19e:	89ab      	ldrh	r3, [r5, #12]
 800b1a0:	0598      	lsls	r0, r3, #22
 800b1a2:	d4f7      	bmi.n	800b194 <_vfiprintf_r+0x44>
 800b1a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b1a6:	f7fe f969 	bl	800947c <__retarget_lock_release_recursive>
 800b1aa:	e7f3      	b.n	800b194 <_vfiprintf_r+0x44>
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1b0:	2320      	movs	r3, #32
 800b1b2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b1b6:	f8cd 800c 	str.w	r8, [sp, #12]
 800b1ba:	2330      	movs	r3, #48	@ 0x30
 800b1bc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b36c <_vfiprintf_r+0x21c>
 800b1c0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b1c4:	f04f 0901 	mov.w	r9, #1
 800b1c8:	4623      	mov	r3, r4
 800b1ca:	469a      	mov	sl, r3
 800b1cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b1d0:	b10a      	cbz	r2, 800b1d6 <_vfiprintf_r+0x86>
 800b1d2:	2a25      	cmp	r2, #37	@ 0x25
 800b1d4:	d1f9      	bne.n	800b1ca <_vfiprintf_r+0x7a>
 800b1d6:	ebba 0b04 	subs.w	fp, sl, r4
 800b1da:	d00b      	beq.n	800b1f4 <_vfiprintf_r+0xa4>
 800b1dc:	465b      	mov	r3, fp
 800b1de:	4622      	mov	r2, r4
 800b1e0:	4629      	mov	r1, r5
 800b1e2:	4630      	mov	r0, r6
 800b1e4:	f7ff ffa1 	bl	800b12a <__sfputs_r>
 800b1e8:	3001      	adds	r0, #1
 800b1ea:	f000 80a7 	beq.w	800b33c <_vfiprintf_r+0x1ec>
 800b1ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b1f0:	445a      	add	r2, fp
 800b1f2:	9209      	str	r2, [sp, #36]	@ 0x24
 800b1f4:	f89a 3000 	ldrb.w	r3, [sl]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	f000 809f 	beq.w	800b33c <_vfiprintf_r+0x1ec>
 800b1fe:	2300      	movs	r3, #0
 800b200:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b204:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b208:	f10a 0a01 	add.w	sl, sl, #1
 800b20c:	9304      	str	r3, [sp, #16]
 800b20e:	9307      	str	r3, [sp, #28]
 800b210:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b214:	931a      	str	r3, [sp, #104]	@ 0x68
 800b216:	4654      	mov	r4, sl
 800b218:	2205      	movs	r2, #5
 800b21a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b21e:	4853      	ldr	r0, [pc, #332]	@ (800b36c <_vfiprintf_r+0x21c>)
 800b220:	f7f4 fff6 	bl	8000210 <memchr>
 800b224:	9a04      	ldr	r2, [sp, #16]
 800b226:	b9d8      	cbnz	r0, 800b260 <_vfiprintf_r+0x110>
 800b228:	06d1      	lsls	r1, r2, #27
 800b22a:	bf44      	itt	mi
 800b22c:	2320      	movmi	r3, #32
 800b22e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b232:	0713      	lsls	r3, r2, #28
 800b234:	bf44      	itt	mi
 800b236:	232b      	movmi	r3, #43	@ 0x2b
 800b238:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b23c:	f89a 3000 	ldrb.w	r3, [sl]
 800b240:	2b2a      	cmp	r3, #42	@ 0x2a
 800b242:	d015      	beq.n	800b270 <_vfiprintf_r+0x120>
 800b244:	9a07      	ldr	r2, [sp, #28]
 800b246:	4654      	mov	r4, sl
 800b248:	2000      	movs	r0, #0
 800b24a:	f04f 0c0a 	mov.w	ip, #10
 800b24e:	4621      	mov	r1, r4
 800b250:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b254:	3b30      	subs	r3, #48	@ 0x30
 800b256:	2b09      	cmp	r3, #9
 800b258:	d94b      	bls.n	800b2f2 <_vfiprintf_r+0x1a2>
 800b25a:	b1b0      	cbz	r0, 800b28a <_vfiprintf_r+0x13a>
 800b25c:	9207      	str	r2, [sp, #28]
 800b25e:	e014      	b.n	800b28a <_vfiprintf_r+0x13a>
 800b260:	eba0 0308 	sub.w	r3, r0, r8
 800b264:	fa09 f303 	lsl.w	r3, r9, r3
 800b268:	4313      	orrs	r3, r2
 800b26a:	9304      	str	r3, [sp, #16]
 800b26c:	46a2      	mov	sl, r4
 800b26e:	e7d2      	b.n	800b216 <_vfiprintf_r+0xc6>
 800b270:	9b03      	ldr	r3, [sp, #12]
 800b272:	1d19      	adds	r1, r3, #4
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	9103      	str	r1, [sp, #12]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	bfbb      	ittet	lt
 800b27c:	425b      	neglt	r3, r3
 800b27e:	f042 0202 	orrlt.w	r2, r2, #2
 800b282:	9307      	strge	r3, [sp, #28]
 800b284:	9307      	strlt	r3, [sp, #28]
 800b286:	bfb8      	it	lt
 800b288:	9204      	strlt	r2, [sp, #16]
 800b28a:	7823      	ldrb	r3, [r4, #0]
 800b28c:	2b2e      	cmp	r3, #46	@ 0x2e
 800b28e:	d10a      	bne.n	800b2a6 <_vfiprintf_r+0x156>
 800b290:	7863      	ldrb	r3, [r4, #1]
 800b292:	2b2a      	cmp	r3, #42	@ 0x2a
 800b294:	d132      	bne.n	800b2fc <_vfiprintf_r+0x1ac>
 800b296:	9b03      	ldr	r3, [sp, #12]
 800b298:	1d1a      	adds	r2, r3, #4
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	9203      	str	r2, [sp, #12]
 800b29e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b2a2:	3402      	adds	r4, #2
 800b2a4:	9305      	str	r3, [sp, #20]
 800b2a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b37c <_vfiprintf_r+0x22c>
 800b2aa:	7821      	ldrb	r1, [r4, #0]
 800b2ac:	2203      	movs	r2, #3
 800b2ae:	4650      	mov	r0, sl
 800b2b0:	f7f4 ffae 	bl	8000210 <memchr>
 800b2b4:	b138      	cbz	r0, 800b2c6 <_vfiprintf_r+0x176>
 800b2b6:	9b04      	ldr	r3, [sp, #16]
 800b2b8:	eba0 000a 	sub.w	r0, r0, sl
 800b2bc:	2240      	movs	r2, #64	@ 0x40
 800b2be:	4082      	lsls	r2, r0
 800b2c0:	4313      	orrs	r3, r2
 800b2c2:	3401      	adds	r4, #1
 800b2c4:	9304      	str	r3, [sp, #16]
 800b2c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2ca:	4829      	ldr	r0, [pc, #164]	@ (800b370 <_vfiprintf_r+0x220>)
 800b2cc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b2d0:	2206      	movs	r2, #6
 800b2d2:	f7f4 ff9d 	bl	8000210 <memchr>
 800b2d6:	2800      	cmp	r0, #0
 800b2d8:	d03f      	beq.n	800b35a <_vfiprintf_r+0x20a>
 800b2da:	4b26      	ldr	r3, [pc, #152]	@ (800b374 <_vfiprintf_r+0x224>)
 800b2dc:	bb1b      	cbnz	r3, 800b326 <_vfiprintf_r+0x1d6>
 800b2de:	9b03      	ldr	r3, [sp, #12]
 800b2e0:	3307      	adds	r3, #7
 800b2e2:	f023 0307 	bic.w	r3, r3, #7
 800b2e6:	3308      	adds	r3, #8
 800b2e8:	9303      	str	r3, [sp, #12]
 800b2ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2ec:	443b      	add	r3, r7
 800b2ee:	9309      	str	r3, [sp, #36]	@ 0x24
 800b2f0:	e76a      	b.n	800b1c8 <_vfiprintf_r+0x78>
 800b2f2:	fb0c 3202 	mla	r2, ip, r2, r3
 800b2f6:	460c      	mov	r4, r1
 800b2f8:	2001      	movs	r0, #1
 800b2fa:	e7a8      	b.n	800b24e <_vfiprintf_r+0xfe>
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	3401      	adds	r4, #1
 800b300:	9305      	str	r3, [sp, #20]
 800b302:	4619      	mov	r1, r3
 800b304:	f04f 0c0a 	mov.w	ip, #10
 800b308:	4620      	mov	r0, r4
 800b30a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b30e:	3a30      	subs	r2, #48	@ 0x30
 800b310:	2a09      	cmp	r2, #9
 800b312:	d903      	bls.n	800b31c <_vfiprintf_r+0x1cc>
 800b314:	2b00      	cmp	r3, #0
 800b316:	d0c6      	beq.n	800b2a6 <_vfiprintf_r+0x156>
 800b318:	9105      	str	r1, [sp, #20]
 800b31a:	e7c4      	b.n	800b2a6 <_vfiprintf_r+0x156>
 800b31c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b320:	4604      	mov	r4, r0
 800b322:	2301      	movs	r3, #1
 800b324:	e7f0      	b.n	800b308 <_vfiprintf_r+0x1b8>
 800b326:	ab03      	add	r3, sp, #12
 800b328:	9300      	str	r3, [sp, #0]
 800b32a:	462a      	mov	r2, r5
 800b32c:	4b12      	ldr	r3, [pc, #72]	@ (800b378 <_vfiprintf_r+0x228>)
 800b32e:	a904      	add	r1, sp, #16
 800b330:	4630      	mov	r0, r6
 800b332:	f7fd fbc1 	bl	8008ab8 <_printf_float>
 800b336:	4607      	mov	r7, r0
 800b338:	1c78      	adds	r0, r7, #1
 800b33a:	d1d6      	bne.n	800b2ea <_vfiprintf_r+0x19a>
 800b33c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b33e:	07d9      	lsls	r1, r3, #31
 800b340:	d405      	bmi.n	800b34e <_vfiprintf_r+0x1fe>
 800b342:	89ab      	ldrh	r3, [r5, #12]
 800b344:	059a      	lsls	r2, r3, #22
 800b346:	d402      	bmi.n	800b34e <_vfiprintf_r+0x1fe>
 800b348:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b34a:	f7fe f897 	bl	800947c <__retarget_lock_release_recursive>
 800b34e:	89ab      	ldrh	r3, [r5, #12]
 800b350:	065b      	lsls	r3, r3, #25
 800b352:	f53f af1f 	bmi.w	800b194 <_vfiprintf_r+0x44>
 800b356:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b358:	e71e      	b.n	800b198 <_vfiprintf_r+0x48>
 800b35a:	ab03      	add	r3, sp, #12
 800b35c:	9300      	str	r3, [sp, #0]
 800b35e:	462a      	mov	r2, r5
 800b360:	4b05      	ldr	r3, [pc, #20]	@ (800b378 <_vfiprintf_r+0x228>)
 800b362:	a904      	add	r1, sp, #16
 800b364:	4630      	mov	r0, r6
 800b366:	f7fd fe3f 	bl	8008fe8 <_printf_i>
 800b36a:	e7e4      	b.n	800b336 <_vfiprintf_r+0x1e6>
 800b36c:	0800c57d 	.word	0x0800c57d
 800b370:	0800c587 	.word	0x0800c587
 800b374:	08008ab9 	.word	0x08008ab9
 800b378:	0800b12b 	.word	0x0800b12b
 800b37c:	0800c583 	.word	0x0800c583

0800b380 <__swbuf_r>:
 800b380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b382:	460e      	mov	r6, r1
 800b384:	4614      	mov	r4, r2
 800b386:	4605      	mov	r5, r0
 800b388:	b118      	cbz	r0, 800b392 <__swbuf_r+0x12>
 800b38a:	6a03      	ldr	r3, [r0, #32]
 800b38c:	b90b      	cbnz	r3, 800b392 <__swbuf_r+0x12>
 800b38e:	f7fe f80b 	bl	80093a8 <__sinit>
 800b392:	69a3      	ldr	r3, [r4, #24]
 800b394:	60a3      	str	r3, [r4, #8]
 800b396:	89a3      	ldrh	r3, [r4, #12]
 800b398:	071a      	lsls	r2, r3, #28
 800b39a:	d501      	bpl.n	800b3a0 <__swbuf_r+0x20>
 800b39c:	6923      	ldr	r3, [r4, #16]
 800b39e:	b943      	cbnz	r3, 800b3b2 <__swbuf_r+0x32>
 800b3a0:	4621      	mov	r1, r4
 800b3a2:	4628      	mov	r0, r5
 800b3a4:	f000 f82a 	bl	800b3fc <__swsetup_r>
 800b3a8:	b118      	cbz	r0, 800b3b2 <__swbuf_r+0x32>
 800b3aa:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800b3ae:	4638      	mov	r0, r7
 800b3b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3b2:	6823      	ldr	r3, [r4, #0]
 800b3b4:	6922      	ldr	r2, [r4, #16]
 800b3b6:	1a98      	subs	r0, r3, r2
 800b3b8:	6963      	ldr	r3, [r4, #20]
 800b3ba:	b2f6      	uxtb	r6, r6
 800b3bc:	4283      	cmp	r3, r0
 800b3be:	4637      	mov	r7, r6
 800b3c0:	dc05      	bgt.n	800b3ce <__swbuf_r+0x4e>
 800b3c2:	4621      	mov	r1, r4
 800b3c4:	4628      	mov	r0, r5
 800b3c6:	f7ff f94d 	bl	800a664 <_fflush_r>
 800b3ca:	2800      	cmp	r0, #0
 800b3cc:	d1ed      	bne.n	800b3aa <__swbuf_r+0x2a>
 800b3ce:	68a3      	ldr	r3, [r4, #8]
 800b3d0:	3b01      	subs	r3, #1
 800b3d2:	60a3      	str	r3, [r4, #8]
 800b3d4:	6823      	ldr	r3, [r4, #0]
 800b3d6:	1c5a      	adds	r2, r3, #1
 800b3d8:	6022      	str	r2, [r4, #0]
 800b3da:	701e      	strb	r6, [r3, #0]
 800b3dc:	6962      	ldr	r2, [r4, #20]
 800b3de:	1c43      	adds	r3, r0, #1
 800b3e0:	429a      	cmp	r2, r3
 800b3e2:	d004      	beq.n	800b3ee <__swbuf_r+0x6e>
 800b3e4:	89a3      	ldrh	r3, [r4, #12]
 800b3e6:	07db      	lsls	r3, r3, #31
 800b3e8:	d5e1      	bpl.n	800b3ae <__swbuf_r+0x2e>
 800b3ea:	2e0a      	cmp	r6, #10
 800b3ec:	d1df      	bne.n	800b3ae <__swbuf_r+0x2e>
 800b3ee:	4621      	mov	r1, r4
 800b3f0:	4628      	mov	r0, r5
 800b3f2:	f7ff f937 	bl	800a664 <_fflush_r>
 800b3f6:	2800      	cmp	r0, #0
 800b3f8:	d0d9      	beq.n	800b3ae <__swbuf_r+0x2e>
 800b3fa:	e7d6      	b.n	800b3aa <__swbuf_r+0x2a>

0800b3fc <__swsetup_r>:
 800b3fc:	b538      	push	{r3, r4, r5, lr}
 800b3fe:	4b29      	ldr	r3, [pc, #164]	@ (800b4a4 <__swsetup_r+0xa8>)
 800b400:	4605      	mov	r5, r0
 800b402:	6818      	ldr	r0, [r3, #0]
 800b404:	460c      	mov	r4, r1
 800b406:	b118      	cbz	r0, 800b410 <__swsetup_r+0x14>
 800b408:	6a03      	ldr	r3, [r0, #32]
 800b40a:	b90b      	cbnz	r3, 800b410 <__swsetup_r+0x14>
 800b40c:	f7fd ffcc 	bl	80093a8 <__sinit>
 800b410:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b414:	0719      	lsls	r1, r3, #28
 800b416:	d422      	bmi.n	800b45e <__swsetup_r+0x62>
 800b418:	06da      	lsls	r2, r3, #27
 800b41a:	d407      	bmi.n	800b42c <__swsetup_r+0x30>
 800b41c:	2209      	movs	r2, #9
 800b41e:	602a      	str	r2, [r5, #0]
 800b420:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b424:	81a3      	strh	r3, [r4, #12]
 800b426:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b42a:	e033      	b.n	800b494 <__swsetup_r+0x98>
 800b42c:	0758      	lsls	r0, r3, #29
 800b42e:	d512      	bpl.n	800b456 <__swsetup_r+0x5a>
 800b430:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b432:	b141      	cbz	r1, 800b446 <__swsetup_r+0x4a>
 800b434:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b438:	4299      	cmp	r1, r3
 800b43a:	d002      	beq.n	800b442 <__swsetup_r+0x46>
 800b43c:	4628      	mov	r0, r5
 800b43e:	f7ff fdd3 	bl	800afe8 <_free_r>
 800b442:	2300      	movs	r3, #0
 800b444:	6363      	str	r3, [r4, #52]	@ 0x34
 800b446:	89a3      	ldrh	r3, [r4, #12]
 800b448:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b44c:	81a3      	strh	r3, [r4, #12]
 800b44e:	2300      	movs	r3, #0
 800b450:	6063      	str	r3, [r4, #4]
 800b452:	6923      	ldr	r3, [r4, #16]
 800b454:	6023      	str	r3, [r4, #0]
 800b456:	89a3      	ldrh	r3, [r4, #12]
 800b458:	f043 0308 	orr.w	r3, r3, #8
 800b45c:	81a3      	strh	r3, [r4, #12]
 800b45e:	6923      	ldr	r3, [r4, #16]
 800b460:	b94b      	cbnz	r3, 800b476 <__swsetup_r+0x7a>
 800b462:	89a3      	ldrh	r3, [r4, #12]
 800b464:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b468:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b46c:	d003      	beq.n	800b476 <__swsetup_r+0x7a>
 800b46e:	4621      	mov	r1, r4
 800b470:	4628      	mov	r0, r5
 800b472:	f000 f83f 	bl	800b4f4 <__smakebuf_r>
 800b476:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b47a:	f013 0201 	ands.w	r2, r3, #1
 800b47e:	d00a      	beq.n	800b496 <__swsetup_r+0x9a>
 800b480:	2200      	movs	r2, #0
 800b482:	60a2      	str	r2, [r4, #8]
 800b484:	6962      	ldr	r2, [r4, #20]
 800b486:	4252      	negs	r2, r2
 800b488:	61a2      	str	r2, [r4, #24]
 800b48a:	6922      	ldr	r2, [r4, #16]
 800b48c:	b942      	cbnz	r2, 800b4a0 <__swsetup_r+0xa4>
 800b48e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b492:	d1c5      	bne.n	800b420 <__swsetup_r+0x24>
 800b494:	bd38      	pop	{r3, r4, r5, pc}
 800b496:	0799      	lsls	r1, r3, #30
 800b498:	bf58      	it	pl
 800b49a:	6962      	ldrpl	r2, [r4, #20]
 800b49c:	60a2      	str	r2, [r4, #8]
 800b49e:	e7f4      	b.n	800b48a <__swsetup_r+0x8e>
 800b4a0:	2000      	movs	r0, #0
 800b4a2:	e7f7      	b.n	800b494 <__swsetup_r+0x98>
 800b4a4:	2000002c 	.word	0x2000002c

0800b4a8 <__swhatbuf_r>:
 800b4a8:	b570      	push	{r4, r5, r6, lr}
 800b4aa:	460c      	mov	r4, r1
 800b4ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4b0:	2900      	cmp	r1, #0
 800b4b2:	b096      	sub	sp, #88	@ 0x58
 800b4b4:	4615      	mov	r5, r2
 800b4b6:	461e      	mov	r6, r3
 800b4b8:	da0d      	bge.n	800b4d6 <__swhatbuf_r+0x2e>
 800b4ba:	89a3      	ldrh	r3, [r4, #12]
 800b4bc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b4c0:	f04f 0100 	mov.w	r1, #0
 800b4c4:	bf14      	ite	ne
 800b4c6:	2340      	movne	r3, #64	@ 0x40
 800b4c8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b4cc:	2000      	movs	r0, #0
 800b4ce:	6031      	str	r1, [r6, #0]
 800b4d0:	602b      	str	r3, [r5, #0]
 800b4d2:	b016      	add	sp, #88	@ 0x58
 800b4d4:	bd70      	pop	{r4, r5, r6, pc}
 800b4d6:	466a      	mov	r2, sp
 800b4d8:	f000 f89c 	bl	800b614 <_fstat_r>
 800b4dc:	2800      	cmp	r0, #0
 800b4de:	dbec      	blt.n	800b4ba <__swhatbuf_r+0x12>
 800b4e0:	9901      	ldr	r1, [sp, #4]
 800b4e2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b4e6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b4ea:	4259      	negs	r1, r3
 800b4ec:	4159      	adcs	r1, r3
 800b4ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b4f2:	e7eb      	b.n	800b4cc <__swhatbuf_r+0x24>

0800b4f4 <__smakebuf_r>:
 800b4f4:	898b      	ldrh	r3, [r1, #12]
 800b4f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b4f8:	079d      	lsls	r5, r3, #30
 800b4fa:	4606      	mov	r6, r0
 800b4fc:	460c      	mov	r4, r1
 800b4fe:	d507      	bpl.n	800b510 <__smakebuf_r+0x1c>
 800b500:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b504:	6023      	str	r3, [r4, #0]
 800b506:	6123      	str	r3, [r4, #16]
 800b508:	2301      	movs	r3, #1
 800b50a:	6163      	str	r3, [r4, #20]
 800b50c:	b003      	add	sp, #12
 800b50e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b510:	ab01      	add	r3, sp, #4
 800b512:	466a      	mov	r2, sp
 800b514:	f7ff ffc8 	bl	800b4a8 <__swhatbuf_r>
 800b518:	9f00      	ldr	r7, [sp, #0]
 800b51a:	4605      	mov	r5, r0
 800b51c:	4639      	mov	r1, r7
 800b51e:	4630      	mov	r0, r6
 800b520:	f7fe ff9c 	bl	800a45c <_malloc_r>
 800b524:	b948      	cbnz	r0, 800b53a <__smakebuf_r+0x46>
 800b526:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b52a:	059a      	lsls	r2, r3, #22
 800b52c:	d4ee      	bmi.n	800b50c <__smakebuf_r+0x18>
 800b52e:	f023 0303 	bic.w	r3, r3, #3
 800b532:	f043 0302 	orr.w	r3, r3, #2
 800b536:	81a3      	strh	r3, [r4, #12]
 800b538:	e7e2      	b.n	800b500 <__smakebuf_r+0xc>
 800b53a:	89a3      	ldrh	r3, [r4, #12]
 800b53c:	6020      	str	r0, [r4, #0]
 800b53e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b542:	81a3      	strh	r3, [r4, #12]
 800b544:	9b01      	ldr	r3, [sp, #4]
 800b546:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b54a:	b15b      	cbz	r3, 800b564 <__smakebuf_r+0x70>
 800b54c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b550:	4630      	mov	r0, r6
 800b552:	f000 f83b 	bl	800b5cc <_isatty_r>
 800b556:	b128      	cbz	r0, 800b564 <__smakebuf_r+0x70>
 800b558:	89a3      	ldrh	r3, [r4, #12]
 800b55a:	f023 0303 	bic.w	r3, r3, #3
 800b55e:	f043 0301 	orr.w	r3, r3, #1
 800b562:	81a3      	strh	r3, [r4, #12]
 800b564:	89a3      	ldrh	r3, [r4, #12]
 800b566:	431d      	orrs	r5, r3
 800b568:	81a5      	strh	r5, [r4, #12]
 800b56a:	e7cf      	b.n	800b50c <__smakebuf_r+0x18>

0800b56c <_raise_r>:
 800b56c:	291f      	cmp	r1, #31
 800b56e:	b538      	push	{r3, r4, r5, lr}
 800b570:	4605      	mov	r5, r0
 800b572:	460c      	mov	r4, r1
 800b574:	d904      	bls.n	800b580 <_raise_r+0x14>
 800b576:	2316      	movs	r3, #22
 800b578:	6003      	str	r3, [r0, #0]
 800b57a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b57e:	bd38      	pop	{r3, r4, r5, pc}
 800b580:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b582:	b112      	cbz	r2, 800b58a <_raise_r+0x1e>
 800b584:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b588:	b94b      	cbnz	r3, 800b59e <_raise_r+0x32>
 800b58a:	4628      	mov	r0, r5
 800b58c:	f000 f840 	bl	800b610 <_getpid_r>
 800b590:	4622      	mov	r2, r4
 800b592:	4601      	mov	r1, r0
 800b594:	4628      	mov	r0, r5
 800b596:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b59a:	f000 b827 	b.w	800b5ec <_kill_r>
 800b59e:	2b01      	cmp	r3, #1
 800b5a0:	d00a      	beq.n	800b5b8 <_raise_r+0x4c>
 800b5a2:	1c59      	adds	r1, r3, #1
 800b5a4:	d103      	bne.n	800b5ae <_raise_r+0x42>
 800b5a6:	2316      	movs	r3, #22
 800b5a8:	6003      	str	r3, [r0, #0]
 800b5aa:	2001      	movs	r0, #1
 800b5ac:	e7e7      	b.n	800b57e <_raise_r+0x12>
 800b5ae:	2100      	movs	r1, #0
 800b5b0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b5b4:	4620      	mov	r0, r4
 800b5b6:	4798      	blx	r3
 800b5b8:	2000      	movs	r0, #0
 800b5ba:	e7e0      	b.n	800b57e <_raise_r+0x12>

0800b5bc <raise>:
 800b5bc:	4b02      	ldr	r3, [pc, #8]	@ (800b5c8 <raise+0xc>)
 800b5be:	4601      	mov	r1, r0
 800b5c0:	6818      	ldr	r0, [r3, #0]
 800b5c2:	f7ff bfd3 	b.w	800b56c <_raise_r>
 800b5c6:	bf00      	nop
 800b5c8:	2000002c 	.word	0x2000002c

0800b5cc <_isatty_r>:
 800b5cc:	b538      	push	{r3, r4, r5, lr}
 800b5ce:	4d06      	ldr	r5, [pc, #24]	@ (800b5e8 <_isatty_r+0x1c>)
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	4604      	mov	r4, r0
 800b5d4:	4608      	mov	r0, r1
 800b5d6:	602b      	str	r3, [r5, #0]
 800b5d8:	f7f6 fd20 	bl	800201c <_isatty>
 800b5dc:	1c43      	adds	r3, r0, #1
 800b5de:	d102      	bne.n	800b5e6 <_isatty_r+0x1a>
 800b5e0:	682b      	ldr	r3, [r5, #0]
 800b5e2:	b103      	cbz	r3, 800b5e6 <_isatty_r+0x1a>
 800b5e4:	6023      	str	r3, [r4, #0]
 800b5e6:	bd38      	pop	{r3, r4, r5, pc}
 800b5e8:	200051a8 	.word	0x200051a8

0800b5ec <_kill_r>:
 800b5ec:	b538      	push	{r3, r4, r5, lr}
 800b5ee:	4d07      	ldr	r5, [pc, #28]	@ (800b60c <_kill_r+0x20>)
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	4604      	mov	r4, r0
 800b5f4:	4608      	mov	r0, r1
 800b5f6:	4611      	mov	r1, r2
 800b5f8:	602b      	str	r3, [r5, #0]
 800b5fa:	f7f6 fcbb 	bl	8001f74 <_kill>
 800b5fe:	1c43      	adds	r3, r0, #1
 800b600:	d102      	bne.n	800b608 <_kill_r+0x1c>
 800b602:	682b      	ldr	r3, [r5, #0]
 800b604:	b103      	cbz	r3, 800b608 <_kill_r+0x1c>
 800b606:	6023      	str	r3, [r4, #0]
 800b608:	bd38      	pop	{r3, r4, r5, pc}
 800b60a:	bf00      	nop
 800b60c:	200051a8 	.word	0x200051a8

0800b610 <_getpid_r>:
 800b610:	f7f6 bca8 	b.w	8001f64 <_getpid>

0800b614 <_fstat_r>:
 800b614:	b538      	push	{r3, r4, r5, lr}
 800b616:	4d07      	ldr	r5, [pc, #28]	@ (800b634 <_fstat_r+0x20>)
 800b618:	2300      	movs	r3, #0
 800b61a:	4604      	mov	r4, r0
 800b61c:	4608      	mov	r0, r1
 800b61e:	4611      	mov	r1, r2
 800b620:	602b      	str	r3, [r5, #0]
 800b622:	f7f6 fceb 	bl	8001ffc <_fstat>
 800b626:	1c43      	adds	r3, r0, #1
 800b628:	d102      	bne.n	800b630 <_fstat_r+0x1c>
 800b62a:	682b      	ldr	r3, [r5, #0]
 800b62c:	b103      	cbz	r3, 800b630 <_fstat_r+0x1c>
 800b62e:	6023      	str	r3, [r4, #0]
 800b630:	bd38      	pop	{r3, r4, r5, pc}
 800b632:	bf00      	nop
 800b634:	200051a8 	.word	0x200051a8

0800b638 <_init>:
 800b638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b63a:	bf00      	nop
 800b63c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b63e:	bc08      	pop	{r3}
 800b640:	469e      	mov	lr, r3
 800b642:	4770      	bx	lr

0800b644 <_fini>:
 800b644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b646:	bf00      	nop
 800b648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b64a:	bc08      	pop	{r3}
 800b64c:	469e      	mov	lr, r3
 800b64e:	4770      	bx	lr
