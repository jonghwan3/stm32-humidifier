
second_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a000  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001134  0800a1d0  0800a1d0  0000b1d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b304  0800b304  0000d1e8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b304  0800b304  0000c304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b30c  0800b30c  0000d1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b30c  0800b30c  0000c30c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b310  0800b310  0000c310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800b314  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004f68  200001e8  0800b4fc  0000d1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005150  0800b4fc  0000e150  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016889  00000000  00000000  0000d218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035fb  00000000  00000000  00023aa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001390  00000000  00000000  000270a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f28  00000000  00000000  00028430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024112  00000000  00000000  00029358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001719a  00000000  00000000  0004d46a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6fad  00000000  00000000  00064604  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013b5b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062c4  00000000  00000000  0013b5f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001418b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a1b8 	.word	0x0800a1b8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	0800a1b8 	.word	0x0800a1b8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bfc:	f000 b988 	b.w	8000f10 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	468e      	mov	lr, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	4688      	mov	r8, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d962      	bls.n	8000cf4 <__udivmoddi4+0xdc>
 8000c2e:	fab2 f682 	clz	r6, r2
 8000c32:	b14e      	cbz	r6, 8000c48 <__udivmoddi4+0x30>
 8000c34:	f1c6 0320 	rsb	r3, r6, #32
 8000c38:	fa01 f806 	lsl.w	r8, r1, r6
 8000c3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c40:	40b7      	lsls	r7, r6
 8000c42:	ea43 0808 	orr.w	r8, r3, r8
 8000c46:	40b4      	lsls	r4, r6
 8000c48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c4c:	fa1f fc87 	uxth.w	ip, r7
 8000c50:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c54:	0c23      	lsrs	r3, r4, #16
 8000c56:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c5a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c6c:	f080 80ea 	bcs.w	8000e44 <__udivmoddi4+0x22c>
 8000c70:	429a      	cmp	r2, r3
 8000c72:	f240 80e7 	bls.w	8000e44 <__udivmoddi4+0x22c>
 8000c76:	3902      	subs	r1, #2
 8000c78:	443b      	add	r3, r7
 8000c7a:	1a9a      	subs	r2, r3, r2
 8000c7c:	b2a3      	uxth	r3, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c8a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8e:	459c      	cmp	ip, r3
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0x8e>
 8000c92:	18fb      	adds	r3, r7, r3
 8000c94:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000c98:	f080 80d6 	bcs.w	8000e48 <__udivmoddi4+0x230>
 8000c9c:	459c      	cmp	ip, r3
 8000c9e:	f240 80d3 	bls.w	8000e48 <__udivmoddi4+0x230>
 8000ca2:	443b      	add	r3, r7
 8000ca4:	3802      	subs	r0, #2
 8000ca6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000caa:	eba3 030c 	sub.w	r3, r3, ip
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11d      	cbz	r5, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40f3      	lsrs	r3, r6
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d905      	bls.n	8000cce <__udivmoddi4+0xb6>
 8000cc2:	b10d      	cbz	r5, 8000cc8 <__udivmoddi4+0xb0>
 8000cc4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4608      	mov	r0, r1
 8000ccc:	e7f5      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cce:	fab3 f183 	clz	r1, r3
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	d146      	bne.n	8000d64 <__udivmoddi4+0x14c>
 8000cd6:	4573      	cmp	r3, lr
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xc8>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 8105 	bhi.w	8000eea <__udivmoddi4+0x2d2>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	4690      	mov	r8, r2
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	d0e5      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cee:	e9c5 4800 	strd	r4, r8, [r5]
 8000cf2:	e7e2      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	f000 8090 	beq.w	8000e1a <__udivmoddi4+0x202>
 8000cfa:	fab2 f682 	clz	r6, r2
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	f040 80a4 	bne.w	8000e4c <__udivmoddi4+0x234>
 8000d04:	1a8a      	subs	r2, r1, r2
 8000d06:	0c03      	lsrs	r3, r0, #16
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	b280      	uxth	r0, r0
 8000d0e:	b2bc      	uxth	r4, r7
 8000d10:	2101      	movs	r1, #1
 8000d12:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d16:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d1e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x11e>
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x11c>
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	f200 80e0 	bhi.w	8000ef4 <__udivmoddi4+0x2dc>
 8000d34:	46c4      	mov	ip, r8
 8000d36:	1a9b      	subs	r3, r3, r2
 8000d38:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d3c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d40:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d44:	fb02 f404 	mul.w	r4, r2, r4
 8000d48:	429c      	cmp	r4, r3
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x144>
 8000d4c:	18fb      	adds	r3, r7, r3
 8000d4e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x142>
 8000d54:	429c      	cmp	r4, r3
 8000d56:	f200 80ca 	bhi.w	8000eee <__udivmoddi4+0x2d6>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	1b1b      	subs	r3, r3, r4
 8000d5e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d62:	e7a5      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d64:	f1c1 0620 	rsb	r6, r1, #32
 8000d68:	408b      	lsls	r3, r1
 8000d6a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d6e:	431f      	orrs	r7, r3
 8000d70:	fa0e f401 	lsl.w	r4, lr, r1
 8000d74:	fa20 f306 	lsr.w	r3, r0, r6
 8000d78:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d7c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d80:	4323      	orrs	r3, r4
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	fa1f fc87 	uxth.w	ip, r7
 8000d8a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d8e:	0c1c      	lsrs	r4, r3, #16
 8000d90:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d94:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d98:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000da2:	d909      	bls.n	8000db8 <__udivmoddi4+0x1a0>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000daa:	f080 809c 	bcs.w	8000ee6 <__udivmoddi4+0x2ce>
 8000dae:	45a6      	cmp	lr, r4
 8000db0:	f240 8099 	bls.w	8000ee6 <__udivmoddi4+0x2ce>
 8000db4:	3802      	subs	r0, #2
 8000db6:	443c      	add	r4, r7
 8000db8:	eba4 040e 	sub.w	r4, r4, lr
 8000dbc:	fa1f fe83 	uxth.w	lr, r3
 8000dc0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dcc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd0:	45a4      	cmp	ip, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x1ce>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000dda:	f080 8082 	bcs.w	8000ee2 <__udivmoddi4+0x2ca>
 8000dde:	45a4      	cmp	ip, r4
 8000de0:	d97f      	bls.n	8000ee2 <__udivmoddi4+0x2ca>
 8000de2:	3b02      	subs	r3, #2
 8000de4:	443c      	add	r4, r7
 8000de6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dea:	eba4 040c 	sub.w	r4, r4, ip
 8000dee:	fba0 ec02 	umull	lr, ip, r0, r2
 8000df2:	4564      	cmp	r4, ip
 8000df4:	4673      	mov	r3, lr
 8000df6:	46e1      	mov	r9, ip
 8000df8:	d362      	bcc.n	8000ec0 <__udivmoddi4+0x2a8>
 8000dfa:	d05f      	beq.n	8000ebc <__udivmoddi4+0x2a4>
 8000dfc:	b15d      	cbz	r5, 8000e16 <__udivmoddi4+0x1fe>
 8000dfe:	ebb8 0203 	subs.w	r2, r8, r3
 8000e02:	eb64 0409 	sbc.w	r4, r4, r9
 8000e06:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e0e:	431e      	orrs	r6, r3
 8000e10:	40cc      	lsrs	r4, r1
 8000e12:	e9c5 6400 	strd	r6, r4, [r5]
 8000e16:	2100      	movs	r1, #0
 8000e18:	e74f      	b.n	8000cba <__udivmoddi4+0xa2>
 8000e1a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e1e:	0c01      	lsrs	r1, r0, #16
 8000e20:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e24:	b280      	uxth	r0, r0
 8000e26:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	4638      	mov	r0, r7
 8000e2e:	463c      	mov	r4, r7
 8000e30:	46b8      	mov	r8, r7
 8000e32:	46be      	mov	lr, r7
 8000e34:	2620      	movs	r6, #32
 8000e36:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e3a:	eba2 0208 	sub.w	r2, r2, r8
 8000e3e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e42:	e766      	b.n	8000d12 <__udivmoddi4+0xfa>
 8000e44:	4601      	mov	r1, r0
 8000e46:	e718      	b.n	8000c7a <__udivmoddi4+0x62>
 8000e48:	4610      	mov	r0, r2
 8000e4a:	e72c      	b.n	8000ca6 <__udivmoddi4+0x8e>
 8000e4c:	f1c6 0220 	rsb	r2, r6, #32
 8000e50:	fa2e f302 	lsr.w	r3, lr, r2
 8000e54:	40b7      	lsls	r7, r6
 8000e56:	40b1      	lsls	r1, r6
 8000e58:	fa20 f202 	lsr.w	r2, r0, r2
 8000e5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e60:	430a      	orrs	r2, r1
 8000e62:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e66:	b2bc      	uxth	r4, r7
 8000e68:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e6c:	0c11      	lsrs	r1, r2, #16
 8000e6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e72:	fb08 f904 	mul.w	r9, r8, r4
 8000e76:	40b0      	lsls	r0, r6
 8000e78:	4589      	cmp	r9, r1
 8000e7a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e7e:	b280      	uxth	r0, r0
 8000e80:	d93e      	bls.n	8000f00 <__udivmoddi4+0x2e8>
 8000e82:	1879      	adds	r1, r7, r1
 8000e84:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000e88:	d201      	bcs.n	8000e8e <__udivmoddi4+0x276>
 8000e8a:	4589      	cmp	r9, r1
 8000e8c:	d81f      	bhi.n	8000ece <__udivmoddi4+0x2b6>
 8000e8e:	eba1 0109 	sub.w	r1, r1, r9
 8000e92:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e96:	fb09 f804 	mul.w	r8, r9, r4
 8000e9a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e9e:	b292      	uxth	r2, r2
 8000ea0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ea4:	4542      	cmp	r2, r8
 8000ea6:	d229      	bcs.n	8000efc <__udivmoddi4+0x2e4>
 8000ea8:	18ba      	adds	r2, r7, r2
 8000eaa:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000eae:	d2c4      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d2c2      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb4:	f1a9 0102 	sub.w	r1, r9, #2
 8000eb8:	443a      	add	r2, r7
 8000eba:	e7be      	b.n	8000e3a <__udivmoddi4+0x222>
 8000ebc:	45f0      	cmp	r8, lr
 8000ebe:	d29d      	bcs.n	8000dfc <__udivmoddi4+0x1e4>
 8000ec0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ec4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ec8:	3801      	subs	r0, #1
 8000eca:	46e1      	mov	r9, ip
 8000ecc:	e796      	b.n	8000dfc <__udivmoddi4+0x1e4>
 8000ece:	eba7 0909 	sub.w	r9, r7, r9
 8000ed2:	4449      	add	r1, r9
 8000ed4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ed8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000edc:	fb09 f804 	mul.w	r8, r9, r4
 8000ee0:	e7db      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ee2:	4673      	mov	r3, lr
 8000ee4:	e77f      	b.n	8000de6 <__udivmoddi4+0x1ce>
 8000ee6:	4650      	mov	r0, sl
 8000ee8:	e766      	b.n	8000db8 <__udivmoddi4+0x1a0>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e6fd      	b.n	8000cea <__udivmoddi4+0xd2>
 8000eee:	443b      	add	r3, r7
 8000ef0:	3a02      	subs	r2, #2
 8000ef2:	e733      	b.n	8000d5c <__udivmoddi4+0x144>
 8000ef4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef8:	443b      	add	r3, r7
 8000efa:	e71c      	b.n	8000d36 <__udivmoddi4+0x11e>
 8000efc:	4649      	mov	r1, r9
 8000efe:	e79c      	b.n	8000e3a <__udivmoddi4+0x222>
 8000f00:	eba1 0109 	sub.w	r1, r1, r9
 8000f04:	46c4      	mov	ip, r8
 8000f06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f0a:	fb09 f804 	mul.w	r8, r9, r4
 8000f0e:	e7c4      	b.n	8000e9a <__udivmoddi4+0x282>

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <_write>:
I2C_HandleTypeDef hi2c1;

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */
int _write(int file, char *p, int len){
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)p, len, 10);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	b29a      	uxth	r2, r3
 8000f24:	230a      	movs	r3, #10
 8000f26:	68b9      	ldr	r1, [r7, #8]
 8000f28:	4803      	ldr	r0, [pc, #12]	@ (8000f38 <_write+0x24>)
 8000f2a:	f003 fa61 	bl	80043f0 <HAL_UART_Transmit>
	return len;
 8000f2e:	687b      	ldr	r3, [r7, #4]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3710      	adds	r7, #16
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20000258 	.word	0x20000258

08000f3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f42:	f001 f839 	bl	8001fb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f46:	f000 f9a5 	bl	8001294 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f4a:	f000 fa5b 	bl	8001404 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f4e:	f000 fa2f 	bl	80013b0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000f52:	f000 f9ff 	bl	8001354 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init();
 8000f56:	f000 fb9f 	bl	8001698 <SSD1306_Init>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  xQueueRH   = xQueueCreate(2, sizeof(rh_sample_t));
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2108      	movs	r1, #8
 8000f5e:	2002      	movs	r0, #2
 8000f60:	f003 ffd1 	bl	8004f06 <xQueueGenericCreate>
 8000f64:	4603      	mov	r3, r0
 8000f66:	4a13      	ldr	r2, [pc, #76]	@ (8000fb4 <main+0x78>)
 8000f68:	6013      	str	r3, [r2, #0]
  // Create tasks
  xTaskCreate(SensorUiTask,  "SensorUI",  768, NULL, 2, NULL);
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	9301      	str	r3, [sp, #4]
 8000f6e:	2302      	movs	r3, #2
 8000f70:	9300      	str	r3, [sp, #0]
 8000f72:	2300      	movs	r3, #0
 8000f74:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000f78:	490f      	ldr	r1, [pc, #60]	@ (8000fb8 <main+0x7c>)
 8000f7a:	4810      	ldr	r0, [pc, #64]	@ (8000fbc <main+0x80>)
 8000f7c:	f004 fc72 	bl	8005864 <xTaskCreate>
  xTaskCreate(ControlTask, "Control", 512, NULL, 3, NULL);
 8000f80:	2300      	movs	r3, #0
 8000f82:	9301      	str	r3, [sp, #4]
 8000f84:	2303      	movs	r3, #3
 8000f86:	9300      	str	r3, [sp, #0]
 8000f88:	2300      	movs	r3, #0
 8000f8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f8e:	490c      	ldr	r1, [pc, #48]	@ (8000fc0 <main+0x84>)
 8000f90:	480c      	ldr	r0, [pc, #48]	@ (8000fc4 <main+0x88>)
 8000f92:	f004 fc67 	bl	8005864 <xTaskCreate>
  xTaskCreate(InputTask,   "Input",   384, NULL, 2, NULL);
 8000f96:	2300      	movs	r3, #0
 8000f98:	9301      	str	r3, [sp, #4]
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	9300      	str	r3, [sp, #0]
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000fa4:	4908      	ldr	r1, [pc, #32]	@ (8000fc8 <main+0x8c>)
 8000fa6:	4809      	ldr	r0, [pc, #36]	@ (8000fcc <main+0x90>)
 8000fa8:	f004 fc5c 	bl	8005864 <xTaskCreate>

  // Start scheduler
  vTaskStartScheduler();
 8000fac:	f004 fdd6 	bl	8005b5c <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fb0:	bf00      	nop
 8000fb2:	e7fd      	b.n	8000fb0 <main+0x74>
 8000fb4:	200002a0 	.word	0x200002a0
 8000fb8:	0800a1d0 	.word	0x0800a1d0
 8000fbc:	08000fd1 	.word	0x08000fd1
 8000fc0:	0800a1dc 	.word	0x0800a1dc
 8000fc4:	0800108d 	.word	0x0800108d
 8000fc8:	0800a1e4 	.word	0x0800a1e4
 8000fcc:	08001165 	.word	0x08001165

08000fd0 <SensorUiTask>:
  /* USER CODE END 3 */
}

// -------------- Tasks ----------------------

static void SensorUiTask(void *arg) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08c      	sub	sp, #48	@ 0x30
 8000fd4:	af02      	add	r7, sp, #8
 8000fd6:	6078      	str	r0, [r7, #4]
	char line[24];
	rh_sample_t sample;
	for (;;) {
		if (SHT31_ReadTempHum(&sample.temp, &sample.hum) == 0) {
 8000fd8:	f107 0308 	add.w	r3, r7, #8
 8000fdc:	1d1a      	adds	r2, r3, #4
 8000fde:	f107 0308 	add.w	r3, r7, #8
 8000fe2:	4611      	mov	r1, r2
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f000 fa93 	bl	8001510 <SHT31_ReadTempHum>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d13b      	bne.n	8001068 <SensorUiTask+0x98>
			last_hum = sample.hum;
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	4a20      	ldr	r2, [pc, #128]	@ (8001074 <SensorUiTask+0xa4>)
 8000ff4:	6013      	str	r3, [r2, #0]
			SSD1306_Clear();
 8000ff6:	f000 fd72 	bl	8001ade <SSD1306_Clear>
			snprintf(line, sizeof(line), "Set: %d%%", g_set_hum);
 8000ffa:	4b1f      	ldr	r3, [pc, #124]	@ (8001078 <SensorUiTask+0xa8>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f107 0010 	add.w	r0, r7, #16
 8001002:	4a1e      	ldr	r2, [pc, #120]	@ (800107c <SensorUiTask+0xac>)
 8001004:	2118      	movs	r1, #24
 8001006:	f006 fecd 	bl	8007da4 <sniprintf>
			SSD1306_GotoXY(0, 0);  SSD1306_Puts(line, &Font_11x18, 1);
 800100a:	2100      	movs	r1, #0
 800100c:	2000      	movs	r0, #0
 800100e:	f000 fcad 	bl	800196c <SSD1306_GotoXY>
 8001012:	f107 0310 	add.w	r3, r7, #16
 8001016:	2201      	movs	r2, #1
 8001018:	4919      	ldr	r1, [pc, #100]	@ (8001080 <SensorUiTask+0xb0>)
 800101a:	4618      	mov	r0, r3
 800101c:	f000 fd3a 	bl	8001a94 <SSD1306_Puts>

			snprintf(line, sizeof(line), "Cur: %.1f%%", last_hum);
 8001020:	4b14      	ldr	r3, [pc, #80]	@ (8001074 <SensorUiTask+0xa4>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff faaf 	bl	8000588 <__aeabi_f2d>
 800102a:	4602      	mov	r2, r0
 800102c:	460b      	mov	r3, r1
 800102e:	f107 0010 	add.w	r0, r7, #16
 8001032:	e9cd 2300 	strd	r2, r3, [sp]
 8001036:	4a13      	ldr	r2, [pc, #76]	@ (8001084 <SensorUiTask+0xb4>)
 8001038:	2118      	movs	r1, #24
 800103a:	f006 feb3 	bl	8007da4 <sniprintf>
			SSD1306_GotoXY(0, 22); SSD1306_Puts(line, &Font_11x18, 1);
 800103e:	2116      	movs	r1, #22
 8001040:	2000      	movs	r0, #0
 8001042:	f000 fc93 	bl	800196c <SSD1306_GotoXY>
 8001046:	f107 0310 	add.w	r3, r7, #16
 800104a:	2201      	movs	r2, #1
 800104c:	490c      	ldr	r1, [pc, #48]	@ (8001080 <SensorUiTask+0xb0>)
 800104e:	4618      	mov	r0, r3
 8001050:	f000 fd20 	bl	8001a94 <SSD1306_Puts>
			SSD1306_UpdateScreen();
 8001054:	f000 fbe4 	bl	8001820 <SSD1306_UpdateScreen>
			xQueueOverwrite(xQueueRH, &sample); // keep the latest
 8001058:	4b0b      	ldr	r3, [pc, #44]	@ (8001088 <SensorUiTask+0xb8>)
 800105a:	6818      	ldr	r0, [r3, #0]
 800105c:	f107 0108 	add.w	r1, r7, #8
 8001060:	2302      	movs	r3, #2
 8001062:	2200      	movs	r2, #0
 8001064:	f003 ffae 	bl	8004fc4 <xQueueGenericSend>

		}
		vTaskDelay(pdMS_TO_TICKS(1000));
 8001068:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800106c:	f004 fd40 	bl	8005af0 <vTaskDelay>
		if (SHT31_ReadTempHum(&sample.temp, &sample.hum) == 0) {
 8001070:	e7b2      	b.n	8000fd8 <SensorUiTask+0x8>
 8001072:	bf00      	nop
 8001074:	2000000c 	.word	0x2000000c
 8001078:	20000008 	.word	0x20000008
 800107c:	0800a1ec 	.word	0x0800a1ec
 8001080:	20000000 	.word	0x20000000
 8001084:	0800a1f8 	.word	0x0800a1f8
 8001088:	200002a0 	.word	0x200002a0

0800108c <ControlTask>:
	}
}

static void ControlTask(void *arg) {
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
	rh_sample_t sample = {0};
 8001094:	f107 0308 	add.w	r3, r7, #8
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
	for (;;) {
		if (xQueueReceive(xQueueRH, &sample, portMAX_DELAY) == pdPASS) {
 800109e:	4b2d      	ldr	r3, [pc, #180]	@ (8001154 <ControlTask+0xc8>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f107 0108 	add.w	r1, r7, #8
 80010a6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80010aa:	4618      	mov	r0, r3
 80010ac:	f004 f92a 	bl	8005304 <xQueueReceive>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d1f3      	bne.n	800109e <ControlTask+0x12>
			// Hysteresis controller
			if (g_hum_on && sample.hum > (g_set_hum + g_hyst)) {
 80010b6:	4b28      	ldr	r3, [pc, #160]	@ (8001158 <ControlTask+0xcc>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d022      	beq.n	8001104 <ControlTask+0x78>
 80010be:	ed97 7a03 	vldr	s14, [r7, #12]
 80010c2:	4b26      	ldr	r3, [pc, #152]	@ (800115c <ControlTask+0xd0>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	ee07 3a90 	vmov	s15, r3
 80010ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010ce:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 80010d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80010d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010de:	dd11      	ble.n	8001104 <ControlTask+0x78>
				HAL_GPIO_WritePin(GPIO_HUM_GPIO_Port, GPIO_HUM_Pin, GPIO_PIN_SET);
 80010e0:	2201      	movs	r2, #1
 80010e2:	2102      	movs	r1, #2
 80010e4:	481e      	ldr	r0, [pc, #120]	@ (8001160 <ControlTask+0xd4>)
 80010e6:	f001 fa8f 	bl	8002608 <HAL_GPIO_WritePin>
				vTaskDelay(pdMS_TO_TICKS(3000));   // OFF long press
 80010ea:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80010ee:	f004 fcff 	bl	8005af0 <vTaskDelay>
			    HAL_GPIO_WritePin(GPIO_HUM_GPIO_Port, GPIO_HUM_Pin, GPIO_PIN_RESET);
 80010f2:	2200      	movs	r2, #0
 80010f4:	2102      	movs	r1, #2
 80010f6:	481a      	ldr	r0, [pc, #104]	@ (8001160 <ControlTask+0xd4>)
 80010f8:	f001 fa86 	bl	8002608 <HAL_GPIO_WritePin>
				g_hum_on = 0;
 80010fc:	4b16      	ldr	r3, [pc, #88]	@ (8001158 <ControlTask+0xcc>)
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	e025      	b.n	8001150 <ControlTask+0xc4>
			} else if (!g_hum_on && sample.hum < (g_set_hum - g_hyst)) {
 8001104:	4b14      	ldr	r3, [pc, #80]	@ (8001158 <ControlTask+0xcc>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1c8      	bne.n	800109e <ControlTask+0x12>
 800110c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001110:	4b12      	ldr	r3, [pc, #72]	@ (800115c <ControlTask+0xd0>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	ee07 3a90 	vmov	s15, r3
 8001118:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800111c:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8001120:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001124:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800112c:	d510      	bpl.n	8001150 <ControlTask+0xc4>
				HAL_GPIO_WritePin(GPIO_HUM_GPIO_Port, GPIO_HUM_Pin, GPIO_PIN_SET);
 800112e:	2201      	movs	r2, #1
 8001130:	2102      	movs	r1, #2
 8001132:	480b      	ldr	r0, [pc, #44]	@ (8001160 <ControlTask+0xd4>)
 8001134:	f001 fa68 	bl	8002608 <HAL_GPIO_WritePin>
				vTaskDelay(pdMS_TO_TICKS(1000));   // ON short press
 8001138:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800113c:	f004 fcd8 	bl	8005af0 <vTaskDelay>
	        	HAL_GPIO_WritePin(GPIO_HUM_GPIO_Port, GPIO_HUM_Pin, GPIO_PIN_RESET);
 8001140:	2200      	movs	r2, #0
 8001142:	2102      	movs	r1, #2
 8001144:	4806      	ldr	r0, [pc, #24]	@ (8001160 <ControlTask+0xd4>)
 8001146:	f001 fa5f 	bl	8002608 <HAL_GPIO_WritePin>
				g_hum_on = 1;
 800114a:	4b03      	ldr	r3, [pc, #12]	@ (8001158 <ControlTask+0xcc>)
 800114c:	2201      	movs	r2, #1
 800114e:	601a      	str	r2, [r3, #0]
		if (xQueueReceive(xQueueRH, &sample, portMAX_DELAY) == pdPASS) {
 8001150:	e7a5      	b.n	800109e <ControlTask+0x12>
 8001152:	bf00      	nop
 8001154:	200002a0 	.word	0x200002a0
 8001158:	200002a4 	.word	0x200002a4
 800115c:	20000008 	.word	0x20000008
 8001160:	40020400 	.word	0x40020400

08001164 <InputTask>:
			}
		}
	}
}

static void InputTask(void *arg){
 8001164:	b580      	push	{r7, lr}
 8001166:	b08a      	sub	sp, #40	@ 0x28
 8001168:	af02      	add	r7, sp, #8
 800116a:	6078      	str	r0, [r7, #4]
	char line[24];
	for(;;) {
		// increment logic (target humidity)
		if (!HAL_GPIO_ReadPin(GPIO_SW_GPIO_Port, GPIO_SW_Pin)) {
 800116c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001170:	4841      	ldr	r0, [pc, #260]	@ (8001278 <InputTask+0x114>)
 8001172:	f001 fa31 	bl	80025d8 <HAL_GPIO_ReadPin>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d138      	bne.n	80011ee <InputTask+0x8a>
			g_set_hum++;
 800117c:	4b3f      	ldr	r3, [pc, #252]	@ (800127c <InputTask+0x118>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	3301      	adds	r3, #1
 8001182:	4a3e      	ldr	r2, [pc, #248]	@ (800127c <InputTask+0x118>)
 8001184:	6013      	str	r3, [r2, #0]
			SSD1306_Clear();
 8001186:	f000 fcaa 	bl	8001ade <SSD1306_Clear>
			snprintf(line, sizeof(line), "Set: %d%%", g_set_hum);
 800118a:	4b3c      	ldr	r3, [pc, #240]	@ (800127c <InputTask+0x118>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f107 0008 	add.w	r0, r7, #8
 8001192:	4a3b      	ldr	r2, [pc, #236]	@ (8001280 <InputTask+0x11c>)
 8001194:	2118      	movs	r1, #24
 8001196:	f006 fe05 	bl	8007da4 <sniprintf>
			SSD1306_GotoXY(0, 0);  SSD1306_Puts(line, &Font_11x18, 1);
 800119a:	2100      	movs	r1, #0
 800119c:	2000      	movs	r0, #0
 800119e:	f000 fbe5 	bl	800196c <SSD1306_GotoXY>
 80011a2:	f107 0308 	add.w	r3, r7, #8
 80011a6:	2201      	movs	r2, #1
 80011a8:	4936      	ldr	r1, [pc, #216]	@ (8001284 <InputTask+0x120>)
 80011aa:	4618      	mov	r0, r3
 80011ac:	f000 fc72 	bl	8001a94 <SSD1306_Puts>
	        snprintf(line, sizeof(line), "Cur: %.1f%%", last_hum);
 80011b0:	4b35      	ldr	r3, [pc, #212]	@ (8001288 <InputTask+0x124>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff f9e7 	bl	8000588 <__aeabi_f2d>
 80011ba:	4602      	mov	r2, r0
 80011bc:	460b      	mov	r3, r1
 80011be:	f107 0008 	add.w	r0, r7, #8
 80011c2:	e9cd 2300 	strd	r2, r3, [sp]
 80011c6:	4a31      	ldr	r2, [pc, #196]	@ (800128c <InputTask+0x128>)
 80011c8:	2118      	movs	r1, #24
 80011ca:	f006 fdeb 	bl	8007da4 <sniprintf>
	        SSD1306_GotoXY(0, 22); SSD1306_Puts(line, &Font_11x18, 1);
 80011ce:	2116      	movs	r1, #22
 80011d0:	2000      	movs	r0, #0
 80011d2:	f000 fbcb 	bl	800196c <SSD1306_GotoXY>
 80011d6:	f107 0308 	add.w	r3, r7, #8
 80011da:	2201      	movs	r2, #1
 80011dc:	4929      	ldr	r1, [pc, #164]	@ (8001284 <InputTask+0x120>)
 80011de:	4618      	mov	r0, r3
 80011e0:	f000 fc58 	bl	8001a94 <SSD1306_Puts>
	        SSD1306_UpdateScreen();
 80011e4:	f000 fb1c 	bl	8001820 <SSD1306_UpdateScreen>
			vTaskDelay(pdMS_TO_TICKS(100));
 80011e8:	2064      	movs	r0, #100	@ 0x64
 80011ea:	f004 fc81 	bl	8005af0 <vTaskDelay>

		}
		// decrease logic (target humidity)
		if (!HAL_GPIO_ReadPin(GPIO_SW_D_GPIO_Port, GPIO_SW_D_Pin)) {
 80011ee:	2101      	movs	r1, #1
 80011f0:	4827      	ldr	r0, [pc, #156]	@ (8001290 <InputTask+0x12c>)
 80011f2:	f001 f9f1 	bl	80025d8 <HAL_GPIO_ReadPin>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d138      	bne.n	800126e <InputTask+0x10a>
			g_set_hum--;
 80011fc:	4b1f      	ldr	r3, [pc, #124]	@ (800127c <InputTask+0x118>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	3b01      	subs	r3, #1
 8001202:	4a1e      	ldr	r2, [pc, #120]	@ (800127c <InputTask+0x118>)
 8001204:	6013      	str	r3, [r2, #0]
			SSD1306_Clear();
 8001206:	f000 fc6a 	bl	8001ade <SSD1306_Clear>
			snprintf(line, sizeof(line), "Set: %d%%", g_set_hum);
 800120a:	4b1c      	ldr	r3, [pc, #112]	@ (800127c <InputTask+0x118>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f107 0008 	add.w	r0, r7, #8
 8001212:	4a1b      	ldr	r2, [pc, #108]	@ (8001280 <InputTask+0x11c>)
 8001214:	2118      	movs	r1, #24
 8001216:	f006 fdc5 	bl	8007da4 <sniprintf>
			SSD1306_GotoXY(0, 0);  SSD1306_Puts(line, &Font_11x18, 1);
 800121a:	2100      	movs	r1, #0
 800121c:	2000      	movs	r0, #0
 800121e:	f000 fba5 	bl	800196c <SSD1306_GotoXY>
 8001222:	f107 0308 	add.w	r3, r7, #8
 8001226:	2201      	movs	r2, #1
 8001228:	4916      	ldr	r1, [pc, #88]	@ (8001284 <InputTask+0x120>)
 800122a:	4618      	mov	r0, r3
 800122c:	f000 fc32 	bl	8001a94 <SSD1306_Puts>
	        snprintf(line, sizeof(line), "Cur: %.1f%%", last_hum);
 8001230:	4b15      	ldr	r3, [pc, #84]	@ (8001288 <InputTask+0x124>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff f9a7 	bl	8000588 <__aeabi_f2d>
 800123a:	4602      	mov	r2, r0
 800123c:	460b      	mov	r3, r1
 800123e:	f107 0008 	add.w	r0, r7, #8
 8001242:	e9cd 2300 	strd	r2, r3, [sp]
 8001246:	4a11      	ldr	r2, [pc, #68]	@ (800128c <InputTask+0x128>)
 8001248:	2118      	movs	r1, #24
 800124a:	f006 fdab 	bl	8007da4 <sniprintf>
	        SSD1306_GotoXY(0, 22); SSD1306_Puts(line, &Font_11x18, 1);
 800124e:	2116      	movs	r1, #22
 8001250:	2000      	movs	r0, #0
 8001252:	f000 fb8b 	bl	800196c <SSD1306_GotoXY>
 8001256:	f107 0308 	add.w	r3, r7, #8
 800125a:	2201      	movs	r2, #1
 800125c:	4909      	ldr	r1, [pc, #36]	@ (8001284 <InputTask+0x120>)
 800125e:	4618      	mov	r0, r3
 8001260:	f000 fc18 	bl	8001a94 <SSD1306_Puts>
	        SSD1306_UpdateScreen();
 8001264:	f000 fadc 	bl	8001820 <SSD1306_UpdateScreen>
			vTaskDelay(pdMS_TO_TICKS(100));
 8001268:	2064      	movs	r0, #100	@ 0x64
 800126a:	f004 fc41 	bl	8005af0 <vTaskDelay>
		}
		vTaskDelay(pdMS_TO_TICKS(10)); // let other tasks run
 800126e:	200a      	movs	r0, #10
 8001270:	f004 fc3e 	bl	8005af0 <vTaskDelay>
		if (!HAL_GPIO_ReadPin(GPIO_SW_GPIO_Port, GPIO_SW_Pin)) {
 8001274:	e77a      	b.n	800116c <InputTask+0x8>
 8001276:	bf00      	nop
 8001278:	40020800 	.word	0x40020800
 800127c:	20000008 	.word	0x20000008
 8001280:	0800a1ec 	.word	0x0800a1ec
 8001284:	20000000 	.word	0x20000000
 8001288:	2000000c 	.word	0x2000000c
 800128c:	0800a1f8 	.word	0x0800a1f8
 8001290:	40020400 	.word	0x40020400

08001294 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b094      	sub	sp, #80	@ 0x50
 8001298:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800129a:	f107 031c 	add.w	r3, r7, #28
 800129e:	2234      	movs	r2, #52	@ 0x34
 80012a0:	2100      	movs	r1, #0
 80012a2:	4618      	mov	r0, r3
 80012a4:	f006 fe76 	bl	8007f94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012a8:	f107 0308 	add.w	r3, r7, #8
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	605a      	str	r2, [r3, #4]
 80012b2:	609a      	str	r2, [r3, #8]
 80012b4:	60da      	str	r2, [r3, #12]
 80012b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012b8:	2300      	movs	r3, #0
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	4b23      	ldr	r3, [pc, #140]	@ (800134c <SystemClock_Config+0xb8>)
 80012be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c0:	4a22      	ldr	r2, [pc, #136]	@ (800134c <SystemClock_Config+0xb8>)
 80012c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80012c8:	4b20      	ldr	r3, [pc, #128]	@ (800134c <SystemClock_Config+0xb8>)
 80012ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012d0:	607b      	str	r3, [r7, #4]
 80012d2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80012d4:	2300      	movs	r3, #0
 80012d6:	603b      	str	r3, [r7, #0]
 80012d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001350 <SystemClock_Config+0xbc>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80012e0:	4a1b      	ldr	r2, [pc, #108]	@ (8001350 <SystemClock_Config+0xbc>)
 80012e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012e6:	6013      	str	r3, [r2, #0]
 80012e8:	4b19      	ldr	r3, [pc, #100]	@ (8001350 <SystemClock_Config+0xbc>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80012f0:	603b      	str	r3, [r7, #0]
 80012f2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012f4:	2302      	movs	r3, #2
 80012f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012f8:	2301      	movs	r3, #1
 80012fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012fc:	2310      	movs	r3, #16
 80012fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001300:	2300      	movs	r3, #0
 8001302:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001304:	f107 031c 	add.w	r3, r7, #28
 8001308:	4618      	mov	r0, r3
 800130a:	f002 fd83 	bl	8003e14 <HAL_RCC_OscConfig>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001314:	f000 f8f6 	bl	8001504 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001318:	230f      	movs	r3, #15
 800131a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800131c:	2300      	movs	r3, #0
 800131e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001320:	2300      	movs	r3, #0
 8001322:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001324:	2300      	movs	r3, #0
 8001326:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001328:	2300      	movs	r3, #0
 800132a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800132c:	f107 0308 	add.w	r3, r7, #8
 8001330:	2100      	movs	r1, #0
 8001332:	4618      	mov	r0, r3
 8001334:	f002 faaa 	bl	800388c <HAL_RCC_ClockConfig>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800133e:	f000 f8e1 	bl	8001504 <Error_Handler>
  }
}
 8001342:	bf00      	nop
 8001344:	3750      	adds	r7, #80	@ 0x50
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	40023800 	.word	0x40023800
 8001350:	40007000 	.word	0x40007000

08001354 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001358:	4b12      	ldr	r3, [pc, #72]	@ (80013a4 <MX_I2C1_Init+0x50>)
 800135a:	4a13      	ldr	r2, [pc, #76]	@ (80013a8 <MX_I2C1_Init+0x54>)
 800135c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800135e:	4b11      	ldr	r3, [pc, #68]	@ (80013a4 <MX_I2C1_Init+0x50>)
 8001360:	4a12      	ldr	r2, [pc, #72]	@ (80013ac <MX_I2C1_Init+0x58>)
 8001362:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001364:	4b0f      	ldr	r3, [pc, #60]	@ (80013a4 <MX_I2C1_Init+0x50>)
 8001366:	2200      	movs	r2, #0
 8001368:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800136a:	4b0e      	ldr	r3, [pc, #56]	@ (80013a4 <MX_I2C1_Init+0x50>)
 800136c:	2200      	movs	r2, #0
 800136e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001370:	4b0c      	ldr	r3, [pc, #48]	@ (80013a4 <MX_I2C1_Init+0x50>)
 8001372:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001376:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001378:	4b0a      	ldr	r3, [pc, #40]	@ (80013a4 <MX_I2C1_Init+0x50>)
 800137a:	2200      	movs	r2, #0
 800137c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800137e:	4b09      	ldr	r3, [pc, #36]	@ (80013a4 <MX_I2C1_Init+0x50>)
 8001380:	2200      	movs	r2, #0
 8001382:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001384:	4b07      	ldr	r3, [pc, #28]	@ (80013a4 <MX_I2C1_Init+0x50>)
 8001386:	2200      	movs	r2, #0
 8001388:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800138a:	4b06      	ldr	r3, [pc, #24]	@ (80013a4 <MX_I2C1_Init+0x50>)
 800138c:	2200      	movs	r2, #0
 800138e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001390:	4804      	ldr	r0, [pc, #16]	@ (80013a4 <MX_I2C1_Init+0x50>)
 8001392:	f001 f953 	bl	800263c <HAL_I2C_Init>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800139c:	f000 f8b2 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013a0:	bf00      	nop
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20000204 	.word	0x20000204
 80013a8:	40005400 	.word	0x40005400
 80013ac:	00061a80 	.word	0x00061a80

080013b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013b4:	4b11      	ldr	r3, [pc, #68]	@ (80013fc <MX_USART2_UART_Init+0x4c>)
 80013b6:	4a12      	ldr	r2, [pc, #72]	@ (8001400 <MX_USART2_UART_Init+0x50>)
 80013b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013ba:	4b10      	ldr	r3, [pc, #64]	@ (80013fc <MX_USART2_UART_Init+0x4c>)
 80013bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013c2:	4b0e      	ldr	r3, [pc, #56]	@ (80013fc <MX_USART2_UART_Init+0x4c>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013c8:	4b0c      	ldr	r3, [pc, #48]	@ (80013fc <MX_USART2_UART_Init+0x4c>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013ce:	4b0b      	ldr	r3, [pc, #44]	@ (80013fc <MX_USART2_UART_Init+0x4c>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013d4:	4b09      	ldr	r3, [pc, #36]	@ (80013fc <MX_USART2_UART_Init+0x4c>)
 80013d6:	220c      	movs	r2, #12
 80013d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013da:	4b08      	ldr	r3, [pc, #32]	@ (80013fc <MX_USART2_UART_Init+0x4c>)
 80013dc:	2200      	movs	r2, #0
 80013de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013e0:	4b06      	ldr	r3, [pc, #24]	@ (80013fc <MX_USART2_UART_Init+0x4c>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013e6:	4805      	ldr	r0, [pc, #20]	@ (80013fc <MX_USART2_UART_Init+0x4c>)
 80013e8:	f002 ffb2 	bl	8004350 <HAL_UART_Init>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013f2:	f000 f887 	bl	8001504 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013f6:	bf00      	nop
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	20000258 	.word	0x20000258
 8001400:	40004400 	.word	0x40004400

08001404 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b088      	sub	sp, #32
 8001408:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140a:	f107 030c 	add.w	r3, r7, #12
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	605a      	str	r2, [r3, #4]
 8001414:	609a      	str	r2, [r3, #8]
 8001416:	60da      	str	r2, [r3, #12]
 8001418:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	60bb      	str	r3, [r7, #8]
 800141e:	4b35      	ldr	r3, [pc, #212]	@ (80014f4 <MX_GPIO_Init+0xf0>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001422:	4a34      	ldr	r2, [pc, #208]	@ (80014f4 <MX_GPIO_Init+0xf0>)
 8001424:	f043 0304 	orr.w	r3, r3, #4
 8001428:	6313      	str	r3, [r2, #48]	@ 0x30
 800142a:	4b32      	ldr	r3, [pc, #200]	@ (80014f4 <MX_GPIO_Init+0xf0>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142e:	f003 0304 	and.w	r3, r3, #4
 8001432:	60bb      	str	r3, [r7, #8]
 8001434:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	607b      	str	r3, [r7, #4]
 800143a:	4b2e      	ldr	r3, [pc, #184]	@ (80014f4 <MX_GPIO_Init+0xf0>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143e:	4a2d      	ldr	r2, [pc, #180]	@ (80014f4 <MX_GPIO_Init+0xf0>)
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	6313      	str	r3, [r2, #48]	@ 0x30
 8001446:	4b2b      	ldr	r3, [pc, #172]	@ (80014f4 <MX_GPIO_Init+0xf0>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	607b      	str	r3, [r7, #4]
 8001450:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	603b      	str	r3, [r7, #0]
 8001456:	4b27      	ldr	r3, [pc, #156]	@ (80014f4 <MX_GPIO_Init+0xf0>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145a:	4a26      	ldr	r2, [pc, #152]	@ (80014f4 <MX_GPIO_Init+0xf0>)
 800145c:	f043 0302 	orr.w	r3, r3, #2
 8001460:	6313      	str	r3, [r2, #48]	@ 0x30
 8001462:	4b24      	ldr	r3, [pc, #144]	@ (80014f4 <MX_GPIO_Init+0xf0>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	603b      	str	r3, [r7, #0]
 800146c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_LED_GPIO_Port, GPIO_LED_Pin, GPIO_PIN_RESET);
 800146e:	2200      	movs	r2, #0
 8001470:	2120      	movs	r1, #32
 8001472:	4821      	ldr	r0, [pc, #132]	@ (80014f8 <MX_GPIO_Init+0xf4>)
 8001474:	f001 f8c8 	bl	8002608 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_HUM_GPIO_Port, GPIO_HUM_Pin, GPIO_PIN_RESET);
 8001478:	2200      	movs	r2, #0
 800147a:	2102      	movs	r1, #2
 800147c:	481f      	ldr	r0, [pc, #124]	@ (80014fc <MX_GPIO_Init+0xf8>)
 800147e:	f001 f8c3 	bl	8002608 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : GPIO_SW_Pin */
  GPIO_InitStruct.Pin = GPIO_SW_Pin;
 8001482:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001486:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001488:	2300      	movs	r3, #0
 800148a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800148c:	2301      	movs	r3, #1
 800148e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIO_SW_GPIO_Port, &GPIO_InitStruct);
 8001490:	f107 030c 	add.w	r3, r7, #12
 8001494:	4619      	mov	r1, r3
 8001496:	481a      	ldr	r0, [pc, #104]	@ (8001500 <MX_GPIO_Init+0xfc>)
 8001498:	f000 ff0a 	bl	80022b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_LED_Pin */
  GPIO_InitStruct.Pin = GPIO_LED_Pin;
 800149c:	2320      	movs	r3, #32
 800149e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a0:	2301      	movs	r3, #1
 80014a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a8:	2300      	movs	r3, #0
 80014aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIO_LED_GPIO_Port, &GPIO_InitStruct);
 80014ac:	f107 030c 	add.w	r3, r7, #12
 80014b0:	4619      	mov	r1, r3
 80014b2:	4811      	ldr	r0, [pc, #68]	@ (80014f8 <MX_GPIO_Init+0xf4>)
 80014b4:	f000 fefc 	bl	80022b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_SW_D_Pin */
  GPIO_InitStruct.Pin = GPIO_SW_D_Pin;
 80014b8:	2301      	movs	r3, #1
 80014ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014bc:	2300      	movs	r3, #0
 80014be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014c0:	2301      	movs	r3, #1
 80014c2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIO_SW_D_GPIO_Port, &GPIO_InitStruct);
 80014c4:	f107 030c 	add.w	r3, r7, #12
 80014c8:	4619      	mov	r1, r3
 80014ca:	480c      	ldr	r0, [pc, #48]	@ (80014fc <MX_GPIO_Init+0xf8>)
 80014cc:	f000 fef0 	bl	80022b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_HUM_Pin */
  GPIO_InitStruct.Pin = GPIO_HUM_Pin;
 80014d0:	2302      	movs	r3, #2
 80014d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d4:	2301      	movs	r3, #1
 80014d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014dc:	2300      	movs	r3, #0
 80014de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIO_HUM_GPIO_Port, &GPIO_InitStruct);
 80014e0:	f107 030c 	add.w	r3, r7, #12
 80014e4:	4619      	mov	r1, r3
 80014e6:	4805      	ldr	r0, [pc, #20]	@ (80014fc <MX_GPIO_Init+0xf8>)
 80014e8:	f000 fee2 	bl	80022b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80014ec:	bf00      	nop
 80014ee:	3720      	adds	r7, #32
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40023800 	.word	0x40023800
 80014f8:	40020000 	.word	0x40020000
 80014fc:	40020400 	.word	0x40020400
 8001500:	40020800 	.word	0x40020800

08001504 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001508:	b672      	cpsid	i
}
 800150a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800150c:	bf00      	nop
 800150e:	e7fd      	b.n	800150c <Error_Handler+0x8>

08001510 <SHT31_ReadTempHum>:
#include "sht31d.h"

extern I2C_HandleTypeDef hi2c1;
#define SHT31D_I2C &hi2c1

int SHT31_ReadTempHum(float *temperature, float *humidity) {
 8001510:	b580      	push	{r7, lr}
 8001512:	b088      	sub	sp, #32
 8001514:	af02      	add	r7, sp, #8
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
//    uint8_t cmd[2] = {0x24, 0x00};   // high repeatability, no clock stretching
	uint8_t cmd[2] = {0x2C, 0x06};   // high repeatability, no clock stretching
 800151a:	f240 632c 	movw	r3, #1580	@ 0x62c
 800151e:	823b      	strh	r3, [r7, #16]
    uint8_t data[6];

    if (HAL_I2C_Master_Transmit(&hi2c1, SHT31D_I2C_ADDR, cmd, 2, HAL_MAX_DELAY) != HAL_OK)
 8001520:	f107 0210 	add.w	r2, r7, #16
 8001524:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001528:	9300      	str	r3, [sp, #0]
 800152a:	2302      	movs	r3, #2
 800152c:	2188      	movs	r1, #136	@ 0x88
 800152e:	4838      	ldr	r0, [pc, #224]	@ (8001610 <SHT31_ReadTempHum+0x100>)
 8001530:	f001 f9c8 	bl	80028c4 <HAL_I2C_Master_Transmit>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d002      	beq.n	8001540 <SHT31_ReadTempHum+0x30>
        return -1;
 800153a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800153e:	e063      	b.n	8001608 <SHT31_ReadTempHum+0xf8>

    HAL_Delay(20); // wait ≥15ms per datasheet
 8001540:	2014      	movs	r0, #20
 8001542:	f000 fdab 	bl	800209c <HAL_Delay>

    if (HAL_I2C_Master_Receive(&hi2c1, SHT31D_I2C_ADDR, data, 6, HAL_MAX_DELAY) != HAL_OK)
 8001546:	f107 0208 	add.w	r2, r7, #8
 800154a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800154e:	9300      	str	r3, [sp, #0]
 8001550:	2306      	movs	r3, #6
 8001552:	2188      	movs	r1, #136	@ 0x88
 8001554:	482e      	ldr	r0, [pc, #184]	@ (8001610 <SHT31_ReadTempHum+0x100>)
 8001556:	f001 fab3 	bl	8002ac0 <HAL_I2C_Master_Receive>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d002      	beq.n	8001566 <SHT31_ReadTempHum+0x56>
        return -2;
 8001560:	f06f 0301 	mvn.w	r3, #1
 8001564:	e050      	b.n	8001608 <SHT31_ReadTempHum+0xf8>

    if (SHT31_CRC8(data, 2) != data[2] || SHT31_CRC8(data+3, 2) != data[5])
 8001566:	f107 0308 	add.w	r3, r7, #8
 800156a:	2102      	movs	r1, #2
 800156c:	4618      	mov	r0, r3
 800156e:	f000 f859 	bl	8001624 <SHT31_CRC8>
 8001572:	4603      	mov	r3, r0
 8001574:	461a      	mov	r2, r3
 8001576:	7abb      	ldrb	r3, [r7, #10]
 8001578:	429a      	cmp	r2, r3
 800157a:	d10b      	bne.n	8001594 <SHT31_ReadTempHum+0x84>
 800157c:	f107 0308 	add.w	r3, r7, #8
 8001580:	3303      	adds	r3, #3
 8001582:	2102      	movs	r1, #2
 8001584:	4618      	mov	r0, r3
 8001586:	f000 f84d 	bl	8001624 <SHT31_CRC8>
 800158a:	4603      	mov	r3, r0
 800158c:	461a      	mov	r2, r3
 800158e:	7b7b      	ldrb	r3, [r7, #13]
 8001590:	429a      	cmp	r2, r3
 8001592:	d002      	beq.n	800159a <SHT31_ReadTempHum+0x8a>
        return -3;
 8001594:	f06f 0302 	mvn.w	r3, #2
 8001598:	e036      	b.n	8001608 <SHT31_ReadTempHum+0xf8>

    uint16_t rawT  = (data[0] << 8) | data[1];
 800159a:	7a3b      	ldrb	r3, [r7, #8]
 800159c:	b21b      	sxth	r3, r3
 800159e:	021b      	lsls	r3, r3, #8
 80015a0:	b21a      	sxth	r2, r3
 80015a2:	7a7b      	ldrb	r3, [r7, #9]
 80015a4:	b21b      	sxth	r3, r3
 80015a6:	4313      	orrs	r3, r2
 80015a8:	b21b      	sxth	r3, r3
 80015aa:	82fb      	strh	r3, [r7, #22]
    uint16_t rawRH = (data[3] << 8) | data[4];
 80015ac:	7afb      	ldrb	r3, [r7, #11]
 80015ae:	b21b      	sxth	r3, r3
 80015b0:	021b      	lsls	r3, r3, #8
 80015b2:	b21a      	sxth	r2, r3
 80015b4:	7b3b      	ldrb	r3, [r7, #12]
 80015b6:	b21b      	sxth	r3, r3
 80015b8:	4313      	orrs	r3, r2
 80015ba:	b21b      	sxth	r3, r3
 80015bc:	82bb      	strh	r3, [r7, #20]

    *temperature = -45.0f + 175.0f * ((float) rawT / 65535.0f);
 80015be:	8afb      	ldrh	r3, [r7, #22]
 80015c0:	ee07 3a90 	vmov	s15, r3
 80015c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015c8:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8001614 <SHT31_ReadTempHum+0x104>
 80015cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015d0:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001618 <SHT31_ReadTempHum+0x108>
 80015d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015d8:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 800161c <SHT31_ReadTempHum+0x10c>
 80015dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	edc3 7a00 	vstr	s15, [r3]
    *humidity    = 100.0f * ((float) rawRH / 65535.0f);
 80015e6:	8abb      	ldrh	r3, [r7, #20]
 80015e8:	ee07 3a90 	vmov	s15, r3
 80015ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015f0:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8001614 <SHT31_ReadTempHum+0x104>
 80015f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015f8:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8001620 <SHT31_ReadTempHum+0x110>
 80015fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	edc3 7a00 	vstr	s15, [r3]

    return 0; // success
 8001606:	2300      	movs	r3, #0
}
 8001608:	4618      	mov	r0, r3
 800160a:	3718      	adds	r7, #24
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	20000204 	.word	0x20000204
 8001614:	477fff00 	.word	0x477fff00
 8001618:	432f0000 	.word	0x432f0000
 800161c:	42340000 	.word	0x42340000
 8001620:	42c80000 	.word	0x42c80000

08001624 <SHT31_CRC8>:

uint8_t SHT31_CRC8(const uint8_t *data, int len) {
 8001624:	b480      	push	{r7}
 8001626:	b087      	sub	sp, #28
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
    uint8_t crc = 0xFF;
 800162e:	23ff      	movs	r3, #255	@ 0xff
 8001630:	75fb      	strb	r3, [r7, #23]
    for (int i = 0; i < len; i++) {
 8001632:	2300      	movs	r3, #0
 8001634:	613b      	str	r3, [r7, #16]
 8001636:	e023      	b.n	8001680 <SHT31_CRC8+0x5c>
        crc ^= data[i];
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	4413      	add	r3, r2
 800163e:	781a      	ldrb	r2, [r3, #0]
 8001640:	7dfb      	ldrb	r3, [r7, #23]
 8001642:	4053      	eors	r3, r2
 8001644:	75fb      	strb	r3, [r7, #23]
        for (int b = 0; b < 8; b++) {
 8001646:	2300      	movs	r3, #0
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	e013      	b.n	8001674 <SHT31_CRC8+0x50>
            crc = (crc & 0x80) ? (crc << 1) ^ 0x31 : (crc << 1);
 800164c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001650:	2b00      	cmp	r3, #0
 8001652:	da08      	bge.n	8001666 <SHT31_CRC8+0x42>
 8001654:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	b25b      	sxtb	r3, r3
 800165c:	f083 0331 	eor.w	r3, r3, #49	@ 0x31
 8001660:	b25b      	sxtb	r3, r3
 8001662:	b2db      	uxtb	r3, r3
 8001664:	e002      	b.n	800166c <SHT31_CRC8+0x48>
 8001666:	7dfb      	ldrb	r3, [r7, #23]
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	b2db      	uxtb	r3, r3
 800166c:	75fb      	strb	r3, [r7, #23]
        for (int b = 0; b < 8; b++) {
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	3301      	adds	r3, #1
 8001672:	60fb      	str	r3, [r7, #12]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2b07      	cmp	r3, #7
 8001678:	dde8      	ble.n	800164c <SHT31_CRC8+0x28>
    for (int i = 0; i < len; i++) {
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	3301      	adds	r3, #1
 800167e:	613b      	str	r3, [r7, #16]
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	429a      	cmp	r2, r3
 8001686:	dbd7      	blt.n	8001638 <SHT31_CRC8+0x14>
        }
    }
    return crc;
 8001688:	7dfb      	ldrb	r3, [r7, #23]
}
 800168a:	4618      	mov	r0, r3
 800168c:	371c      	adds	r7, #28
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
	...

08001698 <SSD1306_Init>:

/* Private variable */
static SSD1306_t SSD1306;


uint8_t SSD1306_Init(void) {
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800169e:	f000 fa27 	bl	8001af0 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(SSD1306_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80016a2:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80016a6:	2201      	movs	r2, #1
 80016a8:	2178      	movs	r1, #120	@ 0x78
 80016aa:	485b      	ldr	r0, [pc, #364]	@ (8001818 <SSD1306_Init+0x180>)
 80016ac:	f001 fc3a 	bl	8002f24 <HAL_I2C_IsDeviceReady>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80016b6:	2300      	movs	r3, #0
 80016b8:	e0a9      	b.n	800180e <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80016ba:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80016be:	607b      	str	r3, [r7, #4]
	while(p>0)
 80016c0:	e002      	b.n	80016c8 <SSD1306_Init+0x30>
		p--;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	3b01      	subs	r3, #1
 80016c6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d1f9      	bne.n	80016c2 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80016ce:	22ae      	movs	r2, #174	@ 0xae
 80016d0:	2100      	movs	r1, #0
 80016d2:	2078      	movs	r0, #120	@ 0x78
 80016d4:	f000 fa88 	bl	8001be8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80016d8:	2220      	movs	r2, #32
 80016da:	2100      	movs	r1, #0
 80016dc:	2078      	movs	r0, #120	@ 0x78
 80016de:	f000 fa83 	bl	8001be8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80016e2:	2210      	movs	r2, #16
 80016e4:	2100      	movs	r1, #0
 80016e6:	2078      	movs	r0, #120	@ 0x78
 80016e8:	f000 fa7e 	bl	8001be8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80016ec:	22b0      	movs	r2, #176	@ 0xb0
 80016ee:	2100      	movs	r1, #0
 80016f0:	2078      	movs	r0, #120	@ 0x78
 80016f2:	f000 fa79 	bl	8001be8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80016f6:	22c8      	movs	r2, #200	@ 0xc8
 80016f8:	2100      	movs	r1, #0
 80016fa:	2078      	movs	r0, #120	@ 0x78
 80016fc:	f000 fa74 	bl	8001be8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001700:	2200      	movs	r2, #0
 8001702:	2100      	movs	r1, #0
 8001704:	2078      	movs	r0, #120	@ 0x78
 8001706:	f000 fa6f 	bl	8001be8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800170a:	2210      	movs	r2, #16
 800170c:	2100      	movs	r1, #0
 800170e:	2078      	movs	r0, #120	@ 0x78
 8001710:	f000 fa6a 	bl	8001be8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001714:	2240      	movs	r2, #64	@ 0x40
 8001716:	2100      	movs	r1, #0
 8001718:	2078      	movs	r0, #120	@ 0x78
 800171a:	f000 fa65 	bl	8001be8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800171e:	2281      	movs	r2, #129	@ 0x81
 8001720:	2100      	movs	r1, #0
 8001722:	2078      	movs	r0, #120	@ 0x78
 8001724:	f000 fa60 	bl	8001be8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001728:	22ff      	movs	r2, #255	@ 0xff
 800172a:	2100      	movs	r1, #0
 800172c:	2078      	movs	r0, #120	@ 0x78
 800172e:	f000 fa5b 	bl	8001be8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001732:	22a1      	movs	r2, #161	@ 0xa1
 8001734:	2100      	movs	r1, #0
 8001736:	2078      	movs	r0, #120	@ 0x78
 8001738:	f000 fa56 	bl	8001be8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 800173c:	22a6      	movs	r2, #166	@ 0xa6
 800173e:	2100      	movs	r1, #0
 8001740:	2078      	movs	r0, #120	@ 0x78
 8001742:	f000 fa51 	bl	8001be8 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
	SSD1306_WRITECOMMAND(0xFF);
#else
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001746:	22a8      	movs	r2, #168	@ 0xa8
 8001748:	2100      	movs	r1, #0
 800174a:	2078      	movs	r0, #120	@ 0x78
 800174c:	f000 fa4c 	bl	8001be8 <ssd1306_I2C_Write>
#endif

#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x1F); //
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x3F); //
 8001750:	223f      	movs	r2, #63	@ 0x3f
 8001752:	2100      	movs	r1, #0
 8001754:	2078      	movs	r0, #120	@ 0x78
 8001756:	f000 fa47 	bl	8001be8 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x3F); // Seems to work for 128px high displays too.
#endif
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800175a:	22a4      	movs	r2, #164	@ 0xa4
 800175c:	2100      	movs	r1, #0
 800175e:	2078      	movs	r0, #120	@ 0x78
 8001760:	f000 fa42 	bl	8001be8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001764:	22d3      	movs	r2, #211	@ 0xd3
 8001766:	2100      	movs	r1, #0
 8001768:	2078      	movs	r0, #120	@ 0x78
 800176a:	f000 fa3d 	bl	8001be8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800176e:	2200      	movs	r2, #0
 8001770:	2100      	movs	r1, #0
 8001772:	2078      	movs	r0, #120	@ 0x78
 8001774:	f000 fa38 	bl	8001be8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001778:	22d5      	movs	r2, #213	@ 0xd5
 800177a:	2100      	movs	r1, #0
 800177c:	2078      	movs	r0, #120	@ 0x78
 800177e:	f000 fa33 	bl	8001be8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001782:	22f0      	movs	r2, #240	@ 0xf0
 8001784:	2100      	movs	r1, #0
 8001786:	2078      	movs	r0, #120	@ 0x78
 8001788:	f000 fa2e 	bl	8001be8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 800178c:	22d9      	movs	r2, #217	@ 0xd9
 800178e:	2100      	movs	r1, #0
 8001790:	2078      	movs	r0, #120	@ 0x78
 8001792:	f000 fa29 	bl	8001be8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001796:	2222      	movs	r2, #34	@ 0x22
 8001798:	2100      	movs	r1, #0
 800179a:	2078      	movs	r0, #120	@ 0x78
 800179c:	f000 fa24 	bl	8001be8 <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80017a0:	22da      	movs	r2, #218	@ 0xda
 80017a2:	2100      	movs	r1, #0
 80017a4:	2078      	movs	r0, #120	@ 0x78
 80017a6:	f000 fa1f 	bl	8001be8 <ssd1306_I2C_Write>
#if (SSD1306_HEIGHT == 32)
	SSD1306_WRITECOMMAND(0x02);
#elif (SSD1306_HEIGHT == 64)
	SSD1306_WRITECOMMAND(0x12);
 80017aa:	2212      	movs	r2, #18
 80017ac:	2100      	movs	r1, #0
 80017ae:	2078      	movs	r0, #120	@ 0x78
 80017b0:	f000 fa1a 	bl	8001be8 <ssd1306_I2C_Write>
#elif (SSD1306_HEIGHT == 128)
	SSD1306_WRITECOMMAND(0x12);
#endif

	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80017b4:	22db      	movs	r2, #219	@ 0xdb
 80017b6:	2100      	movs	r1, #0
 80017b8:	2078      	movs	r0, #120	@ 0x78
 80017ba:	f000 fa15 	bl	8001be8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80017be:	2220      	movs	r2, #32
 80017c0:	2100      	movs	r1, #0
 80017c2:	2078      	movs	r0, #120	@ 0x78
 80017c4:	f000 fa10 	bl	8001be8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80017c8:	228d      	movs	r2, #141	@ 0x8d
 80017ca:	2100      	movs	r1, #0
 80017cc:	2078      	movs	r0, #120	@ 0x78
 80017ce:	f000 fa0b 	bl	8001be8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80017d2:	2214      	movs	r2, #20
 80017d4:	2100      	movs	r1, #0
 80017d6:	2078      	movs	r0, #120	@ 0x78
 80017d8:	f000 fa06 	bl	8001be8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80017dc:	22af      	movs	r2, #175	@ 0xaf
 80017de:	2100      	movs	r1, #0
 80017e0:	2078      	movs	r0, #120	@ 0x78
 80017e2:	f000 fa01 	bl	8001be8 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80017e6:	222e      	movs	r2, #46	@ 0x2e
 80017e8:	2100      	movs	r1, #0
 80017ea:	2078      	movs	r0, #120	@ 0x78
 80017ec:	f000 f9fc 	bl	8001be8 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80017f0:	2000      	movs	r0, #0
 80017f2:	f000 f843 	bl	800187c <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80017f6:	f000 f813 	bl	8001820 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80017fa:	4b08      	ldr	r3, [pc, #32]	@ (800181c <SSD1306_Init+0x184>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001800:	4b06      	ldr	r3, [pc, #24]	@ (800181c <SSD1306_Init+0x184>)
 8001802:	2200      	movs	r2, #0
 8001804:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001806:	4b05      	ldr	r3, [pc, #20]	@ (800181c <SSD1306_Init+0x184>)
 8001808:	2201      	movs	r2, #1
 800180a:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 800180c:	2301      	movs	r3, #1
}
 800180e:	4618      	mov	r0, r3
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	20000204 	.word	0x20000204
 800181c:	200006a8 	.word	0x200006a8

08001820 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8001826:	2300      	movs	r3, #0
 8001828:	71fb      	strb	r3, [r7, #7]
 800182a:	e01d      	b.n	8001868 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800182c:	79fb      	ldrb	r3, [r7, #7]
 800182e:	3b50      	subs	r3, #80	@ 0x50
 8001830:	b2db      	uxtb	r3, r3
 8001832:	461a      	mov	r2, r3
 8001834:	2100      	movs	r1, #0
 8001836:	2078      	movs	r0, #120	@ 0x78
 8001838:	f000 f9d6 	bl	8001be8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 800183c:	2200      	movs	r2, #0
 800183e:	2100      	movs	r1, #0
 8001840:	2078      	movs	r0, #120	@ 0x78
 8001842:	f000 f9d1 	bl	8001be8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001846:	2210      	movs	r2, #16
 8001848:	2100      	movs	r1, #0
 800184a:	2078      	movs	r0, #120	@ 0x78
 800184c:	f000 f9cc 	bl	8001be8 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001850:	79fb      	ldrb	r3, [r7, #7]
 8001852:	01db      	lsls	r3, r3, #7
 8001854:	4a08      	ldr	r2, [pc, #32]	@ (8001878 <SSD1306_UpdateScreen+0x58>)
 8001856:	441a      	add	r2, r3
 8001858:	2380      	movs	r3, #128	@ 0x80
 800185a:	2140      	movs	r1, #64	@ 0x40
 800185c:	2078      	movs	r0, #120	@ 0x78
 800185e:	f000 f95d 	bl	8001b1c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001862:	79fb      	ldrb	r3, [r7, #7]
 8001864:	3301      	adds	r3, #1
 8001866:	71fb      	strb	r3, [r7, #7]
 8001868:	79fb      	ldrb	r3, [r7, #7]
 800186a:	2b07      	cmp	r3, #7
 800186c:	d9de      	bls.n	800182c <SSD1306_UpdateScreen+0xc>
	}
}
 800186e:	bf00      	nop
 8001870:	bf00      	nop
 8001872:	3708      	adds	r7, #8
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	200002a8 	.word	0x200002a8

0800187c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001886:	79fb      	ldrb	r3, [r7, #7]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d101      	bne.n	8001890 <SSD1306_Fill+0x14>
 800188c:	2300      	movs	r3, #0
 800188e:	e000      	b.n	8001892 <SSD1306_Fill+0x16>
 8001890:	23ff      	movs	r3, #255	@ 0xff
 8001892:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001896:	4619      	mov	r1, r3
 8001898:	4803      	ldr	r0, [pc, #12]	@ (80018a8 <SSD1306_Fill+0x2c>)
 800189a:	f006 fb7b 	bl	8007f94 <memset>
}
 800189e:	bf00      	nop
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	200002a8 	.word	0x200002a8

080018ac <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	4603      	mov	r3, r0
 80018b4:	80fb      	strh	r3, [r7, #6]
 80018b6:	460b      	mov	r3, r1
 80018b8:	80bb      	strh	r3, [r7, #4]
 80018ba:	4613      	mov	r3, r2
 80018bc:	70fb      	strb	r3, [r7, #3]
	if (
 80018be:	88fb      	ldrh	r3, [r7, #6]
 80018c0:	2b7f      	cmp	r3, #127	@ 0x7f
 80018c2:	d848      	bhi.n	8001956 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80018c4:	88bb      	ldrh	r3, [r7, #4]
 80018c6:	2b3f      	cmp	r3, #63	@ 0x3f
 80018c8:	d845      	bhi.n	8001956 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80018ca:	4b26      	ldr	r3, [pc, #152]	@ (8001964 <SSD1306_DrawPixel+0xb8>)
 80018cc:	791b      	ldrb	r3, [r3, #4]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d006      	beq.n	80018e0 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80018d2:	78fb      	ldrb	r3, [r7, #3]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	bf0c      	ite	eq
 80018d8:	2301      	moveq	r3, #1
 80018da:	2300      	movne	r3, #0
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80018e0:	78fb      	ldrb	r3, [r7, #3]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d11a      	bne.n	800191c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80018e6:	88fa      	ldrh	r2, [r7, #6]
 80018e8:	88bb      	ldrh	r3, [r7, #4]
 80018ea:	08db      	lsrs	r3, r3, #3
 80018ec:	b298      	uxth	r0, r3
 80018ee:	4603      	mov	r3, r0
 80018f0:	01db      	lsls	r3, r3, #7
 80018f2:	4413      	add	r3, r2
 80018f4:	4a1c      	ldr	r2, [pc, #112]	@ (8001968 <SSD1306_DrawPixel+0xbc>)
 80018f6:	5cd3      	ldrb	r3, [r2, r3]
 80018f8:	b25a      	sxtb	r2, r3
 80018fa:	88bb      	ldrh	r3, [r7, #4]
 80018fc:	f003 0307 	and.w	r3, r3, #7
 8001900:	2101      	movs	r1, #1
 8001902:	fa01 f303 	lsl.w	r3, r1, r3
 8001906:	b25b      	sxtb	r3, r3
 8001908:	4313      	orrs	r3, r2
 800190a:	b259      	sxtb	r1, r3
 800190c:	88fa      	ldrh	r2, [r7, #6]
 800190e:	4603      	mov	r3, r0
 8001910:	01db      	lsls	r3, r3, #7
 8001912:	4413      	add	r3, r2
 8001914:	b2c9      	uxtb	r1, r1
 8001916:	4a14      	ldr	r2, [pc, #80]	@ (8001968 <SSD1306_DrawPixel+0xbc>)
 8001918:	54d1      	strb	r1, [r2, r3]
 800191a:	e01d      	b.n	8001958 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800191c:	88fa      	ldrh	r2, [r7, #6]
 800191e:	88bb      	ldrh	r3, [r7, #4]
 8001920:	08db      	lsrs	r3, r3, #3
 8001922:	b298      	uxth	r0, r3
 8001924:	4603      	mov	r3, r0
 8001926:	01db      	lsls	r3, r3, #7
 8001928:	4413      	add	r3, r2
 800192a:	4a0f      	ldr	r2, [pc, #60]	@ (8001968 <SSD1306_DrawPixel+0xbc>)
 800192c:	5cd3      	ldrb	r3, [r2, r3]
 800192e:	b25a      	sxtb	r2, r3
 8001930:	88bb      	ldrh	r3, [r7, #4]
 8001932:	f003 0307 	and.w	r3, r3, #7
 8001936:	2101      	movs	r1, #1
 8001938:	fa01 f303 	lsl.w	r3, r1, r3
 800193c:	b25b      	sxtb	r3, r3
 800193e:	43db      	mvns	r3, r3
 8001940:	b25b      	sxtb	r3, r3
 8001942:	4013      	ands	r3, r2
 8001944:	b259      	sxtb	r1, r3
 8001946:	88fa      	ldrh	r2, [r7, #6]
 8001948:	4603      	mov	r3, r0
 800194a:	01db      	lsls	r3, r3, #7
 800194c:	4413      	add	r3, r2
 800194e:	b2c9      	uxtb	r1, r1
 8001950:	4a05      	ldr	r2, [pc, #20]	@ (8001968 <SSD1306_DrawPixel+0xbc>)
 8001952:	54d1      	strb	r1, [r2, r3]
 8001954:	e000      	b.n	8001958 <SSD1306_DrawPixel+0xac>
		return;
 8001956:	bf00      	nop
	}
}
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	200006a8 	.word	0x200006a8
 8001968:	200002a8 	.word	0x200002a8

0800196c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	460a      	mov	r2, r1
 8001976:	80fb      	strh	r3, [r7, #6]
 8001978:	4613      	mov	r3, r2
 800197a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800197c:	4a05      	ldr	r2, [pc, #20]	@ (8001994 <SSD1306_GotoXY+0x28>)
 800197e:	88fb      	ldrh	r3, [r7, #6]
 8001980:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001982:	4a04      	ldr	r2, [pc, #16]	@ (8001994 <SSD1306_GotoXY+0x28>)
 8001984:	88bb      	ldrh	r3, [r7, #4]
 8001986:	8053      	strh	r3, [r2, #2]
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr
 8001994:	200006a8 	.word	0x200006a8

08001998 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
 800199e:	4603      	mov	r3, r0
 80019a0:	6039      	str	r1, [r7, #0]
 80019a2:	71fb      	strb	r3, [r7, #7]
 80019a4:	4613      	mov	r3, r2
 80019a6:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80019a8:	4b39      	ldr	r3, [pc, #228]	@ (8001a90 <SSD1306_Putc+0xf8>)
 80019aa:	881b      	ldrh	r3, [r3, #0]
 80019ac:	461a      	mov	r2, r3
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	4413      	add	r3, r2
	if (
 80019b4:	2b7f      	cmp	r3, #127	@ 0x7f
 80019b6:	dc07      	bgt.n	80019c8 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80019b8:	4b35      	ldr	r3, [pc, #212]	@ (8001a90 <SSD1306_Putc+0xf8>)
 80019ba:	885b      	ldrh	r3, [r3, #2]
 80019bc:	461a      	mov	r2, r3
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	785b      	ldrb	r3, [r3, #1]
 80019c2:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80019c4:	2b3f      	cmp	r3, #63	@ 0x3f
 80019c6:	dd01      	ble.n	80019cc <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	e05d      	b.n	8001a88 <SSD1306_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80019cc:	2300      	movs	r3, #0
 80019ce:	617b      	str	r3, [r7, #20]
 80019d0:	e04b      	b.n	8001a6a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685a      	ldr	r2, [r3, #4]
 80019d6:	79fb      	ldrb	r3, [r7, #7]
 80019d8:	3b20      	subs	r3, #32
 80019da:	6839      	ldr	r1, [r7, #0]
 80019dc:	7849      	ldrb	r1, [r1, #1]
 80019de:	fb01 f303 	mul.w	r3, r1, r3
 80019e2:	4619      	mov	r1, r3
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	440b      	add	r3, r1
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	4413      	add	r3, r2
 80019ec:	881b      	ldrh	r3, [r3, #0]
 80019ee:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80019f0:	2300      	movs	r3, #0
 80019f2:	613b      	str	r3, [r7, #16]
 80019f4:	e030      	b.n	8001a58 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80019f6:	68fa      	ldr	r2, [r7, #12]
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d010      	beq.n	8001a28 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001a06:	4b22      	ldr	r3, [pc, #136]	@ (8001a90 <SSD1306_Putc+0xf8>)
 8001a08:	881a      	ldrh	r2, [r3, #0]
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	4413      	add	r3, r2
 8001a10:	b298      	uxth	r0, r3
 8001a12:	4b1f      	ldr	r3, [pc, #124]	@ (8001a90 <SSD1306_Putc+0xf8>)
 8001a14:	885a      	ldrh	r2, [r3, #2]
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	4413      	add	r3, r2
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	79ba      	ldrb	r2, [r7, #6]
 8001a20:	4619      	mov	r1, r3
 8001a22:	f7ff ff43 	bl	80018ac <SSD1306_DrawPixel>
 8001a26:	e014      	b.n	8001a52 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001a28:	4b19      	ldr	r3, [pc, #100]	@ (8001a90 <SSD1306_Putc+0xf8>)
 8001a2a:	881a      	ldrh	r2, [r3, #0]
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	4413      	add	r3, r2
 8001a32:	b298      	uxth	r0, r3
 8001a34:	4b16      	ldr	r3, [pc, #88]	@ (8001a90 <SSD1306_Putc+0xf8>)
 8001a36:	885a      	ldrh	r2, [r3, #2]
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	4413      	add	r3, r2
 8001a3e:	b299      	uxth	r1, r3
 8001a40:	79bb      	ldrb	r3, [r7, #6]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	bf0c      	ite	eq
 8001a46:	2301      	moveq	r3, #1
 8001a48:	2300      	movne	r3, #0
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	f7ff ff2d 	bl	80018ac <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	3301      	adds	r3, #1
 8001a56:	613b      	str	r3, [r7, #16]
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d3c8      	bcc.n	80019f6 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	3301      	adds	r3, #1
 8001a68:	617b      	str	r3, [r7, #20]
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	785b      	ldrb	r3, [r3, #1]
 8001a6e:	461a      	mov	r2, r3
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d3ad      	bcc.n	80019d2 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001a76:	4b06      	ldr	r3, [pc, #24]	@ (8001a90 <SSD1306_Putc+0xf8>)
 8001a78:	881b      	ldrh	r3, [r3, #0]
 8001a7a:	683a      	ldr	r2, [r7, #0]
 8001a7c:	7812      	ldrb	r2, [r2, #0]
 8001a7e:	4413      	add	r3, r2
 8001a80:	b29a      	uxth	r2, r3
 8001a82:	4b03      	ldr	r3, [pc, #12]	@ (8001a90 <SSD1306_Putc+0xf8>)
 8001a84:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001a86:	79fb      	ldrb	r3, [r7, #7]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3718      	adds	r7, #24
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	200006a8 	.word	0x200006a8

08001a94 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001aa2:	e012      	b.n	8001aca <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	79fa      	ldrb	r2, [r7, #7]
 8001aaa:	68b9      	ldr	r1, [r7, #8]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff ff73 	bl	8001998 <SSD1306_Putc>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d002      	beq.n	8001ac4 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	e008      	b.n	8001ad6 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d1e8      	bne.n	8001aa4 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	781b      	ldrb	r3, [r3, #0]
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <SSD1306_Clear>:
        }
    }
}

void SSD1306_Clear (void)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001ae2:	2000      	movs	r0, #0
 8001ae4:	f7ff feca 	bl	800187c <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001ae8:	f7ff fe9a 	bl	8001820 <SSD1306_UpdateScreen>
}
 8001aec:	bf00      	nop
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001af6:	4b08      	ldr	r3, [pc, #32]	@ (8001b18 <ssd1306_I2C_Init+0x28>)
 8001af8:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001afa:	e002      	b.n	8001b02 <ssd1306_I2C_Init+0x12>
		p--;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3b01      	subs	r3, #1
 8001b00:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d1f9      	bne.n	8001afc <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001b08:	bf00      	nop
 8001b0a:	bf00      	nop
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	0003d090 	.word	0x0003d090

08001b1c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001b1c:	b590      	push	{r4, r7, lr}
 8001b1e:	b0c7      	sub	sp, #284	@ 0x11c
 8001b20:	af02      	add	r7, sp, #8
 8001b22:	4604      	mov	r4, r0
 8001b24:	4608      	mov	r0, r1
 8001b26:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8001b2a:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8001b2e:	600a      	str	r2, [r1, #0]
 8001b30:	4619      	mov	r1, r3
 8001b32:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001b36:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001b3a:	4622      	mov	r2, r4
 8001b3c:	701a      	strb	r2, [r3, #0]
 8001b3e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001b42:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001b46:	4602      	mov	r2, r0
 8001b48:	701a      	strb	r2, [r3, #0]
 8001b4a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001b4e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001b52:	460a      	mov	r2, r1
 8001b54:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001b56:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001b5a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001b5e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001b62:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8001b66:	7812      	ldrb	r2, [r2, #0]
 8001b68:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001b70:	e015      	b.n	8001b9e <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001b72:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001b76:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001b7a:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001b7e:	6812      	ldr	r2, [r2, #0]
 8001b80:	441a      	add	r2, r3
 8001b82:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001b86:	3301      	adds	r3, #1
 8001b88:	7811      	ldrb	r1, [r2, #0]
 8001b8a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001b8e:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8001b92:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001b94:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001b98:	3301      	adds	r3, #1
 8001b9a:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001b9e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001ba8:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001bac:	8812      	ldrh	r2, [r2, #0]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d8df      	bhi.n	8001b72 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, count+1, 10);
 8001bb2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001bb6:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	b299      	uxth	r1, r3
 8001bbe:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001bc2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001bc6:	881b      	ldrh	r3, [r3, #0]
 8001bc8:	3301      	adds	r3, #1
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	f107 020c 	add.w	r2, r7, #12
 8001bd0:	200a      	movs	r0, #10
 8001bd2:	9000      	str	r0, [sp, #0]
 8001bd4:	4803      	ldr	r0, [pc, #12]	@ (8001be4 <ssd1306_I2C_WriteMulti+0xc8>)
 8001bd6:	f000 fe75 	bl	80028c4 <HAL_I2C_Master_Transmit>
}
 8001bda:	bf00      	nop
 8001bdc:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd90      	pop	{r4, r7, pc}
 8001be4:	20000204 	.word	0x20000204

08001be8 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af02      	add	r7, sp, #8
 8001bee:	4603      	mov	r3, r0
 8001bf0:	71fb      	strb	r3, [r7, #7]
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	71bb      	strb	r3, [r7, #6]
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001bfa:	79bb      	ldrb	r3, [r7, #6]
 8001bfc:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001bfe:	797b      	ldrb	r3, [r7, #5]
 8001c00:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(SSD1306_I2C, address, dt, 2, 10);
 8001c02:	79fb      	ldrb	r3, [r7, #7]
 8001c04:	b299      	uxth	r1, r3
 8001c06:	f107 020c 	add.w	r2, r7, #12
 8001c0a:	230a      	movs	r3, #10
 8001c0c:	9300      	str	r3, [sp, #0]
 8001c0e:	2302      	movs	r3, #2
 8001c10:	4803      	ldr	r0, [pc, #12]	@ (8001c20 <ssd1306_I2C_Write+0x38>)
 8001c12:	f000 fe57 	bl	80028c4 <HAL_I2C_Master_Transmit>
}
 8001c16:	bf00      	nop
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	20000204 	.word	0x20000204

08001c24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	607b      	str	r3, [r7, #4]
 8001c2e:	4b12      	ldr	r3, [pc, #72]	@ (8001c78 <HAL_MspInit+0x54>)
 8001c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c32:	4a11      	ldr	r2, [pc, #68]	@ (8001c78 <HAL_MspInit+0x54>)
 8001c34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c38:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c3a:	4b0f      	ldr	r3, [pc, #60]	@ (8001c78 <HAL_MspInit+0x54>)
 8001c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c42:	607b      	str	r3, [r7, #4]
 8001c44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c46:	2300      	movs	r3, #0
 8001c48:	603b      	str	r3, [r7, #0]
 8001c4a:	4b0b      	ldr	r3, [pc, #44]	@ (8001c78 <HAL_MspInit+0x54>)
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4e:	4a0a      	ldr	r2, [pc, #40]	@ (8001c78 <HAL_MspInit+0x54>)
 8001c50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c54:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c56:	4b08      	ldr	r3, [pc, #32]	@ (8001c78 <HAL_MspInit+0x54>)
 8001c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c5e:	603b      	str	r3, [r7, #0]
 8001c60:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c62:	2200      	movs	r2, #0
 8001c64:	210f      	movs	r1, #15
 8001c66:	f06f 0001 	mvn.w	r0, #1
 8001c6a:	f000 faf8 	bl	800225e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c6e:	bf00      	nop
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	40023800 	.word	0x40023800

08001c7c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b08a      	sub	sp, #40	@ 0x28
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c84:	f107 0314 	add.w	r3, r7, #20
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	605a      	str	r2, [r3, #4]
 8001c8e:	609a      	str	r2, [r3, #8]
 8001c90:	60da      	str	r2, [r3, #12]
 8001c92:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a19      	ldr	r2, [pc, #100]	@ (8001d00 <HAL_I2C_MspInit+0x84>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d12c      	bne.n	8001cf8 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	613b      	str	r3, [r7, #16]
 8001ca2:	4b18      	ldr	r3, [pc, #96]	@ (8001d04 <HAL_I2C_MspInit+0x88>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca6:	4a17      	ldr	r2, [pc, #92]	@ (8001d04 <HAL_I2C_MspInit+0x88>)
 8001ca8:	f043 0302 	orr.w	r3, r3, #2
 8001cac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cae:	4b15      	ldr	r3, [pc, #84]	@ (8001d04 <HAL_I2C_MspInit+0x88>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	613b      	str	r3, [r7, #16]
 8001cb8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001cba:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001cbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cc0:	2312      	movs	r3, #18
 8001cc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ccc:	2304      	movs	r3, #4
 8001cce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd0:	f107 0314 	add.w	r3, r7, #20
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	480c      	ldr	r0, [pc, #48]	@ (8001d08 <HAL_I2C_MspInit+0x8c>)
 8001cd8:	f000 faea 	bl	80022b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001cdc:	2300      	movs	r3, #0
 8001cde:	60fb      	str	r3, [r7, #12]
 8001ce0:	4b08      	ldr	r3, [pc, #32]	@ (8001d04 <HAL_I2C_MspInit+0x88>)
 8001ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce4:	4a07      	ldr	r2, [pc, #28]	@ (8001d04 <HAL_I2C_MspInit+0x88>)
 8001ce6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001cea:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cec:	4b05      	ldr	r3, [pc, #20]	@ (8001d04 <HAL_I2C_MspInit+0x88>)
 8001cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cf4:	60fb      	str	r3, [r7, #12]
 8001cf6:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001cf8:	bf00      	nop
 8001cfa:	3728      	adds	r7, #40	@ 0x28
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	40005400 	.word	0x40005400
 8001d04:	40023800 	.word	0x40023800
 8001d08:	40020400 	.word	0x40020400

08001d0c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b08a      	sub	sp, #40	@ 0x28
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d14:	f107 0314 	add.w	r3, r7, #20
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	605a      	str	r2, [r3, #4]
 8001d1e:	609a      	str	r2, [r3, #8]
 8001d20:	60da      	str	r2, [r3, #12]
 8001d22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a19      	ldr	r2, [pc, #100]	@ (8001d90 <HAL_UART_MspInit+0x84>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d12b      	bne.n	8001d86 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	613b      	str	r3, [r7, #16]
 8001d32:	4b18      	ldr	r3, [pc, #96]	@ (8001d94 <HAL_UART_MspInit+0x88>)
 8001d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d36:	4a17      	ldr	r2, [pc, #92]	@ (8001d94 <HAL_UART_MspInit+0x88>)
 8001d38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d3e:	4b15      	ldr	r3, [pc, #84]	@ (8001d94 <HAL_UART_MspInit+0x88>)
 8001d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d46:	613b      	str	r3, [r7, #16]
 8001d48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	60fb      	str	r3, [r7, #12]
 8001d4e:	4b11      	ldr	r3, [pc, #68]	@ (8001d94 <HAL_UART_MspInit+0x88>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d52:	4a10      	ldr	r2, [pc, #64]	@ (8001d94 <HAL_UART_MspInit+0x88>)
 8001d54:	f043 0301 	orr.w	r3, r3, #1
 8001d58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d5a:	4b0e      	ldr	r3, [pc, #56]	@ (8001d94 <HAL_UART_MspInit+0x88>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d66:	230c      	movs	r3, #12
 8001d68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d72:	2303      	movs	r3, #3
 8001d74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d76:	2307      	movs	r3, #7
 8001d78:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d7a:	f107 0314 	add.w	r3, r7, #20
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4805      	ldr	r0, [pc, #20]	@ (8001d98 <HAL_UART_MspInit+0x8c>)
 8001d82:	f000 fa95 	bl	80022b0 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001d86:	bf00      	nop
 8001d88:	3728      	adds	r7, #40	@ 0x28
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40004400 	.word	0x40004400
 8001d94:	40023800 	.word	0x40023800
 8001d98:	40020000 	.word	0x40020000

08001d9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001da0:	bf00      	nop
 8001da2:	e7fd      	b.n	8001da0 <NMI_Handler+0x4>

08001da4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001da8:	bf00      	nop
 8001daa:	e7fd      	b.n	8001da8 <HardFault_Handler+0x4>

08001dac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001db0:	bf00      	nop
 8001db2:	e7fd      	b.n	8001db0 <MemManage_Handler+0x4>

08001db4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001db8:	bf00      	nop
 8001dba:	e7fd      	b.n	8001db8 <BusFault_Handler+0x4>

08001dbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dc0:	bf00      	nop
 8001dc2:	e7fd      	b.n	8001dc0 <UsageFault_Handler+0x4>

08001dc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dc8:	bf00      	nop
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr

08001dd2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dd2:	b580      	push	{r7, lr}
 8001dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dd6:	f000 f941 	bl	800205c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001dda:	f004 fb0d 	bl	80063f8 <xTaskGetSchedulerState>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d001      	beq.n	8001de8 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001de4:	f005 f908 	bl	8006ff8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001de8:	bf00      	nop
 8001dea:	bd80      	pop	{r7, pc}

08001dec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  return 1;
 8001df0:	2301      	movs	r3, #1
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <_kill>:

int _kill(int pid, int sig)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e06:	f006 f8cd 	bl	8007fa4 <__errno>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2216      	movs	r2, #22
 8001e0e:	601a      	str	r2, [r3, #0]
  return -1;
 8001e10:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <_exit>:

void _exit (int status)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e24:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f7ff ffe7 	bl	8001dfc <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e2e:	bf00      	nop
 8001e30:	e7fd      	b.n	8001e2e <_exit+0x12>

08001e32 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b086      	sub	sp, #24
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	60f8      	str	r0, [r7, #12]
 8001e3a:	60b9      	str	r1, [r7, #8]
 8001e3c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e3e:	2300      	movs	r3, #0
 8001e40:	617b      	str	r3, [r7, #20]
 8001e42:	e00a      	b.n	8001e5a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e44:	f3af 8000 	nop.w
 8001e48:	4601      	mov	r1, r0
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	1c5a      	adds	r2, r3, #1
 8001e4e:	60ba      	str	r2, [r7, #8]
 8001e50:	b2ca      	uxtb	r2, r1
 8001e52:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	3301      	adds	r3, #1
 8001e58:	617b      	str	r3, [r7, #20]
 8001e5a:	697a      	ldr	r2, [r7, #20]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	dbf0      	blt.n	8001e44 <_read+0x12>
  }

  return len;
 8001e62:	687b      	ldr	r3, [r7, #4]
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3718      	adds	r7, #24
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <_close>:
  }
  return len;
}

int _close(int file)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e74:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e94:	605a      	str	r2, [r3, #4]
  return 0;
 8001e96:	2300      	movs	r3, #0
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <_isatty>:

int _isatty(int file)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001eac:	2301      	movs	r3, #1
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr

08001eba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	b085      	sub	sp, #20
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	60f8      	str	r0, [r7, #12]
 8001ec2:	60b9      	str	r1, [r7, #8]
 8001ec4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ec6:	2300      	movs	r3, #0
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3714      	adds	r7, #20
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr

08001ed4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b086      	sub	sp, #24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001edc:	4a14      	ldr	r2, [pc, #80]	@ (8001f30 <_sbrk+0x5c>)
 8001ede:	4b15      	ldr	r3, [pc, #84]	@ (8001f34 <_sbrk+0x60>)
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ee8:	4b13      	ldr	r3, [pc, #76]	@ (8001f38 <_sbrk+0x64>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d102      	bne.n	8001ef6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ef0:	4b11      	ldr	r3, [pc, #68]	@ (8001f38 <_sbrk+0x64>)
 8001ef2:	4a12      	ldr	r2, [pc, #72]	@ (8001f3c <_sbrk+0x68>)
 8001ef4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ef6:	4b10      	ldr	r3, [pc, #64]	@ (8001f38 <_sbrk+0x64>)
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4413      	add	r3, r2
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d207      	bcs.n	8001f14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f04:	f006 f84e 	bl	8007fa4 <__errno>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	220c      	movs	r2, #12
 8001f0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001f12:	e009      	b.n	8001f28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f14:	4b08      	ldr	r3, [pc, #32]	@ (8001f38 <_sbrk+0x64>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f1a:	4b07      	ldr	r3, [pc, #28]	@ (8001f38 <_sbrk+0x64>)
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4413      	add	r3, r2
 8001f22:	4a05      	ldr	r2, [pc, #20]	@ (8001f38 <_sbrk+0x64>)
 8001f24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f26:	68fb      	ldr	r3, [r7, #12]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3718      	adds	r7, #24
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	20020000 	.word	0x20020000
 8001f34:	00000400 	.word	0x00000400
 8001f38:	200006b0 	.word	0x200006b0
 8001f3c:	20005150 	.word	0x20005150

08001f40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f44:	4b06      	ldr	r3, [pc, #24]	@ (8001f60 <SystemInit+0x20>)
 8001f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f4a:	4a05      	ldr	r2, [pc, #20]	@ (8001f60 <SystemInit+0x20>)
 8001f4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f54:	bf00      	nop
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	e000ed00 	.word	0xe000ed00

08001f64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f64:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f9c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001f68:	f7ff ffea 	bl	8001f40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f6c:	480c      	ldr	r0, [pc, #48]	@ (8001fa0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f6e:	490d      	ldr	r1, [pc, #52]	@ (8001fa4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f70:	4a0d      	ldr	r2, [pc, #52]	@ (8001fa8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f74:	e002      	b.n	8001f7c <LoopCopyDataInit>

08001f76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f7a:	3304      	adds	r3, #4

08001f7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f80:	d3f9      	bcc.n	8001f76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f82:	4a0a      	ldr	r2, [pc, #40]	@ (8001fac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f84:	4c0a      	ldr	r4, [pc, #40]	@ (8001fb0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f88:	e001      	b.n	8001f8e <LoopFillZerobss>

08001f8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f8c:	3204      	adds	r2, #4

08001f8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f90:	d3fb      	bcc.n	8001f8a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001f92:	f006 f80d 	bl	8007fb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f96:	f7fe ffd1 	bl	8000f3c <main>
  bx  lr    
 8001f9a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001fa0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fa4:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001fa8:	0800b314 	.word	0x0800b314
  ldr r2, =_sbss
 8001fac:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001fb0:	20005150 	.word	0x20005150

08001fb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fb4:	e7fe      	b.n	8001fb4 <ADC_IRQHandler>
	...

08001fb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fbc:	4b0e      	ldr	r3, [pc, #56]	@ (8001ff8 <HAL_Init+0x40>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a0d      	ldr	r2, [pc, #52]	@ (8001ff8 <HAL_Init+0x40>)
 8001fc2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fc8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ff8 <HAL_Init+0x40>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a0a      	ldr	r2, [pc, #40]	@ (8001ff8 <HAL_Init+0x40>)
 8001fce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001fd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fd4:	4b08      	ldr	r3, [pc, #32]	@ (8001ff8 <HAL_Init+0x40>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a07      	ldr	r2, [pc, #28]	@ (8001ff8 <HAL_Init+0x40>)
 8001fda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fe0:	2003      	movs	r0, #3
 8001fe2:	f000 f931 	bl	8002248 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fe6:	200f      	movs	r0, #15
 8001fe8:	f000 f808 	bl	8001ffc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fec:	f7ff fe1a 	bl	8001c24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40023c00 	.word	0x40023c00

08001ffc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002004:	4b12      	ldr	r3, [pc, #72]	@ (8002050 <HAL_InitTick+0x54>)
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	4b12      	ldr	r3, [pc, #72]	@ (8002054 <HAL_InitTick+0x58>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	4619      	mov	r1, r3
 800200e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002012:	fbb3 f3f1 	udiv	r3, r3, r1
 8002016:	fbb2 f3f3 	udiv	r3, r2, r3
 800201a:	4618      	mov	r0, r3
 800201c:	f000 f93b 	bl	8002296 <HAL_SYSTICK_Config>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e00e      	b.n	8002048 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2b0f      	cmp	r3, #15
 800202e:	d80a      	bhi.n	8002046 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002030:	2200      	movs	r2, #0
 8002032:	6879      	ldr	r1, [r7, #4]
 8002034:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002038:	f000 f911 	bl	800225e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800203c:	4a06      	ldr	r2, [pc, #24]	@ (8002058 <HAL_InitTick+0x5c>)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002042:	2300      	movs	r3, #0
 8002044:	e000      	b.n	8002048 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
}
 8002048:	4618      	mov	r0, r3
 800204a:	3708      	adds	r7, #8
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	20000010 	.word	0x20000010
 8002054:	20000018 	.word	0x20000018
 8002058:	20000014 	.word	0x20000014

0800205c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002060:	4b06      	ldr	r3, [pc, #24]	@ (800207c <HAL_IncTick+0x20>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	461a      	mov	r2, r3
 8002066:	4b06      	ldr	r3, [pc, #24]	@ (8002080 <HAL_IncTick+0x24>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4413      	add	r3, r2
 800206c:	4a04      	ldr	r2, [pc, #16]	@ (8002080 <HAL_IncTick+0x24>)
 800206e:	6013      	str	r3, [r2, #0]
}
 8002070:	bf00      	nop
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	20000018 	.word	0x20000018
 8002080:	200006b4 	.word	0x200006b4

08002084 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  return uwTick;
 8002088:	4b03      	ldr	r3, [pc, #12]	@ (8002098 <HAL_GetTick+0x14>)
 800208a:	681b      	ldr	r3, [r3, #0]
}
 800208c:	4618      	mov	r0, r3
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	200006b4 	.word	0x200006b4

0800209c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020a4:	f7ff ffee 	bl	8002084 <HAL_GetTick>
 80020a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80020b4:	d005      	beq.n	80020c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020b6:	4b0a      	ldr	r3, [pc, #40]	@ (80020e0 <HAL_Delay+0x44>)
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	461a      	mov	r2, r3
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	4413      	add	r3, r2
 80020c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020c2:	bf00      	nop
 80020c4:	f7ff ffde 	bl	8002084 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d8f7      	bhi.n	80020c4 <HAL_Delay+0x28>
  {
  }
}
 80020d4:	bf00      	nop
 80020d6:	bf00      	nop
 80020d8:	3710      	adds	r7, #16
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	20000018 	.word	0x20000018

080020e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b085      	sub	sp, #20
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f003 0307 	and.w	r3, r3, #7
 80020f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002128 <__NVIC_SetPriorityGrouping+0x44>)
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020fa:	68ba      	ldr	r2, [r7, #8]
 80020fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002100:	4013      	ands	r3, r2
 8002102:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800210c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002110:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002114:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002116:	4a04      	ldr	r2, [pc, #16]	@ (8002128 <__NVIC_SetPriorityGrouping+0x44>)
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	60d3      	str	r3, [r2, #12]
}
 800211c:	bf00      	nop
 800211e:	3714      	adds	r7, #20
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr
 8002128:	e000ed00 	.word	0xe000ed00

0800212c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002130:	4b04      	ldr	r3, [pc, #16]	@ (8002144 <__NVIC_GetPriorityGrouping+0x18>)
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	0a1b      	lsrs	r3, r3, #8
 8002136:	f003 0307 	and.w	r3, r3, #7
}
 800213a:	4618      	mov	r0, r3
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr
 8002144:	e000ed00 	.word	0xe000ed00

08002148 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	4603      	mov	r3, r0
 8002150:	6039      	str	r1, [r7, #0]
 8002152:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002158:	2b00      	cmp	r3, #0
 800215a:	db0a      	blt.n	8002172 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	b2da      	uxtb	r2, r3
 8002160:	490c      	ldr	r1, [pc, #48]	@ (8002194 <__NVIC_SetPriority+0x4c>)
 8002162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002166:	0112      	lsls	r2, r2, #4
 8002168:	b2d2      	uxtb	r2, r2
 800216a:	440b      	add	r3, r1
 800216c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002170:	e00a      	b.n	8002188 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	b2da      	uxtb	r2, r3
 8002176:	4908      	ldr	r1, [pc, #32]	@ (8002198 <__NVIC_SetPriority+0x50>)
 8002178:	79fb      	ldrb	r3, [r7, #7]
 800217a:	f003 030f 	and.w	r3, r3, #15
 800217e:	3b04      	subs	r3, #4
 8002180:	0112      	lsls	r2, r2, #4
 8002182:	b2d2      	uxtb	r2, r2
 8002184:	440b      	add	r3, r1
 8002186:	761a      	strb	r2, [r3, #24]
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	e000e100 	.word	0xe000e100
 8002198:	e000ed00 	.word	0xe000ed00

0800219c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800219c:	b480      	push	{r7}
 800219e:	b089      	sub	sp, #36	@ 0x24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	f1c3 0307 	rsb	r3, r3, #7
 80021b6:	2b04      	cmp	r3, #4
 80021b8:	bf28      	it	cs
 80021ba:	2304      	movcs	r3, #4
 80021bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	3304      	adds	r3, #4
 80021c2:	2b06      	cmp	r3, #6
 80021c4:	d902      	bls.n	80021cc <NVIC_EncodePriority+0x30>
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	3b03      	subs	r3, #3
 80021ca:	e000      	b.n	80021ce <NVIC_EncodePriority+0x32>
 80021cc:	2300      	movs	r3, #0
 80021ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	fa02 f303 	lsl.w	r3, r2, r3
 80021da:	43da      	mvns	r2, r3
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	401a      	ands	r2, r3
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021e4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	fa01 f303 	lsl.w	r3, r1, r3
 80021ee:	43d9      	mvns	r1, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021f4:	4313      	orrs	r3, r2
         );
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3724      	adds	r7, #36	@ 0x24
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
	...

08002204 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	3b01      	subs	r3, #1
 8002210:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002214:	d301      	bcc.n	800221a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002216:	2301      	movs	r3, #1
 8002218:	e00f      	b.n	800223a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800221a:	4a0a      	ldr	r2, [pc, #40]	@ (8002244 <SysTick_Config+0x40>)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	3b01      	subs	r3, #1
 8002220:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002222:	210f      	movs	r1, #15
 8002224:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002228:	f7ff ff8e 	bl	8002148 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800222c:	4b05      	ldr	r3, [pc, #20]	@ (8002244 <SysTick_Config+0x40>)
 800222e:	2200      	movs	r2, #0
 8002230:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002232:	4b04      	ldr	r3, [pc, #16]	@ (8002244 <SysTick_Config+0x40>)
 8002234:	2207      	movs	r2, #7
 8002236:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002238:	2300      	movs	r3, #0
}
 800223a:	4618      	mov	r0, r3
 800223c:	3708      	adds	r7, #8
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	e000e010 	.word	0xe000e010

08002248 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f7ff ff47 	bl	80020e4 <__NVIC_SetPriorityGrouping>
}
 8002256:	bf00      	nop
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800225e:	b580      	push	{r7, lr}
 8002260:	b086      	sub	sp, #24
 8002262:	af00      	add	r7, sp, #0
 8002264:	4603      	mov	r3, r0
 8002266:	60b9      	str	r1, [r7, #8]
 8002268:	607a      	str	r2, [r7, #4]
 800226a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800226c:	2300      	movs	r3, #0
 800226e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002270:	f7ff ff5c 	bl	800212c <__NVIC_GetPriorityGrouping>
 8002274:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	68b9      	ldr	r1, [r7, #8]
 800227a:	6978      	ldr	r0, [r7, #20]
 800227c:	f7ff ff8e 	bl	800219c <NVIC_EncodePriority>
 8002280:	4602      	mov	r2, r0
 8002282:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002286:	4611      	mov	r1, r2
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff ff5d 	bl	8002148 <__NVIC_SetPriority>
}
 800228e:	bf00      	nop
 8002290:	3718      	adds	r7, #24
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b082      	sub	sp, #8
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800229e:	6878      	ldr	r0, [r7, #4]
 80022a0:	f7ff ffb0 	bl	8002204 <SysTick_Config>
 80022a4:	4603      	mov	r3, r0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
	...

080022b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b089      	sub	sp, #36	@ 0x24
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022ba:	2300      	movs	r3, #0
 80022bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022be:	2300      	movs	r3, #0
 80022c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022c2:	2300      	movs	r3, #0
 80022c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022c6:	2300      	movs	r3, #0
 80022c8:	61fb      	str	r3, [r7, #28]
 80022ca:	e165      	b.n	8002598 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022cc:	2201      	movs	r2, #1
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	697a      	ldr	r2, [r7, #20]
 80022dc:	4013      	ands	r3, r2
 80022de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022e0:	693a      	ldr	r2, [r7, #16]
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	f040 8154 	bne.w	8002592 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f003 0303 	and.w	r3, r3, #3
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d005      	beq.n	8002302 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d130      	bne.n	8002364 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	2203      	movs	r2, #3
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	43db      	mvns	r3, r3
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	4013      	ands	r3, r2
 8002318:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	68da      	ldr	r2, [r3, #12]
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	69ba      	ldr	r2, [r7, #24]
 8002328:	4313      	orrs	r3, r2
 800232a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002338:	2201      	movs	r2, #1
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	43db      	mvns	r3, r3
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	4013      	ands	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	091b      	lsrs	r3, r3, #4
 800234e:	f003 0201 	and.w	r2, r3, #1
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	4313      	orrs	r3, r2
 800235c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f003 0303 	and.w	r3, r3, #3
 800236c:	2b03      	cmp	r3, #3
 800236e:	d017      	beq.n	80023a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	2203      	movs	r2, #3
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	43db      	mvns	r3, r3
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	4013      	ands	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	689a      	ldr	r2, [r3, #8]
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	4313      	orrs	r3, r2
 8002398:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f003 0303 	and.w	r3, r3, #3
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d123      	bne.n	80023f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	08da      	lsrs	r2, r3, #3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	3208      	adds	r2, #8
 80023b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	f003 0307 	and.w	r3, r3, #7
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	220f      	movs	r2, #15
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	43db      	mvns	r3, r3
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4013      	ands	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	691a      	ldr	r2, [r3, #16]
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	f003 0307 	and.w	r3, r3, #7
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	08da      	lsrs	r2, r3, #3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	3208      	adds	r2, #8
 80023ee:	69b9      	ldr	r1, [r7, #24]
 80023f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	005b      	lsls	r3, r3, #1
 80023fe:	2203      	movs	r2, #3
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	43db      	mvns	r3, r3
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	4013      	ands	r3, r2
 800240a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f003 0203 	and.w	r2, r3, #3
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	fa02 f303 	lsl.w	r3, r2, r3
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	4313      	orrs	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002430:	2b00      	cmp	r3, #0
 8002432:	f000 80ae 	beq.w	8002592 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002436:	2300      	movs	r3, #0
 8002438:	60fb      	str	r3, [r7, #12]
 800243a:	4b5d      	ldr	r3, [pc, #372]	@ (80025b0 <HAL_GPIO_Init+0x300>)
 800243c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800243e:	4a5c      	ldr	r2, [pc, #368]	@ (80025b0 <HAL_GPIO_Init+0x300>)
 8002440:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002444:	6453      	str	r3, [r2, #68]	@ 0x44
 8002446:	4b5a      	ldr	r3, [pc, #360]	@ (80025b0 <HAL_GPIO_Init+0x300>)
 8002448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800244a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800244e:	60fb      	str	r3, [r7, #12]
 8002450:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002452:	4a58      	ldr	r2, [pc, #352]	@ (80025b4 <HAL_GPIO_Init+0x304>)
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	089b      	lsrs	r3, r3, #2
 8002458:	3302      	adds	r3, #2
 800245a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800245e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	f003 0303 	and.w	r3, r3, #3
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	220f      	movs	r2, #15
 800246a:	fa02 f303 	lsl.w	r3, r2, r3
 800246e:	43db      	mvns	r3, r3
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	4013      	ands	r3, r2
 8002474:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a4f      	ldr	r2, [pc, #316]	@ (80025b8 <HAL_GPIO_Init+0x308>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d025      	beq.n	80024ca <HAL_GPIO_Init+0x21a>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a4e      	ldr	r2, [pc, #312]	@ (80025bc <HAL_GPIO_Init+0x30c>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d01f      	beq.n	80024c6 <HAL_GPIO_Init+0x216>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a4d      	ldr	r2, [pc, #308]	@ (80025c0 <HAL_GPIO_Init+0x310>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d019      	beq.n	80024c2 <HAL_GPIO_Init+0x212>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a4c      	ldr	r2, [pc, #304]	@ (80025c4 <HAL_GPIO_Init+0x314>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d013      	beq.n	80024be <HAL_GPIO_Init+0x20e>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a4b      	ldr	r2, [pc, #300]	@ (80025c8 <HAL_GPIO_Init+0x318>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d00d      	beq.n	80024ba <HAL_GPIO_Init+0x20a>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	4a4a      	ldr	r2, [pc, #296]	@ (80025cc <HAL_GPIO_Init+0x31c>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d007      	beq.n	80024b6 <HAL_GPIO_Init+0x206>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	4a49      	ldr	r2, [pc, #292]	@ (80025d0 <HAL_GPIO_Init+0x320>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d101      	bne.n	80024b2 <HAL_GPIO_Init+0x202>
 80024ae:	2306      	movs	r3, #6
 80024b0:	e00c      	b.n	80024cc <HAL_GPIO_Init+0x21c>
 80024b2:	2307      	movs	r3, #7
 80024b4:	e00a      	b.n	80024cc <HAL_GPIO_Init+0x21c>
 80024b6:	2305      	movs	r3, #5
 80024b8:	e008      	b.n	80024cc <HAL_GPIO_Init+0x21c>
 80024ba:	2304      	movs	r3, #4
 80024bc:	e006      	b.n	80024cc <HAL_GPIO_Init+0x21c>
 80024be:	2303      	movs	r3, #3
 80024c0:	e004      	b.n	80024cc <HAL_GPIO_Init+0x21c>
 80024c2:	2302      	movs	r3, #2
 80024c4:	e002      	b.n	80024cc <HAL_GPIO_Init+0x21c>
 80024c6:	2301      	movs	r3, #1
 80024c8:	e000      	b.n	80024cc <HAL_GPIO_Init+0x21c>
 80024ca:	2300      	movs	r3, #0
 80024cc:	69fa      	ldr	r2, [r7, #28]
 80024ce:	f002 0203 	and.w	r2, r2, #3
 80024d2:	0092      	lsls	r2, r2, #2
 80024d4:	4093      	lsls	r3, r2
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	4313      	orrs	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024dc:	4935      	ldr	r1, [pc, #212]	@ (80025b4 <HAL_GPIO_Init+0x304>)
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	089b      	lsrs	r3, r3, #2
 80024e2:	3302      	adds	r3, #2
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024ea:	4b3a      	ldr	r3, [pc, #232]	@ (80025d4 <HAL_GPIO_Init+0x324>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	43db      	mvns	r3, r3
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	4013      	ands	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d003      	beq.n	800250e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	4313      	orrs	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800250e:	4a31      	ldr	r2, [pc, #196]	@ (80025d4 <HAL_GPIO_Init+0x324>)
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002514:	4b2f      	ldr	r3, [pc, #188]	@ (80025d4 <HAL_GPIO_Init+0x324>)
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	43db      	mvns	r3, r3
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	4013      	ands	r3, r2
 8002522:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d003      	beq.n	8002538 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	4313      	orrs	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002538:	4a26      	ldr	r2, [pc, #152]	@ (80025d4 <HAL_GPIO_Init+0x324>)
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800253e:	4b25      	ldr	r3, [pc, #148]	@ (80025d4 <HAL_GPIO_Init+0x324>)
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	43db      	mvns	r3, r3
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	4013      	ands	r3, r2
 800254c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d003      	beq.n	8002562 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	4313      	orrs	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002562:	4a1c      	ldr	r2, [pc, #112]	@ (80025d4 <HAL_GPIO_Init+0x324>)
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002568:	4b1a      	ldr	r3, [pc, #104]	@ (80025d4 <HAL_GPIO_Init+0x324>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	43db      	mvns	r3, r3
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	4013      	ands	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d003      	beq.n	800258c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	4313      	orrs	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800258c:	4a11      	ldr	r2, [pc, #68]	@ (80025d4 <HAL_GPIO_Init+0x324>)
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	3301      	adds	r3, #1
 8002596:	61fb      	str	r3, [r7, #28]
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	2b0f      	cmp	r3, #15
 800259c:	f67f ae96 	bls.w	80022cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025a0:	bf00      	nop
 80025a2:	bf00      	nop
 80025a4:	3724      	adds	r7, #36	@ 0x24
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr
 80025ae:	bf00      	nop
 80025b0:	40023800 	.word	0x40023800
 80025b4:	40013800 	.word	0x40013800
 80025b8:	40020000 	.word	0x40020000
 80025bc:	40020400 	.word	0x40020400
 80025c0:	40020800 	.word	0x40020800
 80025c4:	40020c00 	.word	0x40020c00
 80025c8:	40021000 	.word	0x40021000
 80025cc:	40021400 	.word	0x40021400
 80025d0:	40021800 	.word	0x40021800
 80025d4:	40013c00 	.word	0x40013c00

080025d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025d8:	b480      	push	{r7}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	460b      	mov	r3, r1
 80025e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	691a      	ldr	r2, [r3, #16]
 80025e8:	887b      	ldrh	r3, [r7, #2]
 80025ea:	4013      	ands	r3, r2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d002      	beq.n	80025f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025f0:	2301      	movs	r3, #1
 80025f2:	73fb      	strb	r3, [r7, #15]
 80025f4:	e001      	b.n	80025fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025f6:	2300      	movs	r3, #0
 80025f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3714      	adds	r7, #20
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	460b      	mov	r3, r1
 8002612:	807b      	strh	r3, [r7, #2]
 8002614:	4613      	mov	r3, r2
 8002616:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002618:	787b      	ldrb	r3, [r7, #1]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d003      	beq.n	8002626 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800261e:	887a      	ldrh	r2, [r7, #2]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002624:	e003      	b.n	800262e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002626:	887b      	ldrh	r3, [r7, #2]
 8002628:	041a      	lsls	r2, r3, #16
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	619a      	str	r2, [r3, #24]
}
 800262e:	bf00      	nop
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
	...

0800263c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e12b      	b.n	80028a6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b00      	cmp	r3, #0
 8002658:	d106      	bne.n	8002668 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f7ff fb0a 	bl	8001c7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2224      	movs	r2, #36	@ 0x24
 800266c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f022 0201 	bic.w	r2, r2, #1
 800267e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800268e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800269e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80026a0:	f001 f9e6 	bl	8003a70 <HAL_RCC_GetPCLK1Freq>
 80026a4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	4a81      	ldr	r2, [pc, #516]	@ (80028b0 <HAL_I2C_Init+0x274>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d807      	bhi.n	80026c0 <HAL_I2C_Init+0x84>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	4a80      	ldr	r2, [pc, #512]	@ (80028b4 <HAL_I2C_Init+0x278>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	bf94      	ite	ls
 80026b8:	2301      	movls	r3, #1
 80026ba:	2300      	movhi	r3, #0
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	e006      	b.n	80026ce <HAL_I2C_Init+0x92>
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	4a7d      	ldr	r2, [pc, #500]	@ (80028b8 <HAL_I2C_Init+0x27c>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	bf94      	ite	ls
 80026c8:	2301      	movls	r3, #1
 80026ca:	2300      	movhi	r3, #0
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e0e7      	b.n	80028a6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	4a78      	ldr	r2, [pc, #480]	@ (80028bc <HAL_I2C_Init+0x280>)
 80026da:	fba2 2303 	umull	r2, r3, r2, r3
 80026de:	0c9b      	lsrs	r3, r3, #18
 80026e0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68ba      	ldr	r2, [r7, #8]
 80026f2:	430a      	orrs	r2, r1
 80026f4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	6a1b      	ldr	r3, [r3, #32]
 80026fc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	4a6a      	ldr	r2, [pc, #424]	@ (80028b0 <HAL_I2C_Init+0x274>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d802      	bhi.n	8002710 <HAL_I2C_Init+0xd4>
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	3301      	adds	r3, #1
 800270e:	e009      	b.n	8002724 <HAL_I2C_Init+0xe8>
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002716:	fb02 f303 	mul.w	r3, r2, r3
 800271a:	4a69      	ldr	r2, [pc, #420]	@ (80028c0 <HAL_I2C_Init+0x284>)
 800271c:	fba2 2303 	umull	r2, r3, r2, r3
 8002720:	099b      	lsrs	r3, r3, #6
 8002722:	3301      	adds	r3, #1
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	6812      	ldr	r2, [r2, #0]
 8002728:	430b      	orrs	r3, r1
 800272a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	69db      	ldr	r3, [r3, #28]
 8002732:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002736:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	495c      	ldr	r1, [pc, #368]	@ (80028b0 <HAL_I2C_Init+0x274>)
 8002740:	428b      	cmp	r3, r1
 8002742:	d819      	bhi.n	8002778 <HAL_I2C_Init+0x13c>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	1e59      	subs	r1, r3, #1
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002752:	1c59      	adds	r1, r3, #1
 8002754:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002758:	400b      	ands	r3, r1
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00a      	beq.n	8002774 <HAL_I2C_Init+0x138>
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	1e59      	subs	r1, r3, #1
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	005b      	lsls	r3, r3, #1
 8002768:	fbb1 f3f3 	udiv	r3, r1, r3
 800276c:	3301      	adds	r3, #1
 800276e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002772:	e051      	b.n	8002818 <HAL_I2C_Init+0x1dc>
 8002774:	2304      	movs	r3, #4
 8002776:	e04f      	b.n	8002818 <HAL_I2C_Init+0x1dc>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d111      	bne.n	80027a4 <HAL_I2C_Init+0x168>
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	1e58      	subs	r0, r3, #1
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6859      	ldr	r1, [r3, #4]
 8002788:	460b      	mov	r3, r1
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	440b      	add	r3, r1
 800278e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002792:	3301      	adds	r3, #1
 8002794:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002798:	2b00      	cmp	r3, #0
 800279a:	bf0c      	ite	eq
 800279c:	2301      	moveq	r3, #1
 800279e:	2300      	movne	r3, #0
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	e012      	b.n	80027ca <HAL_I2C_Init+0x18e>
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	1e58      	subs	r0, r3, #1
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6859      	ldr	r1, [r3, #4]
 80027ac:	460b      	mov	r3, r1
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	440b      	add	r3, r1
 80027b2:	0099      	lsls	r1, r3, #2
 80027b4:	440b      	add	r3, r1
 80027b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80027ba:	3301      	adds	r3, #1
 80027bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	bf0c      	ite	eq
 80027c4:	2301      	moveq	r3, #1
 80027c6:	2300      	movne	r3, #0
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <HAL_I2C_Init+0x196>
 80027ce:	2301      	movs	r3, #1
 80027d0:	e022      	b.n	8002818 <HAL_I2C_Init+0x1dc>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d10e      	bne.n	80027f8 <HAL_I2C_Init+0x1bc>
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	1e58      	subs	r0, r3, #1
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6859      	ldr	r1, [r3, #4]
 80027e2:	460b      	mov	r3, r1
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	440b      	add	r3, r1
 80027e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80027ec:	3301      	adds	r3, #1
 80027ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80027f6:	e00f      	b.n	8002818 <HAL_I2C_Init+0x1dc>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	1e58      	subs	r0, r3, #1
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6859      	ldr	r1, [r3, #4]
 8002800:	460b      	mov	r3, r1
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	440b      	add	r3, r1
 8002806:	0099      	lsls	r1, r3, #2
 8002808:	440b      	add	r3, r1
 800280a:	fbb0 f3f3 	udiv	r3, r0, r3
 800280e:	3301      	adds	r3, #1
 8002810:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002814:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002818:	6879      	ldr	r1, [r7, #4]
 800281a:	6809      	ldr	r1, [r1, #0]
 800281c:	4313      	orrs	r3, r2
 800281e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	69da      	ldr	r2, [r3, #28]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a1b      	ldr	r3, [r3, #32]
 8002832:	431a      	orrs	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	430a      	orrs	r2, r1
 800283a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002846:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	6911      	ldr	r1, [r2, #16]
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	68d2      	ldr	r2, [r2, #12]
 8002852:	4311      	orrs	r1, r2
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	6812      	ldr	r2, [r2, #0]
 8002858:	430b      	orrs	r3, r1
 800285a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	695a      	ldr	r2, [r3, #20]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	699b      	ldr	r3, [r3, #24]
 800286e:	431a      	orrs	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	430a      	orrs	r2, r1
 8002876:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681a      	ldr	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f042 0201 	orr.w	r2, r2, #1
 8002886:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2220      	movs	r2, #32
 8002892:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	000186a0 	.word	0x000186a0
 80028b4:	001e847f 	.word	0x001e847f
 80028b8:	003d08ff 	.word	0x003d08ff
 80028bc:	431bde83 	.word	0x431bde83
 80028c0:	10624dd3 	.word	0x10624dd3

080028c4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b088      	sub	sp, #32
 80028c8:	af02      	add	r7, sp, #8
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	607a      	str	r2, [r7, #4]
 80028ce:	461a      	mov	r2, r3
 80028d0:	460b      	mov	r3, r1
 80028d2:	817b      	strh	r3, [r7, #10]
 80028d4:	4613      	mov	r3, r2
 80028d6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80028d8:	f7ff fbd4 	bl	8002084 <HAL_GetTick>
 80028dc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2b20      	cmp	r3, #32
 80028e8:	f040 80e0 	bne.w	8002aac <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	9300      	str	r3, [sp, #0]
 80028f0:	2319      	movs	r3, #25
 80028f2:	2201      	movs	r2, #1
 80028f4:	4970      	ldr	r1, [pc, #448]	@ (8002ab8 <HAL_I2C_Master_Transmit+0x1f4>)
 80028f6:	68f8      	ldr	r0, [r7, #12]
 80028f8:	f000 fd92 	bl	8003420 <I2C_WaitOnFlagUntilTimeout>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002902:	2302      	movs	r3, #2
 8002904:	e0d3      	b.n	8002aae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800290c:	2b01      	cmp	r3, #1
 800290e:	d101      	bne.n	8002914 <HAL_I2C_Master_Transmit+0x50>
 8002910:	2302      	movs	r3, #2
 8002912:	e0cc      	b.n	8002aae <HAL_I2C_Master_Transmit+0x1ea>
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	2b01      	cmp	r3, #1
 8002928:	d007      	beq.n	800293a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f042 0201 	orr.w	r2, r2, #1
 8002938:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002948:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2221      	movs	r2, #33	@ 0x21
 800294e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2210      	movs	r2, #16
 8002956:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2200      	movs	r2, #0
 800295e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	893a      	ldrh	r2, [r7, #8]
 800296a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002970:	b29a      	uxth	r2, r3
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	4a50      	ldr	r2, [pc, #320]	@ (8002abc <HAL_I2C_Master_Transmit+0x1f8>)
 800297a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800297c:	8979      	ldrh	r1, [r7, #10]
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	6a3a      	ldr	r2, [r7, #32]
 8002982:	68f8      	ldr	r0, [r7, #12]
 8002984:	f000 fbfc 	bl	8003180 <I2C_MasterRequestWrite>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e08d      	b.n	8002aae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002992:	2300      	movs	r3, #0
 8002994:	613b      	str	r3, [r7, #16]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	695b      	ldr	r3, [r3, #20]
 800299c:	613b      	str	r3, [r7, #16]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	613b      	str	r3, [r7, #16]
 80029a6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80029a8:	e066      	b.n	8002a78 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029aa:	697a      	ldr	r2, [r7, #20]
 80029ac:	6a39      	ldr	r1, [r7, #32]
 80029ae:	68f8      	ldr	r0, [r7, #12]
 80029b0:	f000 fe50 	bl	8003654 <I2C_WaitOnTXEFlagUntilTimeout>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00d      	beq.n	80029d6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029be:	2b04      	cmp	r3, #4
 80029c0:	d107      	bne.n	80029d2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e06b      	b.n	8002aae <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029da:	781a      	ldrb	r2, [r3, #0]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e6:	1c5a      	adds	r2, r3, #1
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	3b01      	subs	r3, #1
 80029f4:	b29a      	uxth	r2, r3
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029fe:	3b01      	subs	r3, #1
 8002a00:	b29a      	uxth	r2, r3
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	695b      	ldr	r3, [r3, #20]
 8002a0c:	f003 0304 	and.w	r3, r3, #4
 8002a10:	2b04      	cmp	r3, #4
 8002a12:	d11b      	bne.n	8002a4c <HAL_I2C_Master_Transmit+0x188>
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d017      	beq.n	8002a4c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a20:	781a      	ldrb	r2, [r3, #0]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a2c:	1c5a      	adds	r2, r3, #1
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	b29a      	uxth	r2, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a44:	3b01      	subs	r3, #1
 8002a46:	b29a      	uxth	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a4c:	697a      	ldr	r2, [r7, #20]
 8002a4e:	6a39      	ldr	r1, [r7, #32]
 8002a50:	68f8      	ldr	r0, [r7, #12]
 8002a52:	f000 fe47 	bl	80036e4 <I2C_WaitOnBTFFlagUntilTimeout>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d00d      	beq.n	8002a78 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a60:	2b04      	cmp	r3, #4
 8002a62:	d107      	bne.n	8002a74 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a72:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e01a      	b.n	8002aae <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d194      	bne.n	80029aa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681a      	ldr	r2, [r3, #0]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2220      	movs	r2, #32
 8002a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	e000      	b.n	8002aae <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002aac:	2302      	movs	r3, #2
  }
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3718      	adds	r7, #24
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	00100002 	.word	0x00100002
 8002abc:	ffff0000 	.word	0xffff0000

08002ac0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b08c      	sub	sp, #48	@ 0x30
 8002ac4:	af02      	add	r7, sp, #8
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	607a      	str	r2, [r7, #4]
 8002aca:	461a      	mov	r2, r3
 8002acc:	460b      	mov	r3, r1
 8002ace:	817b      	strh	r3, [r7, #10]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ad4:	f7ff fad6 	bl	8002084 <HAL_GetTick>
 8002ad8:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b20      	cmp	r3, #32
 8002ae4:	f040 8217 	bne.w	8002f16 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aea:	9300      	str	r3, [sp, #0]
 8002aec:	2319      	movs	r3, #25
 8002aee:	2201      	movs	r2, #1
 8002af0:	497c      	ldr	r1, [pc, #496]	@ (8002ce4 <HAL_I2C_Master_Receive+0x224>)
 8002af2:	68f8      	ldr	r0, [r7, #12]
 8002af4:	f000 fc94 	bl	8003420 <I2C_WaitOnFlagUntilTimeout>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002afe:	2302      	movs	r3, #2
 8002b00:	e20a      	b.n	8002f18 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d101      	bne.n	8002b10 <HAL_I2C_Master_Receive+0x50>
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	e203      	b.n	8002f18 <HAL_I2C_Master_Receive+0x458>
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2201      	movs	r2, #1
 8002b14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d007      	beq.n	8002b36 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f042 0201 	orr.w	r2, r2, #1
 8002b34:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b44:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2222      	movs	r2, #34	@ 0x22
 8002b4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2210      	movs	r2, #16
 8002b52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	893a      	ldrh	r2, [r7, #8]
 8002b66:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	4a5c      	ldr	r2, [pc, #368]	@ (8002ce8 <HAL_I2C_Master_Receive+0x228>)
 8002b76:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002b78:	8979      	ldrh	r1, [r7, #10]
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b7e:	68f8      	ldr	r0, [r7, #12]
 8002b80:	f000 fb80 	bl	8003284 <I2C_MasterRequestRead>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e1c4      	b.n	8002f18 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d113      	bne.n	8002bbe <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b96:	2300      	movs	r3, #0
 8002b98:	623b      	str	r3, [r7, #32]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	695b      	ldr	r3, [r3, #20]
 8002ba0:	623b      	str	r3, [r7, #32]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	623b      	str	r3, [r7, #32]
 8002baa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	e198      	b.n	8002ef0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d11b      	bne.n	8002bfe <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bd4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	61fb      	str	r3, [r7, #28]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	695b      	ldr	r3, [r3, #20]
 8002be0:	61fb      	str	r3, [r7, #28]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	61fb      	str	r3, [r7, #28]
 8002bea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	e178      	b.n	8002ef0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d11b      	bne.n	8002c3e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c14:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002c24:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c26:	2300      	movs	r3, #0
 8002c28:	61bb      	str	r3, [r7, #24]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	695b      	ldr	r3, [r3, #20]
 8002c30:	61bb      	str	r3, [r7, #24]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	61bb      	str	r3, [r7, #24]
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	e158      	b.n	8002ef0 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002c4c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c4e:	2300      	movs	r3, #0
 8002c50:	617b      	str	r3, [r7, #20]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	695b      	ldr	r3, [r3, #20]
 8002c58:	617b      	str	r3, [r7, #20]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	617b      	str	r3, [r7, #20]
 8002c62:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002c64:	e144      	b.n	8002ef0 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c6a:	2b03      	cmp	r3, #3
 8002c6c:	f200 80f1 	bhi.w	8002e52 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d123      	bne.n	8002cc0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c7a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002c7c:	68f8      	ldr	r0, [r7, #12]
 8002c7e:	f000 fd79 	bl	8003774 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d001      	beq.n	8002c8c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e145      	b.n	8002f18 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	691a      	ldr	r2, [r3, #16]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c96:	b2d2      	uxtb	r2, r2
 8002c98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c9e:	1c5a      	adds	r2, r3, #1
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ca8:	3b01      	subs	r3, #1
 8002caa:	b29a      	uxth	r2, r3
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cb4:	b29b      	uxth	r3, r3
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	b29a      	uxth	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002cbe:	e117      	b.n	8002ef0 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d14e      	bne.n	8002d66 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cca:	9300      	str	r3, [sp, #0]
 8002ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cce:	2200      	movs	r2, #0
 8002cd0:	4906      	ldr	r1, [pc, #24]	@ (8002cec <HAL_I2C_Master_Receive+0x22c>)
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f000 fba4 	bl	8003420 <I2C_WaitOnFlagUntilTimeout>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d008      	beq.n	8002cf0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e11a      	b.n	8002f18 <HAL_I2C_Master_Receive+0x458>
 8002ce2:	bf00      	nop
 8002ce4:	00100002 	.word	0x00100002
 8002ce8:	ffff0000 	.word	0xffff0000
 8002cec:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cfe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	691a      	ldr	r2, [r3, #16]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d0a:	b2d2      	uxtb	r2, r2
 8002d0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d12:	1c5a      	adds	r2, r3, #1
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	b29a      	uxth	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	3b01      	subs	r3, #1
 8002d2c:	b29a      	uxth	r2, r3
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	691a      	ldr	r2, [r3, #16]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d3c:	b2d2      	uxtb	r2, r2
 8002d3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d44:	1c5a      	adds	r2, r3, #1
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	b29a      	uxth	r2, r3
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	3b01      	subs	r3, #1
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002d64:	e0c4      	b.n	8002ef0 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d68:	9300      	str	r3, [sp, #0]
 8002d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	496c      	ldr	r1, [pc, #432]	@ (8002f20 <HAL_I2C_Master_Receive+0x460>)
 8002d70:	68f8      	ldr	r0, [r7, #12]
 8002d72:	f000 fb55 	bl	8003420 <I2C_WaitOnFlagUntilTimeout>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d001      	beq.n	8002d80 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e0cb      	b.n	8002f18 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	691a      	ldr	r2, [r3, #16]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d9a:	b2d2      	uxtb	r2, r2
 8002d9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da2:	1c5a      	adds	r2, r3, #1
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dac:	3b01      	subs	r3, #1
 8002dae:	b29a      	uxth	r2, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	b29a      	uxth	r2, r3
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc4:	9300      	str	r3, [sp, #0]
 8002dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dc8:	2200      	movs	r2, #0
 8002dca:	4955      	ldr	r1, [pc, #340]	@ (8002f20 <HAL_I2C_Master_Receive+0x460>)
 8002dcc:	68f8      	ldr	r0, [r7, #12]
 8002dce:	f000 fb27 	bl	8003420 <I2C_WaitOnFlagUntilTimeout>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d001      	beq.n	8002ddc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e09d      	b.n	8002f18 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002dea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	691a      	ldr	r2, [r3, #16]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df6:	b2d2      	uxtb	r2, r2
 8002df8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dfe:	1c5a      	adds	r2, r3, #1
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e08:	3b01      	subs	r3, #1
 8002e0a:	b29a      	uxth	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	3b01      	subs	r3, #1
 8002e18:	b29a      	uxth	r2, r3
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	691a      	ldr	r2, [r3, #16]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e28:	b2d2      	uxtb	r2, r2
 8002e2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e30:	1c5a      	adds	r2, r3, #1
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	b29a      	uxth	r2, r3
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002e50:	e04e      	b.n	8002ef0 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e54:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002e56:	68f8      	ldr	r0, [r7, #12]
 8002e58:	f000 fc8c 	bl	8003774 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e058      	b.n	8002f18 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	691a      	ldr	r2, [r3, #16]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e70:	b2d2      	uxtb	r2, r2
 8002e72:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e78:	1c5a      	adds	r2, r3, #1
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e82:	3b01      	subs	r3, #1
 8002e84:	b29a      	uxth	r2, r3
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	3b01      	subs	r3, #1
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	f003 0304 	and.w	r3, r3, #4
 8002ea2:	2b04      	cmp	r3, #4
 8002ea4:	d124      	bne.n	8002ef0 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eaa:	2b03      	cmp	r3, #3
 8002eac:	d107      	bne.n	8002ebe <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ebc:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	691a      	ldr	r2, [r3, #16]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec8:	b2d2      	uxtb	r2, r2
 8002eca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed0:	1c5a      	adds	r2, r3, #1
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eda:	3b01      	subs	r3, #1
 8002edc:	b29a      	uxth	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	3b01      	subs	r3, #1
 8002eea:	b29a      	uxth	r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	f47f aeb6 	bne.w	8002c66 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2220      	movs	r2, #32
 8002efe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2200      	movs	r2, #0
 8002f06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002f12:	2300      	movs	r3, #0
 8002f14:	e000      	b.n	8002f18 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002f16:	2302      	movs	r3, #2
  }
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3728      	adds	r7, #40	@ 0x28
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	00010004 	.word	0x00010004

08002f24 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b08a      	sub	sp, #40	@ 0x28
 8002f28:	af02      	add	r7, sp, #8
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	607a      	str	r2, [r7, #4]
 8002f2e:	603b      	str	r3, [r7, #0]
 8002f30:	460b      	mov	r3, r1
 8002f32:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002f34:	f7ff f8a6 	bl	8002084 <HAL_GetTick>
 8002f38:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b20      	cmp	r3, #32
 8002f48:	f040 8111 	bne.w	800316e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	9300      	str	r3, [sp, #0]
 8002f50:	2319      	movs	r3, #25
 8002f52:	2201      	movs	r2, #1
 8002f54:	4988      	ldr	r1, [pc, #544]	@ (8003178 <HAL_I2C_IsDeviceReady+0x254>)
 8002f56:	68f8      	ldr	r0, [r7, #12]
 8002f58:	f000 fa62 	bl	8003420 <I2C_WaitOnFlagUntilTimeout>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002f62:	2302      	movs	r3, #2
 8002f64:	e104      	b.n	8003170 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d101      	bne.n	8002f74 <HAL_I2C_IsDeviceReady+0x50>
 8002f70:	2302      	movs	r3, #2
 8002f72:	e0fd      	b.n	8003170 <HAL_I2C_IsDeviceReady+0x24c>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d007      	beq.n	8002f9a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f042 0201 	orr.w	r2, r2, #1
 8002f98:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002fa8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2224      	movs	r2, #36	@ 0x24
 8002fae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	4a70      	ldr	r2, [pc, #448]	@ (800317c <HAL_I2C_IsDeviceReady+0x258>)
 8002fbc:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002fcc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002fce:	69fb      	ldr	r3, [r7, #28]
 8002fd0:	9300      	str	r3, [sp, #0]
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f000 fa20 	bl	8003420 <I2C_WaitOnFlagUntilTimeout>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d00d      	beq.n	8003002 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ff0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ff4:	d103      	bne.n	8002ffe <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ffc:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e0b6      	b.n	8003170 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003002:	897b      	ldrh	r3, [r7, #10]
 8003004:	b2db      	uxtb	r3, r3
 8003006:	461a      	mov	r2, r3
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003010:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003012:	f7ff f837 	bl	8002084 <HAL_GetTick>
 8003016:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	695b      	ldr	r3, [r3, #20]
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b02      	cmp	r3, #2
 8003024:	bf0c      	ite	eq
 8003026:	2301      	moveq	r3, #1
 8003028:	2300      	movne	r3, #0
 800302a:	b2db      	uxtb	r3, r3
 800302c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	695b      	ldr	r3, [r3, #20]
 8003034:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003038:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800303c:	bf0c      	ite	eq
 800303e:	2301      	moveq	r3, #1
 8003040:	2300      	movne	r3, #0
 8003042:	b2db      	uxtb	r3, r3
 8003044:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003046:	e025      	b.n	8003094 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003048:	f7ff f81c 	bl	8002084 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	683a      	ldr	r2, [r7, #0]
 8003054:	429a      	cmp	r2, r3
 8003056:	d302      	bcc.n	800305e <HAL_I2C_IsDeviceReady+0x13a>
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d103      	bne.n	8003066 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	22a0      	movs	r2, #160	@ 0xa0
 8003062:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	695b      	ldr	r3, [r3, #20]
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	2b02      	cmp	r3, #2
 8003072:	bf0c      	ite	eq
 8003074:	2301      	moveq	r3, #1
 8003076:	2300      	movne	r3, #0
 8003078:	b2db      	uxtb	r3, r3
 800307a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	695b      	ldr	r3, [r3, #20]
 8003082:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003086:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800308a:	bf0c      	ite	eq
 800308c:	2301      	moveq	r3, #1
 800308e:	2300      	movne	r3, #0
 8003090:	b2db      	uxtb	r3, r3
 8003092:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800309a:	b2db      	uxtb	r3, r3
 800309c:	2ba0      	cmp	r3, #160	@ 0xa0
 800309e:	d005      	beq.n	80030ac <HAL_I2C_IsDeviceReady+0x188>
 80030a0:	7dfb      	ldrb	r3, [r7, #23]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d102      	bne.n	80030ac <HAL_I2C_IsDeviceReady+0x188>
 80030a6:	7dbb      	ldrb	r3, [r7, #22]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d0cd      	beq.n	8003048 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2220      	movs	r2, #32
 80030b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d129      	bne.n	8003116 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030d0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030d2:	2300      	movs	r3, #0
 80030d4:	613b      	str	r3, [r7, #16]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	695b      	ldr	r3, [r3, #20]
 80030dc:	613b      	str	r3, [r7, #16]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	613b      	str	r3, [r7, #16]
 80030e6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	9300      	str	r3, [sp, #0]
 80030ec:	2319      	movs	r3, #25
 80030ee:	2201      	movs	r2, #1
 80030f0:	4921      	ldr	r1, [pc, #132]	@ (8003178 <HAL_I2C_IsDeviceReady+0x254>)
 80030f2:	68f8      	ldr	r0, [r7, #12]
 80030f4:	f000 f994 	bl	8003420 <I2C_WaitOnFlagUntilTimeout>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e036      	b.n	8003170 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2220      	movs	r2, #32
 8003106:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8003112:	2300      	movs	r3, #0
 8003114:	e02c      	b.n	8003170 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003124:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800312e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	9300      	str	r3, [sp, #0]
 8003134:	2319      	movs	r3, #25
 8003136:	2201      	movs	r2, #1
 8003138:	490f      	ldr	r1, [pc, #60]	@ (8003178 <HAL_I2C_IsDeviceReady+0x254>)
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	f000 f970 	bl	8003420 <I2C_WaitOnFlagUntilTimeout>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e012      	b.n	8003170 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	3301      	adds	r3, #1
 800314e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	429a      	cmp	r2, r3
 8003156:	f4ff af32 	bcc.w	8002fbe <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2220      	movs	r2, #32
 800315e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e000      	b.n	8003170 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800316e:	2302      	movs	r3, #2
  }
}
 8003170:	4618      	mov	r0, r3
 8003172:	3720      	adds	r7, #32
 8003174:	46bd      	mov	sp, r7
 8003176:	bd80      	pop	{r7, pc}
 8003178:	00100002 	.word	0x00100002
 800317c:	ffff0000 	.word	0xffff0000

08003180 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b088      	sub	sp, #32
 8003184:	af02      	add	r7, sp, #8
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	607a      	str	r2, [r7, #4]
 800318a:	603b      	str	r3, [r7, #0]
 800318c:	460b      	mov	r3, r1
 800318e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003194:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	2b08      	cmp	r3, #8
 800319a:	d006      	beq.n	80031aa <I2C_MasterRequestWrite+0x2a>
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d003      	beq.n	80031aa <I2C_MasterRequestWrite+0x2a>
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80031a8:	d108      	bne.n	80031bc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80031b8:	601a      	str	r2, [r3, #0]
 80031ba:	e00b      	b.n	80031d4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031c0:	2b12      	cmp	r3, #18
 80031c2:	d107      	bne.n	80031d4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80031d2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	9300      	str	r3, [sp, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80031e0:	68f8      	ldr	r0, [r7, #12]
 80031e2:	f000 f91d 	bl	8003420 <I2C_WaitOnFlagUntilTimeout>
 80031e6:	4603      	mov	r3, r0
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d00d      	beq.n	8003208 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031fa:	d103      	bne.n	8003204 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003202:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e035      	b.n	8003274 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	691b      	ldr	r3, [r3, #16]
 800320c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003210:	d108      	bne.n	8003224 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003212:	897b      	ldrh	r3, [r7, #10]
 8003214:	b2db      	uxtb	r3, r3
 8003216:	461a      	mov	r2, r3
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003220:	611a      	str	r2, [r3, #16]
 8003222:	e01b      	b.n	800325c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003224:	897b      	ldrh	r3, [r7, #10]
 8003226:	11db      	asrs	r3, r3, #7
 8003228:	b2db      	uxtb	r3, r3
 800322a:	f003 0306 	and.w	r3, r3, #6
 800322e:	b2db      	uxtb	r3, r3
 8003230:	f063 030f 	orn	r3, r3, #15
 8003234:	b2da      	uxtb	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	490e      	ldr	r1, [pc, #56]	@ (800327c <I2C_MasterRequestWrite+0xfc>)
 8003242:	68f8      	ldr	r0, [r7, #12]
 8003244:	f000 f966 	bl	8003514 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d001      	beq.n	8003252 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e010      	b.n	8003274 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003252:	897b      	ldrh	r3, [r7, #10]
 8003254:	b2da      	uxtb	r2, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	687a      	ldr	r2, [r7, #4]
 8003260:	4907      	ldr	r1, [pc, #28]	@ (8003280 <I2C_MasterRequestWrite+0x100>)
 8003262:	68f8      	ldr	r0, [r7, #12]
 8003264:	f000 f956 	bl	8003514 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003268:	4603      	mov	r3, r0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d001      	beq.n	8003272 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e000      	b.n	8003274 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003272:	2300      	movs	r3, #0
}
 8003274:	4618      	mov	r0, r3
 8003276:	3718      	adds	r7, #24
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}
 800327c:	00010008 	.word	0x00010008
 8003280:	00010002 	.word	0x00010002

08003284 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b088      	sub	sp, #32
 8003288:	af02      	add	r7, sp, #8
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	607a      	str	r2, [r7, #4]
 800328e:	603b      	str	r3, [r7, #0]
 8003290:	460b      	mov	r3, r1
 8003292:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003298:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80032a8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	2b08      	cmp	r3, #8
 80032ae:	d006      	beq.n	80032be <I2C_MasterRequestRead+0x3a>
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d003      	beq.n	80032be <I2C_MasterRequestRead+0x3a>
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80032bc:	d108      	bne.n	80032d0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032cc:	601a      	str	r2, [r3, #0]
 80032ce:	e00b      	b.n	80032e8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d4:	2b11      	cmp	r3, #17
 80032d6:	d107      	bne.n	80032e8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032e6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	9300      	str	r3, [sp, #0]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80032f4:	68f8      	ldr	r0, [r7, #12]
 80032f6:	f000 f893 	bl	8003420 <I2C_WaitOnFlagUntilTimeout>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d00d      	beq.n	800331c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800330a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800330e:	d103      	bne.n	8003318 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003316:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e079      	b.n	8003410 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003324:	d108      	bne.n	8003338 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003326:	897b      	ldrh	r3, [r7, #10]
 8003328:	b2db      	uxtb	r3, r3
 800332a:	f043 0301 	orr.w	r3, r3, #1
 800332e:	b2da      	uxtb	r2, r3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	611a      	str	r2, [r3, #16]
 8003336:	e05f      	b.n	80033f8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003338:	897b      	ldrh	r3, [r7, #10]
 800333a:	11db      	asrs	r3, r3, #7
 800333c:	b2db      	uxtb	r3, r3
 800333e:	f003 0306 	and.w	r3, r3, #6
 8003342:	b2db      	uxtb	r3, r3
 8003344:	f063 030f 	orn	r3, r3, #15
 8003348:	b2da      	uxtb	r2, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	4930      	ldr	r1, [pc, #192]	@ (8003418 <I2C_MasterRequestRead+0x194>)
 8003356:	68f8      	ldr	r0, [r7, #12]
 8003358:	f000 f8dc 	bl	8003514 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d001      	beq.n	8003366 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e054      	b.n	8003410 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003366:	897b      	ldrh	r3, [r7, #10]
 8003368:	b2da      	uxtb	r2, r3
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	4929      	ldr	r1, [pc, #164]	@ (800341c <I2C_MasterRequestRead+0x198>)
 8003376:	68f8      	ldr	r0, [r7, #12]
 8003378:	f000 f8cc 	bl	8003514 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e044      	b.n	8003410 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003386:	2300      	movs	r3, #0
 8003388:	613b      	str	r3, [r7, #16]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	613b      	str	r3, [r7, #16]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	613b      	str	r3, [r7, #16]
 800339a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033aa:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	9300      	str	r3, [sp, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80033b8:	68f8      	ldr	r0, [r7, #12]
 80033ba:	f000 f831 	bl	8003420 <I2C_WaitOnFlagUntilTimeout>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00d      	beq.n	80033e0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033d2:	d103      	bne.n	80033dc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033da:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80033dc:	2303      	movs	r3, #3
 80033de:	e017      	b.n	8003410 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80033e0:	897b      	ldrh	r3, [r7, #10]
 80033e2:	11db      	asrs	r3, r3, #7
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	f003 0306 	and.w	r3, r3, #6
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	f063 030e 	orn	r3, r3, #14
 80033f0:	b2da      	uxtb	r2, r3
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	4907      	ldr	r1, [pc, #28]	@ (800341c <I2C_MasterRequestRead+0x198>)
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	f000 f888 	bl	8003514 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d001      	beq.n	800340e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e000      	b.n	8003410 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800340e:	2300      	movs	r3, #0
}
 8003410:	4618      	mov	r0, r3
 8003412:	3718      	adds	r7, #24
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	00010008 	.word	0x00010008
 800341c:	00010002 	.word	0x00010002

08003420 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	603b      	str	r3, [r7, #0]
 800342c:	4613      	mov	r3, r2
 800342e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003430:	e048      	b.n	80034c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003438:	d044      	beq.n	80034c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800343a:	f7fe fe23 	bl	8002084 <HAL_GetTick>
 800343e:	4602      	mov	r2, r0
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	683a      	ldr	r2, [r7, #0]
 8003446:	429a      	cmp	r2, r3
 8003448:	d302      	bcc.n	8003450 <I2C_WaitOnFlagUntilTimeout+0x30>
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d139      	bne.n	80034c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	0c1b      	lsrs	r3, r3, #16
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2b01      	cmp	r3, #1
 8003458:	d10d      	bne.n	8003476 <I2C_WaitOnFlagUntilTimeout+0x56>
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	695b      	ldr	r3, [r3, #20]
 8003460:	43da      	mvns	r2, r3
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	4013      	ands	r3, r2
 8003466:	b29b      	uxth	r3, r3
 8003468:	2b00      	cmp	r3, #0
 800346a:	bf0c      	ite	eq
 800346c:	2301      	moveq	r3, #1
 800346e:	2300      	movne	r3, #0
 8003470:	b2db      	uxtb	r3, r3
 8003472:	461a      	mov	r2, r3
 8003474:	e00c      	b.n	8003490 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	43da      	mvns	r2, r3
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	4013      	ands	r3, r2
 8003482:	b29b      	uxth	r3, r3
 8003484:	2b00      	cmp	r3, #0
 8003486:	bf0c      	ite	eq
 8003488:	2301      	moveq	r3, #1
 800348a:	2300      	movne	r3, #0
 800348c:	b2db      	uxtb	r3, r3
 800348e:	461a      	mov	r2, r3
 8003490:	79fb      	ldrb	r3, [r7, #7]
 8003492:	429a      	cmp	r2, r3
 8003494:	d116      	bne.n	80034c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2220      	movs	r2, #32
 80034a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b0:	f043 0220 	orr.w	r2, r3, #32
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e023      	b.n	800350c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	0c1b      	lsrs	r3, r3, #16
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d10d      	bne.n	80034ea <I2C_WaitOnFlagUntilTimeout+0xca>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	695b      	ldr	r3, [r3, #20]
 80034d4:	43da      	mvns	r2, r3
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	4013      	ands	r3, r2
 80034da:	b29b      	uxth	r3, r3
 80034dc:	2b00      	cmp	r3, #0
 80034de:	bf0c      	ite	eq
 80034e0:	2301      	moveq	r3, #1
 80034e2:	2300      	movne	r3, #0
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	461a      	mov	r2, r3
 80034e8:	e00c      	b.n	8003504 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	699b      	ldr	r3, [r3, #24]
 80034f0:	43da      	mvns	r2, r3
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	4013      	ands	r3, r2
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	bf0c      	ite	eq
 80034fc:	2301      	moveq	r3, #1
 80034fe:	2300      	movne	r3, #0
 8003500:	b2db      	uxtb	r3, r3
 8003502:	461a      	mov	r2, r3
 8003504:	79fb      	ldrb	r3, [r7, #7]
 8003506:	429a      	cmp	r2, r3
 8003508:	d093      	beq.n	8003432 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	3710      	adds	r7, #16
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b084      	sub	sp, #16
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	607a      	str	r2, [r7, #4]
 8003520:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003522:	e071      	b.n	8003608 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800352e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003532:	d123      	bne.n	800357c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003542:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800354c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2220      	movs	r2, #32
 8003558:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003568:	f043 0204 	orr.w	r2, r3, #4
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e067      	b.n	800364c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003582:	d041      	beq.n	8003608 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003584:	f7fe fd7e 	bl	8002084 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	429a      	cmp	r2, r3
 8003592:	d302      	bcc.n	800359a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d136      	bne.n	8003608 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	0c1b      	lsrs	r3, r3, #16
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d10c      	bne.n	80035be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	43da      	mvns	r2, r3
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	4013      	ands	r3, r2
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	bf14      	ite	ne
 80035b6:	2301      	movne	r3, #1
 80035b8:	2300      	moveq	r3, #0
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	e00b      	b.n	80035d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	43da      	mvns	r2, r3
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	4013      	ands	r3, r2
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	bf14      	ite	ne
 80035d0:	2301      	movne	r3, #1
 80035d2:	2300      	moveq	r3, #0
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d016      	beq.n	8003608 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2200      	movs	r2, #0
 80035de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2220      	movs	r2, #32
 80035e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f4:	f043 0220 	orr.w	r2, r3, #32
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e021      	b.n	800364c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	0c1b      	lsrs	r3, r3, #16
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b01      	cmp	r3, #1
 8003610:	d10c      	bne.n	800362c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	695b      	ldr	r3, [r3, #20]
 8003618:	43da      	mvns	r2, r3
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	4013      	ands	r3, r2
 800361e:	b29b      	uxth	r3, r3
 8003620:	2b00      	cmp	r3, #0
 8003622:	bf14      	ite	ne
 8003624:	2301      	movne	r3, #1
 8003626:	2300      	moveq	r3, #0
 8003628:	b2db      	uxtb	r3, r3
 800362a:	e00b      	b.n	8003644 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	43da      	mvns	r2, r3
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	4013      	ands	r3, r2
 8003638:	b29b      	uxth	r3, r3
 800363a:	2b00      	cmp	r3, #0
 800363c:	bf14      	ite	ne
 800363e:	2301      	movne	r3, #1
 8003640:	2300      	moveq	r3, #0
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2b00      	cmp	r3, #0
 8003646:	f47f af6d 	bne.w	8003524 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800364a:	2300      	movs	r3, #0
}
 800364c:	4618      	mov	r0, r3
 800364e:	3710      	adds	r7, #16
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	60f8      	str	r0, [r7, #12]
 800365c:	60b9      	str	r1, [r7, #8]
 800365e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003660:	e034      	b.n	80036cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003662:	68f8      	ldr	r0, [r7, #12]
 8003664:	f000 f8e3 	bl	800382e <I2C_IsAcknowledgeFailed>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e034      	b.n	80036dc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003678:	d028      	beq.n	80036cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800367a:	f7fe fd03 	bl	8002084 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	68ba      	ldr	r2, [r7, #8]
 8003686:	429a      	cmp	r2, r3
 8003688:	d302      	bcc.n	8003690 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d11d      	bne.n	80036cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800369a:	2b80      	cmp	r3, #128	@ 0x80
 800369c:	d016      	beq.n	80036cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2200      	movs	r2, #0
 80036a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2220      	movs	r2, #32
 80036a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b8:	f043 0220 	orr.w	r2, r3, #32
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e007      	b.n	80036dc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036d6:	2b80      	cmp	r3, #128	@ 0x80
 80036d8:	d1c3      	bne.n	8003662 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80036da:	2300      	movs	r3, #0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3710      	adds	r7, #16
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036f0:	e034      	b.n	800375c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036f2:	68f8      	ldr	r0, [r7, #12]
 80036f4:	f000 f89b 	bl	800382e <I2C_IsAcknowledgeFailed>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d001      	beq.n	8003702 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e034      	b.n	800376c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003708:	d028      	beq.n	800375c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800370a:	f7fe fcbb 	bl	8002084 <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	68ba      	ldr	r2, [r7, #8]
 8003716:	429a      	cmp	r2, r3
 8003718:	d302      	bcc.n	8003720 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d11d      	bne.n	800375c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	695b      	ldr	r3, [r3, #20]
 8003726:	f003 0304 	and.w	r3, r3, #4
 800372a:	2b04      	cmp	r3, #4
 800372c:	d016      	beq.n	800375c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2200      	movs	r2, #0
 8003732:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2220      	movs	r2, #32
 8003738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003748:	f043 0220 	orr.w	r2, r3, #32
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e007      	b.n	800376c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	695b      	ldr	r3, [r3, #20]
 8003762:	f003 0304 	and.w	r3, r3, #4
 8003766:	2b04      	cmp	r3, #4
 8003768:	d1c3      	bne.n	80036f2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	3710      	adds	r7, #16
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	60b9      	str	r1, [r7, #8]
 800377e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003780:	e049      	b.n	8003816 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	695b      	ldr	r3, [r3, #20]
 8003788:	f003 0310 	and.w	r3, r3, #16
 800378c:	2b10      	cmp	r3, #16
 800378e:	d119      	bne.n	80037c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f06f 0210 	mvn.w	r2, #16
 8003798:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2200      	movs	r2, #0
 800379e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2220      	movs	r2, #32
 80037a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e030      	b.n	8003826 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037c4:	f7fe fc5e 	bl	8002084 <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	68ba      	ldr	r2, [r7, #8]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d302      	bcc.n	80037da <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d11d      	bne.n	8003816 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	695b      	ldr	r3, [r3, #20]
 80037e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037e4:	2b40      	cmp	r3, #64	@ 0x40
 80037e6:	d016      	beq.n	8003816 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2200      	movs	r2, #0
 80037ec:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2220      	movs	r2, #32
 80037f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003802:	f043 0220 	orr.w	r2, r3, #32
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2200      	movs	r2, #0
 800380e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e007      	b.n	8003826 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	695b      	ldr	r3, [r3, #20]
 800381c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003820:	2b40      	cmp	r3, #64	@ 0x40
 8003822:	d1ae      	bne.n	8003782 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	3710      	adds	r7, #16
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}

0800382e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800382e:	b480      	push	{r7}
 8003830:	b083      	sub	sp, #12
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	695b      	ldr	r3, [r3, #20]
 800383c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003840:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003844:	d11b      	bne.n	800387e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800384e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2220      	movs	r2, #32
 800385a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800386a:	f043 0204 	orr.w	r2, r3, #4
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e000      	b.n	8003880 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d101      	bne.n	80038a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e0cc      	b.n	8003a3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038a0:	4b68      	ldr	r3, [pc, #416]	@ (8003a44 <HAL_RCC_ClockConfig+0x1b8>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 030f 	and.w	r3, r3, #15
 80038a8:	683a      	ldr	r2, [r7, #0]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d90c      	bls.n	80038c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ae:	4b65      	ldr	r3, [pc, #404]	@ (8003a44 <HAL_RCC_ClockConfig+0x1b8>)
 80038b0:	683a      	ldr	r2, [r7, #0]
 80038b2:	b2d2      	uxtb	r2, r2
 80038b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038b6:	4b63      	ldr	r3, [pc, #396]	@ (8003a44 <HAL_RCC_ClockConfig+0x1b8>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 030f 	and.w	r3, r3, #15
 80038be:	683a      	ldr	r2, [r7, #0]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d001      	beq.n	80038c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e0b8      	b.n	8003a3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0302 	and.w	r3, r3, #2
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d020      	beq.n	8003916 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0304 	and.w	r3, r3, #4
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d005      	beq.n	80038ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038e0:	4b59      	ldr	r3, [pc, #356]	@ (8003a48 <HAL_RCC_ClockConfig+0x1bc>)
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	4a58      	ldr	r2, [pc, #352]	@ (8003a48 <HAL_RCC_ClockConfig+0x1bc>)
 80038e6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80038ea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0308 	and.w	r3, r3, #8
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d005      	beq.n	8003904 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038f8:	4b53      	ldr	r3, [pc, #332]	@ (8003a48 <HAL_RCC_ClockConfig+0x1bc>)
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	4a52      	ldr	r2, [pc, #328]	@ (8003a48 <HAL_RCC_ClockConfig+0x1bc>)
 80038fe:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003902:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003904:	4b50      	ldr	r3, [pc, #320]	@ (8003a48 <HAL_RCC_ClockConfig+0x1bc>)
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	494d      	ldr	r1, [pc, #308]	@ (8003a48 <HAL_RCC_ClockConfig+0x1bc>)
 8003912:	4313      	orrs	r3, r2
 8003914:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	2b00      	cmp	r3, #0
 8003920:	d044      	beq.n	80039ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	2b01      	cmp	r3, #1
 8003928:	d107      	bne.n	800393a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800392a:	4b47      	ldr	r3, [pc, #284]	@ (8003a48 <HAL_RCC_ClockConfig+0x1bc>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d119      	bne.n	800396a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e07f      	b.n	8003a3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	2b02      	cmp	r3, #2
 8003940:	d003      	beq.n	800394a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003946:	2b03      	cmp	r3, #3
 8003948:	d107      	bne.n	800395a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800394a:	4b3f      	ldr	r3, [pc, #252]	@ (8003a48 <HAL_RCC_ClockConfig+0x1bc>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d109      	bne.n	800396a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e06f      	b.n	8003a3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800395a:	4b3b      	ldr	r3, [pc, #236]	@ (8003a48 <HAL_RCC_ClockConfig+0x1bc>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0302 	and.w	r3, r3, #2
 8003962:	2b00      	cmp	r3, #0
 8003964:	d101      	bne.n	800396a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e067      	b.n	8003a3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800396a:	4b37      	ldr	r3, [pc, #220]	@ (8003a48 <HAL_RCC_ClockConfig+0x1bc>)
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f023 0203 	bic.w	r2, r3, #3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	4934      	ldr	r1, [pc, #208]	@ (8003a48 <HAL_RCC_ClockConfig+0x1bc>)
 8003978:	4313      	orrs	r3, r2
 800397a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800397c:	f7fe fb82 	bl	8002084 <HAL_GetTick>
 8003980:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003982:	e00a      	b.n	800399a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003984:	f7fe fb7e 	bl	8002084 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003992:	4293      	cmp	r3, r2
 8003994:	d901      	bls.n	800399a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e04f      	b.n	8003a3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800399a:	4b2b      	ldr	r3, [pc, #172]	@ (8003a48 <HAL_RCC_ClockConfig+0x1bc>)
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	f003 020c 	and.w	r2, r3, #12
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d1eb      	bne.n	8003984 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039ac:	4b25      	ldr	r3, [pc, #148]	@ (8003a44 <HAL_RCC_ClockConfig+0x1b8>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 030f 	and.w	r3, r3, #15
 80039b4:	683a      	ldr	r2, [r7, #0]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d20c      	bcs.n	80039d4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ba:	4b22      	ldr	r3, [pc, #136]	@ (8003a44 <HAL_RCC_ClockConfig+0x1b8>)
 80039bc:	683a      	ldr	r2, [r7, #0]
 80039be:	b2d2      	uxtb	r2, r2
 80039c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039c2:	4b20      	ldr	r3, [pc, #128]	@ (8003a44 <HAL_RCC_ClockConfig+0x1b8>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 030f 	and.w	r3, r3, #15
 80039ca:	683a      	ldr	r2, [r7, #0]
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d001      	beq.n	80039d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e032      	b.n	8003a3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0304 	and.w	r3, r3, #4
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d008      	beq.n	80039f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039e0:	4b19      	ldr	r3, [pc, #100]	@ (8003a48 <HAL_RCC_ClockConfig+0x1bc>)
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	4916      	ldr	r1, [pc, #88]	@ (8003a48 <HAL_RCC_ClockConfig+0x1bc>)
 80039ee:	4313      	orrs	r3, r2
 80039f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0308 	and.w	r3, r3, #8
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d009      	beq.n	8003a12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039fe:	4b12      	ldr	r3, [pc, #72]	@ (8003a48 <HAL_RCC_ClockConfig+0x1bc>)
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	00db      	lsls	r3, r3, #3
 8003a0c:	490e      	ldr	r1, [pc, #56]	@ (8003a48 <HAL_RCC_ClockConfig+0x1bc>)
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a12:	f000 f855 	bl	8003ac0 <HAL_RCC_GetSysClockFreq>
 8003a16:	4602      	mov	r2, r0
 8003a18:	4b0b      	ldr	r3, [pc, #44]	@ (8003a48 <HAL_RCC_ClockConfig+0x1bc>)
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	091b      	lsrs	r3, r3, #4
 8003a1e:	f003 030f 	and.w	r3, r3, #15
 8003a22:	490a      	ldr	r1, [pc, #40]	@ (8003a4c <HAL_RCC_ClockConfig+0x1c0>)
 8003a24:	5ccb      	ldrb	r3, [r1, r3]
 8003a26:	fa22 f303 	lsr.w	r3, r2, r3
 8003a2a:	4a09      	ldr	r2, [pc, #36]	@ (8003a50 <HAL_RCC_ClockConfig+0x1c4>)
 8003a2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003a2e:	4b09      	ldr	r3, [pc, #36]	@ (8003a54 <HAL_RCC_ClockConfig+0x1c8>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7fe fae2 	bl	8001ffc <HAL_InitTick>

  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3710      	adds	r7, #16
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	40023c00 	.word	0x40023c00
 8003a48:	40023800 	.word	0x40023800
 8003a4c:	0800af78 	.word	0x0800af78
 8003a50:	20000010 	.word	0x20000010
 8003a54:	20000014 	.word	0x20000014

08003a58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a5c:	4b03      	ldr	r3, [pc, #12]	@ (8003a6c <HAL_RCC_GetHCLKFreq+0x14>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	20000010 	.word	0x20000010

08003a70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a74:	f7ff fff0 	bl	8003a58 <HAL_RCC_GetHCLKFreq>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	4b05      	ldr	r3, [pc, #20]	@ (8003a90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	0a9b      	lsrs	r3, r3, #10
 8003a80:	f003 0307 	and.w	r3, r3, #7
 8003a84:	4903      	ldr	r1, [pc, #12]	@ (8003a94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a86:	5ccb      	ldrb	r3, [r1, r3]
 8003a88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	40023800 	.word	0x40023800
 8003a94:	0800af88 	.word	0x0800af88

08003a98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a9c:	f7ff ffdc 	bl	8003a58 <HAL_RCC_GetHCLKFreq>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	4b05      	ldr	r3, [pc, #20]	@ (8003ab8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	0b5b      	lsrs	r3, r3, #13
 8003aa8:	f003 0307 	and.w	r3, r3, #7
 8003aac:	4903      	ldr	r1, [pc, #12]	@ (8003abc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003aae:	5ccb      	ldrb	r3, [r1, r3]
 8003ab0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	40023800 	.word	0x40023800
 8003abc:	0800af88 	.word	0x0800af88

08003ac0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ac0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ac4:	b0a6      	sub	sp, #152	@ 0x98
 8003ac6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 8003ada:	2300      	movs	r3, #0
 8003adc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ae6:	4bc8      	ldr	r3, [pc, #800]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x348>)
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f003 030c 	and.w	r3, r3, #12
 8003aee:	2b0c      	cmp	r3, #12
 8003af0:	f200 817e 	bhi.w	8003df0 <HAL_RCC_GetSysClockFreq+0x330>
 8003af4:	a201      	add	r2, pc, #4	@ (adr r2, 8003afc <HAL_RCC_GetSysClockFreq+0x3c>)
 8003af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003afa:	bf00      	nop
 8003afc:	08003b31 	.word	0x08003b31
 8003b00:	08003df1 	.word	0x08003df1
 8003b04:	08003df1 	.word	0x08003df1
 8003b08:	08003df1 	.word	0x08003df1
 8003b0c:	08003b39 	.word	0x08003b39
 8003b10:	08003df1 	.word	0x08003df1
 8003b14:	08003df1 	.word	0x08003df1
 8003b18:	08003df1 	.word	0x08003df1
 8003b1c:	08003b41 	.word	0x08003b41
 8003b20:	08003df1 	.word	0x08003df1
 8003b24:	08003df1 	.word	0x08003df1
 8003b28:	08003df1 	.word	0x08003df1
 8003b2c:	08003cab 	.word	0x08003cab
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b30:	4bb6      	ldr	r3, [pc, #728]	@ (8003e0c <HAL_RCC_GetSysClockFreq+0x34c>)
 8003b32:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003b36:	e15f      	b.n	8003df8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b38:	4bb5      	ldr	r3, [pc, #724]	@ (8003e10 <HAL_RCC_GetSysClockFreq+0x350>)
 8003b3a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003b3e:	e15b      	b.n	8003df8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b40:	4bb1      	ldr	r3, [pc, #708]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x348>)
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b48:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b4c:	4bae      	ldr	r3, [pc, #696]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x348>)
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d031      	beq.n	8003bbc <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b58:	4bab      	ldr	r3, [pc, #684]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x348>)
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	099b      	lsrs	r3, r3, #6
 8003b5e:	2200      	movs	r2, #0
 8003b60:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b62:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003b64:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b6a:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003b70:	4ba7      	ldr	r3, [pc, #668]	@ (8003e10 <HAL_RCC_GetSysClockFreq+0x350>)
 8003b72:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003b76:	462a      	mov	r2, r5
 8003b78:	fb03 f202 	mul.w	r2, r3, r2
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	4621      	mov	r1, r4
 8003b80:	fb01 f303 	mul.w	r3, r1, r3
 8003b84:	4413      	add	r3, r2
 8003b86:	4aa2      	ldr	r2, [pc, #648]	@ (8003e10 <HAL_RCC_GetSysClockFreq+0x350>)
 8003b88:	4621      	mov	r1, r4
 8003b8a:	fba1 1202 	umull	r1, r2, r1, r2
 8003b8e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003b90:	460a      	mov	r2, r1
 8003b92:	67ba      	str	r2, [r7, #120]	@ 0x78
 8003b94:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003b96:	4413      	add	r3, r2
 8003b98:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003b9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003ba2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003ba4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003ba8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8003bac:	f7fd f81c 	bl	8000be8 <__aeabi_uldivmod>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	460b      	mov	r3, r1
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003bba:	e064      	b.n	8003c86 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bbc:	4b92      	ldr	r3, [pc, #584]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x348>)
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	099b      	lsrs	r3, r3, #6
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	653b      	str	r3, [r7, #80]	@ 0x50
 8003bc6:	657a      	str	r2, [r7, #84]	@ 0x54
 8003bc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003bca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bce:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bd4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8003bd8:	4622      	mov	r2, r4
 8003bda:	462b      	mov	r3, r5
 8003bdc:	f04f 0000 	mov.w	r0, #0
 8003be0:	f04f 0100 	mov.w	r1, #0
 8003be4:	0159      	lsls	r1, r3, #5
 8003be6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bea:	0150      	lsls	r0, r2, #5
 8003bec:	4602      	mov	r2, r0
 8003bee:	460b      	mov	r3, r1
 8003bf0:	4621      	mov	r1, r4
 8003bf2:	1a51      	subs	r1, r2, r1
 8003bf4:	6139      	str	r1, [r7, #16]
 8003bf6:	4629      	mov	r1, r5
 8003bf8:	eb63 0301 	sbc.w	r3, r3, r1
 8003bfc:	617b      	str	r3, [r7, #20]
 8003bfe:	f04f 0200 	mov.w	r2, #0
 8003c02:	f04f 0300 	mov.w	r3, #0
 8003c06:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c0a:	4659      	mov	r1, fp
 8003c0c:	018b      	lsls	r3, r1, #6
 8003c0e:	4651      	mov	r1, sl
 8003c10:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c14:	4651      	mov	r1, sl
 8003c16:	018a      	lsls	r2, r1, #6
 8003c18:	4651      	mov	r1, sl
 8003c1a:	ebb2 0801 	subs.w	r8, r2, r1
 8003c1e:	4659      	mov	r1, fp
 8003c20:	eb63 0901 	sbc.w	r9, r3, r1
 8003c24:	f04f 0200 	mov.w	r2, #0
 8003c28:	f04f 0300 	mov.w	r3, #0
 8003c2c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c30:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c34:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c38:	4690      	mov	r8, r2
 8003c3a:	4699      	mov	r9, r3
 8003c3c:	4623      	mov	r3, r4
 8003c3e:	eb18 0303 	adds.w	r3, r8, r3
 8003c42:	60bb      	str	r3, [r7, #8]
 8003c44:	462b      	mov	r3, r5
 8003c46:	eb49 0303 	adc.w	r3, r9, r3
 8003c4a:	60fb      	str	r3, [r7, #12]
 8003c4c:	f04f 0200 	mov.w	r2, #0
 8003c50:	f04f 0300 	mov.w	r3, #0
 8003c54:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c58:	4629      	mov	r1, r5
 8003c5a:	028b      	lsls	r3, r1, #10
 8003c5c:	4621      	mov	r1, r4
 8003c5e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c62:	4621      	mov	r1, r4
 8003c64:	028a      	lsls	r2, r1, #10
 8003c66:	4610      	mov	r0, r2
 8003c68:	4619      	mov	r1, r3
 8003c6a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c6e:	2200      	movs	r2, #0
 8003c70:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c72:	647a      	str	r2, [r7, #68]	@ 0x44
 8003c74:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003c78:	f7fc ffb6 	bl	8000be8 <__aeabi_uldivmod>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	460b      	mov	r3, r1
 8003c80:	4613      	mov	r3, r2
 8003c82:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003c86:	4b60      	ldr	r3, [pc, #384]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x348>)
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	0c1b      	lsrs	r3, r3, #16
 8003c8c:	f003 0303 	and.w	r3, r3, #3
 8003c90:	3301      	adds	r3, #1
 8003c92:	005b      	lsls	r3, r3, #1
 8003c94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8003c98:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003c9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003ca8:	e0a6      	b.n	8003df8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003caa:	4b57      	ldr	r3, [pc, #348]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x348>)
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003cb2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cb6:	4b54      	ldr	r3, [pc, #336]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x348>)
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d02a      	beq.n	8003d18 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cc2:	4b51      	ldr	r3, [pc, #324]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x348>)
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	099b      	lsrs	r3, r3, #6
 8003cc8:	2200      	movs	r2, #0
 8003cca:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ccc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cd0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003cd4:	2100      	movs	r1, #0
 8003cd6:	4b4e      	ldr	r3, [pc, #312]	@ (8003e10 <HAL_RCC_GetSysClockFreq+0x350>)
 8003cd8:	fb03 f201 	mul.w	r2, r3, r1
 8003cdc:	2300      	movs	r3, #0
 8003cde:	fb00 f303 	mul.w	r3, r0, r3
 8003ce2:	4413      	add	r3, r2
 8003ce4:	4a4a      	ldr	r2, [pc, #296]	@ (8003e10 <HAL_RCC_GetSysClockFreq+0x350>)
 8003ce6:	fba0 1202 	umull	r1, r2, r0, r2
 8003cea:	677a      	str	r2, [r7, #116]	@ 0x74
 8003cec:	460a      	mov	r2, r1
 8003cee:	673a      	str	r2, [r7, #112]	@ 0x70
 8003cf0:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003cf2:	4413      	add	r3, r2
 8003cf4:	677b      	str	r3, [r7, #116]	@ 0x74
 8003cf6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	633b      	str	r3, [r7, #48]	@ 0x30
 8003cfe:	637a      	str	r2, [r7, #52]	@ 0x34
 8003d00:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003d04:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8003d08:	f7fc ff6e 	bl	8000be8 <__aeabi_uldivmod>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	460b      	mov	r3, r1
 8003d10:	4613      	mov	r3, r2
 8003d12:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003d16:	e05b      	b.n	8003dd0 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d18:	4b3b      	ldr	r3, [pc, #236]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x348>)
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	099b      	lsrs	r3, r3, #6
 8003d1e:	2200      	movs	r2, #0
 8003d20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d2a:	623b      	str	r3, [r7, #32]
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d30:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003d34:	4642      	mov	r2, r8
 8003d36:	464b      	mov	r3, r9
 8003d38:	f04f 0000 	mov.w	r0, #0
 8003d3c:	f04f 0100 	mov.w	r1, #0
 8003d40:	0159      	lsls	r1, r3, #5
 8003d42:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d46:	0150      	lsls	r0, r2, #5
 8003d48:	4602      	mov	r2, r0
 8003d4a:	460b      	mov	r3, r1
 8003d4c:	4641      	mov	r1, r8
 8003d4e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d52:	4649      	mov	r1, r9
 8003d54:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d58:	f04f 0200 	mov.w	r2, #0
 8003d5c:	f04f 0300 	mov.w	r3, #0
 8003d60:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d64:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d68:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d6c:	ebb2 040a 	subs.w	r4, r2, sl
 8003d70:	eb63 050b 	sbc.w	r5, r3, fp
 8003d74:	f04f 0200 	mov.w	r2, #0
 8003d78:	f04f 0300 	mov.w	r3, #0
 8003d7c:	00eb      	lsls	r3, r5, #3
 8003d7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d82:	00e2      	lsls	r2, r4, #3
 8003d84:	4614      	mov	r4, r2
 8003d86:	461d      	mov	r5, r3
 8003d88:	4643      	mov	r3, r8
 8003d8a:	18e3      	adds	r3, r4, r3
 8003d8c:	603b      	str	r3, [r7, #0]
 8003d8e:	464b      	mov	r3, r9
 8003d90:	eb45 0303 	adc.w	r3, r5, r3
 8003d94:	607b      	str	r3, [r7, #4]
 8003d96:	f04f 0200 	mov.w	r2, #0
 8003d9a:	f04f 0300 	mov.w	r3, #0
 8003d9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003da2:	4629      	mov	r1, r5
 8003da4:	028b      	lsls	r3, r1, #10
 8003da6:	4621      	mov	r1, r4
 8003da8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003dac:	4621      	mov	r1, r4
 8003dae:	028a      	lsls	r2, r1, #10
 8003db0:	4610      	mov	r0, r2
 8003db2:	4619      	mov	r1, r3
 8003db4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003db8:	2200      	movs	r2, #0
 8003dba:	61bb      	str	r3, [r7, #24]
 8003dbc:	61fa      	str	r2, [r7, #28]
 8003dbe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003dc2:	f7fc ff11 	bl	8000be8 <__aeabi_uldivmod>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	460b      	mov	r3, r1
 8003dca:	4613      	mov	r3, r2
 8003dcc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003dd0:	4b0d      	ldr	r3, [pc, #52]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x348>)
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	0f1b      	lsrs	r3, r3, #28
 8003dd6:	f003 0307 	and.w	r3, r3, #7
 8003dda:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8003dde:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003de2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003dee:	e003      	b.n	8003df8 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003df0:	4b06      	ldr	r3, [pc, #24]	@ (8003e0c <HAL_RCC_GetSysClockFreq+0x34c>)
 8003df2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8003df6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003df8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3798      	adds	r7, #152	@ 0x98
 8003e00:	46bd      	mov	sp, r7
 8003e02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e06:	bf00      	nop
 8003e08:	40023800 	.word	0x40023800
 8003e0c:	00f42400 	.word	0x00f42400
 8003e10:	017d7840 	.word	0x017d7840

08003e14 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b086      	sub	sp, #24
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d101      	bne.n	8003e26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e28d      	b.n	8004342 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0301 	and.w	r3, r3, #1
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	f000 8083 	beq.w	8003f3a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003e34:	4b94      	ldr	r3, [pc, #592]	@ (8004088 <HAL_RCC_OscConfig+0x274>)
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f003 030c 	and.w	r3, r3, #12
 8003e3c:	2b04      	cmp	r3, #4
 8003e3e:	d019      	beq.n	8003e74 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003e40:	4b91      	ldr	r3, [pc, #580]	@ (8004088 <HAL_RCC_OscConfig+0x274>)
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	f003 030c 	and.w	r3, r3, #12
        || \
 8003e48:	2b08      	cmp	r3, #8
 8003e4a:	d106      	bne.n	8003e5a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003e4c:	4b8e      	ldr	r3, [pc, #568]	@ (8004088 <HAL_RCC_OscConfig+0x274>)
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e54:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e58:	d00c      	beq.n	8003e74 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e5a:	4b8b      	ldr	r3, [pc, #556]	@ (8004088 <HAL_RCC_OscConfig+0x274>)
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003e62:	2b0c      	cmp	r3, #12
 8003e64:	d112      	bne.n	8003e8c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e66:	4b88      	ldr	r3, [pc, #544]	@ (8004088 <HAL_RCC_OscConfig+0x274>)
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e6e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e72:	d10b      	bne.n	8003e8c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e74:	4b84      	ldr	r3, [pc, #528]	@ (8004088 <HAL_RCC_OscConfig+0x274>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d05b      	beq.n	8003f38 <HAL_RCC_OscConfig+0x124>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d157      	bne.n	8003f38 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e25a      	b.n	8004342 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e94:	d106      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x90>
 8003e96:	4b7c      	ldr	r3, [pc, #496]	@ (8004088 <HAL_RCC_OscConfig+0x274>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a7b      	ldr	r2, [pc, #492]	@ (8004088 <HAL_RCC_OscConfig+0x274>)
 8003e9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ea0:	6013      	str	r3, [r2, #0]
 8003ea2:	e01d      	b.n	8003ee0 <HAL_RCC_OscConfig+0xcc>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003eac:	d10c      	bne.n	8003ec8 <HAL_RCC_OscConfig+0xb4>
 8003eae:	4b76      	ldr	r3, [pc, #472]	@ (8004088 <HAL_RCC_OscConfig+0x274>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a75      	ldr	r2, [pc, #468]	@ (8004088 <HAL_RCC_OscConfig+0x274>)
 8003eb4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003eb8:	6013      	str	r3, [r2, #0]
 8003eba:	4b73      	ldr	r3, [pc, #460]	@ (8004088 <HAL_RCC_OscConfig+0x274>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a72      	ldr	r2, [pc, #456]	@ (8004088 <HAL_RCC_OscConfig+0x274>)
 8003ec0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ec4:	6013      	str	r3, [r2, #0]
 8003ec6:	e00b      	b.n	8003ee0 <HAL_RCC_OscConfig+0xcc>
 8003ec8:	4b6f      	ldr	r3, [pc, #444]	@ (8004088 <HAL_RCC_OscConfig+0x274>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a6e      	ldr	r2, [pc, #440]	@ (8004088 <HAL_RCC_OscConfig+0x274>)
 8003ece:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ed2:	6013      	str	r3, [r2, #0]
 8003ed4:	4b6c      	ldr	r3, [pc, #432]	@ (8004088 <HAL_RCC_OscConfig+0x274>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a6b      	ldr	r2, [pc, #428]	@ (8004088 <HAL_RCC_OscConfig+0x274>)
 8003eda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ede:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d013      	beq.n	8003f10 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee8:	f7fe f8cc 	bl	8002084 <HAL_GetTick>
 8003eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eee:	e008      	b.n	8003f02 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ef0:	f7fe f8c8 	bl	8002084 <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	2b64      	cmp	r3, #100	@ 0x64
 8003efc:	d901      	bls.n	8003f02 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e21f      	b.n	8004342 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f02:	4b61      	ldr	r3, [pc, #388]	@ (8004088 <HAL_RCC_OscConfig+0x274>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d0f0      	beq.n	8003ef0 <HAL_RCC_OscConfig+0xdc>
 8003f0e:	e014      	b.n	8003f3a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f10:	f7fe f8b8 	bl	8002084 <HAL_GetTick>
 8003f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f16:	e008      	b.n	8003f2a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f18:	f7fe f8b4 	bl	8002084 <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	2b64      	cmp	r3, #100	@ 0x64
 8003f24:	d901      	bls.n	8003f2a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e20b      	b.n	8004342 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f2a:	4b57      	ldr	r3, [pc, #348]	@ (8004088 <HAL_RCC_OscConfig+0x274>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d1f0      	bne.n	8003f18 <HAL_RCC_OscConfig+0x104>
 8003f36:	e000      	b.n	8003f3a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0302 	and.w	r3, r3, #2
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d06f      	beq.n	8004026 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003f46:	4b50      	ldr	r3, [pc, #320]	@ (8004088 <HAL_RCC_OscConfig+0x274>)
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f003 030c 	and.w	r3, r3, #12
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d017      	beq.n	8003f82 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003f52:	4b4d      	ldr	r3, [pc, #308]	@ (8004088 <HAL_RCC_OscConfig+0x274>)
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f003 030c 	and.w	r3, r3, #12
        || \
 8003f5a:	2b08      	cmp	r3, #8
 8003f5c:	d105      	bne.n	8003f6a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003f5e:	4b4a      	ldr	r3, [pc, #296]	@ (8004088 <HAL_RCC_OscConfig+0x274>)
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00b      	beq.n	8003f82 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f6a:	4b47      	ldr	r3, [pc, #284]	@ (8004088 <HAL_RCC_OscConfig+0x274>)
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003f72:	2b0c      	cmp	r3, #12
 8003f74:	d11c      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f76:	4b44      	ldr	r3, [pc, #272]	@ (8004088 <HAL_RCC_OscConfig+0x274>)
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d116      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f82:	4b41      	ldr	r3, [pc, #260]	@ (8004088 <HAL_RCC_OscConfig+0x274>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0302 	and.w	r3, r3, #2
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d005      	beq.n	8003f9a <HAL_RCC_OscConfig+0x186>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d001      	beq.n	8003f9a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e1d3      	b.n	8004342 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f9a:	4b3b      	ldr	r3, [pc, #236]	@ (8004088 <HAL_RCC_OscConfig+0x274>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	00db      	lsls	r3, r3, #3
 8003fa8:	4937      	ldr	r1, [pc, #220]	@ (8004088 <HAL_RCC_OscConfig+0x274>)
 8003faa:	4313      	orrs	r3, r2
 8003fac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fae:	e03a      	b.n	8004026 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d020      	beq.n	8003ffa <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fb8:	4b34      	ldr	r3, [pc, #208]	@ (800408c <HAL_RCC_OscConfig+0x278>)
 8003fba:	2201      	movs	r2, #1
 8003fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fbe:	f7fe f861 	bl	8002084 <HAL_GetTick>
 8003fc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fc4:	e008      	b.n	8003fd8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fc6:	f7fe f85d 	bl	8002084 <HAL_GetTick>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	2b02      	cmp	r3, #2
 8003fd2:	d901      	bls.n	8003fd8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	e1b4      	b.n	8004342 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fd8:	4b2b      	ldr	r3, [pc, #172]	@ (8004088 <HAL_RCC_OscConfig+0x274>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0302 	and.w	r3, r3, #2
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d0f0      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fe4:	4b28      	ldr	r3, [pc, #160]	@ (8004088 <HAL_RCC_OscConfig+0x274>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	691b      	ldr	r3, [r3, #16]
 8003ff0:	00db      	lsls	r3, r3, #3
 8003ff2:	4925      	ldr	r1, [pc, #148]	@ (8004088 <HAL_RCC_OscConfig+0x274>)
 8003ff4:	4313      	orrs	r3, r2
 8003ff6:	600b      	str	r3, [r1, #0]
 8003ff8:	e015      	b.n	8004026 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ffa:	4b24      	ldr	r3, [pc, #144]	@ (800408c <HAL_RCC_OscConfig+0x278>)
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004000:	f7fe f840 	bl	8002084 <HAL_GetTick>
 8004004:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004006:	e008      	b.n	800401a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004008:	f7fe f83c 	bl	8002084 <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	2b02      	cmp	r3, #2
 8004014:	d901      	bls.n	800401a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e193      	b.n	8004342 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800401a:	4b1b      	ldr	r3, [pc, #108]	@ (8004088 <HAL_RCC_OscConfig+0x274>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0302 	and.w	r3, r3, #2
 8004022:	2b00      	cmp	r3, #0
 8004024:	d1f0      	bne.n	8004008 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0308 	and.w	r3, r3, #8
 800402e:	2b00      	cmp	r3, #0
 8004030:	d036      	beq.n	80040a0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	695b      	ldr	r3, [r3, #20]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d016      	beq.n	8004068 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800403a:	4b15      	ldr	r3, [pc, #84]	@ (8004090 <HAL_RCC_OscConfig+0x27c>)
 800403c:	2201      	movs	r2, #1
 800403e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004040:	f7fe f820 	bl	8002084 <HAL_GetTick>
 8004044:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004046:	e008      	b.n	800405a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004048:	f7fe f81c 	bl	8002084 <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	2b02      	cmp	r3, #2
 8004054:	d901      	bls.n	800405a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e173      	b.n	8004342 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800405a:	4b0b      	ldr	r3, [pc, #44]	@ (8004088 <HAL_RCC_OscConfig+0x274>)
 800405c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800405e:	f003 0302 	and.w	r3, r3, #2
 8004062:	2b00      	cmp	r3, #0
 8004064:	d0f0      	beq.n	8004048 <HAL_RCC_OscConfig+0x234>
 8004066:	e01b      	b.n	80040a0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004068:	4b09      	ldr	r3, [pc, #36]	@ (8004090 <HAL_RCC_OscConfig+0x27c>)
 800406a:	2200      	movs	r2, #0
 800406c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800406e:	f7fe f809 	bl	8002084 <HAL_GetTick>
 8004072:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004074:	e00e      	b.n	8004094 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004076:	f7fe f805 	bl	8002084 <HAL_GetTick>
 800407a:	4602      	mov	r2, r0
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	2b02      	cmp	r3, #2
 8004082:	d907      	bls.n	8004094 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	e15c      	b.n	8004342 <HAL_RCC_OscConfig+0x52e>
 8004088:	40023800 	.word	0x40023800
 800408c:	42470000 	.word	0x42470000
 8004090:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004094:	4b8a      	ldr	r3, [pc, #552]	@ (80042c0 <HAL_RCC_OscConfig+0x4ac>)
 8004096:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004098:	f003 0302 	and.w	r3, r3, #2
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1ea      	bne.n	8004076 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0304 	and.w	r3, r3, #4
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	f000 8097 	beq.w	80041dc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040ae:	2300      	movs	r3, #0
 80040b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040b2:	4b83      	ldr	r3, [pc, #524]	@ (80042c0 <HAL_RCC_OscConfig+0x4ac>)
 80040b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d10f      	bne.n	80040de <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040be:	2300      	movs	r3, #0
 80040c0:	60bb      	str	r3, [r7, #8]
 80040c2:	4b7f      	ldr	r3, [pc, #508]	@ (80042c0 <HAL_RCC_OscConfig+0x4ac>)
 80040c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c6:	4a7e      	ldr	r2, [pc, #504]	@ (80042c0 <HAL_RCC_OscConfig+0x4ac>)
 80040c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80040ce:	4b7c      	ldr	r3, [pc, #496]	@ (80042c0 <HAL_RCC_OscConfig+0x4ac>)
 80040d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040d6:	60bb      	str	r3, [r7, #8]
 80040d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040da:	2301      	movs	r3, #1
 80040dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040de:	4b79      	ldr	r3, [pc, #484]	@ (80042c4 <HAL_RCC_OscConfig+0x4b0>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d118      	bne.n	800411c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040ea:	4b76      	ldr	r3, [pc, #472]	@ (80042c4 <HAL_RCC_OscConfig+0x4b0>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a75      	ldr	r2, [pc, #468]	@ (80042c4 <HAL_RCC_OscConfig+0x4b0>)
 80040f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040f6:	f7fd ffc5 	bl	8002084 <HAL_GetTick>
 80040fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040fc:	e008      	b.n	8004110 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040fe:	f7fd ffc1 	bl	8002084 <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	2b02      	cmp	r3, #2
 800410a:	d901      	bls.n	8004110 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e118      	b.n	8004342 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004110:	4b6c      	ldr	r3, [pc, #432]	@ (80042c4 <HAL_RCC_OscConfig+0x4b0>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004118:	2b00      	cmp	r3, #0
 800411a:	d0f0      	beq.n	80040fe <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	2b01      	cmp	r3, #1
 8004122:	d106      	bne.n	8004132 <HAL_RCC_OscConfig+0x31e>
 8004124:	4b66      	ldr	r3, [pc, #408]	@ (80042c0 <HAL_RCC_OscConfig+0x4ac>)
 8004126:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004128:	4a65      	ldr	r2, [pc, #404]	@ (80042c0 <HAL_RCC_OscConfig+0x4ac>)
 800412a:	f043 0301 	orr.w	r3, r3, #1
 800412e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004130:	e01c      	b.n	800416c <HAL_RCC_OscConfig+0x358>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	2b05      	cmp	r3, #5
 8004138:	d10c      	bne.n	8004154 <HAL_RCC_OscConfig+0x340>
 800413a:	4b61      	ldr	r3, [pc, #388]	@ (80042c0 <HAL_RCC_OscConfig+0x4ac>)
 800413c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800413e:	4a60      	ldr	r2, [pc, #384]	@ (80042c0 <HAL_RCC_OscConfig+0x4ac>)
 8004140:	f043 0304 	orr.w	r3, r3, #4
 8004144:	6713      	str	r3, [r2, #112]	@ 0x70
 8004146:	4b5e      	ldr	r3, [pc, #376]	@ (80042c0 <HAL_RCC_OscConfig+0x4ac>)
 8004148:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800414a:	4a5d      	ldr	r2, [pc, #372]	@ (80042c0 <HAL_RCC_OscConfig+0x4ac>)
 800414c:	f043 0301 	orr.w	r3, r3, #1
 8004150:	6713      	str	r3, [r2, #112]	@ 0x70
 8004152:	e00b      	b.n	800416c <HAL_RCC_OscConfig+0x358>
 8004154:	4b5a      	ldr	r3, [pc, #360]	@ (80042c0 <HAL_RCC_OscConfig+0x4ac>)
 8004156:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004158:	4a59      	ldr	r2, [pc, #356]	@ (80042c0 <HAL_RCC_OscConfig+0x4ac>)
 800415a:	f023 0301 	bic.w	r3, r3, #1
 800415e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004160:	4b57      	ldr	r3, [pc, #348]	@ (80042c0 <HAL_RCC_OscConfig+0x4ac>)
 8004162:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004164:	4a56      	ldr	r2, [pc, #344]	@ (80042c0 <HAL_RCC_OscConfig+0x4ac>)
 8004166:	f023 0304 	bic.w	r3, r3, #4
 800416a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d015      	beq.n	80041a0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004174:	f7fd ff86 	bl	8002084 <HAL_GetTick>
 8004178:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800417a:	e00a      	b.n	8004192 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800417c:	f7fd ff82 	bl	8002084 <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	f241 3288 	movw	r2, #5000	@ 0x1388
 800418a:	4293      	cmp	r3, r2
 800418c:	d901      	bls.n	8004192 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e0d7      	b.n	8004342 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004192:	4b4b      	ldr	r3, [pc, #300]	@ (80042c0 <HAL_RCC_OscConfig+0x4ac>)
 8004194:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004196:	f003 0302 	and.w	r3, r3, #2
 800419a:	2b00      	cmp	r3, #0
 800419c:	d0ee      	beq.n	800417c <HAL_RCC_OscConfig+0x368>
 800419e:	e014      	b.n	80041ca <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041a0:	f7fd ff70 	bl	8002084 <HAL_GetTick>
 80041a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041a6:	e00a      	b.n	80041be <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041a8:	f7fd ff6c 	bl	8002084 <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d901      	bls.n	80041be <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e0c1      	b.n	8004342 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041be:	4b40      	ldr	r3, [pc, #256]	@ (80042c0 <HAL_RCC_OscConfig+0x4ac>)
 80041c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041c2:	f003 0302 	and.w	r3, r3, #2
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d1ee      	bne.n	80041a8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80041ca:	7dfb      	ldrb	r3, [r7, #23]
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d105      	bne.n	80041dc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041d0:	4b3b      	ldr	r3, [pc, #236]	@ (80042c0 <HAL_RCC_OscConfig+0x4ac>)
 80041d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d4:	4a3a      	ldr	r2, [pc, #232]	@ (80042c0 <HAL_RCC_OscConfig+0x4ac>)
 80041d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041da:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	699b      	ldr	r3, [r3, #24]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	f000 80ad 	beq.w	8004340 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041e6:	4b36      	ldr	r3, [pc, #216]	@ (80042c0 <HAL_RCC_OscConfig+0x4ac>)
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f003 030c 	and.w	r3, r3, #12
 80041ee:	2b08      	cmp	r3, #8
 80041f0:	d060      	beq.n	80042b4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d145      	bne.n	8004286 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041fa:	4b33      	ldr	r3, [pc, #204]	@ (80042c8 <HAL_RCC_OscConfig+0x4b4>)
 80041fc:	2200      	movs	r2, #0
 80041fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004200:	f7fd ff40 	bl	8002084 <HAL_GetTick>
 8004204:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004206:	e008      	b.n	800421a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004208:	f7fd ff3c 	bl	8002084 <HAL_GetTick>
 800420c:	4602      	mov	r2, r0
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	1ad3      	subs	r3, r2, r3
 8004212:	2b02      	cmp	r3, #2
 8004214:	d901      	bls.n	800421a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004216:	2303      	movs	r3, #3
 8004218:	e093      	b.n	8004342 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800421a:	4b29      	ldr	r3, [pc, #164]	@ (80042c0 <HAL_RCC_OscConfig+0x4ac>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d1f0      	bne.n	8004208 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	69da      	ldr	r2, [r3, #28]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a1b      	ldr	r3, [r3, #32]
 800422e:	431a      	orrs	r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004234:	019b      	lsls	r3, r3, #6
 8004236:	431a      	orrs	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800423c:	085b      	lsrs	r3, r3, #1
 800423e:	3b01      	subs	r3, #1
 8004240:	041b      	lsls	r3, r3, #16
 8004242:	431a      	orrs	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004248:	061b      	lsls	r3, r3, #24
 800424a:	431a      	orrs	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004250:	071b      	lsls	r3, r3, #28
 8004252:	491b      	ldr	r1, [pc, #108]	@ (80042c0 <HAL_RCC_OscConfig+0x4ac>)
 8004254:	4313      	orrs	r3, r2
 8004256:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004258:	4b1b      	ldr	r3, [pc, #108]	@ (80042c8 <HAL_RCC_OscConfig+0x4b4>)
 800425a:	2201      	movs	r2, #1
 800425c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800425e:	f7fd ff11 	bl	8002084 <HAL_GetTick>
 8004262:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004264:	e008      	b.n	8004278 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004266:	f7fd ff0d 	bl	8002084 <HAL_GetTick>
 800426a:	4602      	mov	r2, r0
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	2b02      	cmp	r3, #2
 8004272:	d901      	bls.n	8004278 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e064      	b.n	8004342 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004278:	4b11      	ldr	r3, [pc, #68]	@ (80042c0 <HAL_RCC_OscConfig+0x4ac>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d0f0      	beq.n	8004266 <HAL_RCC_OscConfig+0x452>
 8004284:	e05c      	b.n	8004340 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004286:	4b10      	ldr	r3, [pc, #64]	@ (80042c8 <HAL_RCC_OscConfig+0x4b4>)
 8004288:	2200      	movs	r2, #0
 800428a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800428c:	f7fd fefa 	bl	8002084 <HAL_GetTick>
 8004290:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004292:	e008      	b.n	80042a6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004294:	f7fd fef6 	bl	8002084 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d901      	bls.n	80042a6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e04d      	b.n	8004342 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042a6:	4b06      	ldr	r3, [pc, #24]	@ (80042c0 <HAL_RCC_OscConfig+0x4ac>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1f0      	bne.n	8004294 <HAL_RCC_OscConfig+0x480>
 80042b2:	e045      	b.n	8004340 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	699b      	ldr	r3, [r3, #24]
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d107      	bne.n	80042cc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e040      	b.n	8004342 <HAL_RCC_OscConfig+0x52e>
 80042c0:	40023800 	.word	0x40023800
 80042c4:	40007000 	.word	0x40007000
 80042c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80042cc:	4b1f      	ldr	r3, [pc, #124]	@ (800434c <HAL_RCC_OscConfig+0x538>)
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d030      	beq.n	800433c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d129      	bne.n	800433c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d122      	bne.n	800433c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80042fc:	4013      	ands	r3, r2
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004302:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004304:	4293      	cmp	r3, r2
 8004306:	d119      	bne.n	800433c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004312:	085b      	lsrs	r3, r3, #1
 8004314:	3b01      	subs	r3, #1
 8004316:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004318:	429a      	cmp	r2, r3
 800431a:	d10f      	bne.n	800433c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004326:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004328:	429a      	cmp	r2, r3
 800432a:	d107      	bne.n	800433c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004336:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004338:	429a      	cmp	r2, r3
 800433a:	d001      	beq.n	8004340 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e000      	b.n	8004342 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004340:	2300      	movs	r3, #0
}
 8004342:	4618      	mov	r0, r3
 8004344:	3718      	adds	r7, #24
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}
 800434a:	bf00      	nop
 800434c:	40023800 	.word	0x40023800

08004350 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d101      	bne.n	8004362 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e042      	b.n	80043e8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004368:	b2db      	uxtb	r3, r3
 800436a:	2b00      	cmp	r3, #0
 800436c:	d106      	bne.n	800437c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f7fd fcc8 	bl	8001d0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2224      	movs	r2, #36	@ 0x24
 8004380:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68da      	ldr	r2, [r3, #12]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004392:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 f973 	bl	8004680 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	691a      	ldr	r2, [r3, #16]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80043a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	695a      	ldr	r2, [r3, #20]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80043b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68da      	ldr	r2, [r3, #12]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80043c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2220      	movs	r2, #32
 80043d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2220      	movs	r2, #32
 80043dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3708      	adds	r7, #8
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}

080043f0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b08a      	sub	sp, #40	@ 0x28
 80043f4:	af02      	add	r7, sp, #8
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	603b      	str	r3, [r7, #0]
 80043fc:	4613      	mov	r3, r2
 80043fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004400:	2300      	movs	r3, #0
 8004402:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800440a:	b2db      	uxtb	r3, r3
 800440c:	2b20      	cmp	r3, #32
 800440e:	d175      	bne.n	80044fc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d002      	beq.n	800441c <HAL_UART_Transmit+0x2c>
 8004416:	88fb      	ldrh	r3, [r7, #6]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d101      	bne.n	8004420 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e06e      	b.n	80044fe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	2200      	movs	r2, #0
 8004424:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2221      	movs	r2, #33	@ 0x21
 800442a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800442e:	f7fd fe29 	bl	8002084 <HAL_GetTick>
 8004432:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	88fa      	ldrh	r2, [r7, #6]
 8004438:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	88fa      	ldrh	r2, [r7, #6]
 800443e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004448:	d108      	bne.n	800445c <HAL_UART_Transmit+0x6c>
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d104      	bne.n	800445c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004452:	2300      	movs	r3, #0
 8004454:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	61bb      	str	r3, [r7, #24]
 800445a:	e003      	b.n	8004464 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004460:	2300      	movs	r3, #0
 8004462:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004464:	e02e      	b.n	80044c4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	9300      	str	r3, [sp, #0]
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	2200      	movs	r2, #0
 800446e:	2180      	movs	r1, #128	@ 0x80
 8004470:	68f8      	ldr	r0, [r7, #12]
 8004472:	f000 f848 	bl	8004506 <UART_WaitOnFlagUntilTimeout>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d005      	beq.n	8004488 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2220      	movs	r2, #32
 8004480:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	e03a      	b.n	80044fe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d10b      	bne.n	80044a6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	881b      	ldrh	r3, [r3, #0]
 8004492:	461a      	mov	r2, r3
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800449c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	3302      	adds	r3, #2
 80044a2:	61bb      	str	r3, [r7, #24]
 80044a4:	e007      	b.n	80044b6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	781a      	ldrb	r2, [r3, #0]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	3301      	adds	r3, #1
 80044b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80044ba:	b29b      	uxth	r3, r3
 80044bc:	3b01      	subs	r3, #1
 80044be:	b29a      	uxth	r2, r3
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d1cb      	bne.n	8004466 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	9300      	str	r3, [sp, #0]
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	2200      	movs	r2, #0
 80044d6:	2140      	movs	r1, #64	@ 0x40
 80044d8:	68f8      	ldr	r0, [r7, #12]
 80044da:	f000 f814 	bl	8004506 <UART_WaitOnFlagUntilTimeout>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d005      	beq.n	80044f0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2220      	movs	r2, #32
 80044e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	e006      	b.n	80044fe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2220      	movs	r2, #32
 80044f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80044f8:	2300      	movs	r3, #0
 80044fa:	e000      	b.n	80044fe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80044fc:	2302      	movs	r3, #2
  }
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3720      	adds	r7, #32
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}

08004506 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004506:	b580      	push	{r7, lr}
 8004508:	b086      	sub	sp, #24
 800450a:	af00      	add	r7, sp, #0
 800450c:	60f8      	str	r0, [r7, #12]
 800450e:	60b9      	str	r1, [r7, #8]
 8004510:	603b      	str	r3, [r7, #0]
 8004512:	4613      	mov	r3, r2
 8004514:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004516:	e03b      	b.n	8004590 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004518:	6a3b      	ldr	r3, [r7, #32]
 800451a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800451e:	d037      	beq.n	8004590 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004520:	f7fd fdb0 	bl	8002084 <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	6a3a      	ldr	r2, [r7, #32]
 800452c:	429a      	cmp	r2, r3
 800452e:	d302      	bcc.n	8004536 <UART_WaitOnFlagUntilTimeout+0x30>
 8004530:	6a3b      	ldr	r3, [r7, #32]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e03a      	b.n	80045b0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	f003 0304 	and.w	r3, r3, #4
 8004544:	2b00      	cmp	r3, #0
 8004546:	d023      	beq.n	8004590 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	2b80      	cmp	r3, #128	@ 0x80
 800454c:	d020      	beq.n	8004590 <UART_WaitOnFlagUntilTimeout+0x8a>
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	2b40      	cmp	r3, #64	@ 0x40
 8004552:	d01d      	beq.n	8004590 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0308 	and.w	r3, r3, #8
 800455e:	2b08      	cmp	r3, #8
 8004560:	d116      	bne.n	8004590 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004562:	2300      	movs	r3, #0
 8004564:	617b      	str	r3, [r7, #20]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	617b      	str	r3, [r7, #20]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	617b      	str	r3, [r7, #20]
 8004576:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004578:	68f8      	ldr	r0, [r7, #12]
 800457a:	f000 f81d 	bl	80045b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2208      	movs	r2, #8
 8004582:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2200      	movs	r2, #0
 8004588:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e00f      	b.n	80045b0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	4013      	ands	r3, r2
 800459a:	68ba      	ldr	r2, [r7, #8]
 800459c:	429a      	cmp	r2, r3
 800459e:	bf0c      	ite	eq
 80045a0:	2301      	moveq	r3, #1
 80045a2:	2300      	movne	r3, #0
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	461a      	mov	r2, r3
 80045a8:	79fb      	ldrb	r3, [r7, #7]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d0b4      	beq.n	8004518 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045ae:	2300      	movs	r3, #0
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3718      	adds	r7, #24
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b095      	sub	sp, #84	@ 0x54
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	330c      	adds	r3, #12
 80045c6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045ca:	e853 3f00 	ldrex	r3, [r3]
 80045ce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80045d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045d2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80045d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	330c      	adds	r3, #12
 80045de:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80045e0:	643a      	str	r2, [r7, #64]	@ 0x40
 80045e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80045e6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80045e8:	e841 2300 	strex	r3, r2, [r1]
 80045ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80045ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d1e5      	bne.n	80045c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	3314      	adds	r3, #20
 80045fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045fc:	6a3b      	ldr	r3, [r7, #32]
 80045fe:	e853 3f00 	ldrex	r3, [r3]
 8004602:	61fb      	str	r3, [r7, #28]
   return(result);
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	f023 0301 	bic.w	r3, r3, #1
 800460a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	3314      	adds	r3, #20
 8004612:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004614:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004616:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004618:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800461a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800461c:	e841 2300 	strex	r3, r2, [r1]
 8004620:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004624:	2b00      	cmp	r3, #0
 8004626:	d1e5      	bne.n	80045f4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800462c:	2b01      	cmp	r3, #1
 800462e:	d119      	bne.n	8004664 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	330c      	adds	r3, #12
 8004636:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	e853 3f00 	ldrex	r3, [r3]
 800463e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	f023 0310 	bic.w	r3, r3, #16
 8004646:	647b      	str	r3, [r7, #68]	@ 0x44
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	330c      	adds	r3, #12
 800464e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004650:	61ba      	str	r2, [r7, #24]
 8004652:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004654:	6979      	ldr	r1, [r7, #20]
 8004656:	69ba      	ldr	r2, [r7, #24]
 8004658:	e841 2300 	strex	r3, r2, [r1]
 800465c:	613b      	str	r3, [r7, #16]
   return(result);
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d1e5      	bne.n	8004630 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2220      	movs	r2, #32
 8004668:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004672:	bf00      	nop
 8004674:	3754      	adds	r7, #84	@ 0x54
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr
	...

08004680 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004680:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004684:	b0c0      	sub	sp, #256	@ 0x100
 8004686:	af00      	add	r7, sp, #0
 8004688:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800468c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800469c:	68d9      	ldr	r1, [r3, #12]
 800469e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	ea40 0301 	orr.w	r3, r0, r1
 80046a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80046aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046ae:	689a      	ldr	r2, [r3, #8]
 80046b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046b4:	691b      	ldr	r3, [r3, #16]
 80046b6:	431a      	orrs	r2, r3
 80046b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046bc:	695b      	ldr	r3, [r3, #20]
 80046be:	431a      	orrs	r2, r3
 80046c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046c4:	69db      	ldr	r3, [r3, #28]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80046cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80046d8:	f021 010c 	bic.w	r1, r1, #12
 80046dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80046e6:	430b      	orrs	r3, r1
 80046e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	695b      	ldr	r3, [r3, #20]
 80046f2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80046f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046fa:	6999      	ldr	r1, [r3, #24]
 80046fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004700:	681a      	ldr	r2, [r3, #0]
 8004702:	ea40 0301 	orr.w	r3, r0, r1
 8004706:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	4b8f      	ldr	r3, [pc, #572]	@ (800494c <UART_SetConfig+0x2cc>)
 8004710:	429a      	cmp	r2, r3
 8004712:	d005      	beq.n	8004720 <UART_SetConfig+0xa0>
 8004714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	4b8d      	ldr	r3, [pc, #564]	@ (8004950 <UART_SetConfig+0x2d0>)
 800471c:	429a      	cmp	r2, r3
 800471e:	d104      	bne.n	800472a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004720:	f7ff f9ba 	bl	8003a98 <HAL_RCC_GetPCLK2Freq>
 8004724:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004728:	e003      	b.n	8004732 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800472a:	f7ff f9a1 	bl	8003a70 <HAL_RCC_GetPCLK1Freq>
 800472e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004736:	69db      	ldr	r3, [r3, #28]
 8004738:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800473c:	f040 810c 	bne.w	8004958 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004740:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004744:	2200      	movs	r2, #0
 8004746:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800474a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800474e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004752:	4622      	mov	r2, r4
 8004754:	462b      	mov	r3, r5
 8004756:	1891      	adds	r1, r2, r2
 8004758:	65b9      	str	r1, [r7, #88]	@ 0x58
 800475a:	415b      	adcs	r3, r3
 800475c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800475e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004762:	4621      	mov	r1, r4
 8004764:	eb12 0801 	adds.w	r8, r2, r1
 8004768:	4629      	mov	r1, r5
 800476a:	eb43 0901 	adc.w	r9, r3, r1
 800476e:	f04f 0200 	mov.w	r2, #0
 8004772:	f04f 0300 	mov.w	r3, #0
 8004776:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800477a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800477e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004782:	4690      	mov	r8, r2
 8004784:	4699      	mov	r9, r3
 8004786:	4623      	mov	r3, r4
 8004788:	eb18 0303 	adds.w	r3, r8, r3
 800478c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004790:	462b      	mov	r3, r5
 8004792:	eb49 0303 	adc.w	r3, r9, r3
 8004796:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800479a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80047a6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80047aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80047ae:	460b      	mov	r3, r1
 80047b0:	18db      	adds	r3, r3, r3
 80047b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80047b4:	4613      	mov	r3, r2
 80047b6:	eb42 0303 	adc.w	r3, r2, r3
 80047ba:	657b      	str	r3, [r7, #84]	@ 0x54
 80047bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80047c0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80047c4:	f7fc fa10 	bl	8000be8 <__aeabi_uldivmod>
 80047c8:	4602      	mov	r2, r0
 80047ca:	460b      	mov	r3, r1
 80047cc:	4b61      	ldr	r3, [pc, #388]	@ (8004954 <UART_SetConfig+0x2d4>)
 80047ce:	fba3 2302 	umull	r2, r3, r3, r2
 80047d2:	095b      	lsrs	r3, r3, #5
 80047d4:	011c      	lsls	r4, r3, #4
 80047d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047da:	2200      	movs	r2, #0
 80047dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80047e0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80047e4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80047e8:	4642      	mov	r2, r8
 80047ea:	464b      	mov	r3, r9
 80047ec:	1891      	adds	r1, r2, r2
 80047ee:	64b9      	str	r1, [r7, #72]	@ 0x48
 80047f0:	415b      	adcs	r3, r3
 80047f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047f4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80047f8:	4641      	mov	r1, r8
 80047fa:	eb12 0a01 	adds.w	sl, r2, r1
 80047fe:	4649      	mov	r1, r9
 8004800:	eb43 0b01 	adc.w	fp, r3, r1
 8004804:	f04f 0200 	mov.w	r2, #0
 8004808:	f04f 0300 	mov.w	r3, #0
 800480c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004810:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004814:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004818:	4692      	mov	sl, r2
 800481a:	469b      	mov	fp, r3
 800481c:	4643      	mov	r3, r8
 800481e:	eb1a 0303 	adds.w	r3, sl, r3
 8004822:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004826:	464b      	mov	r3, r9
 8004828:	eb4b 0303 	adc.w	r3, fp, r3
 800482c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800483c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004840:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004844:	460b      	mov	r3, r1
 8004846:	18db      	adds	r3, r3, r3
 8004848:	643b      	str	r3, [r7, #64]	@ 0x40
 800484a:	4613      	mov	r3, r2
 800484c:	eb42 0303 	adc.w	r3, r2, r3
 8004850:	647b      	str	r3, [r7, #68]	@ 0x44
 8004852:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004856:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800485a:	f7fc f9c5 	bl	8000be8 <__aeabi_uldivmod>
 800485e:	4602      	mov	r2, r0
 8004860:	460b      	mov	r3, r1
 8004862:	4611      	mov	r1, r2
 8004864:	4b3b      	ldr	r3, [pc, #236]	@ (8004954 <UART_SetConfig+0x2d4>)
 8004866:	fba3 2301 	umull	r2, r3, r3, r1
 800486a:	095b      	lsrs	r3, r3, #5
 800486c:	2264      	movs	r2, #100	@ 0x64
 800486e:	fb02 f303 	mul.w	r3, r2, r3
 8004872:	1acb      	subs	r3, r1, r3
 8004874:	00db      	lsls	r3, r3, #3
 8004876:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800487a:	4b36      	ldr	r3, [pc, #216]	@ (8004954 <UART_SetConfig+0x2d4>)
 800487c:	fba3 2302 	umull	r2, r3, r3, r2
 8004880:	095b      	lsrs	r3, r3, #5
 8004882:	005b      	lsls	r3, r3, #1
 8004884:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004888:	441c      	add	r4, r3
 800488a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800488e:	2200      	movs	r2, #0
 8004890:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004894:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004898:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800489c:	4642      	mov	r2, r8
 800489e:	464b      	mov	r3, r9
 80048a0:	1891      	adds	r1, r2, r2
 80048a2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80048a4:	415b      	adcs	r3, r3
 80048a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80048a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80048ac:	4641      	mov	r1, r8
 80048ae:	1851      	adds	r1, r2, r1
 80048b0:	6339      	str	r1, [r7, #48]	@ 0x30
 80048b2:	4649      	mov	r1, r9
 80048b4:	414b      	adcs	r3, r1
 80048b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80048b8:	f04f 0200 	mov.w	r2, #0
 80048bc:	f04f 0300 	mov.w	r3, #0
 80048c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80048c4:	4659      	mov	r1, fp
 80048c6:	00cb      	lsls	r3, r1, #3
 80048c8:	4651      	mov	r1, sl
 80048ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048ce:	4651      	mov	r1, sl
 80048d0:	00ca      	lsls	r2, r1, #3
 80048d2:	4610      	mov	r0, r2
 80048d4:	4619      	mov	r1, r3
 80048d6:	4603      	mov	r3, r0
 80048d8:	4642      	mov	r2, r8
 80048da:	189b      	adds	r3, r3, r2
 80048dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80048e0:	464b      	mov	r3, r9
 80048e2:	460a      	mov	r2, r1
 80048e4:	eb42 0303 	adc.w	r3, r2, r3
 80048e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80048ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80048f8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80048fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004900:	460b      	mov	r3, r1
 8004902:	18db      	adds	r3, r3, r3
 8004904:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004906:	4613      	mov	r3, r2
 8004908:	eb42 0303 	adc.w	r3, r2, r3
 800490c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800490e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004912:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004916:	f7fc f967 	bl	8000be8 <__aeabi_uldivmod>
 800491a:	4602      	mov	r2, r0
 800491c:	460b      	mov	r3, r1
 800491e:	4b0d      	ldr	r3, [pc, #52]	@ (8004954 <UART_SetConfig+0x2d4>)
 8004920:	fba3 1302 	umull	r1, r3, r3, r2
 8004924:	095b      	lsrs	r3, r3, #5
 8004926:	2164      	movs	r1, #100	@ 0x64
 8004928:	fb01 f303 	mul.w	r3, r1, r3
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	00db      	lsls	r3, r3, #3
 8004930:	3332      	adds	r3, #50	@ 0x32
 8004932:	4a08      	ldr	r2, [pc, #32]	@ (8004954 <UART_SetConfig+0x2d4>)
 8004934:	fba2 2303 	umull	r2, r3, r2, r3
 8004938:	095b      	lsrs	r3, r3, #5
 800493a:	f003 0207 	and.w	r2, r3, #7
 800493e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4422      	add	r2, r4
 8004946:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004948:	e106      	b.n	8004b58 <UART_SetConfig+0x4d8>
 800494a:	bf00      	nop
 800494c:	40011000 	.word	0x40011000
 8004950:	40011400 	.word	0x40011400
 8004954:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004958:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800495c:	2200      	movs	r2, #0
 800495e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004962:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004966:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800496a:	4642      	mov	r2, r8
 800496c:	464b      	mov	r3, r9
 800496e:	1891      	adds	r1, r2, r2
 8004970:	6239      	str	r1, [r7, #32]
 8004972:	415b      	adcs	r3, r3
 8004974:	627b      	str	r3, [r7, #36]	@ 0x24
 8004976:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800497a:	4641      	mov	r1, r8
 800497c:	1854      	adds	r4, r2, r1
 800497e:	4649      	mov	r1, r9
 8004980:	eb43 0501 	adc.w	r5, r3, r1
 8004984:	f04f 0200 	mov.w	r2, #0
 8004988:	f04f 0300 	mov.w	r3, #0
 800498c:	00eb      	lsls	r3, r5, #3
 800498e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004992:	00e2      	lsls	r2, r4, #3
 8004994:	4614      	mov	r4, r2
 8004996:	461d      	mov	r5, r3
 8004998:	4643      	mov	r3, r8
 800499a:	18e3      	adds	r3, r4, r3
 800499c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80049a0:	464b      	mov	r3, r9
 80049a2:	eb45 0303 	adc.w	r3, r5, r3
 80049a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80049aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80049b6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80049ba:	f04f 0200 	mov.w	r2, #0
 80049be:	f04f 0300 	mov.w	r3, #0
 80049c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80049c6:	4629      	mov	r1, r5
 80049c8:	008b      	lsls	r3, r1, #2
 80049ca:	4621      	mov	r1, r4
 80049cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049d0:	4621      	mov	r1, r4
 80049d2:	008a      	lsls	r2, r1, #2
 80049d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80049d8:	f7fc f906 	bl	8000be8 <__aeabi_uldivmod>
 80049dc:	4602      	mov	r2, r0
 80049de:	460b      	mov	r3, r1
 80049e0:	4b60      	ldr	r3, [pc, #384]	@ (8004b64 <UART_SetConfig+0x4e4>)
 80049e2:	fba3 2302 	umull	r2, r3, r3, r2
 80049e6:	095b      	lsrs	r3, r3, #5
 80049e8:	011c      	lsls	r4, r3, #4
 80049ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049ee:	2200      	movs	r2, #0
 80049f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80049f4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80049f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80049fc:	4642      	mov	r2, r8
 80049fe:	464b      	mov	r3, r9
 8004a00:	1891      	adds	r1, r2, r2
 8004a02:	61b9      	str	r1, [r7, #24]
 8004a04:	415b      	adcs	r3, r3
 8004a06:	61fb      	str	r3, [r7, #28]
 8004a08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a0c:	4641      	mov	r1, r8
 8004a0e:	1851      	adds	r1, r2, r1
 8004a10:	6139      	str	r1, [r7, #16]
 8004a12:	4649      	mov	r1, r9
 8004a14:	414b      	adcs	r3, r1
 8004a16:	617b      	str	r3, [r7, #20]
 8004a18:	f04f 0200 	mov.w	r2, #0
 8004a1c:	f04f 0300 	mov.w	r3, #0
 8004a20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a24:	4659      	mov	r1, fp
 8004a26:	00cb      	lsls	r3, r1, #3
 8004a28:	4651      	mov	r1, sl
 8004a2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a2e:	4651      	mov	r1, sl
 8004a30:	00ca      	lsls	r2, r1, #3
 8004a32:	4610      	mov	r0, r2
 8004a34:	4619      	mov	r1, r3
 8004a36:	4603      	mov	r3, r0
 8004a38:	4642      	mov	r2, r8
 8004a3a:	189b      	adds	r3, r3, r2
 8004a3c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004a40:	464b      	mov	r3, r9
 8004a42:	460a      	mov	r2, r1
 8004a44:	eb42 0303 	adc.w	r3, r2, r3
 8004a48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004a56:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004a58:	f04f 0200 	mov.w	r2, #0
 8004a5c:	f04f 0300 	mov.w	r3, #0
 8004a60:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004a64:	4649      	mov	r1, r9
 8004a66:	008b      	lsls	r3, r1, #2
 8004a68:	4641      	mov	r1, r8
 8004a6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a6e:	4641      	mov	r1, r8
 8004a70:	008a      	lsls	r2, r1, #2
 8004a72:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004a76:	f7fc f8b7 	bl	8000be8 <__aeabi_uldivmod>
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	460b      	mov	r3, r1
 8004a7e:	4611      	mov	r1, r2
 8004a80:	4b38      	ldr	r3, [pc, #224]	@ (8004b64 <UART_SetConfig+0x4e4>)
 8004a82:	fba3 2301 	umull	r2, r3, r3, r1
 8004a86:	095b      	lsrs	r3, r3, #5
 8004a88:	2264      	movs	r2, #100	@ 0x64
 8004a8a:	fb02 f303 	mul.w	r3, r2, r3
 8004a8e:	1acb      	subs	r3, r1, r3
 8004a90:	011b      	lsls	r3, r3, #4
 8004a92:	3332      	adds	r3, #50	@ 0x32
 8004a94:	4a33      	ldr	r2, [pc, #204]	@ (8004b64 <UART_SetConfig+0x4e4>)
 8004a96:	fba2 2303 	umull	r2, r3, r2, r3
 8004a9a:	095b      	lsrs	r3, r3, #5
 8004a9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004aa0:	441c      	add	r4, r3
 8004aa2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	673b      	str	r3, [r7, #112]	@ 0x70
 8004aaa:	677a      	str	r2, [r7, #116]	@ 0x74
 8004aac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004ab0:	4642      	mov	r2, r8
 8004ab2:	464b      	mov	r3, r9
 8004ab4:	1891      	adds	r1, r2, r2
 8004ab6:	60b9      	str	r1, [r7, #8]
 8004ab8:	415b      	adcs	r3, r3
 8004aba:	60fb      	str	r3, [r7, #12]
 8004abc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ac0:	4641      	mov	r1, r8
 8004ac2:	1851      	adds	r1, r2, r1
 8004ac4:	6039      	str	r1, [r7, #0]
 8004ac6:	4649      	mov	r1, r9
 8004ac8:	414b      	adcs	r3, r1
 8004aca:	607b      	str	r3, [r7, #4]
 8004acc:	f04f 0200 	mov.w	r2, #0
 8004ad0:	f04f 0300 	mov.w	r3, #0
 8004ad4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004ad8:	4659      	mov	r1, fp
 8004ada:	00cb      	lsls	r3, r1, #3
 8004adc:	4651      	mov	r1, sl
 8004ade:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ae2:	4651      	mov	r1, sl
 8004ae4:	00ca      	lsls	r2, r1, #3
 8004ae6:	4610      	mov	r0, r2
 8004ae8:	4619      	mov	r1, r3
 8004aea:	4603      	mov	r3, r0
 8004aec:	4642      	mov	r2, r8
 8004aee:	189b      	adds	r3, r3, r2
 8004af0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004af2:	464b      	mov	r3, r9
 8004af4:	460a      	mov	r2, r1
 8004af6:	eb42 0303 	adc.w	r3, r2, r3
 8004afa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	663b      	str	r3, [r7, #96]	@ 0x60
 8004b06:	667a      	str	r2, [r7, #100]	@ 0x64
 8004b08:	f04f 0200 	mov.w	r2, #0
 8004b0c:	f04f 0300 	mov.w	r3, #0
 8004b10:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004b14:	4649      	mov	r1, r9
 8004b16:	008b      	lsls	r3, r1, #2
 8004b18:	4641      	mov	r1, r8
 8004b1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b1e:	4641      	mov	r1, r8
 8004b20:	008a      	lsls	r2, r1, #2
 8004b22:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004b26:	f7fc f85f 	bl	8000be8 <__aeabi_uldivmod>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8004b64 <UART_SetConfig+0x4e4>)
 8004b30:	fba3 1302 	umull	r1, r3, r3, r2
 8004b34:	095b      	lsrs	r3, r3, #5
 8004b36:	2164      	movs	r1, #100	@ 0x64
 8004b38:	fb01 f303 	mul.w	r3, r1, r3
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	011b      	lsls	r3, r3, #4
 8004b40:	3332      	adds	r3, #50	@ 0x32
 8004b42:	4a08      	ldr	r2, [pc, #32]	@ (8004b64 <UART_SetConfig+0x4e4>)
 8004b44:	fba2 2303 	umull	r2, r3, r2, r3
 8004b48:	095b      	lsrs	r3, r3, #5
 8004b4a:	f003 020f 	and.w	r2, r3, #15
 8004b4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4422      	add	r2, r4
 8004b56:	609a      	str	r2, [r3, #8]
}
 8004b58:	bf00      	nop
 8004b5a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b64:	51eb851f 	.word	0x51eb851f

08004b68 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004b68:	b480      	push	{r7}
 8004b6a:	b085      	sub	sp, #20
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	60b9      	str	r1, [r7, #8]
 8004b72:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	4a07      	ldr	r2, [pc, #28]	@ (8004b94 <vApplicationGetIdleTaskMemory+0x2c>)
 8004b78:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	4a06      	ldr	r2, [pc, #24]	@ (8004b98 <vApplicationGetIdleTaskMemory+0x30>)
 8004b7e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2280      	movs	r2, #128	@ 0x80
 8004b84:	601a      	str	r2, [r3, #0]
}
 8004b86:	bf00      	nop
 8004b88:	3714      	adds	r7, #20
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop
 8004b94:	200006b8 	.word	0x200006b8
 8004b98:	20000714 	.word	0x20000714

08004b9c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004b9c:	b480      	push	{r7}
 8004b9e:	b085      	sub	sp, #20
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	60f8      	str	r0, [r7, #12]
 8004ba4:	60b9      	str	r1, [r7, #8]
 8004ba6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	4a07      	ldr	r2, [pc, #28]	@ (8004bc8 <vApplicationGetTimerTaskMemory+0x2c>)
 8004bac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	4a06      	ldr	r2, [pc, #24]	@ (8004bcc <vApplicationGetTimerTaskMemory+0x30>)
 8004bb2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004bba:	601a      	str	r2, [r3, #0]
}
 8004bbc:	bf00      	nop
 8004bbe:	3714      	adds	r7, #20
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr
 8004bc8:	20000914 	.word	0x20000914
 8004bcc:	20000970 	.word	0x20000970

08004bd0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f103 0208 	add.w	r2, r3, #8
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004be8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f103 0208 	add.w	r2, r3, #8
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f103 0208 	add.w	r2, r3, #8
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004c04:	bf00      	nop
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004c1e:	bf00      	nop
 8004c20:	370c      	adds	r7, #12
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr

08004c2a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c2a:	b480      	push	{r7}
 8004c2c:	b085      	sub	sp, #20
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
 8004c32:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	689a      	ldr	r2, [r3, #8]
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	683a      	ldr	r2, [r7, #0]
 8004c4e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	683a      	ldr	r2, [r7, #0]
 8004c54:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	1c5a      	adds	r2, r3, #1
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	601a      	str	r2, [r3, #0]
}
 8004c66:	bf00      	nop
 8004c68:	3714      	adds	r7, #20
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr

08004c72 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c72:	b480      	push	{r7}
 8004c74:	b085      	sub	sp, #20
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
 8004c7a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004c82:	68bb      	ldr	r3, [r7, #8]
 8004c84:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c88:	d103      	bne.n	8004c92 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	60fb      	str	r3, [r7, #12]
 8004c90:	e00c      	b.n	8004cac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	3308      	adds	r3, #8
 8004c96:	60fb      	str	r3, [r7, #12]
 8004c98:	e002      	b.n	8004ca0 <vListInsert+0x2e>
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	60fb      	str	r3, [r7, #12]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68ba      	ldr	r2, [r7, #8]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d2f6      	bcs.n	8004c9a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	685a      	ldr	r2, [r3, #4]
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	683a      	ldr	r2, [r7, #0]
 8004cba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	68fa      	ldr	r2, [r7, #12]
 8004cc0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	683a      	ldr	r2, [r7, #0]
 8004cc6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	1c5a      	adds	r2, r3, #1
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	601a      	str	r2, [r3, #0]
}
 8004cd8:	bf00      	nop
 8004cda:	3714      	adds	r7, #20
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b085      	sub	sp, #20
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	691b      	ldr	r3, [r3, #16]
 8004cf0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	6892      	ldr	r2, [r2, #8]
 8004cfa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	6852      	ldr	r2, [r2, #4]
 8004d04:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d103      	bne.n	8004d18 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	689a      	ldr	r2, [r3, #8]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	1e5a      	subs	r2, r3, #1
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3714      	adds	r7, #20
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d10b      	bne.n	8004d64 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004d4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d50:	f383 8811 	msr	BASEPRI, r3
 8004d54:	f3bf 8f6f 	isb	sy
 8004d58:	f3bf 8f4f 	dsb	sy
 8004d5c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004d5e:	bf00      	nop
 8004d60:	bf00      	nop
 8004d62:	e7fd      	b.n	8004d60 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004d64:	f002 f8b8 	bl	8006ed8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d70:	68f9      	ldr	r1, [r7, #12]
 8004d72:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004d74:	fb01 f303 	mul.w	r3, r1, r3
 8004d78:	441a      	add	r2, r3
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2200      	movs	r2, #0
 8004d82:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d94:	3b01      	subs	r3, #1
 8004d96:	68f9      	ldr	r1, [r7, #12]
 8004d98:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004d9a:	fb01 f303 	mul.w	r3, r1, r3
 8004d9e:	441a      	add	r2, r3
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	22ff      	movs	r2, #255	@ 0xff
 8004da8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	22ff      	movs	r2, #255	@ 0xff
 8004db0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d114      	bne.n	8004de4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d01a      	beq.n	8004df8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	3310      	adds	r3, #16
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f001 f956 	bl	8006078 <xTaskRemoveFromEventList>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d012      	beq.n	8004df8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8004e08 <xQueueGenericReset+0xd0>)
 8004dd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004dd8:	601a      	str	r2, [r3, #0]
 8004dda:	f3bf 8f4f 	dsb	sy
 8004dde:	f3bf 8f6f 	isb	sy
 8004de2:	e009      	b.n	8004df8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	3310      	adds	r3, #16
 8004de8:	4618      	mov	r0, r3
 8004dea:	f7ff fef1 	bl	8004bd0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	3324      	adds	r3, #36	@ 0x24
 8004df2:	4618      	mov	r0, r3
 8004df4:	f7ff feec 	bl	8004bd0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004df8:	f002 f8a0 	bl	8006f3c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004dfc:	2301      	movs	r3, #1
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3710      	adds	r7, #16
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	e000ed04 	.word	0xe000ed04

08004e0c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b08e      	sub	sp, #56	@ 0x38
 8004e10:	af02      	add	r7, sp, #8
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	607a      	str	r2, [r7, #4]
 8004e18:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d10b      	bne.n	8004e38 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004e20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e24:	f383 8811 	msr	BASEPRI, r3
 8004e28:	f3bf 8f6f 	isb	sy
 8004e2c:	f3bf 8f4f 	dsb	sy
 8004e30:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004e32:	bf00      	nop
 8004e34:	bf00      	nop
 8004e36:	e7fd      	b.n	8004e34 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d10b      	bne.n	8004e56 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e42:	f383 8811 	msr	BASEPRI, r3
 8004e46:	f3bf 8f6f 	isb	sy
 8004e4a:	f3bf 8f4f 	dsb	sy
 8004e4e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004e50:	bf00      	nop
 8004e52:	bf00      	nop
 8004e54:	e7fd      	b.n	8004e52 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d002      	beq.n	8004e62 <xQueueGenericCreateStatic+0x56>
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d001      	beq.n	8004e66 <xQueueGenericCreateStatic+0x5a>
 8004e62:	2301      	movs	r3, #1
 8004e64:	e000      	b.n	8004e68 <xQueueGenericCreateStatic+0x5c>
 8004e66:	2300      	movs	r3, #0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d10b      	bne.n	8004e84 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004e6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e70:	f383 8811 	msr	BASEPRI, r3
 8004e74:	f3bf 8f6f 	isb	sy
 8004e78:	f3bf 8f4f 	dsb	sy
 8004e7c:	623b      	str	r3, [r7, #32]
}
 8004e7e:	bf00      	nop
 8004e80:	bf00      	nop
 8004e82:	e7fd      	b.n	8004e80 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d102      	bne.n	8004e90 <xQueueGenericCreateStatic+0x84>
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d101      	bne.n	8004e94 <xQueueGenericCreateStatic+0x88>
 8004e90:	2301      	movs	r3, #1
 8004e92:	e000      	b.n	8004e96 <xQueueGenericCreateStatic+0x8a>
 8004e94:	2300      	movs	r3, #0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d10b      	bne.n	8004eb2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004e9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e9e:	f383 8811 	msr	BASEPRI, r3
 8004ea2:	f3bf 8f6f 	isb	sy
 8004ea6:	f3bf 8f4f 	dsb	sy
 8004eaa:	61fb      	str	r3, [r7, #28]
}
 8004eac:	bf00      	nop
 8004eae:	bf00      	nop
 8004eb0:	e7fd      	b.n	8004eae <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004eb2:	2350      	movs	r3, #80	@ 0x50
 8004eb4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	2b50      	cmp	r3, #80	@ 0x50
 8004eba:	d00b      	beq.n	8004ed4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004ebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ec0:	f383 8811 	msr	BASEPRI, r3
 8004ec4:	f3bf 8f6f 	isb	sy
 8004ec8:	f3bf 8f4f 	dsb	sy
 8004ecc:	61bb      	str	r3, [r7, #24]
}
 8004ece:	bf00      	nop
 8004ed0:	bf00      	nop
 8004ed2:	e7fd      	b.n	8004ed0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004ed4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004eda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d00d      	beq.n	8004efc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004ee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004ee8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004eec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eee:	9300      	str	r3, [sp, #0]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	68b9      	ldr	r1, [r7, #8]
 8004ef6:	68f8      	ldr	r0, [r7, #12]
 8004ef8:	f000 f840 	bl	8004f7c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004efc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3730      	adds	r7, #48	@ 0x30
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}

08004f06 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004f06:	b580      	push	{r7, lr}
 8004f08:	b08a      	sub	sp, #40	@ 0x28
 8004f0a:	af02      	add	r7, sp, #8
 8004f0c:	60f8      	str	r0, [r7, #12]
 8004f0e:	60b9      	str	r1, [r7, #8]
 8004f10:	4613      	mov	r3, r2
 8004f12:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d10b      	bne.n	8004f32 <xQueueGenericCreate+0x2c>
	__asm volatile
 8004f1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f1e:	f383 8811 	msr	BASEPRI, r3
 8004f22:	f3bf 8f6f 	isb	sy
 8004f26:	f3bf 8f4f 	dsb	sy
 8004f2a:	613b      	str	r3, [r7, #16]
}
 8004f2c:	bf00      	nop
 8004f2e:	bf00      	nop
 8004f30:	e7fd      	b.n	8004f2e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	68ba      	ldr	r2, [r7, #8]
 8004f36:	fb02 f303 	mul.w	r3, r2, r3
 8004f3a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	3350      	adds	r3, #80	@ 0x50
 8004f40:	4618      	mov	r0, r3
 8004f42:	f002 f8eb 	bl	800711c <pvPortMalloc>
 8004f46:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d011      	beq.n	8004f72 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	3350      	adds	r3, #80	@ 0x50
 8004f56:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004f60:	79fa      	ldrb	r2, [r7, #7]
 8004f62:	69bb      	ldr	r3, [r7, #24]
 8004f64:	9300      	str	r3, [sp, #0]
 8004f66:	4613      	mov	r3, r2
 8004f68:	697a      	ldr	r2, [r7, #20]
 8004f6a:	68b9      	ldr	r1, [r7, #8]
 8004f6c:	68f8      	ldr	r0, [r7, #12]
 8004f6e:	f000 f805 	bl	8004f7c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004f72:	69bb      	ldr	r3, [r7, #24]
	}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3720      	adds	r7, #32
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	607a      	str	r2, [r7, #4]
 8004f88:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d103      	bne.n	8004f98 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004f90:	69bb      	ldr	r3, [r7, #24]
 8004f92:	69ba      	ldr	r2, [r7, #24]
 8004f94:	601a      	str	r2, [r3, #0]
 8004f96:	e002      	b.n	8004f9e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	68fa      	ldr	r2, [r7, #12]
 8004fa2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004fa4:	69bb      	ldr	r3, [r7, #24]
 8004fa6:	68ba      	ldr	r2, [r7, #8]
 8004fa8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004faa:	2101      	movs	r1, #1
 8004fac:	69b8      	ldr	r0, [r7, #24]
 8004fae:	f7ff fec3 	bl	8004d38 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	78fa      	ldrb	r2, [r7, #3]
 8004fb6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004fba:	bf00      	nop
 8004fbc:	3710      	adds	r7, #16
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
	...

08004fc4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b08e      	sub	sp, #56	@ 0x38
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	607a      	str	r2, [r7, #4]
 8004fd0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d10b      	bne.n	8004ff8 <xQueueGenericSend+0x34>
	__asm volatile
 8004fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fe4:	f383 8811 	msr	BASEPRI, r3
 8004fe8:	f3bf 8f6f 	isb	sy
 8004fec:	f3bf 8f4f 	dsb	sy
 8004ff0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004ff2:	bf00      	nop
 8004ff4:	bf00      	nop
 8004ff6:	e7fd      	b.n	8004ff4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d103      	bne.n	8005006 <xQueueGenericSend+0x42>
 8004ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005002:	2b00      	cmp	r3, #0
 8005004:	d101      	bne.n	800500a <xQueueGenericSend+0x46>
 8005006:	2301      	movs	r3, #1
 8005008:	e000      	b.n	800500c <xQueueGenericSend+0x48>
 800500a:	2300      	movs	r3, #0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d10b      	bne.n	8005028 <xQueueGenericSend+0x64>
	__asm volatile
 8005010:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005014:	f383 8811 	msr	BASEPRI, r3
 8005018:	f3bf 8f6f 	isb	sy
 800501c:	f3bf 8f4f 	dsb	sy
 8005020:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005022:	bf00      	nop
 8005024:	bf00      	nop
 8005026:	e7fd      	b.n	8005024 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	2b02      	cmp	r3, #2
 800502c:	d103      	bne.n	8005036 <xQueueGenericSend+0x72>
 800502e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005030:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005032:	2b01      	cmp	r3, #1
 8005034:	d101      	bne.n	800503a <xQueueGenericSend+0x76>
 8005036:	2301      	movs	r3, #1
 8005038:	e000      	b.n	800503c <xQueueGenericSend+0x78>
 800503a:	2300      	movs	r3, #0
 800503c:	2b00      	cmp	r3, #0
 800503e:	d10b      	bne.n	8005058 <xQueueGenericSend+0x94>
	__asm volatile
 8005040:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005044:	f383 8811 	msr	BASEPRI, r3
 8005048:	f3bf 8f6f 	isb	sy
 800504c:	f3bf 8f4f 	dsb	sy
 8005050:	623b      	str	r3, [r7, #32]
}
 8005052:	bf00      	nop
 8005054:	bf00      	nop
 8005056:	e7fd      	b.n	8005054 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005058:	f001 f9ce 	bl	80063f8 <xTaskGetSchedulerState>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d102      	bne.n	8005068 <xQueueGenericSend+0xa4>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d101      	bne.n	800506c <xQueueGenericSend+0xa8>
 8005068:	2301      	movs	r3, #1
 800506a:	e000      	b.n	800506e <xQueueGenericSend+0xaa>
 800506c:	2300      	movs	r3, #0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d10b      	bne.n	800508a <xQueueGenericSend+0xc6>
	__asm volatile
 8005072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005076:	f383 8811 	msr	BASEPRI, r3
 800507a:	f3bf 8f6f 	isb	sy
 800507e:	f3bf 8f4f 	dsb	sy
 8005082:	61fb      	str	r3, [r7, #28]
}
 8005084:	bf00      	nop
 8005086:	bf00      	nop
 8005088:	e7fd      	b.n	8005086 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800508a:	f001 ff25 	bl	8006ed8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800508e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005090:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005094:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005096:	429a      	cmp	r2, r3
 8005098:	d302      	bcc.n	80050a0 <xQueueGenericSend+0xdc>
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	2b02      	cmp	r3, #2
 800509e:	d129      	bne.n	80050f4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80050a0:	683a      	ldr	r2, [r7, #0]
 80050a2:	68b9      	ldr	r1, [r7, #8]
 80050a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80050a6:	f000 fa0f 	bl	80054c8 <prvCopyDataToQueue>
 80050aa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d010      	beq.n	80050d6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80050b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050b6:	3324      	adds	r3, #36	@ 0x24
 80050b8:	4618      	mov	r0, r3
 80050ba:	f000 ffdd 	bl	8006078 <xTaskRemoveFromEventList>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d013      	beq.n	80050ec <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80050c4:	4b3f      	ldr	r3, [pc, #252]	@ (80051c4 <xQueueGenericSend+0x200>)
 80050c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050ca:	601a      	str	r2, [r3, #0]
 80050cc:	f3bf 8f4f 	dsb	sy
 80050d0:	f3bf 8f6f 	isb	sy
 80050d4:	e00a      	b.n	80050ec <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80050d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d007      	beq.n	80050ec <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80050dc:	4b39      	ldr	r3, [pc, #228]	@ (80051c4 <xQueueGenericSend+0x200>)
 80050de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050e2:	601a      	str	r2, [r3, #0]
 80050e4:	f3bf 8f4f 	dsb	sy
 80050e8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80050ec:	f001 ff26 	bl	8006f3c <vPortExitCritical>
				return pdPASS;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e063      	b.n	80051bc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d103      	bne.n	8005102 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80050fa:	f001 ff1f 	bl	8006f3c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80050fe:	2300      	movs	r3, #0
 8005100:	e05c      	b.n	80051bc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005102:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005104:	2b00      	cmp	r3, #0
 8005106:	d106      	bne.n	8005116 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005108:	f107 0314 	add.w	r3, r7, #20
 800510c:	4618      	mov	r0, r3
 800510e:	f001 f817 	bl	8006140 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005112:	2301      	movs	r3, #1
 8005114:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005116:	f001 ff11 	bl	8006f3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800511a:	f000 fd87 	bl	8005c2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800511e:	f001 fedb 	bl	8006ed8 <vPortEnterCritical>
 8005122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005124:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005128:	b25b      	sxtb	r3, r3
 800512a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800512e:	d103      	bne.n	8005138 <xQueueGenericSend+0x174>
 8005130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005132:	2200      	movs	r2, #0
 8005134:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800513a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800513e:	b25b      	sxtb	r3, r3
 8005140:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005144:	d103      	bne.n	800514e <xQueueGenericSend+0x18a>
 8005146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005148:	2200      	movs	r2, #0
 800514a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800514e:	f001 fef5 	bl	8006f3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005152:	1d3a      	adds	r2, r7, #4
 8005154:	f107 0314 	add.w	r3, r7, #20
 8005158:	4611      	mov	r1, r2
 800515a:	4618      	mov	r0, r3
 800515c:	f001 f806 	bl	800616c <xTaskCheckForTimeOut>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d124      	bne.n	80051b0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005166:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005168:	f000 faa6 	bl	80056b8 <prvIsQueueFull>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d018      	beq.n	80051a4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005174:	3310      	adds	r3, #16
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	4611      	mov	r1, r2
 800517a:	4618      	mov	r0, r3
 800517c:	f000 ff2a 	bl	8005fd4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005180:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005182:	f000 fa31 	bl	80055e8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005186:	f000 fd5f 	bl	8005c48 <xTaskResumeAll>
 800518a:	4603      	mov	r3, r0
 800518c:	2b00      	cmp	r3, #0
 800518e:	f47f af7c 	bne.w	800508a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005192:	4b0c      	ldr	r3, [pc, #48]	@ (80051c4 <xQueueGenericSend+0x200>)
 8005194:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005198:	601a      	str	r2, [r3, #0]
 800519a:	f3bf 8f4f 	dsb	sy
 800519e:	f3bf 8f6f 	isb	sy
 80051a2:	e772      	b.n	800508a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80051a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80051a6:	f000 fa1f 	bl	80055e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80051aa:	f000 fd4d 	bl	8005c48 <xTaskResumeAll>
 80051ae:	e76c      	b.n	800508a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80051b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80051b2:	f000 fa19 	bl	80055e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80051b6:	f000 fd47 	bl	8005c48 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80051ba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3738      	adds	r7, #56	@ 0x38
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	e000ed04 	.word	0xe000ed04

080051c8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b090      	sub	sp, #64	@ 0x40
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	607a      	str	r2, [r7, #4]
 80051d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80051da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d10b      	bne.n	80051f8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80051e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051e4:	f383 8811 	msr	BASEPRI, r3
 80051e8:	f3bf 8f6f 	isb	sy
 80051ec:	f3bf 8f4f 	dsb	sy
 80051f0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80051f2:	bf00      	nop
 80051f4:	bf00      	nop
 80051f6:	e7fd      	b.n	80051f4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d103      	bne.n	8005206 <xQueueGenericSendFromISR+0x3e>
 80051fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005202:	2b00      	cmp	r3, #0
 8005204:	d101      	bne.n	800520a <xQueueGenericSendFromISR+0x42>
 8005206:	2301      	movs	r3, #1
 8005208:	e000      	b.n	800520c <xQueueGenericSendFromISR+0x44>
 800520a:	2300      	movs	r3, #0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d10b      	bne.n	8005228 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005214:	f383 8811 	msr	BASEPRI, r3
 8005218:	f3bf 8f6f 	isb	sy
 800521c:	f3bf 8f4f 	dsb	sy
 8005220:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005222:	bf00      	nop
 8005224:	bf00      	nop
 8005226:	e7fd      	b.n	8005224 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	2b02      	cmp	r3, #2
 800522c:	d103      	bne.n	8005236 <xQueueGenericSendFromISR+0x6e>
 800522e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005230:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005232:	2b01      	cmp	r3, #1
 8005234:	d101      	bne.n	800523a <xQueueGenericSendFromISR+0x72>
 8005236:	2301      	movs	r3, #1
 8005238:	e000      	b.n	800523c <xQueueGenericSendFromISR+0x74>
 800523a:	2300      	movs	r3, #0
 800523c:	2b00      	cmp	r3, #0
 800523e:	d10b      	bne.n	8005258 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005244:	f383 8811 	msr	BASEPRI, r3
 8005248:	f3bf 8f6f 	isb	sy
 800524c:	f3bf 8f4f 	dsb	sy
 8005250:	623b      	str	r3, [r7, #32]
}
 8005252:	bf00      	nop
 8005254:	bf00      	nop
 8005256:	e7fd      	b.n	8005254 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005258:	f001 ff1e 	bl	8007098 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800525c:	f3ef 8211 	mrs	r2, BASEPRI
 8005260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005264:	f383 8811 	msr	BASEPRI, r3
 8005268:	f3bf 8f6f 	isb	sy
 800526c:	f3bf 8f4f 	dsb	sy
 8005270:	61fa      	str	r2, [r7, #28]
 8005272:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005274:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005276:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800527a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800527c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800527e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005280:	429a      	cmp	r2, r3
 8005282:	d302      	bcc.n	800528a <xQueueGenericSendFromISR+0xc2>
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	2b02      	cmp	r3, #2
 8005288:	d12f      	bne.n	80052ea <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800528a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800528c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005290:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005296:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005298:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800529a:	683a      	ldr	r2, [r7, #0]
 800529c:	68b9      	ldr	r1, [r7, #8]
 800529e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80052a0:	f000 f912 	bl	80054c8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80052a4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80052a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80052ac:	d112      	bne.n	80052d4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80052ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d016      	beq.n	80052e4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80052b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052b8:	3324      	adds	r3, #36	@ 0x24
 80052ba:	4618      	mov	r0, r3
 80052bc:	f000 fedc 	bl	8006078 <xTaskRemoveFromEventList>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d00e      	beq.n	80052e4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d00b      	beq.n	80052e4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	601a      	str	r2, [r3, #0]
 80052d2:	e007      	b.n	80052e4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80052d4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80052d8:	3301      	adds	r3, #1
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	b25a      	sxtb	r2, r3
 80052de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80052e4:	2301      	movs	r3, #1
 80052e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80052e8:	e001      	b.n	80052ee <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80052ea:	2300      	movs	r3, #0
 80052ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80052ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052f0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80052f8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80052fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3740      	adds	r7, #64	@ 0x40
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}

08005304 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b08c      	sub	sp, #48	@ 0x30
 8005308:	af00      	add	r7, sp, #0
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005310:	2300      	movs	r3, #0
 8005312:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800531a:	2b00      	cmp	r3, #0
 800531c:	d10b      	bne.n	8005336 <xQueueReceive+0x32>
	__asm volatile
 800531e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005322:	f383 8811 	msr	BASEPRI, r3
 8005326:	f3bf 8f6f 	isb	sy
 800532a:	f3bf 8f4f 	dsb	sy
 800532e:	623b      	str	r3, [r7, #32]
}
 8005330:	bf00      	nop
 8005332:	bf00      	nop
 8005334:	e7fd      	b.n	8005332 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d103      	bne.n	8005344 <xQueueReceive+0x40>
 800533c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800533e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005340:	2b00      	cmp	r3, #0
 8005342:	d101      	bne.n	8005348 <xQueueReceive+0x44>
 8005344:	2301      	movs	r3, #1
 8005346:	e000      	b.n	800534a <xQueueReceive+0x46>
 8005348:	2300      	movs	r3, #0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d10b      	bne.n	8005366 <xQueueReceive+0x62>
	__asm volatile
 800534e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005352:	f383 8811 	msr	BASEPRI, r3
 8005356:	f3bf 8f6f 	isb	sy
 800535a:	f3bf 8f4f 	dsb	sy
 800535e:	61fb      	str	r3, [r7, #28]
}
 8005360:	bf00      	nop
 8005362:	bf00      	nop
 8005364:	e7fd      	b.n	8005362 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005366:	f001 f847 	bl	80063f8 <xTaskGetSchedulerState>
 800536a:	4603      	mov	r3, r0
 800536c:	2b00      	cmp	r3, #0
 800536e:	d102      	bne.n	8005376 <xQueueReceive+0x72>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d101      	bne.n	800537a <xQueueReceive+0x76>
 8005376:	2301      	movs	r3, #1
 8005378:	e000      	b.n	800537c <xQueueReceive+0x78>
 800537a:	2300      	movs	r3, #0
 800537c:	2b00      	cmp	r3, #0
 800537e:	d10b      	bne.n	8005398 <xQueueReceive+0x94>
	__asm volatile
 8005380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005384:	f383 8811 	msr	BASEPRI, r3
 8005388:	f3bf 8f6f 	isb	sy
 800538c:	f3bf 8f4f 	dsb	sy
 8005390:	61bb      	str	r3, [r7, #24]
}
 8005392:	bf00      	nop
 8005394:	bf00      	nop
 8005396:	e7fd      	b.n	8005394 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005398:	f001 fd9e 	bl	8006ed8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800539c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800539e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053a0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80053a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d01f      	beq.n	80053e8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80053a8:	68b9      	ldr	r1, [r7, #8]
 80053aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80053ac:	f000 f8f6 	bl	800559c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80053b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b2:	1e5a      	subs	r2, r3, #1
 80053b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053b6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ba:	691b      	ldr	r3, [r3, #16]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d00f      	beq.n	80053e0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053c2:	3310      	adds	r3, #16
 80053c4:	4618      	mov	r0, r3
 80053c6:	f000 fe57 	bl	8006078 <xTaskRemoveFromEventList>
 80053ca:	4603      	mov	r3, r0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d007      	beq.n	80053e0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80053d0:	4b3c      	ldr	r3, [pc, #240]	@ (80054c4 <xQueueReceive+0x1c0>)
 80053d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053d6:	601a      	str	r2, [r3, #0]
 80053d8:	f3bf 8f4f 	dsb	sy
 80053dc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80053e0:	f001 fdac 	bl	8006f3c <vPortExitCritical>
				return pdPASS;
 80053e4:	2301      	movs	r3, #1
 80053e6:	e069      	b.n	80054bc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d103      	bne.n	80053f6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80053ee:	f001 fda5 	bl	8006f3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80053f2:	2300      	movs	r3, #0
 80053f4:	e062      	b.n	80054bc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80053f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d106      	bne.n	800540a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80053fc:	f107 0310 	add.w	r3, r7, #16
 8005400:	4618      	mov	r0, r3
 8005402:	f000 fe9d 	bl	8006140 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005406:	2301      	movs	r3, #1
 8005408:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800540a:	f001 fd97 	bl	8006f3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800540e:	f000 fc0d 	bl	8005c2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005412:	f001 fd61 	bl	8006ed8 <vPortEnterCritical>
 8005416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005418:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800541c:	b25b      	sxtb	r3, r3
 800541e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005422:	d103      	bne.n	800542c <xQueueReceive+0x128>
 8005424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005426:	2200      	movs	r2, #0
 8005428:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800542c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800542e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005432:	b25b      	sxtb	r3, r3
 8005434:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005438:	d103      	bne.n	8005442 <xQueueReceive+0x13e>
 800543a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800543c:	2200      	movs	r2, #0
 800543e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005442:	f001 fd7b 	bl	8006f3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005446:	1d3a      	adds	r2, r7, #4
 8005448:	f107 0310 	add.w	r3, r7, #16
 800544c:	4611      	mov	r1, r2
 800544e:	4618      	mov	r0, r3
 8005450:	f000 fe8c 	bl	800616c <xTaskCheckForTimeOut>
 8005454:	4603      	mov	r3, r0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d123      	bne.n	80054a2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800545a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800545c:	f000 f916 	bl	800568c <prvIsQueueEmpty>
 8005460:	4603      	mov	r3, r0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d017      	beq.n	8005496 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005468:	3324      	adds	r3, #36	@ 0x24
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	4611      	mov	r1, r2
 800546e:	4618      	mov	r0, r3
 8005470:	f000 fdb0 	bl	8005fd4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005474:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005476:	f000 f8b7 	bl	80055e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800547a:	f000 fbe5 	bl	8005c48 <xTaskResumeAll>
 800547e:	4603      	mov	r3, r0
 8005480:	2b00      	cmp	r3, #0
 8005482:	d189      	bne.n	8005398 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005484:	4b0f      	ldr	r3, [pc, #60]	@ (80054c4 <xQueueReceive+0x1c0>)
 8005486:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800548a:	601a      	str	r2, [r3, #0]
 800548c:	f3bf 8f4f 	dsb	sy
 8005490:	f3bf 8f6f 	isb	sy
 8005494:	e780      	b.n	8005398 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005496:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005498:	f000 f8a6 	bl	80055e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800549c:	f000 fbd4 	bl	8005c48 <xTaskResumeAll>
 80054a0:	e77a      	b.n	8005398 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80054a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80054a4:	f000 f8a0 	bl	80055e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80054a8:	f000 fbce 	bl	8005c48 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80054ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80054ae:	f000 f8ed 	bl	800568c <prvIsQueueEmpty>
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	f43f af6f 	beq.w	8005398 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80054ba:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3730      	adds	r7, #48	@ 0x30
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	e000ed04 	.word	0xe000ed04

080054c8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b086      	sub	sp, #24
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	60b9      	str	r1, [r7, #8]
 80054d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80054d4:	2300      	movs	r3, #0
 80054d6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054dc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d10d      	bne.n	8005502 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d14d      	bne.n	800558a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	4618      	mov	r0, r3
 80054f4:	f000 ff9e 	bl	8006434 <xTaskPriorityDisinherit>
 80054f8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2200      	movs	r2, #0
 80054fe:	609a      	str	r2, [r3, #8]
 8005500:	e043      	b.n	800558a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d119      	bne.n	800553c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6858      	ldr	r0, [r3, #4]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005510:	461a      	mov	r2, r3
 8005512:	68b9      	ldr	r1, [r7, #8]
 8005514:	f002 fd78 	bl	8008008 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	685a      	ldr	r2, [r3, #4]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005520:	441a      	add	r2, r3
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	685a      	ldr	r2, [r3, #4]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	689b      	ldr	r3, [r3, #8]
 800552e:	429a      	cmp	r2, r3
 8005530:	d32b      	bcc.n	800558a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	605a      	str	r2, [r3, #4]
 800553a:	e026      	b.n	800558a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	68d8      	ldr	r0, [r3, #12]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005544:	461a      	mov	r2, r3
 8005546:	68b9      	ldr	r1, [r7, #8]
 8005548:	f002 fd5e 	bl	8008008 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	68da      	ldr	r2, [r3, #12]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005554:	425b      	negs	r3, r3
 8005556:	441a      	add	r2, r3
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	68da      	ldr	r2, [r3, #12]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	429a      	cmp	r2, r3
 8005566:	d207      	bcs.n	8005578 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	689a      	ldr	r2, [r3, #8]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005570:	425b      	negs	r3, r3
 8005572:	441a      	add	r2, r3
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2b02      	cmp	r3, #2
 800557c:	d105      	bne.n	800558a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800557e:	693b      	ldr	r3, [r7, #16]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d002      	beq.n	800558a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	3b01      	subs	r3, #1
 8005588:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	1c5a      	adds	r2, r3, #1
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005592:	697b      	ldr	r3, [r7, #20]
}
 8005594:	4618      	mov	r0, r3
 8005596:	3718      	adds	r7, #24
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}

0800559c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b082      	sub	sp, #8
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
 80055a4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d018      	beq.n	80055e0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	68da      	ldr	r2, [r3, #12]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055b6:	441a      	add	r2, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	68da      	ldr	r2, [r3, #12]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d303      	bcc.n	80055d0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	68d9      	ldr	r1, [r3, #12]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055d8:	461a      	mov	r2, r3
 80055da:	6838      	ldr	r0, [r7, #0]
 80055dc:	f002 fd14 	bl	8008008 <memcpy>
	}
}
 80055e0:	bf00      	nop
 80055e2:	3708      	adds	r7, #8
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80055f0:	f001 fc72 	bl	8006ed8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80055fa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80055fc:	e011      	b.n	8005622 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005602:	2b00      	cmp	r3, #0
 8005604:	d012      	beq.n	800562c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	3324      	adds	r3, #36	@ 0x24
 800560a:	4618      	mov	r0, r3
 800560c:	f000 fd34 	bl	8006078 <xTaskRemoveFromEventList>
 8005610:	4603      	mov	r3, r0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d001      	beq.n	800561a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005616:	f000 fe0d 	bl	8006234 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800561a:	7bfb      	ldrb	r3, [r7, #15]
 800561c:	3b01      	subs	r3, #1
 800561e:	b2db      	uxtb	r3, r3
 8005620:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005622:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005626:	2b00      	cmp	r3, #0
 8005628:	dce9      	bgt.n	80055fe <prvUnlockQueue+0x16>
 800562a:	e000      	b.n	800562e <prvUnlockQueue+0x46>
					break;
 800562c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	22ff      	movs	r2, #255	@ 0xff
 8005632:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005636:	f001 fc81 	bl	8006f3c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800563a:	f001 fc4d 	bl	8006ed8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005644:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005646:	e011      	b.n	800566c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d012      	beq.n	8005676 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	3310      	adds	r3, #16
 8005654:	4618      	mov	r0, r3
 8005656:	f000 fd0f 	bl	8006078 <xTaskRemoveFromEventList>
 800565a:	4603      	mov	r3, r0
 800565c:	2b00      	cmp	r3, #0
 800565e:	d001      	beq.n	8005664 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005660:	f000 fde8 	bl	8006234 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005664:	7bbb      	ldrb	r3, [r7, #14]
 8005666:	3b01      	subs	r3, #1
 8005668:	b2db      	uxtb	r3, r3
 800566a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800566c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005670:	2b00      	cmp	r3, #0
 8005672:	dce9      	bgt.n	8005648 <prvUnlockQueue+0x60>
 8005674:	e000      	b.n	8005678 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005676:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	22ff      	movs	r2, #255	@ 0xff
 800567c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005680:	f001 fc5c 	bl	8006f3c <vPortExitCritical>
}
 8005684:	bf00      	nop
 8005686:	3710      	adds	r7, #16
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}

0800568c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b084      	sub	sp, #16
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005694:	f001 fc20 	bl	8006ed8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800569c:	2b00      	cmp	r3, #0
 800569e:	d102      	bne.n	80056a6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80056a0:	2301      	movs	r3, #1
 80056a2:	60fb      	str	r3, [r7, #12]
 80056a4:	e001      	b.n	80056aa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80056a6:	2300      	movs	r3, #0
 80056a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80056aa:	f001 fc47 	bl	8006f3c <vPortExitCritical>

	return xReturn;
 80056ae:	68fb      	ldr	r3, [r7, #12]
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3710      	adds	r7, #16
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80056c0:	f001 fc0a 	bl	8006ed8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d102      	bne.n	80056d6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80056d0:	2301      	movs	r3, #1
 80056d2:	60fb      	str	r3, [r7, #12]
 80056d4:	e001      	b.n	80056da <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80056d6:	2300      	movs	r3, #0
 80056d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80056da:	f001 fc2f 	bl	8006f3c <vPortExitCritical>

	return xReturn;
 80056de:	68fb      	ldr	r3, [r7, #12]
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3710      	adds	r7, #16
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80056e8:	b480      	push	{r7}
 80056ea:	b085      	sub	sp, #20
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80056f2:	2300      	movs	r3, #0
 80056f4:	60fb      	str	r3, [r7, #12]
 80056f6:	e014      	b.n	8005722 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80056f8:	4a0f      	ldr	r2, [pc, #60]	@ (8005738 <vQueueAddToRegistry+0x50>)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d10b      	bne.n	800571c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005704:	490c      	ldr	r1, [pc, #48]	@ (8005738 <vQueueAddToRegistry+0x50>)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	683a      	ldr	r2, [r7, #0]
 800570a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800570e:	4a0a      	ldr	r2, [pc, #40]	@ (8005738 <vQueueAddToRegistry+0x50>)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	00db      	lsls	r3, r3, #3
 8005714:	4413      	add	r3, r2
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800571a:	e006      	b.n	800572a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	3301      	adds	r3, #1
 8005720:	60fb      	str	r3, [r7, #12]
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2b07      	cmp	r3, #7
 8005726:	d9e7      	bls.n	80056f8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005728:	bf00      	nop
 800572a:	bf00      	nop
 800572c:	3714      	adds	r7, #20
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr
 8005736:	bf00      	nop
 8005738:	20000d70 	.word	0x20000d70

0800573c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800573c:	b580      	push	{r7, lr}
 800573e:	b086      	sub	sp, #24
 8005740:	af00      	add	r7, sp, #0
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	60b9      	str	r1, [r7, #8]
 8005746:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800574c:	f001 fbc4 	bl	8006ed8 <vPortEnterCritical>
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005756:	b25b      	sxtb	r3, r3
 8005758:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800575c:	d103      	bne.n	8005766 <vQueueWaitForMessageRestricted+0x2a>
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	2200      	movs	r2, #0
 8005762:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800576c:	b25b      	sxtb	r3, r3
 800576e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005772:	d103      	bne.n	800577c <vQueueWaitForMessageRestricted+0x40>
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	2200      	movs	r2, #0
 8005778:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800577c:	f001 fbde 	bl	8006f3c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005784:	2b00      	cmp	r3, #0
 8005786:	d106      	bne.n	8005796 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	3324      	adds	r3, #36	@ 0x24
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	68b9      	ldr	r1, [r7, #8]
 8005790:	4618      	mov	r0, r3
 8005792:	f000 fc45 	bl	8006020 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005796:	6978      	ldr	r0, [r7, #20]
 8005798:	f7ff ff26 	bl	80055e8 <prvUnlockQueue>
	}
 800579c:	bf00      	nop
 800579e:	3718      	adds	r7, #24
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b08e      	sub	sp, #56	@ 0x38
 80057a8:	af04      	add	r7, sp, #16
 80057aa:	60f8      	str	r0, [r7, #12]
 80057ac:	60b9      	str	r1, [r7, #8]
 80057ae:	607a      	str	r2, [r7, #4]
 80057b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80057b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d10b      	bne.n	80057d0 <xTaskCreateStatic+0x2c>
	__asm volatile
 80057b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057bc:	f383 8811 	msr	BASEPRI, r3
 80057c0:	f3bf 8f6f 	isb	sy
 80057c4:	f3bf 8f4f 	dsb	sy
 80057c8:	623b      	str	r3, [r7, #32]
}
 80057ca:	bf00      	nop
 80057cc:	bf00      	nop
 80057ce:	e7fd      	b.n	80057cc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80057d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d10b      	bne.n	80057ee <xTaskCreateStatic+0x4a>
	__asm volatile
 80057d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057da:	f383 8811 	msr	BASEPRI, r3
 80057de:	f3bf 8f6f 	isb	sy
 80057e2:	f3bf 8f4f 	dsb	sy
 80057e6:	61fb      	str	r3, [r7, #28]
}
 80057e8:	bf00      	nop
 80057ea:	bf00      	nop
 80057ec:	e7fd      	b.n	80057ea <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80057ee:	235c      	movs	r3, #92	@ 0x5c
 80057f0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	2b5c      	cmp	r3, #92	@ 0x5c
 80057f6:	d00b      	beq.n	8005810 <xTaskCreateStatic+0x6c>
	__asm volatile
 80057f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057fc:	f383 8811 	msr	BASEPRI, r3
 8005800:	f3bf 8f6f 	isb	sy
 8005804:	f3bf 8f4f 	dsb	sy
 8005808:	61bb      	str	r3, [r7, #24]
}
 800580a:	bf00      	nop
 800580c:	bf00      	nop
 800580e:	e7fd      	b.n	800580c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005810:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005814:	2b00      	cmp	r3, #0
 8005816:	d01e      	beq.n	8005856 <xTaskCreateStatic+0xb2>
 8005818:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800581a:	2b00      	cmp	r3, #0
 800581c:	d01b      	beq.n	8005856 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800581e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005820:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005824:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005826:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800582a:	2202      	movs	r2, #2
 800582c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005830:	2300      	movs	r3, #0
 8005832:	9303      	str	r3, [sp, #12]
 8005834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005836:	9302      	str	r3, [sp, #8]
 8005838:	f107 0314 	add.w	r3, r7, #20
 800583c:	9301      	str	r3, [sp, #4]
 800583e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005840:	9300      	str	r3, [sp, #0]
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	68b9      	ldr	r1, [r7, #8]
 8005848:	68f8      	ldr	r0, [r7, #12]
 800584a:	f000 f850 	bl	80058ee <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800584e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005850:	f000 f8de 	bl	8005a10 <prvAddNewTaskToReadyList>
 8005854:	e001      	b.n	800585a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005856:	2300      	movs	r3, #0
 8005858:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800585a:	697b      	ldr	r3, [r7, #20]
	}
 800585c:	4618      	mov	r0, r3
 800585e:	3728      	adds	r7, #40	@ 0x28
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005864:	b580      	push	{r7, lr}
 8005866:	b08c      	sub	sp, #48	@ 0x30
 8005868:	af04      	add	r7, sp, #16
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	603b      	str	r3, [r7, #0]
 8005870:	4613      	mov	r3, r2
 8005872:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005874:	88fb      	ldrh	r3, [r7, #6]
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	4618      	mov	r0, r3
 800587a:	f001 fc4f 	bl	800711c <pvPortMalloc>
 800587e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d00e      	beq.n	80058a4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005886:	205c      	movs	r0, #92	@ 0x5c
 8005888:	f001 fc48 	bl	800711c <pvPortMalloc>
 800588c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d003      	beq.n	800589c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	697a      	ldr	r2, [r7, #20]
 8005898:	631a      	str	r2, [r3, #48]	@ 0x30
 800589a:	e005      	b.n	80058a8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800589c:	6978      	ldr	r0, [r7, #20]
 800589e:	f001 fd0b 	bl	80072b8 <vPortFree>
 80058a2:	e001      	b.n	80058a8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80058a4:	2300      	movs	r3, #0
 80058a6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80058a8:	69fb      	ldr	r3, [r7, #28]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d017      	beq.n	80058de <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80058ae:	69fb      	ldr	r3, [r7, #28]
 80058b0:	2200      	movs	r2, #0
 80058b2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80058b6:	88fa      	ldrh	r2, [r7, #6]
 80058b8:	2300      	movs	r3, #0
 80058ba:	9303      	str	r3, [sp, #12]
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	9302      	str	r3, [sp, #8]
 80058c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058c2:	9301      	str	r3, [sp, #4]
 80058c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058c6:	9300      	str	r3, [sp, #0]
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	68b9      	ldr	r1, [r7, #8]
 80058cc:	68f8      	ldr	r0, [r7, #12]
 80058ce:	f000 f80e 	bl	80058ee <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80058d2:	69f8      	ldr	r0, [r7, #28]
 80058d4:	f000 f89c 	bl	8005a10 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80058d8:	2301      	movs	r3, #1
 80058da:	61bb      	str	r3, [r7, #24]
 80058dc:	e002      	b.n	80058e4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80058de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80058e2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80058e4:	69bb      	ldr	r3, [r7, #24]
	}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3720      	adds	r7, #32
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}

080058ee <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80058ee:	b580      	push	{r7, lr}
 80058f0:	b088      	sub	sp, #32
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	60f8      	str	r0, [r7, #12]
 80058f6:	60b9      	str	r1, [r7, #8]
 80058f8:	607a      	str	r2, [r7, #4]
 80058fa:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80058fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058fe:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	461a      	mov	r2, r3
 8005906:	21a5      	movs	r1, #165	@ 0xa5
 8005908:	f002 fb44 	bl	8007f94 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800590c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800590e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005916:	3b01      	subs	r3, #1
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	4413      	add	r3, r2
 800591c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800591e:	69bb      	ldr	r3, [r7, #24]
 8005920:	f023 0307 	bic.w	r3, r3, #7
 8005924:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005926:	69bb      	ldr	r3, [r7, #24]
 8005928:	f003 0307 	and.w	r3, r3, #7
 800592c:	2b00      	cmp	r3, #0
 800592e:	d00b      	beq.n	8005948 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005934:	f383 8811 	msr	BASEPRI, r3
 8005938:	f3bf 8f6f 	isb	sy
 800593c:	f3bf 8f4f 	dsb	sy
 8005940:	617b      	str	r3, [r7, #20]
}
 8005942:	bf00      	nop
 8005944:	bf00      	nop
 8005946:	e7fd      	b.n	8005944 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d01f      	beq.n	800598e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800594e:	2300      	movs	r3, #0
 8005950:	61fb      	str	r3, [r7, #28]
 8005952:	e012      	b.n	800597a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005954:	68ba      	ldr	r2, [r7, #8]
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	4413      	add	r3, r2
 800595a:	7819      	ldrb	r1, [r3, #0]
 800595c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	4413      	add	r3, r2
 8005962:	3334      	adds	r3, #52	@ 0x34
 8005964:	460a      	mov	r2, r1
 8005966:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005968:	68ba      	ldr	r2, [r7, #8]
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	4413      	add	r3, r2
 800596e:	781b      	ldrb	r3, [r3, #0]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d006      	beq.n	8005982 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	3301      	adds	r3, #1
 8005978:	61fb      	str	r3, [r7, #28]
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	2b0f      	cmp	r3, #15
 800597e:	d9e9      	bls.n	8005954 <prvInitialiseNewTask+0x66>
 8005980:	e000      	b.n	8005984 <prvInitialiseNewTask+0x96>
			{
				break;
 8005982:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005986:	2200      	movs	r2, #0
 8005988:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800598c:	e003      	b.n	8005996 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800598e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005990:	2200      	movs	r2, #0
 8005992:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005998:	2b37      	cmp	r3, #55	@ 0x37
 800599a:	d901      	bls.n	80059a0 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800599c:	2337      	movs	r3, #55	@ 0x37
 800599e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80059a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80059a4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80059a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80059aa:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80059ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ae:	2200      	movs	r2, #0
 80059b0:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80059b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059b4:	3304      	adds	r3, #4
 80059b6:	4618      	mov	r0, r3
 80059b8:	f7ff f92a 	bl	8004c10 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80059bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059be:	3318      	adds	r3, #24
 80059c0:	4618      	mov	r0, r3
 80059c2:	f7ff f925 	bl	8004c10 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80059c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059ca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059ce:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80059d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059d4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80059d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059da:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80059dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059de:	2200      	movs	r2, #0
 80059e0:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80059e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059e4:	2200      	movs	r2, #0
 80059e6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80059ea:	683a      	ldr	r2, [r7, #0]
 80059ec:	68f9      	ldr	r1, [r7, #12]
 80059ee:	69b8      	ldr	r0, [r7, #24]
 80059f0:	f001 f93e 	bl	8006c70 <pxPortInitialiseStack>
 80059f4:	4602      	mov	r2, r0
 80059f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059f8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80059fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d002      	beq.n	8005a06 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005a00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a06:	bf00      	nop
 8005a08:	3720      	adds	r7, #32
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
	...

08005a10 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b082      	sub	sp, #8
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005a18:	f001 fa5e 	bl	8006ed8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005a1c:	4b2d      	ldr	r3, [pc, #180]	@ (8005ad4 <prvAddNewTaskToReadyList+0xc4>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	3301      	adds	r3, #1
 8005a22:	4a2c      	ldr	r2, [pc, #176]	@ (8005ad4 <prvAddNewTaskToReadyList+0xc4>)
 8005a24:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005a26:	4b2c      	ldr	r3, [pc, #176]	@ (8005ad8 <prvAddNewTaskToReadyList+0xc8>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d109      	bne.n	8005a42 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005a2e:	4a2a      	ldr	r2, [pc, #168]	@ (8005ad8 <prvAddNewTaskToReadyList+0xc8>)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005a34:	4b27      	ldr	r3, [pc, #156]	@ (8005ad4 <prvAddNewTaskToReadyList+0xc4>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d110      	bne.n	8005a5e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005a3c:	f000 fc1e 	bl	800627c <prvInitialiseTaskLists>
 8005a40:	e00d      	b.n	8005a5e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005a42:	4b26      	ldr	r3, [pc, #152]	@ (8005adc <prvAddNewTaskToReadyList+0xcc>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d109      	bne.n	8005a5e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005a4a:	4b23      	ldr	r3, [pc, #140]	@ (8005ad8 <prvAddNewTaskToReadyList+0xc8>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a54:	429a      	cmp	r2, r3
 8005a56:	d802      	bhi.n	8005a5e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005a58:	4a1f      	ldr	r2, [pc, #124]	@ (8005ad8 <prvAddNewTaskToReadyList+0xc8>)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005a5e:	4b20      	ldr	r3, [pc, #128]	@ (8005ae0 <prvAddNewTaskToReadyList+0xd0>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	3301      	adds	r3, #1
 8005a64:	4a1e      	ldr	r2, [pc, #120]	@ (8005ae0 <prvAddNewTaskToReadyList+0xd0>)
 8005a66:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005a68:	4b1d      	ldr	r3, [pc, #116]	@ (8005ae0 <prvAddNewTaskToReadyList+0xd0>)
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a74:	4b1b      	ldr	r3, [pc, #108]	@ (8005ae4 <prvAddNewTaskToReadyList+0xd4>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d903      	bls.n	8005a84 <prvAddNewTaskToReadyList+0x74>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a80:	4a18      	ldr	r2, [pc, #96]	@ (8005ae4 <prvAddNewTaskToReadyList+0xd4>)
 8005a82:	6013      	str	r3, [r2, #0]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a88:	4613      	mov	r3, r2
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	4413      	add	r3, r2
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	4a15      	ldr	r2, [pc, #84]	@ (8005ae8 <prvAddNewTaskToReadyList+0xd8>)
 8005a92:	441a      	add	r2, r3
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	3304      	adds	r3, #4
 8005a98:	4619      	mov	r1, r3
 8005a9a:	4610      	mov	r0, r2
 8005a9c:	f7ff f8c5 	bl	8004c2a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005aa0:	f001 fa4c 	bl	8006f3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005aa4:	4b0d      	ldr	r3, [pc, #52]	@ (8005adc <prvAddNewTaskToReadyList+0xcc>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d00e      	beq.n	8005aca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005aac:	4b0a      	ldr	r3, [pc, #40]	@ (8005ad8 <prvAddNewTaskToReadyList+0xc8>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d207      	bcs.n	8005aca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005aba:	4b0c      	ldr	r3, [pc, #48]	@ (8005aec <prvAddNewTaskToReadyList+0xdc>)
 8005abc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ac0:	601a      	str	r2, [r3, #0]
 8005ac2:	f3bf 8f4f 	dsb	sy
 8005ac6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005aca:	bf00      	nop
 8005acc:	3708      	adds	r7, #8
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	20001284 	.word	0x20001284
 8005ad8:	20000db0 	.word	0x20000db0
 8005adc:	20001290 	.word	0x20001290
 8005ae0:	200012a0 	.word	0x200012a0
 8005ae4:	2000128c 	.word	0x2000128c
 8005ae8:	20000db4 	.word	0x20000db4
 8005aec:	e000ed04 	.word	0xe000ed04

08005af0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005af8:	2300      	movs	r3, #0
 8005afa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d018      	beq.n	8005b34 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005b02:	4b14      	ldr	r3, [pc, #80]	@ (8005b54 <vTaskDelay+0x64>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d00b      	beq.n	8005b22 <vTaskDelay+0x32>
	__asm volatile
 8005b0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b0e:	f383 8811 	msr	BASEPRI, r3
 8005b12:	f3bf 8f6f 	isb	sy
 8005b16:	f3bf 8f4f 	dsb	sy
 8005b1a:	60bb      	str	r3, [r7, #8]
}
 8005b1c:	bf00      	nop
 8005b1e:	bf00      	nop
 8005b20:	e7fd      	b.n	8005b1e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005b22:	f000 f883 	bl	8005c2c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005b26:	2100      	movs	r1, #0
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f000 fcf3 	bl	8006514 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005b2e:	f000 f88b 	bl	8005c48 <xTaskResumeAll>
 8005b32:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d107      	bne.n	8005b4a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005b3a:	4b07      	ldr	r3, [pc, #28]	@ (8005b58 <vTaskDelay+0x68>)
 8005b3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b40:	601a      	str	r2, [r3, #0]
 8005b42:	f3bf 8f4f 	dsb	sy
 8005b46:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005b4a:	bf00      	nop
 8005b4c:	3710      	adds	r7, #16
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	bf00      	nop
 8005b54:	200012ac 	.word	0x200012ac
 8005b58:	e000ed04 	.word	0xe000ed04

08005b5c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b08a      	sub	sp, #40	@ 0x28
 8005b60:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005b62:	2300      	movs	r3, #0
 8005b64:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005b66:	2300      	movs	r3, #0
 8005b68:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005b6a:	463a      	mov	r2, r7
 8005b6c:	1d39      	adds	r1, r7, #4
 8005b6e:	f107 0308 	add.w	r3, r7, #8
 8005b72:	4618      	mov	r0, r3
 8005b74:	f7fe fff8 	bl	8004b68 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005b78:	6839      	ldr	r1, [r7, #0]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	68ba      	ldr	r2, [r7, #8]
 8005b7e:	9202      	str	r2, [sp, #8]
 8005b80:	9301      	str	r3, [sp, #4]
 8005b82:	2300      	movs	r3, #0
 8005b84:	9300      	str	r3, [sp, #0]
 8005b86:	2300      	movs	r3, #0
 8005b88:	460a      	mov	r2, r1
 8005b8a:	4922      	ldr	r1, [pc, #136]	@ (8005c14 <vTaskStartScheduler+0xb8>)
 8005b8c:	4822      	ldr	r0, [pc, #136]	@ (8005c18 <vTaskStartScheduler+0xbc>)
 8005b8e:	f7ff fe09 	bl	80057a4 <xTaskCreateStatic>
 8005b92:	4603      	mov	r3, r0
 8005b94:	4a21      	ldr	r2, [pc, #132]	@ (8005c1c <vTaskStartScheduler+0xc0>)
 8005b96:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005b98:	4b20      	ldr	r3, [pc, #128]	@ (8005c1c <vTaskStartScheduler+0xc0>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d002      	beq.n	8005ba6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	617b      	str	r3, [r7, #20]
 8005ba4:	e001      	b.n	8005baa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d102      	bne.n	8005bb6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005bb0:	f000 fd04 	bl	80065bc <xTimerCreateTimerTask>
 8005bb4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d116      	bne.n	8005bea <vTaskStartScheduler+0x8e>
	__asm volatile
 8005bbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bc0:	f383 8811 	msr	BASEPRI, r3
 8005bc4:	f3bf 8f6f 	isb	sy
 8005bc8:	f3bf 8f4f 	dsb	sy
 8005bcc:	613b      	str	r3, [r7, #16]
}
 8005bce:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005bd0:	4b13      	ldr	r3, [pc, #76]	@ (8005c20 <vTaskStartScheduler+0xc4>)
 8005bd2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005bd6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005bd8:	4b12      	ldr	r3, [pc, #72]	@ (8005c24 <vTaskStartScheduler+0xc8>)
 8005bda:	2201      	movs	r2, #1
 8005bdc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005bde:	4b12      	ldr	r3, [pc, #72]	@ (8005c28 <vTaskStartScheduler+0xcc>)
 8005be0:	2200      	movs	r2, #0
 8005be2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005be4:	f001 f8d4 	bl	8006d90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005be8:	e00f      	b.n	8005c0a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005bf0:	d10b      	bne.n	8005c0a <vTaskStartScheduler+0xae>
	__asm volatile
 8005bf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bf6:	f383 8811 	msr	BASEPRI, r3
 8005bfa:	f3bf 8f6f 	isb	sy
 8005bfe:	f3bf 8f4f 	dsb	sy
 8005c02:	60fb      	str	r3, [r7, #12]
}
 8005c04:	bf00      	nop
 8005c06:	bf00      	nop
 8005c08:	e7fd      	b.n	8005c06 <vTaskStartScheduler+0xaa>
}
 8005c0a:	bf00      	nop
 8005c0c:	3718      	adds	r7, #24
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	0800a204 	.word	0x0800a204
 8005c18:	0800624d 	.word	0x0800624d
 8005c1c:	200012a8 	.word	0x200012a8
 8005c20:	200012a4 	.word	0x200012a4
 8005c24:	20001290 	.word	0x20001290
 8005c28:	20001288 	.word	0x20001288

08005c2c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005c30:	4b04      	ldr	r3, [pc, #16]	@ (8005c44 <vTaskSuspendAll+0x18>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	3301      	adds	r3, #1
 8005c36:	4a03      	ldr	r2, [pc, #12]	@ (8005c44 <vTaskSuspendAll+0x18>)
 8005c38:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005c3a:	bf00      	nop
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr
 8005c44:	200012ac 	.word	0x200012ac

08005c48 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005c52:	2300      	movs	r3, #0
 8005c54:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005c56:	4b42      	ldr	r3, [pc, #264]	@ (8005d60 <xTaskResumeAll+0x118>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d10b      	bne.n	8005c76 <xTaskResumeAll+0x2e>
	__asm volatile
 8005c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c62:	f383 8811 	msr	BASEPRI, r3
 8005c66:	f3bf 8f6f 	isb	sy
 8005c6a:	f3bf 8f4f 	dsb	sy
 8005c6e:	603b      	str	r3, [r7, #0]
}
 8005c70:	bf00      	nop
 8005c72:	bf00      	nop
 8005c74:	e7fd      	b.n	8005c72 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005c76:	f001 f92f 	bl	8006ed8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005c7a:	4b39      	ldr	r3, [pc, #228]	@ (8005d60 <xTaskResumeAll+0x118>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	3b01      	subs	r3, #1
 8005c80:	4a37      	ldr	r2, [pc, #220]	@ (8005d60 <xTaskResumeAll+0x118>)
 8005c82:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c84:	4b36      	ldr	r3, [pc, #216]	@ (8005d60 <xTaskResumeAll+0x118>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d162      	bne.n	8005d52 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005c8c:	4b35      	ldr	r3, [pc, #212]	@ (8005d64 <xTaskResumeAll+0x11c>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d05e      	beq.n	8005d52 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c94:	e02f      	b.n	8005cf6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c96:	4b34      	ldr	r3, [pc, #208]	@ (8005d68 <xTaskResumeAll+0x120>)
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	3318      	adds	r3, #24
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f7ff f81e 	bl	8004ce4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	3304      	adds	r3, #4
 8005cac:	4618      	mov	r0, r3
 8005cae:	f7ff f819 	bl	8004ce4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cb6:	4b2d      	ldr	r3, [pc, #180]	@ (8005d6c <xTaskResumeAll+0x124>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d903      	bls.n	8005cc6 <xTaskResumeAll+0x7e>
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cc2:	4a2a      	ldr	r2, [pc, #168]	@ (8005d6c <xTaskResumeAll+0x124>)
 8005cc4:	6013      	str	r3, [r2, #0]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cca:	4613      	mov	r3, r2
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	4413      	add	r3, r2
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	4a27      	ldr	r2, [pc, #156]	@ (8005d70 <xTaskResumeAll+0x128>)
 8005cd4:	441a      	add	r2, r3
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	3304      	adds	r3, #4
 8005cda:	4619      	mov	r1, r3
 8005cdc:	4610      	mov	r0, r2
 8005cde:	f7fe ffa4 	bl	8004c2a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ce6:	4b23      	ldr	r3, [pc, #140]	@ (8005d74 <xTaskResumeAll+0x12c>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d302      	bcc.n	8005cf6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005cf0:	4b21      	ldr	r3, [pc, #132]	@ (8005d78 <xTaskResumeAll+0x130>)
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005cf6:	4b1c      	ldr	r3, [pc, #112]	@ (8005d68 <xTaskResumeAll+0x120>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d1cb      	bne.n	8005c96 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d001      	beq.n	8005d08 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005d04:	f000 fb58 	bl	80063b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005d08:	4b1c      	ldr	r3, [pc, #112]	@ (8005d7c <xTaskResumeAll+0x134>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d010      	beq.n	8005d36 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005d14:	f000 f846 	bl	8005da4 <xTaskIncrementTick>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d002      	beq.n	8005d24 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005d1e:	4b16      	ldr	r3, [pc, #88]	@ (8005d78 <xTaskResumeAll+0x130>)
 8005d20:	2201      	movs	r2, #1
 8005d22:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	3b01      	subs	r3, #1
 8005d28:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d1f1      	bne.n	8005d14 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005d30:	4b12      	ldr	r3, [pc, #72]	@ (8005d7c <xTaskResumeAll+0x134>)
 8005d32:	2200      	movs	r2, #0
 8005d34:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005d36:	4b10      	ldr	r3, [pc, #64]	@ (8005d78 <xTaskResumeAll+0x130>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d009      	beq.n	8005d52 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005d42:	4b0f      	ldr	r3, [pc, #60]	@ (8005d80 <xTaskResumeAll+0x138>)
 8005d44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d48:	601a      	str	r2, [r3, #0]
 8005d4a:	f3bf 8f4f 	dsb	sy
 8005d4e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005d52:	f001 f8f3 	bl	8006f3c <vPortExitCritical>

	return xAlreadyYielded;
 8005d56:	68bb      	ldr	r3, [r7, #8]
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3710      	adds	r7, #16
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}
 8005d60:	200012ac 	.word	0x200012ac
 8005d64:	20001284 	.word	0x20001284
 8005d68:	20001244 	.word	0x20001244
 8005d6c:	2000128c 	.word	0x2000128c
 8005d70:	20000db4 	.word	0x20000db4
 8005d74:	20000db0 	.word	0x20000db0
 8005d78:	20001298 	.word	0x20001298
 8005d7c:	20001294 	.word	0x20001294
 8005d80:	e000ed04 	.word	0xe000ed04

08005d84 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005d8a:	4b05      	ldr	r3, [pc, #20]	@ (8005da0 <xTaskGetTickCount+0x1c>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005d90:	687b      	ldr	r3, [r7, #4]
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	370c      	adds	r7, #12
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr
 8005d9e:	bf00      	nop
 8005da0:	20001288 	.word	0x20001288

08005da4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b086      	sub	sp, #24
 8005da8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005daa:	2300      	movs	r3, #0
 8005dac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005dae:	4b4f      	ldr	r3, [pc, #316]	@ (8005eec <xTaskIncrementTick+0x148>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	f040 8090 	bne.w	8005ed8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005db8:	4b4d      	ldr	r3, [pc, #308]	@ (8005ef0 <xTaskIncrementTick+0x14c>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	3301      	adds	r3, #1
 8005dbe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005dc0:	4a4b      	ldr	r2, [pc, #300]	@ (8005ef0 <xTaskIncrementTick+0x14c>)
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d121      	bne.n	8005e10 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005dcc:	4b49      	ldr	r3, [pc, #292]	@ (8005ef4 <xTaskIncrementTick+0x150>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d00b      	beq.n	8005dee <xTaskIncrementTick+0x4a>
	__asm volatile
 8005dd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dda:	f383 8811 	msr	BASEPRI, r3
 8005dde:	f3bf 8f6f 	isb	sy
 8005de2:	f3bf 8f4f 	dsb	sy
 8005de6:	603b      	str	r3, [r7, #0]
}
 8005de8:	bf00      	nop
 8005dea:	bf00      	nop
 8005dec:	e7fd      	b.n	8005dea <xTaskIncrementTick+0x46>
 8005dee:	4b41      	ldr	r3, [pc, #260]	@ (8005ef4 <xTaskIncrementTick+0x150>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	60fb      	str	r3, [r7, #12]
 8005df4:	4b40      	ldr	r3, [pc, #256]	@ (8005ef8 <xTaskIncrementTick+0x154>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a3e      	ldr	r2, [pc, #248]	@ (8005ef4 <xTaskIncrementTick+0x150>)
 8005dfa:	6013      	str	r3, [r2, #0]
 8005dfc:	4a3e      	ldr	r2, [pc, #248]	@ (8005ef8 <xTaskIncrementTick+0x154>)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	6013      	str	r3, [r2, #0]
 8005e02:	4b3e      	ldr	r3, [pc, #248]	@ (8005efc <xTaskIncrementTick+0x158>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	3301      	adds	r3, #1
 8005e08:	4a3c      	ldr	r2, [pc, #240]	@ (8005efc <xTaskIncrementTick+0x158>)
 8005e0a:	6013      	str	r3, [r2, #0]
 8005e0c:	f000 fad4 	bl	80063b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005e10:	4b3b      	ldr	r3, [pc, #236]	@ (8005f00 <xTaskIncrementTick+0x15c>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	693a      	ldr	r2, [r7, #16]
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d349      	bcc.n	8005eae <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e1a:	4b36      	ldr	r3, [pc, #216]	@ (8005ef4 <xTaskIncrementTick+0x150>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d104      	bne.n	8005e2e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e24:	4b36      	ldr	r3, [pc, #216]	@ (8005f00 <xTaskIncrementTick+0x15c>)
 8005e26:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005e2a:	601a      	str	r2, [r3, #0]
					break;
 8005e2c:	e03f      	b.n	8005eae <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e2e:	4b31      	ldr	r3, [pc, #196]	@ (8005ef4 <xTaskIncrementTick+0x150>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005e3e:	693a      	ldr	r2, [r7, #16]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d203      	bcs.n	8005e4e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005e46:	4a2e      	ldr	r2, [pc, #184]	@ (8005f00 <xTaskIncrementTick+0x15c>)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005e4c:	e02f      	b.n	8005eae <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	3304      	adds	r3, #4
 8005e52:	4618      	mov	r0, r3
 8005e54:	f7fe ff46 	bl	8004ce4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d004      	beq.n	8005e6a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	3318      	adds	r3, #24
 8005e64:	4618      	mov	r0, r3
 8005e66:	f7fe ff3d 	bl	8004ce4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e6e:	4b25      	ldr	r3, [pc, #148]	@ (8005f04 <xTaskIncrementTick+0x160>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	429a      	cmp	r2, r3
 8005e74:	d903      	bls.n	8005e7e <xTaskIncrementTick+0xda>
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e7a:	4a22      	ldr	r2, [pc, #136]	@ (8005f04 <xTaskIncrementTick+0x160>)
 8005e7c:	6013      	str	r3, [r2, #0]
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e82:	4613      	mov	r3, r2
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	4413      	add	r3, r2
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	4a1f      	ldr	r2, [pc, #124]	@ (8005f08 <xTaskIncrementTick+0x164>)
 8005e8c:	441a      	add	r2, r3
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	3304      	adds	r3, #4
 8005e92:	4619      	mov	r1, r3
 8005e94:	4610      	mov	r0, r2
 8005e96:	f7fe fec8 	bl	8004c2a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e9e:	4b1b      	ldr	r3, [pc, #108]	@ (8005f0c <xTaskIncrementTick+0x168>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ea4:	429a      	cmp	r2, r3
 8005ea6:	d3b8      	bcc.n	8005e1a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005eac:	e7b5      	b.n	8005e1a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005eae:	4b17      	ldr	r3, [pc, #92]	@ (8005f0c <xTaskIncrementTick+0x168>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005eb4:	4914      	ldr	r1, [pc, #80]	@ (8005f08 <xTaskIncrementTick+0x164>)
 8005eb6:	4613      	mov	r3, r2
 8005eb8:	009b      	lsls	r3, r3, #2
 8005eba:	4413      	add	r3, r2
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	440b      	add	r3, r1
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d901      	bls.n	8005eca <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005eca:	4b11      	ldr	r3, [pc, #68]	@ (8005f10 <xTaskIncrementTick+0x16c>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d007      	beq.n	8005ee2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	617b      	str	r3, [r7, #20]
 8005ed6:	e004      	b.n	8005ee2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005ed8:	4b0e      	ldr	r3, [pc, #56]	@ (8005f14 <xTaskIncrementTick+0x170>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	3301      	adds	r3, #1
 8005ede:	4a0d      	ldr	r2, [pc, #52]	@ (8005f14 <xTaskIncrementTick+0x170>)
 8005ee0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005ee2:	697b      	ldr	r3, [r7, #20]
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3718      	adds	r7, #24
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}
 8005eec:	200012ac 	.word	0x200012ac
 8005ef0:	20001288 	.word	0x20001288
 8005ef4:	2000123c 	.word	0x2000123c
 8005ef8:	20001240 	.word	0x20001240
 8005efc:	2000129c 	.word	0x2000129c
 8005f00:	200012a4 	.word	0x200012a4
 8005f04:	2000128c 	.word	0x2000128c
 8005f08:	20000db4 	.word	0x20000db4
 8005f0c:	20000db0 	.word	0x20000db0
 8005f10:	20001298 	.word	0x20001298
 8005f14:	20001294 	.word	0x20001294

08005f18 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b085      	sub	sp, #20
 8005f1c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005f1e:	4b28      	ldr	r3, [pc, #160]	@ (8005fc0 <vTaskSwitchContext+0xa8>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d003      	beq.n	8005f2e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005f26:	4b27      	ldr	r3, [pc, #156]	@ (8005fc4 <vTaskSwitchContext+0xac>)
 8005f28:	2201      	movs	r2, #1
 8005f2a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005f2c:	e042      	b.n	8005fb4 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8005f2e:	4b25      	ldr	r3, [pc, #148]	@ (8005fc4 <vTaskSwitchContext+0xac>)
 8005f30:	2200      	movs	r2, #0
 8005f32:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f34:	4b24      	ldr	r3, [pc, #144]	@ (8005fc8 <vTaskSwitchContext+0xb0>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	60fb      	str	r3, [r7, #12]
 8005f3a:	e011      	b.n	8005f60 <vTaskSwitchContext+0x48>
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d10b      	bne.n	8005f5a <vTaskSwitchContext+0x42>
	__asm volatile
 8005f42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f46:	f383 8811 	msr	BASEPRI, r3
 8005f4a:	f3bf 8f6f 	isb	sy
 8005f4e:	f3bf 8f4f 	dsb	sy
 8005f52:	607b      	str	r3, [r7, #4]
}
 8005f54:	bf00      	nop
 8005f56:	bf00      	nop
 8005f58:	e7fd      	b.n	8005f56 <vTaskSwitchContext+0x3e>
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	3b01      	subs	r3, #1
 8005f5e:	60fb      	str	r3, [r7, #12]
 8005f60:	491a      	ldr	r1, [pc, #104]	@ (8005fcc <vTaskSwitchContext+0xb4>)
 8005f62:	68fa      	ldr	r2, [r7, #12]
 8005f64:	4613      	mov	r3, r2
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	4413      	add	r3, r2
 8005f6a:	009b      	lsls	r3, r3, #2
 8005f6c:	440b      	add	r3, r1
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d0e3      	beq.n	8005f3c <vTaskSwitchContext+0x24>
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	4613      	mov	r3, r2
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	4413      	add	r3, r2
 8005f7c:	009b      	lsls	r3, r3, #2
 8005f7e:	4a13      	ldr	r2, [pc, #76]	@ (8005fcc <vTaskSwitchContext+0xb4>)
 8005f80:	4413      	add	r3, r2
 8005f82:	60bb      	str	r3, [r7, #8]
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	685a      	ldr	r2, [r3, #4]
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	605a      	str	r2, [r3, #4]
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	685a      	ldr	r2, [r3, #4]
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	3308      	adds	r3, #8
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d104      	bne.n	8005fa4 <vTaskSwitchContext+0x8c>
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	685a      	ldr	r2, [r3, #4]
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	605a      	str	r2, [r3, #4]
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	4a09      	ldr	r2, [pc, #36]	@ (8005fd0 <vTaskSwitchContext+0xb8>)
 8005fac:	6013      	str	r3, [r2, #0]
 8005fae:	4a06      	ldr	r2, [pc, #24]	@ (8005fc8 <vTaskSwitchContext+0xb0>)
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6013      	str	r3, [r2, #0]
}
 8005fb4:	bf00      	nop
 8005fb6:	3714      	adds	r7, #20
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr
 8005fc0:	200012ac 	.word	0x200012ac
 8005fc4:	20001298 	.word	0x20001298
 8005fc8:	2000128c 	.word	0x2000128c
 8005fcc:	20000db4 	.word	0x20000db4
 8005fd0:	20000db0 	.word	0x20000db0

08005fd4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b084      	sub	sp, #16
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d10b      	bne.n	8005ffc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005fe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fe8:	f383 8811 	msr	BASEPRI, r3
 8005fec:	f3bf 8f6f 	isb	sy
 8005ff0:	f3bf 8f4f 	dsb	sy
 8005ff4:	60fb      	str	r3, [r7, #12]
}
 8005ff6:	bf00      	nop
 8005ff8:	bf00      	nop
 8005ffa:	e7fd      	b.n	8005ff8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005ffc:	4b07      	ldr	r3, [pc, #28]	@ (800601c <vTaskPlaceOnEventList+0x48>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	3318      	adds	r3, #24
 8006002:	4619      	mov	r1, r3
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f7fe fe34 	bl	8004c72 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800600a:	2101      	movs	r1, #1
 800600c:	6838      	ldr	r0, [r7, #0]
 800600e:	f000 fa81 	bl	8006514 <prvAddCurrentTaskToDelayedList>
}
 8006012:	bf00      	nop
 8006014:	3710      	adds	r7, #16
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
 800601a:	bf00      	nop
 800601c:	20000db0 	.word	0x20000db0

08006020 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006020:	b580      	push	{r7, lr}
 8006022:	b086      	sub	sp, #24
 8006024:	af00      	add	r7, sp, #0
 8006026:	60f8      	str	r0, [r7, #12]
 8006028:	60b9      	str	r1, [r7, #8]
 800602a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d10b      	bne.n	800604a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006036:	f383 8811 	msr	BASEPRI, r3
 800603a:	f3bf 8f6f 	isb	sy
 800603e:	f3bf 8f4f 	dsb	sy
 8006042:	617b      	str	r3, [r7, #20]
}
 8006044:	bf00      	nop
 8006046:	bf00      	nop
 8006048:	e7fd      	b.n	8006046 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800604a:	4b0a      	ldr	r3, [pc, #40]	@ (8006074 <vTaskPlaceOnEventListRestricted+0x54>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	3318      	adds	r3, #24
 8006050:	4619      	mov	r1, r3
 8006052:	68f8      	ldr	r0, [r7, #12]
 8006054:	f7fe fde9 	bl	8004c2a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d002      	beq.n	8006064 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800605e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006062:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006064:	6879      	ldr	r1, [r7, #4]
 8006066:	68b8      	ldr	r0, [r7, #8]
 8006068:	f000 fa54 	bl	8006514 <prvAddCurrentTaskToDelayedList>
	}
 800606c:	bf00      	nop
 800606e:	3718      	adds	r7, #24
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}
 8006074:	20000db0 	.word	0x20000db0

08006078 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b086      	sub	sp, #24
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	68db      	ldr	r3, [r3, #12]
 8006086:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006088:	693b      	ldr	r3, [r7, #16]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d10b      	bne.n	80060a6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800608e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006092:	f383 8811 	msr	BASEPRI, r3
 8006096:	f3bf 8f6f 	isb	sy
 800609a:	f3bf 8f4f 	dsb	sy
 800609e:	60fb      	str	r3, [r7, #12]
}
 80060a0:	bf00      	nop
 80060a2:	bf00      	nop
 80060a4:	e7fd      	b.n	80060a2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	3318      	adds	r3, #24
 80060aa:	4618      	mov	r0, r3
 80060ac:	f7fe fe1a 	bl	8004ce4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060b0:	4b1d      	ldr	r3, [pc, #116]	@ (8006128 <xTaskRemoveFromEventList+0xb0>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d11d      	bne.n	80060f4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	3304      	adds	r3, #4
 80060bc:	4618      	mov	r0, r3
 80060be:	f7fe fe11 	bl	8004ce4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060c6:	4b19      	ldr	r3, [pc, #100]	@ (800612c <xTaskRemoveFromEventList+0xb4>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d903      	bls.n	80060d6 <xTaskRemoveFromEventList+0x5e>
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060d2:	4a16      	ldr	r2, [pc, #88]	@ (800612c <xTaskRemoveFromEventList+0xb4>)
 80060d4:	6013      	str	r3, [r2, #0]
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060da:	4613      	mov	r3, r2
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	4413      	add	r3, r2
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	4a13      	ldr	r2, [pc, #76]	@ (8006130 <xTaskRemoveFromEventList+0xb8>)
 80060e4:	441a      	add	r2, r3
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	3304      	adds	r3, #4
 80060ea:	4619      	mov	r1, r3
 80060ec:	4610      	mov	r0, r2
 80060ee:	f7fe fd9c 	bl	8004c2a <vListInsertEnd>
 80060f2:	e005      	b.n	8006100 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	3318      	adds	r3, #24
 80060f8:	4619      	mov	r1, r3
 80060fa:	480e      	ldr	r0, [pc, #56]	@ (8006134 <xTaskRemoveFromEventList+0xbc>)
 80060fc:	f7fe fd95 	bl	8004c2a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006104:	4b0c      	ldr	r3, [pc, #48]	@ (8006138 <xTaskRemoveFromEventList+0xc0>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800610a:	429a      	cmp	r2, r3
 800610c:	d905      	bls.n	800611a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800610e:	2301      	movs	r3, #1
 8006110:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006112:	4b0a      	ldr	r3, [pc, #40]	@ (800613c <xTaskRemoveFromEventList+0xc4>)
 8006114:	2201      	movs	r2, #1
 8006116:	601a      	str	r2, [r3, #0]
 8006118:	e001      	b.n	800611e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800611a:	2300      	movs	r3, #0
 800611c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800611e:	697b      	ldr	r3, [r7, #20]
}
 8006120:	4618      	mov	r0, r3
 8006122:	3718      	adds	r7, #24
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}
 8006128:	200012ac 	.word	0x200012ac
 800612c:	2000128c 	.word	0x2000128c
 8006130:	20000db4 	.word	0x20000db4
 8006134:	20001244 	.word	0x20001244
 8006138:	20000db0 	.word	0x20000db0
 800613c:	20001298 	.word	0x20001298

08006140 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006140:	b480      	push	{r7}
 8006142:	b083      	sub	sp, #12
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006148:	4b06      	ldr	r3, [pc, #24]	@ (8006164 <vTaskInternalSetTimeOutState+0x24>)
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006150:	4b05      	ldr	r3, [pc, #20]	@ (8006168 <vTaskInternalSetTimeOutState+0x28>)
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	605a      	str	r2, [r3, #4]
}
 8006158:	bf00      	nop
 800615a:	370c      	adds	r7, #12
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr
 8006164:	2000129c 	.word	0x2000129c
 8006168:	20001288 	.word	0x20001288

0800616c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b088      	sub	sp, #32
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d10b      	bne.n	8006194 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800617c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006180:	f383 8811 	msr	BASEPRI, r3
 8006184:	f3bf 8f6f 	isb	sy
 8006188:	f3bf 8f4f 	dsb	sy
 800618c:	613b      	str	r3, [r7, #16]
}
 800618e:	bf00      	nop
 8006190:	bf00      	nop
 8006192:	e7fd      	b.n	8006190 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d10b      	bne.n	80061b2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800619a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800619e:	f383 8811 	msr	BASEPRI, r3
 80061a2:	f3bf 8f6f 	isb	sy
 80061a6:	f3bf 8f4f 	dsb	sy
 80061aa:	60fb      	str	r3, [r7, #12]
}
 80061ac:	bf00      	nop
 80061ae:	bf00      	nop
 80061b0:	e7fd      	b.n	80061ae <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80061b2:	f000 fe91 	bl	8006ed8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80061b6:	4b1d      	ldr	r3, [pc, #116]	@ (800622c <xTaskCheckForTimeOut+0xc0>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	69ba      	ldr	r2, [r7, #24]
 80061c2:	1ad3      	subs	r3, r2, r3
 80061c4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80061ce:	d102      	bne.n	80061d6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80061d0:	2300      	movs	r3, #0
 80061d2:	61fb      	str	r3, [r7, #28]
 80061d4:	e023      	b.n	800621e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	4b15      	ldr	r3, [pc, #84]	@ (8006230 <xTaskCheckForTimeOut+0xc4>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	429a      	cmp	r2, r3
 80061e0:	d007      	beq.n	80061f2 <xTaskCheckForTimeOut+0x86>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	69ba      	ldr	r2, [r7, #24]
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d302      	bcc.n	80061f2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80061ec:	2301      	movs	r3, #1
 80061ee:	61fb      	str	r3, [r7, #28]
 80061f0:	e015      	b.n	800621e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	697a      	ldr	r2, [r7, #20]
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d20b      	bcs.n	8006214 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	1ad2      	subs	r2, r2, r3
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f7ff ff99 	bl	8006140 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800620e:	2300      	movs	r3, #0
 8006210:	61fb      	str	r3, [r7, #28]
 8006212:	e004      	b.n	800621e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	2200      	movs	r2, #0
 8006218:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800621a:	2301      	movs	r3, #1
 800621c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800621e:	f000 fe8d 	bl	8006f3c <vPortExitCritical>

	return xReturn;
 8006222:	69fb      	ldr	r3, [r7, #28]
}
 8006224:	4618      	mov	r0, r3
 8006226:	3720      	adds	r7, #32
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}
 800622c:	20001288 	.word	0x20001288
 8006230:	2000129c 	.word	0x2000129c

08006234 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006234:	b480      	push	{r7}
 8006236:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006238:	4b03      	ldr	r3, [pc, #12]	@ (8006248 <vTaskMissedYield+0x14>)
 800623a:	2201      	movs	r2, #1
 800623c:	601a      	str	r2, [r3, #0]
}
 800623e:	bf00      	nop
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr
 8006248:	20001298 	.word	0x20001298

0800624c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b082      	sub	sp, #8
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006254:	f000 f852 	bl	80062fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006258:	4b06      	ldr	r3, [pc, #24]	@ (8006274 <prvIdleTask+0x28>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	2b01      	cmp	r3, #1
 800625e:	d9f9      	bls.n	8006254 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006260:	4b05      	ldr	r3, [pc, #20]	@ (8006278 <prvIdleTask+0x2c>)
 8006262:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006266:	601a      	str	r2, [r3, #0]
 8006268:	f3bf 8f4f 	dsb	sy
 800626c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006270:	e7f0      	b.n	8006254 <prvIdleTask+0x8>
 8006272:	bf00      	nop
 8006274:	20000db4 	.word	0x20000db4
 8006278:	e000ed04 	.word	0xe000ed04

0800627c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b082      	sub	sp, #8
 8006280:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006282:	2300      	movs	r3, #0
 8006284:	607b      	str	r3, [r7, #4]
 8006286:	e00c      	b.n	80062a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	4613      	mov	r3, r2
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	4413      	add	r3, r2
 8006290:	009b      	lsls	r3, r3, #2
 8006292:	4a12      	ldr	r2, [pc, #72]	@ (80062dc <prvInitialiseTaskLists+0x60>)
 8006294:	4413      	add	r3, r2
 8006296:	4618      	mov	r0, r3
 8006298:	f7fe fc9a 	bl	8004bd0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	3301      	adds	r3, #1
 80062a0:	607b      	str	r3, [r7, #4]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2b37      	cmp	r3, #55	@ 0x37
 80062a6:	d9ef      	bls.n	8006288 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80062a8:	480d      	ldr	r0, [pc, #52]	@ (80062e0 <prvInitialiseTaskLists+0x64>)
 80062aa:	f7fe fc91 	bl	8004bd0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80062ae:	480d      	ldr	r0, [pc, #52]	@ (80062e4 <prvInitialiseTaskLists+0x68>)
 80062b0:	f7fe fc8e 	bl	8004bd0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80062b4:	480c      	ldr	r0, [pc, #48]	@ (80062e8 <prvInitialiseTaskLists+0x6c>)
 80062b6:	f7fe fc8b 	bl	8004bd0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80062ba:	480c      	ldr	r0, [pc, #48]	@ (80062ec <prvInitialiseTaskLists+0x70>)
 80062bc:	f7fe fc88 	bl	8004bd0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80062c0:	480b      	ldr	r0, [pc, #44]	@ (80062f0 <prvInitialiseTaskLists+0x74>)
 80062c2:	f7fe fc85 	bl	8004bd0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80062c6:	4b0b      	ldr	r3, [pc, #44]	@ (80062f4 <prvInitialiseTaskLists+0x78>)
 80062c8:	4a05      	ldr	r2, [pc, #20]	@ (80062e0 <prvInitialiseTaskLists+0x64>)
 80062ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80062cc:	4b0a      	ldr	r3, [pc, #40]	@ (80062f8 <prvInitialiseTaskLists+0x7c>)
 80062ce:	4a05      	ldr	r2, [pc, #20]	@ (80062e4 <prvInitialiseTaskLists+0x68>)
 80062d0:	601a      	str	r2, [r3, #0]
}
 80062d2:	bf00      	nop
 80062d4:	3708      	adds	r7, #8
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	bf00      	nop
 80062dc:	20000db4 	.word	0x20000db4
 80062e0:	20001214 	.word	0x20001214
 80062e4:	20001228 	.word	0x20001228
 80062e8:	20001244 	.word	0x20001244
 80062ec:	20001258 	.word	0x20001258
 80062f0:	20001270 	.word	0x20001270
 80062f4:	2000123c 	.word	0x2000123c
 80062f8:	20001240 	.word	0x20001240

080062fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b082      	sub	sp, #8
 8006300:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006302:	e019      	b.n	8006338 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006304:	f000 fde8 	bl	8006ed8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006308:	4b10      	ldr	r3, [pc, #64]	@ (800634c <prvCheckTasksWaitingTermination+0x50>)
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	68db      	ldr	r3, [r3, #12]
 800630e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	3304      	adds	r3, #4
 8006314:	4618      	mov	r0, r3
 8006316:	f7fe fce5 	bl	8004ce4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800631a:	4b0d      	ldr	r3, [pc, #52]	@ (8006350 <prvCheckTasksWaitingTermination+0x54>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	3b01      	subs	r3, #1
 8006320:	4a0b      	ldr	r2, [pc, #44]	@ (8006350 <prvCheckTasksWaitingTermination+0x54>)
 8006322:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006324:	4b0b      	ldr	r3, [pc, #44]	@ (8006354 <prvCheckTasksWaitingTermination+0x58>)
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	3b01      	subs	r3, #1
 800632a:	4a0a      	ldr	r2, [pc, #40]	@ (8006354 <prvCheckTasksWaitingTermination+0x58>)
 800632c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800632e:	f000 fe05 	bl	8006f3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 f810 	bl	8006358 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006338:	4b06      	ldr	r3, [pc, #24]	@ (8006354 <prvCheckTasksWaitingTermination+0x58>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d1e1      	bne.n	8006304 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006340:	bf00      	nop
 8006342:	bf00      	nop
 8006344:	3708      	adds	r7, #8
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}
 800634a:	bf00      	nop
 800634c:	20001258 	.word	0x20001258
 8006350:	20001284 	.word	0x20001284
 8006354:	2000126c 	.word	0x2000126c

08006358 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006358:	b580      	push	{r7, lr}
 800635a:	b084      	sub	sp, #16
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006366:	2b00      	cmp	r3, #0
 8006368:	d108      	bne.n	800637c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800636e:	4618      	mov	r0, r3
 8006370:	f000 ffa2 	bl	80072b8 <vPortFree>
				vPortFree( pxTCB );
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f000 ff9f 	bl	80072b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800637a:	e019      	b.n	80063b0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006382:	2b01      	cmp	r3, #1
 8006384:	d103      	bne.n	800638e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 ff96 	bl	80072b8 <vPortFree>
	}
 800638c:	e010      	b.n	80063b0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006394:	2b02      	cmp	r3, #2
 8006396:	d00b      	beq.n	80063b0 <prvDeleteTCB+0x58>
	__asm volatile
 8006398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800639c:	f383 8811 	msr	BASEPRI, r3
 80063a0:	f3bf 8f6f 	isb	sy
 80063a4:	f3bf 8f4f 	dsb	sy
 80063a8:	60fb      	str	r3, [r7, #12]
}
 80063aa:	bf00      	nop
 80063ac:	bf00      	nop
 80063ae:	e7fd      	b.n	80063ac <prvDeleteTCB+0x54>
	}
 80063b0:	bf00      	nop
 80063b2:	3710      	adds	r7, #16
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80063b8:	b480      	push	{r7}
 80063ba:	b083      	sub	sp, #12
 80063bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063be:	4b0c      	ldr	r3, [pc, #48]	@ (80063f0 <prvResetNextTaskUnblockTime+0x38>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d104      	bne.n	80063d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80063c8:	4b0a      	ldr	r3, [pc, #40]	@ (80063f4 <prvResetNextTaskUnblockTime+0x3c>)
 80063ca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80063ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80063d0:	e008      	b.n	80063e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063d2:	4b07      	ldr	r3, [pc, #28]	@ (80063f0 <prvResetNextTaskUnblockTime+0x38>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	68db      	ldr	r3, [r3, #12]
 80063d8:	68db      	ldr	r3, [r3, #12]
 80063da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	4a04      	ldr	r2, [pc, #16]	@ (80063f4 <prvResetNextTaskUnblockTime+0x3c>)
 80063e2:	6013      	str	r3, [r2, #0]
}
 80063e4:	bf00      	nop
 80063e6:	370c      	adds	r7, #12
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr
 80063f0:	2000123c 	.word	0x2000123c
 80063f4:	200012a4 	.word	0x200012a4

080063f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80063f8:	b480      	push	{r7}
 80063fa:	b083      	sub	sp, #12
 80063fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80063fe:	4b0b      	ldr	r3, [pc, #44]	@ (800642c <xTaskGetSchedulerState+0x34>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d102      	bne.n	800640c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006406:	2301      	movs	r3, #1
 8006408:	607b      	str	r3, [r7, #4]
 800640a:	e008      	b.n	800641e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800640c:	4b08      	ldr	r3, [pc, #32]	@ (8006430 <xTaskGetSchedulerState+0x38>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d102      	bne.n	800641a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006414:	2302      	movs	r3, #2
 8006416:	607b      	str	r3, [r7, #4]
 8006418:	e001      	b.n	800641e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800641a:	2300      	movs	r3, #0
 800641c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800641e:	687b      	ldr	r3, [r7, #4]
	}
 8006420:	4618      	mov	r0, r3
 8006422:	370c      	adds	r7, #12
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr
 800642c:	20001290 	.word	0x20001290
 8006430:	200012ac 	.word	0x200012ac

08006434 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006434:	b580      	push	{r7, lr}
 8006436:	b086      	sub	sp, #24
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006440:	2300      	movs	r3, #0
 8006442:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d058      	beq.n	80064fc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800644a:	4b2f      	ldr	r3, [pc, #188]	@ (8006508 <xTaskPriorityDisinherit+0xd4>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	693a      	ldr	r2, [r7, #16]
 8006450:	429a      	cmp	r2, r3
 8006452:	d00b      	beq.n	800646c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006458:	f383 8811 	msr	BASEPRI, r3
 800645c:	f3bf 8f6f 	isb	sy
 8006460:	f3bf 8f4f 	dsb	sy
 8006464:	60fb      	str	r3, [r7, #12]
}
 8006466:	bf00      	nop
 8006468:	bf00      	nop
 800646a:	e7fd      	b.n	8006468 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006470:	2b00      	cmp	r3, #0
 8006472:	d10b      	bne.n	800648c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006478:	f383 8811 	msr	BASEPRI, r3
 800647c:	f3bf 8f6f 	isb	sy
 8006480:	f3bf 8f4f 	dsb	sy
 8006484:	60bb      	str	r3, [r7, #8]
}
 8006486:	bf00      	nop
 8006488:	bf00      	nop
 800648a:	e7fd      	b.n	8006488 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006490:	1e5a      	subs	r2, r3, #1
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800649e:	429a      	cmp	r2, r3
 80064a0:	d02c      	beq.n	80064fc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d128      	bne.n	80064fc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	3304      	adds	r3, #4
 80064ae:	4618      	mov	r0, r3
 80064b0:	f7fe fc18 	bl	8004ce4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064c0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064cc:	4b0f      	ldr	r3, [pc, #60]	@ (800650c <xTaskPriorityDisinherit+0xd8>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d903      	bls.n	80064dc <xTaskPriorityDisinherit+0xa8>
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064d8:	4a0c      	ldr	r2, [pc, #48]	@ (800650c <xTaskPriorityDisinherit+0xd8>)
 80064da:	6013      	str	r3, [r2, #0]
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064e0:	4613      	mov	r3, r2
 80064e2:	009b      	lsls	r3, r3, #2
 80064e4:	4413      	add	r3, r2
 80064e6:	009b      	lsls	r3, r3, #2
 80064e8:	4a09      	ldr	r2, [pc, #36]	@ (8006510 <xTaskPriorityDisinherit+0xdc>)
 80064ea:	441a      	add	r2, r3
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	3304      	adds	r3, #4
 80064f0:	4619      	mov	r1, r3
 80064f2:	4610      	mov	r0, r2
 80064f4:	f7fe fb99 	bl	8004c2a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80064f8:	2301      	movs	r3, #1
 80064fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80064fc:	697b      	ldr	r3, [r7, #20]
	}
 80064fe:	4618      	mov	r0, r3
 8006500:	3718      	adds	r7, #24
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}
 8006506:	bf00      	nop
 8006508:	20000db0 	.word	0x20000db0
 800650c:	2000128c 	.word	0x2000128c
 8006510:	20000db4 	.word	0x20000db4

08006514 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b084      	sub	sp, #16
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
 800651c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800651e:	4b21      	ldr	r3, [pc, #132]	@ (80065a4 <prvAddCurrentTaskToDelayedList+0x90>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006524:	4b20      	ldr	r3, [pc, #128]	@ (80065a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	3304      	adds	r3, #4
 800652a:	4618      	mov	r0, r3
 800652c:	f7fe fbda 	bl	8004ce4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006536:	d10a      	bne.n	800654e <prvAddCurrentTaskToDelayedList+0x3a>
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d007      	beq.n	800654e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800653e:	4b1a      	ldr	r3, [pc, #104]	@ (80065a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	3304      	adds	r3, #4
 8006544:	4619      	mov	r1, r3
 8006546:	4819      	ldr	r0, [pc, #100]	@ (80065ac <prvAddCurrentTaskToDelayedList+0x98>)
 8006548:	f7fe fb6f 	bl	8004c2a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800654c:	e026      	b.n	800659c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800654e:	68fa      	ldr	r2, [r7, #12]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	4413      	add	r3, r2
 8006554:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006556:	4b14      	ldr	r3, [pc, #80]	@ (80065a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	68ba      	ldr	r2, [r7, #8]
 800655c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800655e:	68ba      	ldr	r2, [r7, #8]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	429a      	cmp	r2, r3
 8006564:	d209      	bcs.n	800657a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006566:	4b12      	ldr	r3, [pc, #72]	@ (80065b0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	4b0f      	ldr	r3, [pc, #60]	@ (80065a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	3304      	adds	r3, #4
 8006570:	4619      	mov	r1, r3
 8006572:	4610      	mov	r0, r2
 8006574:	f7fe fb7d 	bl	8004c72 <vListInsert>
}
 8006578:	e010      	b.n	800659c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800657a:	4b0e      	ldr	r3, [pc, #56]	@ (80065b4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	4b0a      	ldr	r3, [pc, #40]	@ (80065a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	3304      	adds	r3, #4
 8006584:	4619      	mov	r1, r3
 8006586:	4610      	mov	r0, r2
 8006588:	f7fe fb73 	bl	8004c72 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800658c:	4b0a      	ldr	r3, [pc, #40]	@ (80065b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	68ba      	ldr	r2, [r7, #8]
 8006592:	429a      	cmp	r2, r3
 8006594:	d202      	bcs.n	800659c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006596:	4a08      	ldr	r2, [pc, #32]	@ (80065b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	6013      	str	r3, [r2, #0]
}
 800659c:	bf00      	nop
 800659e:	3710      	adds	r7, #16
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}
 80065a4:	20001288 	.word	0x20001288
 80065a8:	20000db0 	.word	0x20000db0
 80065ac:	20001270 	.word	0x20001270
 80065b0:	20001240 	.word	0x20001240
 80065b4:	2000123c 	.word	0x2000123c
 80065b8:	200012a4 	.word	0x200012a4

080065bc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b08a      	sub	sp, #40	@ 0x28
 80065c0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80065c2:	2300      	movs	r3, #0
 80065c4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80065c6:	f000 fb13 	bl	8006bf0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80065ca:	4b1d      	ldr	r3, [pc, #116]	@ (8006640 <xTimerCreateTimerTask+0x84>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d021      	beq.n	8006616 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80065d2:	2300      	movs	r3, #0
 80065d4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80065d6:	2300      	movs	r3, #0
 80065d8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80065da:	1d3a      	adds	r2, r7, #4
 80065dc:	f107 0108 	add.w	r1, r7, #8
 80065e0:	f107 030c 	add.w	r3, r7, #12
 80065e4:	4618      	mov	r0, r3
 80065e6:	f7fe fad9 	bl	8004b9c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80065ea:	6879      	ldr	r1, [r7, #4]
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	9202      	str	r2, [sp, #8]
 80065f2:	9301      	str	r3, [sp, #4]
 80065f4:	2302      	movs	r3, #2
 80065f6:	9300      	str	r3, [sp, #0]
 80065f8:	2300      	movs	r3, #0
 80065fa:	460a      	mov	r2, r1
 80065fc:	4911      	ldr	r1, [pc, #68]	@ (8006644 <xTimerCreateTimerTask+0x88>)
 80065fe:	4812      	ldr	r0, [pc, #72]	@ (8006648 <xTimerCreateTimerTask+0x8c>)
 8006600:	f7ff f8d0 	bl	80057a4 <xTaskCreateStatic>
 8006604:	4603      	mov	r3, r0
 8006606:	4a11      	ldr	r2, [pc, #68]	@ (800664c <xTimerCreateTimerTask+0x90>)
 8006608:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800660a:	4b10      	ldr	r3, [pc, #64]	@ (800664c <xTimerCreateTimerTask+0x90>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d001      	beq.n	8006616 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006612:	2301      	movs	r3, #1
 8006614:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d10b      	bne.n	8006634 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800661c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006620:	f383 8811 	msr	BASEPRI, r3
 8006624:	f3bf 8f6f 	isb	sy
 8006628:	f3bf 8f4f 	dsb	sy
 800662c:	613b      	str	r3, [r7, #16]
}
 800662e:	bf00      	nop
 8006630:	bf00      	nop
 8006632:	e7fd      	b.n	8006630 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006634:	697b      	ldr	r3, [r7, #20]
}
 8006636:	4618      	mov	r0, r3
 8006638:	3718      	adds	r7, #24
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
 800663e:	bf00      	nop
 8006640:	200012e0 	.word	0x200012e0
 8006644:	0800a20c 	.word	0x0800a20c
 8006648:	08006789 	.word	0x08006789
 800664c:	200012e4 	.word	0x200012e4

08006650 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b08a      	sub	sp, #40	@ 0x28
 8006654:	af00      	add	r7, sp, #0
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	607a      	str	r2, [r7, #4]
 800665c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800665e:	2300      	movs	r3, #0
 8006660:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d10b      	bne.n	8006680 <xTimerGenericCommand+0x30>
	__asm volatile
 8006668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800666c:	f383 8811 	msr	BASEPRI, r3
 8006670:	f3bf 8f6f 	isb	sy
 8006674:	f3bf 8f4f 	dsb	sy
 8006678:	623b      	str	r3, [r7, #32]
}
 800667a:	bf00      	nop
 800667c:	bf00      	nop
 800667e:	e7fd      	b.n	800667c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006680:	4b19      	ldr	r3, [pc, #100]	@ (80066e8 <xTimerGenericCommand+0x98>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d02a      	beq.n	80066de <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	2b05      	cmp	r3, #5
 8006698:	dc18      	bgt.n	80066cc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800669a:	f7ff fead 	bl	80063f8 <xTaskGetSchedulerState>
 800669e:	4603      	mov	r3, r0
 80066a0:	2b02      	cmp	r3, #2
 80066a2:	d109      	bne.n	80066b8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80066a4:	4b10      	ldr	r3, [pc, #64]	@ (80066e8 <xTimerGenericCommand+0x98>)
 80066a6:	6818      	ldr	r0, [r3, #0]
 80066a8:	f107 0110 	add.w	r1, r7, #16
 80066ac:	2300      	movs	r3, #0
 80066ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066b0:	f7fe fc88 	bl	8004fc4 <xQueueGenericSend>
 80066b4:	6278      	str	r0, [r7, #36]	@ 0x24
 80066b6:	e012      	b.n	80066de <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80066b8:	4b0b      	ldr	r3, [pc, #44]	@ (80066e8 <xTimerGenericCommand+0x98>)
 80066ba:	6818      	ldr	r0, [r3, #0]
 80066bc:	f107 0110 	add.w	r1, r7, #16
 80066c0:	2300      	movs	r3, #0
 80066c2:	2200      	movs	r2, #0
 80066c4:	f7fe fc7e 	bl	8004fc4 <xQueueGenericSend>
 80066c8:	6278      	str	r0, [r7, #36]	@ 0x24
 80066ca:	e008      	b.n	80066de <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80066cc:	4b06      	ldr	r3, [pc, #24]	@ (80066e8 <xTimerGenericCommand+0x98>)
 80066ce:	6818      	ldr	r0, [r3, #0]
 80066d0:	f107 0110 	add.w	r1, r7, #16
 80066d4:	2300      	movs	r3, #0
 80066d6:	683a      	ldr	r2, [r7, #0]
 80066d8:	f7fe fd76 	bl	80051c8 <xQueueGenericSendFromISR>
 80066dc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80066de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3728      	adds	r7, #40	@ 0x28
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	200012e0 	.word	0x200012e0

080066ec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b088      	sub	sp, #32
 80066f0:	af02      	add	r7, sp, #8
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066f6:	4b23      	ldr	r3, [pc, #140]	@ (8006784 <prvProcessExpiredTimer+0x98>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	68db      	ldr	r3, [r3, #12]
 80066fe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	3304      	adds	r3, #4
 8006704:	4618      	mov	r0, r3
 8006706:	f7fe faed 	bl	8004ce4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006710:	f003 0304 	and.w	r3, r3, #4
 8006714:	2b00      	cmp	r3, #0
 8006716:	d023      	beq.n	8006760 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	699a      	ldr	r2, [r3, #24]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	18d1      	adds	r1, r2, r3
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	683a      	ldr	r2, [r7, #0]
 8006724:	6978      	ldr	r0, [r7, #20]
 8006726:	f000 f8d5 	bl	80068d4 <prvInsertTimerInActiveList>
 800672a:	4603      	mov	r3, r0
 800672c:	2b00      	cmp	r3, #0
 800672e:	d020      	beq.n	8006772 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006730:	2300      	movs	r3, #0
 8006732:	9300      	str	r3, [sp, #0]
 8006734:	2300      	movs	r3, #0
 8006736:	687a      	ldr	r2, [r7, #4]
 8006738:	2100      	movs	r1, #0
 800673a:	6978      	ldr	r0, [r7, #20]
 800673c:	f7ff ff88 	bl	8006650 <xTimerGenericCommand>
 8006740:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d114      	bne.n	8006772 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800674c:	f383 8811 	msr	BASEPRI, r3
 8006750:	f3bf 8f6f 	isb	sy
 8006754:	f3bf 8f4f 	dsb	sy
 8006758:	60fb      	str	r3, [r7, #12]
}
 800675a:	bf00      	nop
 800675c:	bf00      	nop
 800675e:	e7fd      	b.n	800675c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006766:	f023 0301 	bic.w	r3, r3, #1
 800676a:	b2da      	uxtb	r2, r3
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	6a1b      	ldr	r3, [r3, #32]
 8006776:	6978      	ldr	r0, [r7, #20]
 8006778:	4798      	blx	r3
}
 800677a:	bf00      	nop
 800677c:	3718      	adds	r7, #24
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
 8006782:	bf00      	nop
 8006784:	200012d8 	.word	0x200012d8

08006788 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b084      	sub	sp, #16
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006790:	f107 0308 	add.w	r3, r7, #8
 8006794:	4618      	mov	r0, r3
 8006796:	f000 f859 	bl	800684c <prvGetNextExpireTime>
 800679a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	4619      	mov	r1, r3
 80067a0:	68f8      	ldr	r0, [r7, #12]
 80067a2:	f000 f805 	bl	80067b0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80067a6:	f000 f8d7 	bl	8006958 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80067aa:	bf00      	nop
 80067ac:	e7f0      	b.n	8006790 <prvTimerTask+0x8>
	...

080067b0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b084      	sub	sp, #16
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80067ba:	f7ff fa37 	bl	8005c2c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80067be:	f107 0308 	add.w	r3, r7, #8
 80067c2:	4618      	mov	r0, r3
 80067c4:	f000 f866 	bl	8006894 <prvSampleTimeNow>
 80067c8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d130      	bne.n	8006832 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d10a      	bne.n	80067ec <prvProcessTimerOrBlockTask+0x3c>
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	429a      	cmp	r2, r3
 80067dc:	d806      	bhi.n	80067ec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80067de:	f7ff fa33 	bl	8005c48 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80067e2:	68f9      	ldr	r1, [r7, #12]
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f7ff ff81 	bl	80066ec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80067ea:	e024      	b.n	8006836 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d008      	beq.n	8006804 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80067f2:	4b13      	ldr	r3, [pc, #76]	@ (8006840 <prvProcessTimerOrBlockTask+0x90>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d101      	bne.n	8006800 <prvProcessTimerOrBlockTask+0x50>
 80067fc:	2301      	movs	r3, #1
 80067fe:	e000      	b.n	8006802 <prvProcessTimerOrBlockTask+0x52>
 8006800:	2300      	movs	r3, #0
 8006802:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006804:	4b0f      	ldr	r3, [pc, #60]	@ (8006844 <prvProcessTimerOrBlockTask+0x94>)
 8006806:	6818      	ldr	r0, [r3, #0]
 8006808:	687a      	ldr	r2, [r7, #4]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	1ad3      	subs	r3, r2, r3
 800680e:	683a      	ldr	r2, [r7, #0]
 8006810:	4619      	mov	r1, r3
 8006812:	f7fe ff93 	bl	800573c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006816:	f7ff fa17 	bl	8005c48 <xTaskResumeAll>
 800681a:	4603      	mov	r3, r0
 800681c:	2b00      	cmp	r3, #0
 800681e:	d10a      	bne.n	8006836 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006820:	4b09      	ldr	r3, [pc, #36]	@ (8006848 <prvProcessTimerOrBlockTask+0x98>)
 8006822:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006826:	601a      	str	r2, [r3, #0]
 8006828:	f3bf 8f4f 	dsb	sy
 800682c:	f3bf 8f6f 	isb	sy
}
 8006830:	e001      	b.n	8006836 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006832:	f7ff fa09 	bl	8005c48 <xTaskResumeAll>
}
 8006836:	bf00      	nop
 8006838:	3710      	adds	r7, #16
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	200012dc 	.word	0x200012dc
 8006844:	200012e0 	.word	0x200012e0
 8006848:	e000ed04 	.word	0xe000ed04

0800684c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800684c:	b480      	push	{r7}
 800684e:	b085      	sub	sp, #20
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006854:	4b0e      	ldr	r3, [pc, #56]	@ (8006890 <prvGetNextExpireTime+0x44>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d101      	bne.n	8006862 <prvGetNextExpireTime+0x16>
 800685e:	2201      	movs	r2, #1
 8006860:	e000      	b.n	8006864 <prvGetNextExpireTime+0x18>
 8006862:	2200      	movs	r2, #0
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d105      	bne.n	800687c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006870:	4b07      	ldr	r3, [pc, #28]	@ (8006890 <prvGetNextExpireTime+0x44>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	68db      	ldr	r3, [r3, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	60fb      	str	r3, [r7, #12]
 800687a:	e001      	b.n	8006880 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800687c:	2300      	movs	r3, #0
 800687e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006880:	68fb      	ldr	r3, [r7, #12]
}
 8006882:	4618      	mov	r0, r3
 8006884:	3714      	adds	r7, #20
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr
 800688e:	bf00      	nop
 8006890:	200012d8 	.word	0x200012d8

08006894 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b084      	sub	sp, #16
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800689c:	f7ff fa72 	bl	8005d84 <xTaskGetTickCount>
 80068a0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80068a2:	4b0b      	ldr	r3, [pc, #44]	@ (80068d0 <prvSampleTimeNow+0x3c>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	68fa      	ldr	r2, [r7, #12]
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d205      	bcs.n	80068b8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80068ac:	f000 f93a 	bl	8006b24 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2201      	movs	r2, #1
 80068b4:	601a      	str	r2, [r3, #0]
 80068b6:	e002      	b.n	80068be <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2200      	movs	r2, #0
 80068bc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80068be:	4a04      	ldr	r2, [pc, #16]	@ (80068d0 <prvSampleTimeNow+0x3c>)
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80068c4:	68fb      	ldr	r3, [r7, #12]
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3710      	adds	r7, #16
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}
 80068ce:	bf00      	nop
 80068d0:	200012e8 	.word	0x200012e8

080068d4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b086      	sub	sp, #24
 80068d8:	af00      	add	r7, sp, #0
 80068da:	60f8      	str	r0, [r7, #12]
 80068dc:	60b9      	str	r1, [r7, #8]
 80068de:	607a      	str	r2, [r7, #4]
 80068e0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80068e2:	2300      	movs	r3, #0
 80068e4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	68ba      	ldr	r2, [r7, #8]
 80068ea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	68fa      	ldr	r2, [r7, #12]
 80068f0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80068f2:	68ba      	ldr	r2, [r7, #8]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	429a      	cmp	r2, r3
 80068f8:	d812      	bhi.n	8006920 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	1ad2      	subs	r2, r2, r3
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	699b      	ldr	r3, [r3, #24]
 8006904:	429a      	cmp	r2, r3
 8006906:	d302      	bcc.n	800690e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006908:	2301      	movs	r3, #1
 800690a:	617b      	str	r3, [r7, #20]
 800690c:	e01b      	b.n	8006946 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800690e:	4b10      	ldr	r3, [pc, #64]	@ (8006950 <prvInsertTimerInActiveList+0x7c>)
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	3304      	adds	r3, #4
 8006916:	4619      	mov	r1, r3
 8006918:	4610      	mov	r0, r2
 800691a:	f7fe f9aa 	bl	8004c72 <vListInsert>
 800691e:	e012      	b.n	8006946 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006920:	687a      	ldr	r2, [r7, #4]
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	429a      	cmp	r2, r3
 8006926:	d206      	bcs.n	8006936 <prvInsertTimerInActiveList+0x62>
 8006928:	68ba      	ldr	r2, [r7, #8]
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	429a      	cmp	r2, r3
 800692e:	d302      	bcc.n	8006936 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006930:	2301      	movs	r3, #1
 8006932:	617b      	str	r3, [r7, #20]
 8006934:	e007      	b.n	8006946 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006936:	4b07      	ldr	r3, [pc, #28]	@ (8006954 <prvInsertTimerInActiveList+0x80>)
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	3304      	adds	r3, #4
 800693e:	4619      	mov	r1, r3
 8006940:	4610      	mov	r0, r2
 8006942:	f7fe f996 	bl	8004c72 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006946:	697b      	ldr	r3, [r7, #20]
}
 8006948:	4618      	mov	r0, r3
 800694a:	3718      	adds	r7, #24
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}
 8006950:	200012dc 	.word	0x200012dc
 8006954:	200012d8 	.word	0x200012d8

08006958 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b08e      	sub	sp, #56	@ 0x38
 800695c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800695e:	e0ce      	b.n	8006afe <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2b00      	cmp	r3, #0
 8006964:	da19      	bge.n	800699a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006966:	1d3b      	adds	r3, r7, #4
 8006968:	3304      	adds	r3, #4
 800696a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800696c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800696e:	2b00      	cmp	r3, #0
 8006970:	d10b      	bne.n	800698a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006976:	f383 8811 	msr	BASEPRI, r3
 800697a:	f3bf 8f6f 	isb	sy
 800697e:	f3bf 8f4f 	dsb	sy
 8006982:	61fb      	str	r3, [r7, #28]
}
 8006984:	bf00      	nop
 8006986:	bf00      	nop
 8006988:	e7fd      	b.n	8006986 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800698a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006990:	6850      	ldr	r0, [r2, #4]
 8006992:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006994:	6892      	ldr	r2, [r2, #8]
 8006996:	4611      	mov	r1, r2
 8006998:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2b00      	cmp	r3, #0
 800699e:	f2c0 80ae 	blt.w	8006afe <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80069a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069a8:	695b      	ldr	r3, [r3, #20]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d004      	beq.n	80069b8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80069ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069b0:	3304      	adds	r3, #4
 80069b2:	4618      	mov	r0, r3
 80069b4:	f7fe f996 	bl	8004ce4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80069b8:	463b      	mov	r3, r7
 80069ba:	4618      	mov	r0, r3
 80069bc:	f7ff ff6a 	bl	8006894 <prvSampleTimeNow>
 80069c0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2b09      	cmp	r3, #9
 80069c6:	f200 8097 	bhi.w	8006af8 <prvProcessReceivedCommands+0x1a0>
 80069ca:	a201      	add	r2, pc, #4	@ (adr r2, 80069d0 <prvProcessReceivedCommands+0x78>)
 80069cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d0:	080069f9 	.word	0x080069f9
 80069d4:	080069f9 	.word	0x080069f9
 80069d8:	080069f9 	.word	0x080069f9
 80069dc:	08006a6f 	.word	0x08006a6f
 80069e0:	08006a83 	.word	0x08006a83
 80069e4:	08006acf 	.word	0x08006acf
 80069e8:	080069f9 	.word	0x080069f9
 80069ec:	080069f9 	.word	0x080069f9
 80069f0:	08006a6f 	.word	0x08006a6f
 80069f4:	08006a83 	.word	0x08006a83
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80069f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80069fe:	f043 0301 	orr.w	r3, r3, #1
 8006a02:	b2da      	uxtb	r2, r3
 8006a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a06:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006a0a:	68ba      	ldr	r2, [r7, #8]
 8006a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a0e:	699b      	ldr	r3, [r3, #24]
 8006a10:	18d1      	adds	r1, r2, r3
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006a18:	f7ff ff5c 	bl	80068d4 <prvInsertTimerInActiveList>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d06c      	beq.n	8006afc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a24:	6a1b      	ldr	r3, [r3, #32]
 8006a26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006a28:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a2c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006a30:	f003 0304 	and.w	r3, r3, #4
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d061      	beq.n	8006afc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006a38:	68ba      	ldr	r2, [r7, #8]
 8006a3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a3c:	699b      	ldr	r3, [r3, #24]
 8006a3e:	441a      	add	r2, r3
 8006a40:	2300      	movs	r3, #0
 8006a42:	9300      	str	r3, [sp, #0]
 8006a44:	2300      	movs	r3, #0
 8006a46:	2100      	movs	r1, #0
 8006a48:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006a4a:	f7ff fe01 	bl	8006650 <xTimerGenericCommand>
 8006a4e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006a50:	6a3b      	ldr	r3, [r7, #32]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d152      	bne.n	8006afc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a5a:	f383 8811 	msr	BASEPRI, r3
 8006a5e:	f3bf 8f6f 	isb	sy
 8006a62:	f3bf 8f4f 	dsb	sy
 8006a66:	61bb      	str	r3, [r7, #24]
}
 8006a68:	bf00      	nop
 8006a6a:	bf00      	nop
 8006a6c:	e7fd      	b.n	8006a6a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a70:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006a74:	f023 0301 	bic.w	r3, r3, #1
 8006a78:	b2da      	uxtb	r2, r3
 8006a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a7c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006a80:	e03d      	b.n	8006afe <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a84:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006a88:	f043 0301 	orr.w	r3, r3, #1
 8006a8c:	b2da      	uxtb	r2, r3
 8006a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a90:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006a94:	68ba      	ldr	r2, [r7, #8]
 8006a96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a98:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a9c:	699b      	ldr	r3, [r3, #24]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d10b      	bne.n	8006aba <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aa6:	f383 8811 	msr	BASEPRI, r3
 8006aaa:	f3bf 8f6f 	isb	sy
 8006aae:	f3bf 8f4f 	dsb	sy
 8006ab2:	617b      	str	r3, [r7, #20]
}
 8006ab4:	bf00      	nop
 8006ab6:	bf00      	nop
 8006ab8:	e7fd      	b.n	8006ab6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006abc:	699a      	ldr	r2, [r3, #24]
 8006abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac0:	18d1      	adds	r1, r2, r3
 8006ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ac6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ac8:	f7ff ff04 	bl	80068d4 <prvInsertTimerInActiveList>
					break;
 8006acc:	e017      	b.n	8006afe <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ad0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006ad4:	f003 0302 	and.w	r3, r3, #2
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d103      	bne.n	8006ae4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006adc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ade:	f000 fbeb 	bl	80072b8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006ae2:	e00c      	b.n	8006afe <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006ae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ae6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006aea:	f023 0301 	bic.w	r3, r3, #1
 8006aee:	b2da      	uxtb	r2, r3
 8006af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006af2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006af6:	e002      	b.n	8006afe <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006af8:	bf00      	nop
 8006afa:	e000      	b.n	8006afe <prvProcessReceivedCommands+0x1a6>
					break;
 8006afc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006afe:	4b08      	ldr	r3, [pc, #32]	@ (8006b20 <prvProcessReceivedCommands+0x1c8>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	1d39      	adds	r1, r7, #4
 8006b04:	2200      	movs	r2, #0
 8006b06:	4618      	mov	r0, r3
 8006b08:	f7fe fbfc 	bl	8005304 <xQueueReceive>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	f47f af26 	bne.w	8006960 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006b14:	bf00      	nop
 8006b16:	bf00      	nop
 8006b18:	3730      	adds	r7, #48	@ 0x30
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	bf00      	nop
 8006b20:	200012e0 	.word	0x200012e0

08006b24 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b088      	sub	sp, #32
 8006b28:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006b2a:	e049      	b.n	8006bc0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b2c:	4b2e      	ldr	r3, [pc, #184]	@ (8006be8 <prvSwitchTimerLists+0xc4>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	68db      	ldr	r3, [r3, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b36:	4b2c      	ldr	r3, [pc, #176]	@ (8006be8 <prvSwitchTimerLists+0xc4>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	68db      	ldr	r3, [r3, #12]
 8006b3c:	68db      	ldr	r3, [r3, #12]
 8006b3e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	3304      	adds	r3, #4
 8006b44:	4618      	mov	r0, r3
 8006b46:	f7fe f8cd 	bl	8004ce4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	6a1b      	ldr	r3, [r3, #32]
 8006b4e:	68f8      	ldr	r0, [r7, #12]
 8006b50:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006b58:	f003 0304 	and.w	r3, r3, #4
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d02f      	beq.n	8006bc0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	699b      	ldr	r3, [r3, #24]
 8006b64:	693a      	ldr	r2, [r7, #16]
 8006b66:	4413      	add	r3, r2
 8006b68:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006b6a:	68ba      	ldr	r2, [r7, #8]
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	d90e      	bls.n	8006b90 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	68ba      	ldr	r2, [r7, #8]
 8006b76:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	68fa      	ldr	r2, [r7, #12]
 8006b7c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006b7e:	4b1a      	ldr	r3, [pc, #104]	@ (8006be8 <prvSwitchTimerLists+0xc4>)
 8006b80:	681a      	ldr	r2, [r3, #0]
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	3304      	adds	r3, #4
 8006b86:	4619      	mov	r1, r3
 8006b88:	4610      	mov	r0, r2
 8006b8a:	f7fe f872 	bl	8004c72 <vListInsert>
 8006b8e:	e017      	b.n	8006bc0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006b90:	2300      	movs	r3, #0
 8006b92:	9300      	str	r3, [sp, #0]
 8006b94:	2300      	movs	r3, #0
 8006b96:	693a      	ldr	r2, [r7, #16]
 8006b98:	2100      	movs	r1, #0
 8006b9a:	68f8      	ldr	r0, [r7, #12]
 8006b9c:	f7ff fd58 	bl	8006650 <xTimerGenericCommand>
 8006ba0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d10b      	bne.n	8006bc0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006ba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bac:	f383 8811 	msr	BASEPRI, r3
 8006bb0:	f3bf 8f6f 	isb	sy
 8006bb4:	f3bf 8f4f 	dsb	sy
 8006bb8:	603b      	str	r3, [r7, #0]
}
 8006bba:	bf00      	nop
 8006bbc:	bf00      	nop
 8006bbe:	e7fd      	b.n	8006bbc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006bc0:	4b09      	ldr	r3, [pc, #36]	@ (8006be8 <prvSwitchTimerLists+0xc4>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d1b0      	bne.n	8006b2c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006bca:	4b07      	ldr	r3, [pc, #28]	@ (8006be8 <prvSwitchTimerLists+0xc4>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006bd0:	4b06      	ldr	r3, [pc, #24]	@ (8006bec <prvSwitchTimerLists+0xc8>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a04      	ldr	r2, [pc, #16]	@ (8006be8 <prvSwitchTimerLists+0xc4>)
 8006bd6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006bd8:	4a04      	ldr	r2, [pc, #16]	@ (8006bec <prvSwitchTimerLists+0xc8>)
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	6013      	str	r3, [r2, #0]
}
 8006bde:	bf00      	nop
 8006be0:	3718      	adds	r7, #24
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
 8006be6:	bf00      	nop
 8006be8:	200012d8 	.word	0x200012d8
 8006bec:	200012dc 	.word	0x200012dc

08006bf0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b082      	sub	sp, #8
 8006bf4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006bf6:	f000 f96f 	bl	8006ed8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006bfa:	4b15      	ldr	r3, [pc, #84]	@ (8006c50 <prvCheckForValidListAndQueue+0x60>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d120      	bne.n	8006c44 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006c02:	4814      	ldr	r0, [pc, #80]	@ (8006c54 <prvCheckForValidListAndQueue+0x64>)
 8006c04:	f7fd ffe4 	bl	8004bd0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006c08:	4813      	ldr	r0, [pc, #76]	@ (8006c58 <prvCheckForValidListAndQueue+0x68>)
 8006c0a:	f7fd ffe1 	bl	8004bd0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006c0e:	4b13      	ldr	r3, [pc, #76]	@ (8006c5c <prvCheckForValidListAndQueue+0x6c>)
 8006c10:	4a10      	ldr	r2, [pc, #64]	@ (8006c54 <prvCheckForValidListAndQueue+0x64>)
 8006c12:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006c14:	4b12      	ldr	r3, [pc, #72]	@ (8006c60 <prvCheckForValidListAndQueue+0x70>)
 8006c16:	4a10      	ldr	r2, [pc, #64]	@ (8006c58 <prvCheckForValidListAndQueue+0x68>)
 8006c18:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	9300      	str	r3, [sp, #0]
 8006c1e:	4b11      	ldr	r3, [pc, #68]	@ (8006c64 <prvCheckForValidListAndQueue+0x74>)
 8006c20:	4a11      	ldr	r2, [pc, #68]	@ (8006c68 <prvCheckForValidListAndQueue+0x78>)
 8006c22:	2110      	movs	r1, #16
 8006c24:	200a      	movs	r0, #10
 8006c26:	f7fe f8f1 	bl	8004e0c <xQueueGenericCreateStatic>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	4a08      	ldr	r2, [pc, #32]	@ (8006c50 <prvCheckForValidListAndQueue+0x60>)
 8006c2e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006c30:	4b07      	ldr	r3, [pc, #28]	@ (8006c50 <prvCheckForValidListAndQueue+0x60>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d005      	beq.n	8006c44 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006c38:	4b05      	ldr	r3, [pc, #20]	@ (8006c50 <prvCheckForValidListAndQueue+0x60>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	490b      	ldr	r1, [pc, #44]	@ (8006c6c <prvCheckForValidListAndQueue+0x7c>)
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f7fe fd52 	bl	80056e8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006c44:	f000 f97a 	bl	8006f3c <vPortExitCritical>
}
 8006c48:	bf00      	nop
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}
 8006c4e:	bf00      	nop
 8006c50:	200012e0 	.word	0x200012e0
 8006c54:	200012b0 	.word	0x200012b0
 8006c58:	200012c4 	.word	0x200012c4
 8006c5c:	200012d8 	.word	0x200012d8
 8006c60:	200012dc 	.word	0x200012dc
 8006c64:	2000138c 	.word	0x2000138c
 8006c68:	200012ec 	.word	0x200012ec
 8006c6c:	0800a214 	.word	0x0800a214

08006c70 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006c70:	b480      	push	{r7}
 8006c72:	b085      	sub	sp, #20
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	60f8      	str	r0, [r7, #12]
 8006c78:	60b9      	str	r1, [r7, #8]
 8006c7a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	3b04      	subs	r3, #4
 8006c80:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006c88:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	3b04      	subs	r3, #4
 8006c8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	f023 0201 	bic.w	r2, r3, #1
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	3b04      	subs	r3, #4
 8006c9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006ca0:	4a0c      	ldr	r2, [pc, #48]	@ (8006cd4 <pxPortInitialiseStack+0x64>)
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	3b14      	subs	r3, #20
 8006caa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006cac:	687a      	ldr	r2, [r7, #4]
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	3b04      	subs	r3, #4
 8006cb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	f06f 0202 	mvn.w	r2, #2
 8006cbe:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	3b20      	subs	r3, #32
 8006cc4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3714      	adds	r7, #20
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr
 8006cd4:	08006cd9 	.word	0x08006cd9

08006cd8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b085      	sub	sp, #20
 8006cdc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006ce2:	4b13      	ldr	r3, [pc, #76]	@ (8006d30 <prvTaskExitError+0x58>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006cea:	d00b      	beq.n	8006d04 <prvTaskExitError+0x2c>
	__asm volatile
 8006cec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cf0:	f383 8811 	msr	BASEPRI, r3
 8006cf4:	f3bf 8f6f 	isb	sy
 8006cf8:	f3bf 8f4f 	dsb	sy
 8006cfc:	60fb      	str	r3, [r7, #12]
}
 8006cfe:	bf00      	nop
 8006d00:	bf00      	nop
 8006d02:	e7fd      	b.n	8006d00 <prvTaskExitError+0x28>
	__asm volatile
 8006d04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d08:	f383 8811 	msr	BASEPRI, r3
 8006d0c:	f3bf 8f6f 	isb	sy
 8006d10:	f3bf 8f4f 	dsb	sy
 8006d14:	60bb      	str	r3, [r7, #8]
}
 8006d16:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006d18:	bf00      	nop
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d0fc      	beq.n	8006d1a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006d20:	bf00      	nop
 8006d22:	bf00      	nop
 8006d24:	3714      	adds	r7, #20
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr
 8006d2e:	bf00      	nop
 8006d30:	2000001c 	.word	0x2000001c
	...

08006d40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006d40:	4b07      	ldr	r3, [pc, #28]	@ (8006d60 <pxCurrentTCBConst2>)
 8006d42:	6819      	ldr	r1, [r3, #0]
 8006d44:	6808      	ldr	r0, [r1, #0]
 8006d46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d4a:	f380 8809 	msr	PSP, r0
 8006d4e:	f3bf 8f6f 	isb	sy
 8006d52:	f04f 0000 	mov.w	r0, #0
 8006d56:	f380 8811 	msr	BASEPRI, r0
 8006d5a:	4770      	bx	lr
 8006d5c:	f3af 8000 	nop.w

08006d60 <pxCurrentTCBConst2>:
 8006d60:	20000db0 	.word	0x20000db0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006d64:	bf00      	nop
 8006d66:	bf00      	nop

08006d68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006d68:	4808      	ldr	r0, [pc, #32]	@ (8006d8c <prvPortStartFirstTask+0x24>)
 8006d6a:	6800      	ldr	r0, [r0, #0]
 8006d6c:	6800      	ldr	r0, [r0, #0]
 8006d6e:	f380 8808 	msr	MSP, r0
 8006d72:	f04f 0000 	mov.w	r0, #0
 8006d76:	f380 8814 	msr	CONTROL, r0
 8006d7a:	b662      	cpsie	i
 8006d7c:	b661      	cpsie	f
 8006d7e:	f3bf 8f4f 	dsb	sy
 8006d82:	f3bf 8f6f 	isb	sy
 8006d86:	df00      	svc	0
 8006d88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006d8a:	bf00      	nop
 8006d8c:	e000ed08 	.word	0xe000ed08

08006d90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b086      	sub	sp, #24
 8006d94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006d96:	4b47      	ldr	r3, [pc, #284]	@ (8006eb4 <xPortStartScheduler+0x124>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a47      	ldr	r2, [pc, #284]	@ (8006eb8 <xPortStartScheduler+0x128>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d10b      	bne.n	8006db8 <xPortStartScheduler+0x28>
	__asm volatile
 8006da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006da4:	f383 8811 	msr	BASEPRI, r3
 8006da8:	f3bf 8f6f 	isb	sy
 8006dac:	f3bf 8f4f 	dsb	sy
 8006db0:	60fb      	str	r3, [r7, #12]
}
 8006db2:	bf00      	nop
 8006db4:	bf00      	nop
 8006db6:	e7fd      	b.n	8006db4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006db8:	4b3e      	ldr	r3, [pc, #248]	@ (8006eb4 <xPortStartScheduler+0x124>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a3f      	ldr	r2, [pc, #252]	@ (8006ebc <xPortStartScheduler+0x12c>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d10b      	bne.n	8006dda <xPortStartScheduler+0x4a>
	__asm volatile
 8006dc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dc6:	f383 8811 	msr	BASEPRI, r3
 8006dca:	f3bf 8f6f 	isb	sy
 8006dce:	f3bf 8f4f 	dsb	sy
 8006dd2:	613b      	str	r3, [r7, #16]
}
 8006dd4:	bf00      	nop
 8006dd6:	bf00      	nop
 8006dd8:	e7fd      	b.n	8006dd6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006dda:	4b39      	ldr	r3, [pc, #228]	@ (8006ec0 <xPortStartScheduler+0x130>)
 8006ddc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	b2db      	uxtb	r3, r3
 8006de4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	22ff      	movs	r2, #255	@ 0xff
 8006dea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	781b      	ldrb	r3, [r3, #0]
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006df4:	78fb      	ldrb	r3, [r7, #3]
 8006df6:	b2db      	uxtb	r3, r3
 8006df8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006dfc:	b2da      	uxtb	r2, r3
 8006dfe:	4b31      	ldr	r3, [pc, #196]	@ (8006ec4 <xPortStartScheduler+0x134>)
 8006e00:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006e02:	4b31      	ldr	r3, [pc, #196]	@ (8006ec8 <xPortStartScheduler+0x138>)
 8006e04:	2207      	movs	r2, #7
 8006e06:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e08:	e009      	b.n	8006e1e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8006e0a:	4b2f      	ldr	r3, [pc, #188]	@ (8006ec8 <xPortStartScheduler+0x138>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	3b01      	subs	r3, #1
 8006e10:	4a2d      	ldr	r2, [pc, #180]	@ (8006ec8 <xPortStartScheduler+0x138>)
 8006e12:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006e14:	78fb      	ldrb	r3, [r7, #3]
 8006e16:	b2db      	uxtb	r3, r3
 8006e18:	005b      	lsls	r3, r3, #1
 8006e1a:	b2db      	uxtb	r3, r3
 8006e1c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006e1e:	78fb      	ldrb	r3, [r7, #3]
 8006e20:	b2db      	uxtb	r3, r3
 8006e22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e26:	2b80      	cmp	r3, #128	@ 0x80
 8006e28:	d0ef      	beq.n	8006e0a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006e2a:	4b27      	ldr	r3, [pc, #156]	@ (8006ec8 <xPortStartScheduler+0x138>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f1c3 0307 	rsb	r3, r3, #7
 8006e32:	2b04      	cmp	r3, #4
 8006e34:	d00b      	beq.n	8006e4e <xPortStartScheduler+0xbe>
	__asm volatile
 8006e36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e3a:	f383 8811 	msr	BASEPRI, r3
 8006e3e:	f3bf 8f6f 	isb	sy
 8006e42:	f3bf 8f4f 	dsb	sy
 8006e46:	60bb      	str	r3, [r7, #8]
}
 8006e48:	bf00      	nop
 8006e4a:	bf00      	nop
 8006e4c:	e7fd      	b.n	8006e4a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006e4e:	4b1e      	ldr	r3, [pc, #120]	@ (8006ec8 <xPortStartScheduler+0x138>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	021b      	lsls	r3, r3, #8
 8006e54:	4a1c      	ldr	r2, [pc, #112]	@ (8006ec8 <xPortStartScheduler+0x138>)
 8006e56:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006e58:	4b1b      	ldr	r3, [pc, #108]	@ (8006ec8 <xPortStartScheduler+0x138>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006e60:	4a19      	ldr	r2, [pc, #100]	@ (8006ec8 <xPortStartScheduler+0x138>)
 8006e62:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	b2da      	uxtb	r2, r3
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006e6c:	4b17      	ldr	r3, [pc, #92]	@ (8006ecc <xPortStartScheduler+0x13c>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a16      	ldr	r2, [pc, #88]	@ (8006ecc <xPortStartScheduler+0x13c>)
 8006e72:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006e76:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006e78:	4b14      	ldr	r3, [pc, #80]	@ (8006ecc <xPortStartScheduler+0x13c>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a13      	ldr	r2, [pc, #76]	@ (8006ecc <xPortStartScheduler+0x13c>)
 8006e7e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006e82:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006e84:	f000 f8da 	bl	800703c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006e88:	4b11      	ldr	r3, [pc, #68]	@ (8006ed0 <xPortStartScheduler+0x140>)
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006e8e:	f000 f8f9 	bl	8007084 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006e92:	4b10      	ldr	r3, [pc, #64]	@ (8006ed4 <xPortStartScheduler+0x144>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a0f      	ldr	r2, [pc, #60]	@ (8006ed4 <xPortStartScheduler+0x144>)
 8006e98:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006e9c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006e9e:	f7ff ff63 	bl	8006d68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006ea2:	f7ff f839 	bl	8005f18 <vTaskSwitchContext>
	prvTaskExitError();
 8006ea6:	f7ff ff17 	bl	8006cd8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006eaa:	2300      	movs	r3, #0
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	3718      	adds	r7, #24
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}
 8006eb4:	e000ed00 	.word	0xe000ed00
 8006eb8:	410fc271 	.word	0x410fc271
 8006ebc:	410fc270 	.word	0x410fc270
 8006ec0:	e000e400 	.word	0xe000e400
 8006ec4:	200013dc 	.word	0x200013dc
 8006ec8:	200013e0 	.word	0x200013e0
 8006ecc:	e000ed20 	.word	0xe000ed20
 8006ed0:	2000001c 	.word	0x2000001c
 8006ed4:	e000ef34 	.word	0xe000ef34

08006ed8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b083      	sub	sp, #12
 8006edc:	af00      	add	r7, sp, #0
	__asm volatile
 8006ede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ee2:	f383 8811 	msr	BASEPRI, r3
 8006ee6:	f3bf 8f6f 	isb	sy
 8006eea:	f3bf 8f4f 	dsb	sy
 8006eee:	607b      	str	r3, [r7, #4]
}
 8006ef0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006ef2:	4b10      	ldr	r3, [pc, #64]	@ (8006f34 <vPortEnterCritical+0x5c>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	4a0e      	ldr	r2, [pc, #56]	@ (8006f34 <vPortEnterCritical+0x5c>)
 8006efa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006efc:	4b0d      	ldr	r3, [pc, #52]	@ (8006f34 <vPortEnterCritical+0x5c>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d110      	bne.n	8006f26 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006f04:	4b0c      	ldr	r3, [pc, #48]	@ (8006f38 <vPortEnterCritical+0x60>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	b2db      	uxtb	r3, r3
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d00b      	beq.n	8006f26 <vPortEnterCritical+0x4e>
	__asm volatile
 8006f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f12:	f383 8811 	msr	BASEPRI, r3
 8006f16:	f3bf 8f6f 	isb	sy
 8006f1a:	f3bf 8f4f 	dsb	sy
 8006f1e:	603b      	str	r3, [r7, #0]
}
 8006f20:	bf00      	nop
 8006f22:	bf00      	nop
 8006f24:	e7fd      	b.n	8006f22 <vPortEnterCritical+0x4a>
	}
}
 8006f26:	bf00      	nop
 8006f28:	370c      	adds	r7, #12
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr
 8006f32:	bf00      	nop
 8006f34:	2000001c 	.word	0x2000001c
 8006f38:	e000ed04 	.word	0xe000ed04

08006f3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006f42:	4b12      	ldr	r3, [pc, #72]	@ (8006f8c <vPortExitCritical+0x50>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d10b      	bne.n	8006f62 <vPortExitCritical+0x26>
	__asm volatile
 8006f4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f4e:	f383 8811 	msr	BASEPRI, r3
 8006f52:	f3bf 8f6f 	isb	sy
 8006f56:	f3bf 8f4f 	dsb	sy
 8006f5a:	607b      	str	r3, [r7, #4]
}
 8006f5c:	bf00      	nop
 8006f5e:	bf00      	nop
 8006f60:	e7fd      	b.n	8006f5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006f62:	4b0a      	ldr	r3, [pc, #40]	@ (8006f8c <vPortExitCritical+0x50>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	3b01      	subs	r3, #1
 8006f68:	4a08      	ldr	r2, [pc, #32]	@ (8006f8c <vPortExitCritical+0x50>)
 8006f6a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006f6c:	4b07      	ldr	r3, [pc, #28]	@ (8006f8c <vPortExitCritical+0x50>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d105      	bne.n	8006f80 <vPortExitCritical+0x44>
 8006f74:	2300      	movs	r3, #0
 8006f76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	f383 8811 	msr	BASEPRI, r3
}
 8006f7e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006f80:	bf00      	nop
 8006f82:	370c      	adds	r7, #12
 8006f84:	46bd      	mov	sp, r7
 8006f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8a:	4770      	bx	lr
 8006f8c:	2000001c 	.word	0x2000001c

08006f90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006f90:	f3ef 8009 	mrs	r0, PSP
 8006f94:	f3bf 8f6f 	isb	sy
 8006f98:	4b15      	ldr	r3, [pc, #84]	@ (8006ff0 <pxCurrentTCBConst>)
 8006f9a:	681a      	ldr	r2, [r3, #0]
 8006f9c:	f01e 0f10 	tst.w	lr, #16
 8006fa0:	bf08      	it	eq
 8006fa2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006fa6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006faa:	6010      	str	r0, [r2, #0]
 8006fac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006fb0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006fb4:	f380 8811 	msr	BASEPRI, r0
 8006fb8:	f3bf 8f4f 	dsb	sy
 8006fbc:	f3bf 8f6f 	isb	sy
 8006fc0:	f7fe ffaa 	bl	8005f18 <vTaskSwitchContext>
 8006fc4:	f04f 0000 	mov.w	r0, #0
 8006fc8:	f380 8811 	msr	BASEPRI, r0
 8006fcc:	bc09      	pop	{r0, r3}
 8006fce:	6819      	ldr	r1, [r3, #0]
 8006fd0:	6808      	ldr	r0, [r1, #0]
 8006fd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fd6:	f01e 0f10 	tst.w	lr, #16
 8006fda:	bf08      	it	eq
 8006fdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006fe0:	f380 8809 	msr	PSP, r0
 8006fe4:	f3bf 8f6f 	isb	sy
 8006fe8:	4770      	bx	lr
 8006fea:	bf00      	nop
 8006fec:	f3af 8000 	nop.w

08006ff0 <pxCurrentTCBConst>:
 8006ff0:	20000db0 	.word	0x20000db0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006ff4:	bf00      	nop
 8006ff6:	bf00      	nop

08006ff8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b082      	sub	sp, #8
 8006ffc:	af00      	add	r7, sp, #0
	__asm volatile
 8006ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007002:	f383 8811 	msr	BASEPRI, r3
 8007006:	f3bf 8f6f 	isb	sy
 800700a:	f3bf 8f4f 	dsb	sy
 800700e:	607b      	str	r3, [r7, #4]
}
 8007010:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007012:	f7fe fec7 	bl	8005da4 <xTaskIncrementTick>
 8007016:	4603      	mov	r3, r0
 8007018:	2b00      	cmp	r3, #0
 800701a:	d003      	beq.n	8007024 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800701c:	4b06      	ldr	r3, [pc, #24]	@ (8007038 <xPortSysTickHandler+0x40>)
 800701e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007022:	601a      	str	r2, [r3, #0]
 8007024:	2300      	movs	r3, #0
 8007026:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	f383 8811 	msr	BASEPRI, r3
}
 800702e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007030:	bf00      	nop
 8007032:	3708      	adds	r7, #8
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}
 8007038:	e000ed04 	.word	0xe000ed04

0800703c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800703c:	b480      	push	{r7}
 800703e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007040:	4b0b      	ldr	r3, [pc, #44]	@ (8007070 <vPortSetupTimerInterrupt+0x34>)
 8007042:	2200      	movs	r2, #0
 8007044:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007046:	4b0b      	ldr	r3, [pc, #44]	@ (8007074 <vPortSetupTimerInterrupt+0x38>)
 8007048:	2200      	movs	r2, #0
 800704a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800704c:	4b0a      	ldr	r3, [pc, #40]	@ (8007078 <vPortSetupTimerInterrupt+0x3c>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a0a      	ldr	r2, [pc, #40]	@ (800707c <vPortSetupTimerInterrupt+0x40>)
 8007052:	fba2 2303 	umull	r2, r3, r2, r3
 8007056:	099b      	lsrs	r3, r3, #6
 8007058:	4a09      	ldr	r2, [pc, #36]	@ (8007080 <vPortSetupTimerInterrupt+0x44>)
 800705a:	3b01      	subs	r3, #1
 800705c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800705e:	4b04      	ldr	r3, [pc, #16]	@ (8007070 <vPortSetupTimerInterrupt+0x34>)
 8007060:	2207      	movs	r2, #7
 8007062:	601a      	str	r2, [r3, #0]
}
 8007064:	bf00      	nop
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr
 800706e:	bf00      	nop
 8007070:	e000e010 	.word	0xe000e010
 8007074:	e000e018 	.word	0xe000e018
 8007078:	20000010 	.word	0x20000010
 800707c:	10624dd3 	.word	0x10624dd3
 8007080:	e000e014 	.word	0xe000e014

08007084 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007084:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007094 <vPortEnableVFP+0x10>
 8007088:	6801      	ldr	r1, [r0, #0]
 800708a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800708e:	6001      	str	r1, [r0, #0]
 8007090:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007092:	bf00      	nop
 8007094:	e000ed88 	.word	0xe000ed88

08007098 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007098:	b480      	push	{r7}
 800709a:	b085      	sub	sp, #20
 800709c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800709e:	f3ef 8305 	mrs	r3, IPSR
 80070a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2b0f      	cmp	r3, #15
 80070a8:	d915      	bls.n	80070d6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80070aa:	4a18      	ldr	r2, [pc, #96]	@ (800710c <vPortValidateInterruptPriority+0x74>)
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	4413      	add	r3, r2
 80070b0:	781b      	ldrb	r3, [r3, #0]
 80070b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80070b4:	4b16      	ldr	r3, [pc, #88]	@ (8007110 <vPortValidateInterruptPriority+0x78>)
 80070b6:	781b      	ldrb	r3, [r3, #0]
 80070b8:	7afa      	ldrb	r2, [r7, #11]
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d20b      	bcs.n	80070d6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80070be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070c2:	f383 8811 	msr	BASEPRI, r3
 80070c6:	f3bf 8f6f 	isb	sy
 80070ca:	f3bf 8f4f 	dsb	sy
 80070ce:	607b      	str	r3, [r7, #4]
}
 80070d0:	bf00      	nop
 80070d2:	bf00      	nop
 80070d4:	e7fd      	b.n	80070d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80070d6:	4b0f      	ldr	r3, [pc, #60]	@ (8007114 <vPortValidateInterruptPriority+0x7c>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80070de:	4b0e      	ldr	r3, [pc, #56]	@ (8007118 <vPortValidateInterruptPriority+0x80>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	429a      	cmp	r2, r3
 80070e4:	d90b      	bls.n	80070fe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80070e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070ea:	f383 8811 	msr	BASEPRI, r3
 80070ee:	f3bf 8f6f 	isb	sy
 80070f2:	f3bf 8f4f 	dsb	sy
 80070f6:	603b      	str	r3, [r7, #0]
}
 80070f8:	bf00      	nop
 80070fa:	bf00      	nop
 80070fc:	e7fd      	b.n	80070fa <vPortValidateInterruptPriority+0x62>
	}
 80070fe:	bf00      	nop
 8007100:	3714      	adds	r7, #20
 8007102:	46bd      	mov	sp, r7
 8007104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007108:	4770      	bx	lr
 800710a:	bf00      	nop
 800710c:	e000e3f0 	.word	0xe000e3f0
 8007110:	200013dc 	.word	0x200013dc
 8007114:	e000ed0c 	.word	0xe000ed0c
 8007118:	200013e0 	.word	0x200013e0

0800711c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b08a      	sub	sp, #40	@ 0x28
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007124:	2300      	movs	r3, #0
 8007126:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007128:	f7fe fd80 	bl	8005c2c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800712c:	4b5c      	ldr	r3, [pc, #368]	@ (80072a0 <pvPortMalloc+0x184>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d101      	bne.n	8007138 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007134:	f000 f924 	bl	8007380 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007138:	4b5a      	ldr	r3, [pc, #360]	@ (80072a4 <pvPortMalloc+0x188>)
 800713a:	681a      	ldr	r2, [r3, #0]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	4013      	ands	r3, r2
 8007140:	2b00      	cmp	r3, #0
 8007142:	f040 8095 	bne.w	8007270 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d01e      	beq.n	800718a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800714c:	2208      	movs	r2, #8
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	4413      	add	r3, r2
 8007152:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f003 0307 	and.w	r3, r3, #7
 800715a:	2b00      	cmp	r3, #0
 800715c:	d015      	beq.n	800718a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f023 0307 	bic.w	r3, r3, #7
 8007164:	3308      	adds	r3, #8
 8007166:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f003 0307 	and.w	r3, r3, #7
 800716e:	2b00      	cmp	r3, #0
 8007170:	d00b      	beq.n	800718a <pvPortMalloc+0x6e>
	__asm volatile
 8007172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007176:	f383 8811 	msr	BASEPRI, r3
 800717a:	f3bf 8f6f 	isb	sy
 800717e:	f3bf 8f4f 	dsb	sy
 8007182:	617b      	str	r3, [r7, #20]
}
 8007184:	bf00      	nop
 8007186:	bf00      	nop
 8007188:	e7fd      	b.n	8007186 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d06f      	beq.n	8007270 <pvPortMalloc+0x154>
 8007190:	4b45      	ldr	r3, [pc, #276]	@ (80072a8 <pvPortMalloc+0x18c>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	687a      	ldr	r2, [r7, #4]
 8007196:	429a      	cmp	r2, r3
 8007198:	d86a      	bhi.n	8007270 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800719a:	4b44      	ldr	r3, [pc, #272]	@ (80072ac <pvPortMalloc+0x190>)
 800719c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800719e:	4b43      	ldr	r3, [pc, #268]	@ (80072ac <pvPortMalloc+0x190>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80071a4:	e004      	b.n	80071b0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80071a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80071aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80071b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	687a      	ldr	r2, [r7, #4]
 80071b6:	429a      	cmp	r2, r3
 80071b8:	d903      	bls.n	80071c2 <pvPortMalloc+0xa6>
 80071ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d1f1      	bne.n	80071a6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80071c2:	4b37      	ldr	r3, [pc, #220]	@ (80072a0 <pvPortMalloc+0x184>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d051      	beq.n	8007270 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80071cc:	6a3b      	ldr	r3, [r7, #32]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	2208      	movs	r2, #8
 80071d2:	4413      	add	r3, r2
 80071d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80071d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	6a3b      	ldr	r3, [r7, #32]
 80071dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80071de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071e0:	685a      	ldr	r2, [r3, #4]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	1ad2      	subs	r2, r2, r3
 80071e6:	2308      	movs	r3, #8
 80071e8:	005b      	lsls	r3, r3, #1
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d920      	bls.n	8007230 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80071ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	4413      	add	r3, r2
 80071f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80071f6:	69bb      	ldr	r3, [r7, #24]
 80071f8:	f003 0307 	and.w	r3, r3, #7
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d00b      	beq.n	8007218 <pvPortMalloc+0xfc>
	__asm volatile
 8007200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007204:	f383 8811 	msr	BASEPRI, r3
 8007208:	f3bf 8f6f 	isb	sy
 800720c:	f3bf 8f4f 	dsb	sy
 8007210:	613b      	str	r3, [r7, #16]
}
 8007212:	bf00      	nop
 8007214:	bf00      	nop
 8007216:	e7fd      	b.n	8007214 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800721a:	685a      	ldr	r2, [r3, #4]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	1ad2      	subs	r2, r2, r3
 8007220:	69bb      	ldr	r3, [r7, #24]
 8007222:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800722a:	69b8      	ldr	r0, [r7, #24]
 800722c:	f000 f90a 	bl	8007444 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007230:	4b1d      	ldr	r3, [pc, #116]	@ (80072a8 <pvPortMalloc+0x18c>)
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	1ad3      	subs	r3, r2, r3
 800723a:	4a1b      	ldr	r2, [pc, #108]	@ (80072a8 <pvPortMalloc+0x18c>)
 800723c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800723e:	4b1a      	ldr	r3, [pc, #104]	@ (80072a8 <pvPortMalloc+0x18c>)
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	4b1b      	ldr	r3, [pc, #108]	@ (80072b0 <pvPortMalloc+0x194>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	429a      	cmp	r2, r3
 8007248:	d203      	bcs.n	8007252 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800724a:	4b17      	ldr	r3, [pc, #92]	@ (80072a8 <pvPortMalloc+0x18c>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a18      	ldr	r2, [pc, #96]	@ (80072b0 <pvPortMalloc+0x194>)
 8007250:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007254:	685a      	ldr	r2, [r3, #4]
 8007256:	4b13      	ldr	r3, [pc, #76]	@ (80072a4 <pvPortMalloc+0x188>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	431a      	orrs	r2, r3
 800725c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800725e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007262:	2200      	movs	r2, #0
 8007264:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007266:	4b13      	ldr	r3, [pc, #76]	@ (80072b4 <pvPortMalloc+0x198>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	3301      	adds	r3, #1
 800726c:	4a11      	ldr	r2, [pc, #68]	@ (80072b4 <pvPortMalloc+0x198>)
 800726e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007270:	f7fe fcea 	bl	8005c48 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007274:	69fb      	ldr	r3, [r7, #28]
 8007276:	f003 0307 	and.w	r3, r3, #7
 800727a:	2b00      	cmp	r3, #0
 800727c:	d00b      	beq.n	8007296 <pvPortMalloc+0x17a>
	__asm volatile
 800727e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007282:	f383 8811 	msr	BASEPRI, r3
 8007286:	f3bf 8f6f 	isb	sy
 800728a:	f3bf 8f4f 	dsb	sy
 800728e:	60fb      	str	r3, [r7, #12]
}
 8007290:	bf00      	nop
 8007292:	bf00      	nop
 8007294:	e7fd      	b.n	8007292 <pvPortMalloc+0x176>
	return pvReturn;
 8007296:	69fb      	ldr	r3, [r7, #28]
}
 8007298:	4618      	mov	r0, r3
 800729a:	3728      	adds	r7, #40	@ 0x28
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}
 80072a0:	20004fec 	.word	0x20004fec
 80072a4:	20005000 	.word	0x20005000
 80072a8:	20004ff0 	.word	0x20004ff0
 80072ac:	20004fe4 	.word	0x20004fe4
 80072b0:	20004ff4 	.word	0x20004ff4
 80072b4:	20004ff8 	.word	0x20004ff8

080072b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b086      	sub	sp, #24
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d04f      	beq.n	800736a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80072ca:	2308      	movs	r3, #8
 80072cc:	425b      	negs	r3, r3
 80072ce:	697a      	ldr	r2, [r7, #20]
 80072d0:	4413      	add	r3, r2
 80072d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	685a      	ldr	r2, [r3, #4]
 80072dc:	4b25      	ldr	r3, [pc, #148]	@ (8007374 <vPortFree+0xbc>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4013      	ands	r3, r2
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d10b      	bne.n	80072fe <vPortFree+0x46>
	__asm volatile
 80072e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072ea:	f383 8811 	msr	BASEPRI, r3
 80072ee:	f3bf 8f6f 	isb	sy
 80072f2:	f3bf 8f4f 	dsb	sy
 80072f6:	60fb      	str	r3, [r7, #12]
}
 80072f8:	bf00      	nop
 80072fa:	bf00      	nop
 80072fc:	e7fd      	b.n	80072fa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d00b      	beq.n	800731e <vPortFree+0x66>
	__asm volatile
 8007306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800730a:	f383 8811 	msr	BASEPRI, r3
 800730e:	f3bf 8f6f 	isb	sy
 8007312:	f3bf 8f4f 	dsb	sy
 8007316:	60bb      	str	r3, [r7, #8]
}
 8007318:	bf00      	nop
 800731a:	bf00      	nop
 800731c:	e7fd      	b.n	800731a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	685a      	ldr	r2, [r3, #4]
 8007322:	4b14      	ldr	r3, [pc, #80]	@ (8007374 <vPortFree+0xbc>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4013      	ands	r3, r2
 8007328:	2b00      	cmp	r3, #0
 800732a:	d01e      	beq.n	800736a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d11a      	bne.n	800736a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	685a      	ldr	r2, [r3, #4]
 8007338:	4b0e      	ldr	r3, [pc, #56]	@ (8007374 <vPortFree+0xbc>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	43db      	mvns	r3, r3
 800733e:	401a      	ands	r2, r3
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007344:	f7fe fc72 	bl	8005c2c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	685a      	ldr	r2, [r3, #4]
 800734c:	4b0a      	ldr	r3, [pc, #40]	@ (8007378 <vPortFree+0xc0>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4413      	add	r3, r2
 8007352:	4a09      	ldr	r2, [pc, #36]	@ (8007378 <vPortFree+0xc0>)
 8007354:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007356:	6938      	ldr	r0, [r7, #16]
 8007358:	f000 f874 	bl	8007444 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800735c:	4b07      	ldr	r3, [pc, #28]	@ (800737c <vPortFree+0xc4>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	3301      	adds	r3, #1
 8007362:	4a06      	ldr	r2, [pc, #24]	@ (800737c <vPortFree+0xc4>)
 8007364:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007366:	f7fe fc6f 	bl	8005c48 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800736a:	bf00      	nop
 800736c:	3718      	adds	r7, #24
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}
 8007372:	bf00      	nop
 8007374:	20005000 	.word	0x20005000
 8007378:	20004ff0 	.word	0x20004ff0
 800737c:	20004ffc 	.word	0x20004ffc

08007380 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007380:	b480      	push	{r7}
 8007382:	b085      	sub	sp, #20
 8007384:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007386:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800738a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800738c:	4b27      	ldr	r3, [pc, #156]	@ (800742c <prvHeapInit+0xac>)
 800738e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	f003 0307 	and.w	r3, r3, #7
 8007396:	2b00      	cmp	r3, #0
 8007398:	d00c      	beq.n	80073b4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	3307      	adds	r3, #7
 800739e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f023 0307 	bic.w	r3, r3, #7
 80073a6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80073a8:	68ba      	ldr	r2, [r7, #8]
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	1ad3      	subs	r3, r2, r3
 80073ae:	4a1f      	ldr	r2, [pc, #124]	@ (800742c <prvHeapInit+0xac>)
 80073b0:	4413      	add	r3, r2
 80073b2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80073b8:	4a1d      	ldr	r2, [pc, #116]	@ (8007430 <prvHeapInit+0xb0>)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80073be:	4b1c      	ldr	r3, [pc, #112]	@ (8007430 <prvHeapInit+0xb0>)
 80073c0:	2200      	movs	r2, #0
 80073c2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	68ba      	ldr	r2, [r7, #8]
 80073c8:	4413      	add	r3, r2
 80073ca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80073cc:	2208      	movs	r2, #8
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	1a9b      	subs	r3, r3, r2
 80073d2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f023 0307 	bic.w	r3, r3, #7
 80073da:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	4a15      	ldr	r2, [pc, #84]	@ (8007434 <prvHeapInit+0xb4>)
 80073e0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80073e2:	4b14      	ldr	r3, [pc, #80]	@ (8007434 <prvHeapInit+0xb4>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	2200      	movs	r2, #0
 80073e8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80073ea:	4b12      	ldr	r3, [pc, #72]	@ (8007434 <prvHeapInit+0xb4>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	2200      	movs	r2, #0
 80073f0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	68fa      	ldr	r2, [r7, #12]
 80073fa:	1ad2      	subs	r2, r2, r3
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007400:	4b0c      	ldr	r3, [pc, #48]	@ (8007434 <prvHeapInit+0xb4>)
 8007402:	681a      	ldr	r2, [r3, #0]
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	4a0a      	ldr	r2, [pc, #40]	@ (8007438 <prvHeapInit+0xb8>)
 800740e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	4a09      	ldr	r2, [pc, #36]	@ (800743c <prvHeapInit+0xbc>)
 8007416:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007418:	4b09      	ldr	r3, [pc, #36]	@ (8007440 <prvHeapInit+0xc0>)
 800741a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800741e:	601a      	str	r2, [r3, #0]
}
 8007420:	bf00      	nop
 8007422:	3714      	adds	r7, #20
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr
 800742c:	200013e4 	.word	0x200013e4
 8007430:	20004fe4 	.word	0x20004fe4
 8007434:	20004fec 	.word	0x20004fec
 8007438:	20004ff4 	.word	0x20004ff4
 800743c:	20004ff0 	.word	0x20004ff0
 8007440:	20005000 	.word	0x20005000

08007444 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007444:	b480      	push	{r7}
 8007446:	b085      	sub	sp, #20
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800744c:	4b28      	ldr	r3, [pc, #160]	@ (80074f0 <prvInsertBlockIntoFreeList+0xac>)
 800744e:	60fb      	str	r3, [r7, #12]
 8007450:	e002      	b.n	8007458 <prvInsertBlockIntoFreeList+0x14>
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	60fb      	str	r3, [r7, #12]
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	429a      	cmp	r2, r3
 8007460:	d8f7      	bhi.n	8007452 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	68ba      	ldr	r2, [r7, #8]
 800746c:	4413      	add	r3, r2
 800746e:	687a      	ldr	r2, [r7, #4]
 8007470:	429a      	cmp	r2, r3
 8007472:	d108      	bne.n	8007486 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	685a      	ldr	r2, [r3, #4]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	441a      	add	r2, r3
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	68ba      	ldr	r2, [r7, #8]
 8007490:	441a      	add	r2, r3
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	429a      	cmp	r2, r3
 8007498:	d118      	bne.n	80074cc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681a      	ldr	r2, [r3, #0]
 800749e:	4b15      	ldr	r3, [pc, #84]	@ (80074f4 <prvInsertBlockIntoFreeList+0xb0>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d00d      	beq.n	80074c2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	685a      	ldr	r2, [r3, #4]
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	441a      	add	r2, r3
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	601a      	str	r2, [r3, #0]
 80074c0:	e008      	b.n	80074d4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80074c2:	4b0c      	ldr	r3, [pc, #48]	@ (80074f4 <prvInsertBlockIntoFreeList+0xb0>)
 80074c4:	681a      	ldr	r2, [r3, #0]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	601a      	str	r2, [r3, #0]
 80074ca:	e003      	b.n	80074d4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681a      	ldr	r2, [r3, #0]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80074d4:	68fa      	ldr	r2, [r7, #12]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	429a      	cmp	r2, r3
 80074da:	d002      	beq.n	80074e2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80074e2:	bf00      	nop
 80074e4:	3714      	adds	r7, #20
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr
 80074ee:	bf00      	nop
 80074f0:	20004fe4 	.word	0x20004fe4
 80074f4:	20004fec 	.word	0x20004fec

080074f8 <__cvt>:
 80074f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074fc:	ec57 6b10 	vmov	r6, r7, d0
 8007500:	2f00      	cmp	r7, #0
 8007502:	460c      	mov	r4, r1
 8007504:	4619      	mov	r1, r3
 8007506:	463b      	mov	r3, r7
 8007508:	bfbb      	ittet	lt
 800750a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800750e:	461f      	movlt	r7, r3
 8007510:	2300      	movge	r3, #0
 8007512:	232d      	movlt	r3, #45	@ 0x2d
 8007514:	700b      	strb	r3, [r1, #0]
 8007516:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007518:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800751c:	4691      	mov	r9, r2
 800751e:	f023 0820 	bic.w	r8, r3, #32
 8007522:	bfbc      	itt	lt
 8007524:	4632      	movlt	r2, r6
 8007526:	4616      	movlt	r6, r2
 8007528:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800752c:	d005      	beq.n	800753a <__cvt+0x42>
 800752e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007532:	d100      	bne.n	8007536 <__cvt+0x3e>
 8007534:	3401      	adds	r4, #1
 8007536:	2102      	movs	r1, #2
 8007538:	e000      	b.n	800753c <__cvt+0x44>
 800753a:	2103      	movs	r1, #3
 800753c:	ab03      	add	r3, sp, #12
 800753e:	9301      	str	r3, [sp, #4]
 8007540:	ab02      	add	r3, sp, #8
 8007542:	9300      	str	r3, [sp, #0]
 8007544:	ec47 6b10 	vmov	d0, r6, r7
 8007548:	4653      	mov	r3, sl
 800754a:	4622      	mov	r2, r4
 800754c:	f000 fdf4 	bl	8008138 <_dtoa_r>
 8007550:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007554:	4605      	mov	r5, r0
 8007556:	d119      	bne.n	800758c <__cvt+0x94>
 8007558:	f019 0f01 	tst.w	r9, #1
 800755c:	d00e      	beq.n	800757c <__cvt+0x84>
 800755e:	eb00 0904 	add.w	r9, r0, r4
 8007562:	2200      	movs	r2, #0
 8007564:	2300      	movs	r3, #0
 8007566:	4630      	mov	r0, r6
 8007568:	4639      	mov	r1, r7
 800756a:	f7f9 facd 	bl	8000b08 <__aeabi_dcmpeq>
 800756e:	b108      	cbz	r0, 8007574 <__cvt+0x7c>
 8007570:	f8cd 900c 	str.w	r9, [sp, #12]
 8007574:	2230      	movs	r2, #48	@ 0x30
 8007576:	9b03      	ldr	r3, [sp, #12]
 8007578:	454b      	cmp	r3, r9
 800757a:	d31e      	bcc.n	80075ba <__cvt+0xc2>
 800757c:	9b03      	ldr	r3, [sp, #12]
 800757e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007580:	1b5b      	subs	r3, r3, r5
 8007582:	4628      	mov	r0, r5
 8007584:	6013      	str	r3, [r2, #0]
 8007586:	b004      	add	sp, #16
 8007588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800758c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007590:	eb00 0904 	add.w	r9, r0, r4
 8007594:	d1e5      	bne.n	8007562 <__cvt+0x6a>
 8007596:	7803      	ldrb	r3, [r0, #0]
 8007598:	2b30      	cmp	r3, #48	@ 0x30
 800759a:	d10a      	bne.n	80075b2 <__cvt+0xba>
 800759c:	2200      	movs	r2, #0
 800759e:	2300      	movs	r3, #0
 80075a0:	4630      	mov	r0, r6
 80075a2:	4639      	mov	r1, r7
 80075a4:	f7f9 fab0 	bl	8000b08 <__aeabi_dcmpeq>
 80075a8:	b918      	cbnz	r0, 80075b2 <__cvt+0xba>
 80075aa:	f1c4 0401 	rsb	r4, r4, #1
 80075ae:	f8ca 4000 	str.w	r4, [sl]
 80075b2:	f8da 3000 	ldr.w	r3, [sl]
 80075b6:	4499      	add	r9, r3
 80075b8:	e7d3      	b.n	8007562 <__cvt+0x6a>
 80075ba:	1c59      	adds	r1, r3, #1
 80075bc:	9103      	str	r1, [sp, #12]
 80075be:	701a      	strb	r2, [r3, #0]
 80075c0:	e7d9      	b.n	8007576 <__cvt+0x7e>

080075c2 <__exponent>:
 80075c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80075c4:	2900      	cmp	r1, #0
 80075c6:	bfba      	itte	lt
 80075c8:	4249      	neglt	r1, r1
 80075ca:	232d      	movlt	r3, #45	@ 0x2d
 80075cc:	232b      	movge	r3, #43	@ 0x2b
 80075ce:	2909      	cmp	r1, #9
 80075d0:	7002      	strb	r2, [r0, #0]
 80075d2:	7043      	strb	r3, [r0, #1]
 80075d4:	dd29      	ble.n	800762a <__exponent+0x68>
 80075d6:	f10d 0307 	add.w	r3, sp, #7
 80075da:	461d      	mov	r5, r3
 80075dc:	270a      	movs	r7, #10
 80075de:	461a      	mov	r2, r3
 80075e0:	fbb1 f6f7 	udiv	r6, r1, r7
 80075e4:	fb07 1416 	mls	r4, r7, r6, r1
 80075e8:	3430      	adds	r4, #48	@ 0x30
 80075ea:	f802 4c01 	strb.w	r4, [r2, #-1]
 80075ee:	460c      	mov	r4, r1
 80075f0:	2c63      	cmp	r4, #99	@ 0x63
 80075f2:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80075f6:	4631      	mov	r1, r6
 80075f8:	dcf1      	bgt.n	80075de <__exponent+0x1c>
 80075fa:	3130      	adds	r1, #48	@ 0x30
 80075fc:	1e94      	subs	r4, r2, #2
 80075fe:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007602:	1c41      	adds	r1, r0, #1
 8007604:	4623      	mov	r3, r4
 8007606:	42ab      	cmp	r3, r5
 8007608:	d30a      	bcc.n	8007620 <__exponent+0x5e>
 800760a:	f10d 0309 	add.w	r3, sp, #9
 800760e:	1a9b      	subs	r3, r3, r2
 8007610:	42ac      	cmp	r4, r5
 8007612:	bf88      	it	hi
 8007614:	2300      	movhi	r3, #0
 8007616:	3302      	adds	r3, #2
 8007618:	4403      	add	r3, r0
 800761a:	1a18      	subs	r0, r3, r0
 800761c:	b003      	add	sp, #12
 800761e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007620:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007624:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007628:	e7ed      	b.n	8007606 <__exponent+0x44>
 800762a:	2330      	movs	r3, #48	@ 0x30
 800762c:	3130      	adds	r1, #48	@ 0x30
 800762e:	7083      	strb	r3, [r0, #2]
 8007630:	70c1      	strb	r1, [r0, #3]
 8007632:	1d03      	adds	r3, r0, #4
 8007634:	e7f1      	b.n	800761a <__exponent+0x58>
	...

08007638 <_printf_float>:
 8007638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800763c:	b08d      	sub	sp, #52	@ 0x34
 800763e:	460c      	mov	r4, r1
 8007640:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007644:	4616      	mov	r6, r2
 8007646:	461f      	mov	r7, r3
 8007648:	4605      	mov	r5, r0
 800764a:	f000 fcd9 	bl	8008000 <_localeconv_r>
 800764e:	6803      	ldr	r3, [r0, #0]
 8007650:	9304      	str	r3, [sp, #16]
 8007652:	4618      	mov	r0, r3
 8007654:	f7f8 fe2c 	bl	80002b0 <strlen>
 8007658:	2300      	movs	r3, #0
 800765a:	930a      	str	r3, [sp, #40]	@ 0x28
 800765c:	f8d8 3000 	ldr.w	r3, [r8]
 8007660:	9005      	str	r0, [sp, #20]
 8007662:	3307      	adds	r3, #7
 8007664:	f023 0307 	bic.w	r3, r3, #7
 8007668:	f103 0208 	add.w	r2, r3, #8
 800766c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007670:	f8d4 b000 	ldr.w	fp, [r4]
 8007674:	f8c8 2000 	str.w	r2, [r8]
 8007678:	e9d3 8900 	ldrd	r8, r9, [r3]
 800767c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007680:	9307      	str	r3, [sp, #28]
 8007682:	f8cd 8018 	str.w	r8, [sp, #24]
 8007686:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800768a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800768e:	4b9c      	ldr	r3, [pc, #624]	@ (8007900 <_printf_float+0x2c8>)
 8007690:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007694:	f7f9 fa6a 	bl	8000b6c <__aeabi_dcmpun>
 8007698:	bb70      	cbnz	r0, 80076f8 <_printf_float+0xc0>
 800769a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800769e:	4b98      	ldr	r3, [pc, #608]	@ (8007900 <_printf_float+0x2c8>)
 80076a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80076a4:	f7f9 fa44 	bl	8000b30 <__aeabi_dcmple>
 80076a8:	bb30      	cbnz	r0, 80076f8 <_printf_float+0xc0>
 80076aa:	2200      	movs	r2, #0
 80076ac:	2300      	movs	r3, #0
 80076ae:	4640      	mov	r0, r8
 80076b0:	4649      	mov	r1, r9
 80076b2:	f7f9 fa33 	bl	8000b1c <__aeabi_dcmplt>
 80076b6:	b110      	cbz	r0, 80076be <_printf_float+0x86>
 80076b8:	232d      	movs	r3, #45	@ 0x2d
 80076ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80076be:	4a91      	ldr	r2, [pc, #580]	@ (8007904 <_printf_float+0x2cc>)
 80076c0:	4b91      	ldr	r3, [pc, #580]	@ (8007908 <_printf_float+0x2d0>)
 80076c2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80076c6:	bf8c      	ite	hi
 80076c8:	4690      	movhi	r8, r2
 80076ca:	4698      	movls	r8, r3
 80076cc:	2303      	movs	r3, #3
 80076ce:	6123      	str	r3, [r4, #16]
 80076d0:	f02b 0304 	bic.w	r3, fp, #4
 80076d4:	6023      	str	r3, [r4, #0]
 80076d6:	f04f 0900 	mov.w	r9, #0
 80076da:	9700      	str	r7, [sp, #0]
 80076dc:	4633      	mov	r3, r6
 80076de:	aa0b      	add	r2, sp, #44	@ 0x2c
 80076e0:	4621      	mov	r1, r4
 80076e2:	4628      	mov	r0, r5
 80076e4:	f000 f9d2 	bl	8007a8c <_printf_common>
 80076e8:	3001      	adds	r0, #1
 80076ea:	f040 808d 	bne.w	8007808 <_printf_float+0x1d0>
 80076ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80076f2:	b00d      	add	sp, #52	@ 0x34
 80076f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076f8:	4642      	mov	r2, r8
 80076fa:	464b      	mov	r3, r9
 80076fc:	4640      	mov	r0, r8
 80076fe:	4649      	mov	r1, r9
 8007700:	f7f9 fa34 	bl	8000b6c <__aeabi_dcmpun>
 8007704:	b140      	cbz	r0, 8007718 <_printf_float+0xe0>
 8007706:	464b      	mov	r3, r9
 8007708:	2b00      	cmp	r3, #0
 800770a:	bfbc      	itt	lt
 800770c:	232d      	movlt	r3, #45	@ 0x2d
 800770e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007712:	4a7e      	ldr	r2, [pc, #504]	@ (800790c <_printf_float+0x2d4>)
 8007714:	4b7e      	ldr	r3, [pc, #504]	@ (8007910 <_printf_float+0x2d8>)
 8007716:	e7d4      	b.n	80076c2 <_printf_float+0x8a>
 8007718:	6863      	ldr	r3, [r4, #4]
 800771a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800771e:	9206      	str	r2, [sp, #24]
 8007720:	1c5a      	adds	r2, r3, #1
 8007722:	d13b      	bne.n	800779c <_printf_float+0x164>
 8007724:	2306      	movs	r3, #6
 8007726:	6063      	str	r3, [r4, #4]
 8007728:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800772c:	2300      	movs	r3, #0
 800772e:	6022      	str	r2, [r4, #0]
 8007730:	9303      	str	r3, [sp, #12]
 8007732:	ab0a      	add	r3, sp, #40	@ 0x28
 8007734:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007738:	ab09      	add	r3, sp, #36	@ 0x24
 800773a:	9300      	str	r3, [sp, #0]
 800773c:	6861      	ldr	r1, [r4, #4]
 800773e:	ec49 8b10 	vmov	d0, r8, r9
 8007742:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007746:	4628      	mov	r0, r5
 8007748:	f7ff fed6 	bl	80074f8 <__cvt>
 800774c:	9b06      	ldr	r3, [sp, #24]
 800774e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007750:	2b47      	cmp	r3, #71	@ 0x47
 8007752:	4680      	mov	r8, r0
 8007754:	d129      	bne.n	80077aa <_printf_float+0x172>
 8007756:	1cc8      	adds	r0, r1, #3
 8007758:	db02      	blt.n	8007760 <_printf_float+0x128>
 800775a:	6863      	ldr	r3, [r4, #4]
 800775c:	4299      	cmp	r1, r3
 800775e:	dd41      	ble.n	80077e4 <_printf_float+0x1ac>
 8007760:	f1aa 0a02 	sub.w	sl, sl, #2
 8007764:	fa5f fa8a 	uxtb.w	sl, sl
 8007768:	3901      	subs	r1, #1
 800776a:	4652      	mov	r2, sl
 800776c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007770:	9109      	str	r1, [sp, #36]	@ 0x24
 8007772:	f7ff ff26 	bl	80075c2 <__exponent>
 8007776:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007778:	1813      	adds	r3, r2, r0
 800777a:	2a01      	cmp	r2, #1
 800777c:	4681      	mov	r9, r0
 800777e:	6123      	str	r3, [r4, #16]
 8007780:	dc02      	bgt.n	8007788 <_printf_float+0x150>
 8007782:	6822      	ldr	r2, [r4, #0]
 8007784:	07d2      	lsls	r2, r2, #31
 8007786:	d501      	bpl.n	800778c <_printf_float+0x154>
 8007788:	3301      	adds	r3, #1
 800778a:	6123      	str	r3, [r4, #16]
 800778c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007790:	2b00      	cmp	r3, #0
 8007792:	d0a2      	beq.n	80076da <_printf_float+0xa2>
 8007794:	232d      	movs	r3, #45	@ 0x2d
 8007796:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800779a:	e79e      	b.n	80076da <_printf_float+0xa2>
 800779c:	9a06      	ldr	r2, [sp, #24]
 800779e:	2a47      	cmp	r2, #71	@ 0x47
 80077a0:	d1c2      	bne.n	8007728 <_printf_float+0xf0>
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d1c0      	bne.n	8007728 <_printf_float+0xf0>
 80077a6:	2301      	movs	r3, #1
 80077a8:	e7bd      	b.n	8007726 <_printf_float+0xee>
 80077aa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80077ae:	d9db      	bls.n	8007768 <_printf_float+0x130>
 80077b0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80077b4:	d118      	bne.n	80077e8 <_printf_float+0x1b0>
 80077b6:	2900      	cmp	r1, #0
 80077b8:	6863      	ldr	r3, [r4, #4]
 80077ba:	dd0b      	ble.n	80077d4 <_printf_float+0x19c>
 80077bc:	6121      	str	r1, [r4, #16]
 80077be:	b913      	cbnz	r3, 80077c6 <_printf_float+0x18e>
 80077c0:	6822      	ldr	r2, [r4, #0]
 80077c2:	07d0      	lsls	r0, r2, #31
 80077c4:	d502      	bpl.n	80077cc <_printf_float+0x194>
 80077c6:	3301      	adds	r3, #1
 80077c8:	440b      	add	r3, r1
 80077ca:	6123      	str	r3, [r4, #16]
 80077cc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80077ce:	f04f 0900 	mov.w	r9, #0
 80077d2:	e7db      	b.n	800778c <_printf_float+0x154>
 80077d4:	b913      	cbnz	r3, 80077dc <_printf_float+0x1a4>
 80077d6:	6822      	ldr	r2, [r4, #0]
 80077d8:	07d2      	lsls	r2, r2, #31
 80077da:	d501      	bpl.n	80077e0 <_printf_float+0x1a8>
 80077dc:	3302      	adds	r3, #2
 80077de:	e7f4      	b.n	80077ca <_printf_float+0x192>
 80077e0:	2301      	movs	r3, #1
 80077e2:	e7f2      	b.n	80077ca <_printf_float+0x192>
 80077e4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80077e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077ea:	4299      	cmp	r1, r3
 80077ec:	db05      	blt.n	80077fa <_printf_float+0x1c2>
 80077ee:	6823      	ldr	r3, [r4, #0]
 80077f0:	6121      	str	r1, [r4, #16]
 80077f2:	07d8      	lsls	r0, r3, #31
 80077f4:	d5ea      	bpl.n	80077cc <_printf_float+0x194>
 80077f6:	1c4b      	adds	r3, r1, #1
 80077f8:	e7e7      	b.n	80077ca <_printf_float+0x192>
 80077fa:	2900      	cmp	r1, #0
 80077fc:	bfd4      	ite	le
 80077fe:	f1c1 0202 	rsble	r2, r1, #2
 8007802:	2201      	movgt	r2, #1
 8007804:	4413      	add	r3, r2
 8007806:	e7e0      	b.n	80077ca <_printf_float+0x192>
 8007808:	6823      	ldr	r3, [r4, #0]
 800780a:	055a      	lsls	r2, r3, #21
 800780c:	d407      	bmi.n	800781e <_printf_float+0x1e6>
 800780e:	6923      	ldr	r3, [r4, #16]
 8007810:	4642      	mov	r2, r8
 8007812:	4631      	mov	r1, r6
 8007814:	4628      	mov	r0, r5
 8007816:	47b8      	blx	r7
 8007818:	3001      	adds	r0, #1
 800781a:	d12b      	bne.n	8007874 <_printf_float+0x23c>
 800781c:	e767      	b.n	80076ee <_printf_float+0xb6>
 800781e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007822:	f240 80dd 	bls.w	80079e0 <_printf_float+0x3a8>
 8007826:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800782a:	2200      	movs	r2, #0
 800782c:	2300      	movs	r3, #0
 800782e:	f7f9 f96b 	bl	8000b08 <__aeabi_dcmpeq>
 8007832:	2800      	cmp	r0, #0
 8007834:	d033      	beq.n	800789e <_printf_float+0x266>
 8007836:	4a37      	ldr	r2, [pc, #220]	@ (8007914 <_printf_float+0x2dc>)
 8007838:	2301      	movs	r3, #1
 800783a:	4631      	mov	r1, r6
 800783c:	4628      	mov	r0, r5
 800783e:	47b8      	blx	r7
 8007840:	3001      	adds	r0, #1
 8007842:	f43f af54 	beq.w	80076ee <_printf_float+0xb6>
 8007846:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800784a:	4543      	cmp	r3, r8
 800784c:	db02      	blt.n	8007854 <_printf_float+0x21c>
 800784e:	6823      	ldr	r3, [r4, #0]
 8007850:	07d8      	lsls	r0, r3, #31
 8007852:	d50f      	bpl.n	8007874 <_printf_float+0x23c>
 8007854:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007858:	4631      	mov	r1, r6
 800785a:	4628      	mov	r0, r5
 800785c:	47b8      	blx	r7
 800785e:	3001      	adds	r0, #1
 8007860:	f43f af45 	beq.w	80076ee <_printf_float+0xb6>
 8007864:	f04f 0900 	mov.w	r9, #0
 8007868:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800786c:	f104 0a1a 	add.w	sl, r4, #26
 8007870:	45c8      	cmp	r8, r9
 8007872:	dc09      	bgt.n	8007888 <_printf_float+0x250>
 8007874:	6823      	ldr	r3, [r4, #0]
 8007876:	079b      	lsls	r3, r3, #30
 8007878:	f100 8103 	bmi.w	8007a82 <_printf_float+0x44a>
 800787c:	68e0      	ldr	r0, [r4, #12]
 800787e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007880:	4298      	cmp	r0, r3
 8007882:	bfb8      	it	lt
 8007884:	4618      	movlt	r0, r3
 8007886:	e734      	b.n	80076f2 <_printf_float+0xba>
 8007888:	2301      	movs	r3, #1
 800788a:	4652      	mov	r2, sl
 800788c:	4631      	mov	r1, r6
 800788e:	4628      	mov	r0, r5
 8007890:	47b8      	blx	r7
 8007892:	3001      	adds	r0, #1
 8007894:	f43f af2b 	beq.w	80076ee <_printf_float+0xb6>
 8007898:	f109 0901 	add.w	r9, r9, #1
 800789c:	e7e8      	b.n	8007870 <_printf_float+0x238>
 800789e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	dc39      	bgt.n	8007918 <_printf_float+0x2e0>
 80078a4:	4a1b      	ldr	r2, [pc, #108]	@ (8007914 <_printf_float+0x2dc>)
 80078a6:	2301      	movs	r3, #1
 80078a8:	4631      	mov	r1, r6
 80078aa:	4628      	mov	r0, r5
 80078ac:	47b8      	blx	r7
 80078ae:	3001      	adds	r0, #1
 80078b0:	f43f af1d 	beq.w	80076ee <_printf_float+0xb6>
 80078b4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80078b8:	ea59 0303 	orrs.w	r3, r9, r3
 80078bc:	d102      	bne.n	80078c4 <_printf_float+0x28c>
 80078be:	6823      	ldr	r3, [r4, #0]
 80078c0:	07d9      	lsls	r1, r3, #31
 80078c2:	d5d7      	bpl.n	8007874 <_printf_float+0x23c>
 80078c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078c8:	4631      	mov	r1, r6
 80078ca:	4628      	mov	r0, r5
 80078cc:	47b8      	blx	r7
 80078ce:	3001      	adds	r0, #1
 80078d0:	f43f af0d 	beq.w	80076ee <_printf_float+0xb6>
 80078d4:	f04f 0a00 	mov.w	sl, #0
 80078d8:	f104 0b1a 	add.w	fp, r4, #26
 80078dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078de:	425b      	negs	r3, r3
 80078e0:	4553      	cmp	r3, sl
 80078e2:	dc01      	bgt.n	80078e8 <_printf_float+0x2b0>
 80078e4:	464b      	mov	r3, r9
 80078e6:	e793      	b.n	8007810 <_printf_float+0x1d8>
 80078e8:	2301      	movs	r3, #1
 80078ea:	465a      	mov	r2, fp
 80078ec:	4631      	mov	r1, r6
 80078ee:	4628      	mov	r0, r5
 80078f0:	47b8      	blx	r7
 80078f2:	3001      	adds	r0, #1
 80078f4:	f43f aefb 	beq.w	80076ee <_printf_float+0xb6>
 80078f8:	f10a 0a01 	add.w	sl, sl, #1
 80078fc:	e7ee      	b.n	80078dc <_printf_float+0x2a4>
 80078fe:	bf00      	nop
 8007900:	7fefffff 	.word	0x7fefffff
 8007904:	0800af94 	.word	0x0800af94
 8007908:	0800af90 	.word	0x0800af90
 800790c:	0800af9c 	.word	0x0800af9c
 8007910:	0800af98 	.word	0x0800af98
 8007914:	0800afa0 	.word	0x0800afa0
 8007918:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800791a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800791e:	4553      	cmp	r3, sl
 8007920:	bfa8      	it	ge
 8007922:	4653      	movge	r3, sl
 8007924:	2b00      	cmp	r3, #0
 8007926:	4699      	mov	r9, r3
 8007928:	dc36      	bgt.n	8007998 <_printf_float+0x360>
 800792a:	f04f 0b00 	mov.w	fp, #0
 800792e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007932:	f104 021a 	add.w	r2, r4, #26
 8007936:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007938:	9306      	str	r3, [sp, #24]
 800793a:	eba3 0309 	sub.w	r3, r3, r9
 800793e:	455b      	cmp	r3, fp
 8007940:	dc31      	bgt.n	80079a6 <_printf_float+0x36e>
 8007942:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007944:	459a      	cmp	sl, r3
 8007946:	dc3a      	bgt.n	80079be <_printf_float+0x386>
 8007948:	6823      	ldr	r3, [r4, #0]
 800794a:	07da      	lsls	r2, r3, #31
 800794c:	d437      	bmi.n	80079be <_printf_float+0x386>
 800794e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007950:	ebaa 0903 	sub.w	r9, sl, r3
 8007954:	9b06      	ldr	r3, [sp, #24]
 8007956:	ebaa 0303 	sub.w	r3, sl, r3
 800795a:	4599      	cmp	r9, r3
 800795c:	bfa8      	it	ge
 800795e:	4699      	movge	r9, r3
 8007960:	f1b9 0f00 	cmp.w	r9, #0
 8007964:	dc33      	bgt.n	80079ce <_printf_float+0x396>
 8007966:	f04f 0800 	mov.w	r8, #0
 800796a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800796e:	f104 0b1a 	add.w	fp, r4, #26
 8007972:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007974:	ebaa 0303 	sub.w	r3, sl, r3
 8007978:	eba3 0309 	sub.w	r3, r3, r9
 800797c:	4543      	cmp	r3, r8
 800797e:	f77f af79 	ble.w	8007874 <_printf_float+0x23c>
 8007982:	2301      	movs	r3, #1
 8007984:	465a      	mov	r2, fp
 8007986:	4631      	mov	r1, r6
 8007988:	4628      	mov	r0, r5
 800798a:	47b8      	blx	r7
 800798c:	3001      	adds	r0, #1
 800798e:	f43f aeae 	beq.w	80076ee <_printf_float+0xb6>
 8007992:	f108 0801 	add.w	r8, r8, #1
 8007996:	e7ec      	b.n	8007972 <_printf_float+0x33a>
 8007998:	4642      	mov	r2, r8
 800799a:	4631      	mov	r1, r6
 800799c:	4628      	mov	r0, r5
 800799e:	47b8      	blx	r7
 80079a0:	3001      	adds	r0, #1
 80079a2:	d1c2      	bne.n	800792a <_printf_float+0x2f2>
 80079a4:	e6a3      	b.n	80076ee <_printf_float+0xb6>
 80079a6:	2301      	movs	r3, #1
 80079a8:	4631      	mov	r1, r6
 80079aa:	4628      	mov	r0, r5
 80079ac:	9206      	str	r2, [sp, #24]
 80079ae:	47b8      	blx	r7
 80079b0:	3001      	adds	r0, #1
 80079b2:	f43f ae9c 	beq.w	80076ee <_printf_float+0xb6>
 80079b6:	9a06      	ldr	r2, [sp, #24]
 80079b8:	f10b 0b01 	add.w	fp, fp, #1
 80079bc:	e7bb      	b.n	8007936 <_printf_float+0x2fe>
 80079be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80079c2:	4631      	mov	r1, r6
 80079c4:	4628      	mov	r0, r5
 80079c6:	47b8      	blx	r7
 80079c8:	3001      	adds	r0, #1
 80079ca:	d1c0      	bne.n	800794e <_printf_float+0x316>
 80079cc:	e68f      	b.n	80076ee <_printf_float+0xb6>
 80079ce:	9a06      	ldr	r2, [sp, #24]
 80079d0:	464b      	mov	r3, r9
 80079d2:	4442      	add	r2, r8
 80079d4:	4631      	mov	r1, r6
 80079d6:	4628      	mov	r0, r5
 80079d8:	47b8      	blx	r7
 80079da:	3001      	adds	r0, #1
 80079dc:	d1c3      	bne.n	8007966 <_printf_float+0x32e>
 80079de:	e686      	b.n	80076ee <_printf_float+0xb6>
 80079e0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80079e4:	f1ba 0f01 	cmp.w	sl, #1
 80079e8:	dc01      	bgt.n	80079ee <_printf_float+0x3b6>
 80079ea:	07db      	lsls	r3, r3, #31
 80079ec:	d536      	bpl.n	8007a5c <_printf_float+0x424>
 80079ee:	2301      	movs	r3, #1
 80079f0:	4642      	mov	r2, r8
 80079f2:	4631      	mov	r1, r6
 80079f4:	4628      	mov	r0, r5
 80079f6:	47b8      	blx	r7
 80079f8:	3001      	adds	r0, #1
 80079fa:	f43f ae78 	beq.w	80076ee <_printf_float+0xb6>
 80079fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a02:	4631      	mov	r1, r6
 8007a04:	4628      	mov	r0, r5
 8007a06:	47b8      	blx	r7
 8007a08:	3001      	adds	r0, #1
 8007a0a:	f43f ae70 	beq.w	80076ee <_printf_float+0xb6>
 8007a0e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007a12:	2200      	movs	r2, #0
 8007a14:	2300      	movs	r3, #0
 8007a16:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8007a1a:	f7f9 f875 	bl	8000b08 <__aeabi_dcmpeq>
 8007a1e:	b9c0      	cbnz	r0, 8007a52 <_printf_float+0x41a>
 8007a20:	4653      	mov	r3, sl
 8007a22:	f108 0201 	add.w	r2, r8, #1
 8007a26:	4631      	mov	r1, r6
 8007a28:	4628      	mov	r0, r5
 8007a2a:	47b8      	blx	r7
 8007a2c:	3001      	adds	r0, #1
 8007a2e:	d10c      	bne.n	8007a4a <_printf_float+0x412>
 8007a30:	e65d      	b.n	80076ee <_printf_float+0xb6>
 8007a32:	2301      	movs	r3, #1
 8007a34:	465a      	mov	r2, fp
 8007a36:	4631      	mov	r1, r6
 8007a38:	4628      	mov	r0, r5
 8007a3a:	47b8      	blx	r7
 8007a3c:	3001      	adds	r0, #1
 8007a3e:	f43f ae56 	beq.w	80076ee <_printf_float+0xb6>
 8007a42:	f108 0801 	add.w	r8, r8, #1
 8007a46:	45d0      	cmp	r8, sl
 8007a48:	dbf3      	blt.n	8007a32 <_printf_float+0x3fa>
 8007a4a:	464b      	mov	r3, r9
 8007a4c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007a50:	e6df      	b.n	8007812 <_printf_float+0x1da>
 8007a52:	f04f 0800 	mov.w	r8, #0
 8007a56:	f104 0b1a 	add.w	fp, r4, #26
 8007a5a:	e7f4      	b.n	8007a46 <_printf_float+0x40e>
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	4642      	mov	r2, r8
 8007a60:	e7e1      	b.n	8007a26 <_printf_float+0x3ee>
 8007a62:	2301      	movs	r3, #1
 8007a64:	464a      	mov	r2, r9
 8007a66:	4631      	mov	r1, r6
 8007a68:	4628      	mov	r0, r5
 8007a6a:	47b8      	blx	r7
 8007a6c:	3001      	adds	r0, #1
 8007a6e:	f43f ae3e 	beq.w	80076ee <_printf_float+0xb6>
 8007a72:	f108 0801 	add.w	r8, r8, #1
 8007a76:	68e3      	ldr	r3, [r4, #12]
 8007a78:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007a7a:	1a5b      	subs	r3, r3, r1
 8007a7c:	4543      	cmp	r3, r8
 8007a7e:	dcf0      	bgt.n	8007a62 <_printf_float+0x42a>
 8007a80:	e6fc      	b.n	800787c <_printf_float+0x244>
 8007a82:	f04f 0800 	mov.w	r8, #0
 8007a86:	f104 0919 	add.w	r9, r4, #25
 8007a8a:	e7f4      	b.n	8007a76 <_printf_float+0x43e>

08007a8c <_printf_common>:
 8007a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a90:	4616      	mov	r6, r2
 8007a92:	4698      	mov	r8, r3
 8007a94:	688a      	ldr	r2, [r1, #8]
 8007a96:	690b      	ldr	r3, [r1, #16]
 8007a98:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	bfb8      	it	lt
 8007aa0:	4613      	movlt	r3, r2
 8007aa2:	6033      	str	r3, [r6, #0]
 8007aa4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007aa8:	4607      	mov	r7, r0
 8007aaa:	460c      	mov	r4, r1
 8007aac:	b10a      	cbz	r2, 8007ab2 <_printf_common+0x26>
 8007aae:	3301      	adds	r3, #1
 8007ab0:	6033      	str	r3, [r6, #0]
 8007ab2:	6823      	ldr	r3, [r4, #0]
 8007ab4:	0699      	lsls	r1, r3, #26
 8007ab6:	bf42      	ittt	mi
 8007ab8:	6833      	ldrmi	r3, [r6, #0]
 8007aba:	3302      	addmi	r3, #2
 8007abc:	6033      	strmi	r3, [r6, #0]
 8007abe:	6825      	ldr	r5, [r4, #0]
 8007ac0:	f015 0506 	ands.w	r5, r5, #6
 8007ac4:	d106      	bne.n	8007ad4 <_printf_common+0x48>
 8007ac6:	f104 0a19 	add.w	sl, r4, #25
 8007aca:	68e3      	ldr	r3, [r4, #12]
 8007acc:	6832      	ldr	r2, [r6, #0]
 8007ace:	1a9b      	subs	r3, r3, r2
 8007ad0:	42ab      	cmp	r3, r5
 8007ad2:	dc26      	bgt.n	8007b22 <_printf_common+0x96>
 8007ad4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007ad8:	6822      	ldr	r2, [r4, #0]
 8007ada:	3b00      	subs	r3, #0
 8007adc:	bf18      	it	ne
 8007ade:	2301      	movne	r3, #1
 8007ae0:	0692      	lsls	r2, r2, #26
 8007ae2:	d42b      	bmi.n	8007b3c <_printf_common+0xb0>
 8007ae4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007ae8:	4641      	mov	r1, r8
 8007aea:	4638      	mov	r0, r7
 8007aec:	47c8      	blx	r9
 8007aee:	3001      	adds	r0, #1
 8007af0:	d01e      	beq.n	8007b30 <_printf_common+0xa4>
 8007af2:	6823      	ldr	r3, [r4, #0]
 8007af4:	6922      	ldr	r2, [r4, #16]
 8007af6:	f003 0306 	and.w	r3, r3, #6
 8007afa:	2b04      	cmp	r3, #4
 8007afc:	bf02      	ittt	eq
 8007afe:	68e5      	ldreq	r5, [r4, #12]
 8007b00:	6833      	ldreq	r3, [r6, #0]
 8007b02:	1aed      	subeq	r5, r5, r3
 8007b04:	68a3      	ldr	r3, [r4, #8]
 8007b06:	bf0c      	ite	eq
 8007b08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b0c:	2500      	movne	r5, #0
 8007b0e:	4293      	cmp	r3, r2
 8007b10:	bfc4      	itt	gt
 8007b12:	1a9b      	subgt	r3, r3, r2
 8007b14:	18ed      	addgt	r5, r5, r3
 8007b16:	2600      	movs	r6, #0
 8007b18:	341a      	adds	r4, #26
 8007b1a:	42b5      	cmp	r5, r6
 8007b1c:	d11a      	bne.n	8007b54 <_printf_common+0xc8>
 8007b1e:	2000      	movs	r0, #0
 8007b20:	e008      	b.n	8007b34 <_printf_common+0xa8>
 8007b22:	2301      	movs	r3, #1
 8007b24:	4652      	mov	r2, sl
 8007b26:	4641      	mov	r1, r8
 8007b28:	4638      	mov	r0, r7
 8007b2a:	47c8      	blx	r9
 8007b2c:	3001      	adds	r0, #1
 8007b2e:	d103      	bne.n	8007b38 <_printf_common+0xac>
 8007b30:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b38:	3501      	adds	r5, #1
 8007b3a:	e7c6      	b.n	8007aca <_printf_common+0x3e>
 8007b3c:	18e1      	adds	r1, r4, r3
 8007b3e:	1c5a      	adds	r2, r3, #1
 8007b40:	2030      	movs	r0, #48	@ 0x30
 8007b42:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007b46:	4422      	add	r2, r4
 8007b48:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007b4c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007b50:	3302      	adds	r3, #2
 8007b52:	e7c7      	b.n	8007ae4 <_printf_common+0x58>
 8007b54:	2301      	movs	r3, #1
 8007b56:	4622      	mov	r2, r4
 8007b58:	4641      	mov	r1, r8
 8007b5a:	4638      	mov	r0, r7
 8007b5c:	47c8      	blx	r9
 8007b5e:	3001      	adds	r0, #1
 8007b60:	d0e6      	beq.n	8007b30 <_printf_common+0xa4>
 8007b62:	3601      	adds	r6, #1
 8007b64:	e7d9      	b.n	8007b1a <_printf_common+0x8e>
	...

08007b68 <_printf_i>:
 8007b68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007b6c:	7e0f      	ldrb	r7, [r1, #24]
 8007b6e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007b70:	2f78      	cmp	r7, #120	@ 0x78
 8007b72:	4691      	mov	r9, r2
 8007b74:	4680      	mov	r8, r0
 8007b76:	460c      	mov	r4, r1
 8007b78:	469a      	mov	sl, r3
 8007b7a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007b7e:	d807      	bhi.n	8007b90 <_printf_i+0x28>
 8007b80:	2f62      	cmp	r7, #98	@ 0x62
 8007b82:	d80a      	bhi.n	8007b9a <_printf_i+0x32>
 8007b84:	2f00      	cmp	r7, #0
 8007b86:	f000 80d1 	beq.w	8007d2c <_printf_i+0x1c4>
 8007b8a:	2f58      	cmp	r7, #88	@ 0x58
 8007b8c:	f000 80b8 	beq.w	8007d00 <_printf_i+0x198>
 8007b90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007b94:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007b98:	e03a      	b.n	8007c10 <_printf_i+0xa8>
 8007b9a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007b9e:	2b15      	cmp	r3, #21
 8007ba0:	d8f6      	bhi.n	8007b90 <_printf_i+0x28>
 8007ba2:	a101      	add	r1, pc, #4	@ (adr r1, 8007ba8 <_printf_i+0x40>)
 8007ba4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ba8:	08007c01 	.word	0x08007c01
 8007bac:	08007c15 	.word	0x08007c15
 8007bb0:	08007b91 	.word	0x08007b91
 8007bb4:	08007b91 	.word	0x08007b91
 8007bb8:	08007b91 	.word	0x08007b91
 8007bbc:	08007b91 	.word	0x08007b91
 8007bc0:	08007c15 	.word	0x08007c15
 8007bc4:	08007b91 	.word	0x08007b91
 8007bc8:	08007b91 	.word	0x08007b91
 8007bcc:	08007b91 	.word	0x08007b91
 8007bd0:	08007b91 	.word	0x08007b91
 8007bd4:	08007d13 	.word	0x08007d13
 8007bd8:	08007c3f 	.word	0x08007c3f
 8007bdc:	08007ccd 	.word	0x08007ccd
 8007be0:	08007b91 	.word	0x08007b91
 8007be4:	08007b91 	.word	0x08007b91
 8007be8:	08007d35 	.word	0x08007d35
 8007bec:	08007b91 	.word	0x08007b91
 8007bf0:	08007c3f 	.word	0x08007c3f
 8007bf4:	08007b91 	.word	0x08007b91
 8007bf8:	08007b91 	.word	0x08007b91
 8007bfc:	08007cd5 	.word	0x08007cd5
 8007c00:	6833      	ldr	r3, [r6, #0]
 8007c02:	1d1a      	adds	r2, r3, #4
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	6032      	str	r2, [r6, #0]
 8007c08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007c0c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007c10:	2301      	movs	r3, #1
 8007c12:	e09c      	b.n	8007d4e <_printf_i+0x1e6>
 8007c14:	6833      	ldr	r3, [r6, #0]
 8007c16:	6820      	ldr	r0, [r4, #0]
 8007c18:	1d19      	adds	r1, r3, #4
 8007c1a:	6031      	str	r1, [r6, #0]
 8007c1c:	0606      	lsls	r6, r0, #24
 8007c1e:	d501      	bpl.n	8007c24 <_printf_i+0xbc>
 8007c20:	681d      	ldr	r5, [r3, #0]
 8007c22:	e003      	b.n	8007c2c <_printf_i+0xc4>
 8007c24:	0645      	lsls	r5, r0, #25
 8007c26:	d5fb      	bpl.n	8007c20 <_printf_i+0xb8>
 8007c28:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007c2c:	2d00      	cmp	r5, #0
 8007c2e:	da03      	bge.n	8007c38 <_printf_i+0xd0>
 8007c30:	232d      	movs	r3, #45	@ 0x2d
 8007c32:	426d      	negs	r5, r5
 8007c34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007c38:	4858      	ldr	r0, [pc, #352]	@ (8007d9c <_printf_i+0x234>)
 8007c3a:	230a      	movs	r3, #10
 8007c3c:	e011      	b.n	8007c62 <_printf_i+0xfa>
 8007c3e:	6821      	ldr	r1, [r4, #0]
 8007c40:	6833      	ldr	r3, [r6, #0]
 8007c42:	0608      	lsls	r0, r1, #24
 8007c44:	f853 5b04 	ldr.w	r5, [r3], #4
 8007c48:	d402      	bmi.n	8007c50 <_printf_i+0xe8>
 8007c4a:	0649      	lsls	r1, r1, #25
 8007c4c:	bf48      	it	mi
 8007c4e:	b2ad      	uxthmi	r5, r5
 8007c50:	2f6f      	cmp	r7, #111	@ 0x6f
 8007c52:	4852      	ldr	r0, [pc, #328]	@ (8007d9c <_printf_i+0x234>)
 8007c54:	6033      	str	r3, [r6, #0]
 8007c56:	bf14      	ite	ne
 8007c58:	230a      	movne	r3, #10
 8007c5a:	2308      	moveq	r3, #8
 8007c5c:	2100      	movs	r1, #0
 8007c5e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007c62:	6866      	ldr	r6, [r4, #4]
 8007c64:	60a6      	str	r6, [r4, #8]
 8007c66:	2e00      	cmp	r6, #0
 8007c68:	db05      	blt.n	8007c76 <_printf_i+0x10e>
 8007c6a:	6821      	ldr	r1, [r4, #0]
 8007c6c:	432e      	orrs	r6, r5
 8007c6e:	f021 0104 	bic.w	r1, r1, #4
 8007c72:	6021      	str	r1, [r4, #0]
 8007c74:	d04b      	beq.n	8007d0e <_printf_i+0x1a6>
 8007c76:	4616      	mov	r6, r2
 8007c78:	fbb5 f1f3 	udiv	r1, r5, r3
 8007c7c:	fb03 5711 	mls	r7, r3, r1, r5
 8007c80:	5dc7      	ldrb	r7, [r0, r7]
 8007c82:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007c86:	462f      	mov	r7, r5
 8007c88:	42bb      	cmp	r3, r7
 8007c8a:	460d      	mov	r5, r1
 8007c8c:	d9f4      	bls.n	8007c78 <_printf_i+0x110>
 8007c8e:	2b08      	cmp	r3, #8
 8007c90:	d10b      	bne.n	8007caa <_printf_i+0x142>
 8007c92:	6823      	ldr	r3, [r4, #0]
 8007c94:	07df      	lsls	r7, r3, #31
 8007c96:	d508      	bpl.n	8007caa <_printf_i+0x142>
 8007c98:	6923      	ldr	r3, [r4, #16]
 8007c9a:	6861      	ldr	r1, [r4, #4]
 8007c9c:	4299      	cmp	r1, r3
 8007c9e:	bfde      	ittt	le
 8007ca0:	2330      	movle	r3, #48	@ 0x30
 8007ca2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007ca6:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007caa:	1b92      	subs	r2, r2, r6
 8007cac:	6122      	str	r2, [r4, #16]
 8007cae:	f8cd a000 	str.w	sl, [sp]
 8007cb2:	464b      	mov	r3, r9
 8007cb4:	aa03      	add	r2, sp, #12
 8007cb6:	4621      	mov	r1, r4
 8007cb8:	4640      	mov	r0, r8
 8007cba:	f7ff fee7 	bl	8007a8c <_printf_common>
 8007cbe:	3001      	adds	r0, #1
 8007cc0:	d14a      	bne.n	8007d58 <_printf_i+0x1f0>
 8007cc2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007cc6:	b004      	add	sp, #16
 8007cc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ccc:	6823      	ldr	r3, [r4, #0]
 8007cce:	f043 0320 	orr.w	r3, r3, #32
 8007cd2:	6023      	str	r3, [r4, #0]
 8007cd4:	4832      	ldr	r0, [pc, #200]	@ (8007da0 <_printf_i+0x238>)
 8007cd6:	2778      	movs	r7, #120	@ 0x78
 8007cd8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007cdc:	6823      	ldr	r3, [r4, #0]
 8007cde:	6831      	ldr	r1, [r6, #0]
 8007ce0:	061f      	lsls	r7, r3, #24
 8007ce2:	f851 5b04 	ldr.w	r5, [r1], #4
 8007ce6:	d402      	bmi.n	8007cee <_printf_i+0x186>
 8007ce8:	065f      	lsls	r7, r3, #25
 8007cea:	bf48      	it	mi
 8007cec:	b2ad      	uxthmi	r5, r5
 8007cee:	6031      	str	r1, [r6, #0]
 8007cf0:	07d9      	lsls	r1, r3, #31
 8007cf2:	bf44      	itt	mi
 8007cf4:	f043 0320 	orrmi.w	r3, r3, #32
 8007cf8:	6023      	strmi	r3, [r4, #0]
 8007cfa:	b11d      	cbz	r5, 8007d04 <_printf_i+0x19c>
 8007cfc:	2310      	movs	r3, #16
 8007cfe:	e7ad      	b.n	8007c5c <_printf_i+0xf4>
 8007d00:	4826      	ldr	r0, [pc, #152]	@ (8007d9c <_printf_i+0x234>)
 8007d02:	e7e9      	b.n	8007cd8 <_printf_i+0x170>
 8007d04:	6823      	ldr	r3, [r4, #0]
 8007d06:	f023 0320 	bic.w	r3, r3, #32
 8007d0a:	6023      	str	r3, [r4, #0]
 8007d0c:	e7f6      	b.n	8007cfc <_printf_i+0x194>
 8007d0e:	4616      	mov	r6, r2
 8007d10:	e7bd      	b.n	8007c8e <_printf_i+0x126>
 8007d12:	6833      	ldr	r3, [r6, #0]
 8007d14:	6825      	ldr	r5, [r4, #0]
 8007d16:	6961      	ldr	r1, [r4, #20]
 8007d18:	1d18      	adds	r0, r3, #4
 8007d1a:	6030      	str	r0, [r6, #0]
 8007d1c:	062e      	lsls	r6, r5, #24
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	d501      	bpl.n	8007d26 <_printf_i+0x1be>
 8007d22:	6019      	str	r1, [r3, #0]
 8007d24:	e002      	b.n	8007d2c <_printf_i+0x1c4>
 8007d26:	0668      	lsls	r0, r5, #25
 8007d28:	d5fb      	bpl.n	8007d22 <_printf_i+0x1ba>
 8007d2a:	8019      	strh	r1, [r3, #0]
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	6123      	str	r3, [r4, #16]
 8007d30:	4616      	mov	r6, r2
 8007d32:	e7bc      	b.n	8007cae <_printf_i+0x146>
 8007d34:	6833      	ldr	r3, [r6, #0]
 8007d36:	1d1a      	adds	r2, r3, #4
 8007d38:	6032      	str	r2, [r6, #0]
 8007d3a:	681e      	ldr	r6, [r3, #0]
 8007d3c:	6862      	ldr	r2, [r4, #4]
 8007d3e:	2100      	movs	r1, #0
 8007d40:	4630      	mov	r0, r6
 8007d42:	f7f8 fa65 	bl	8000210 <memchr>
 8007d46:	b108      	cbz	r0, 8007d4c <_printf_i+0x1e4>
 8007d48:	1b80      	subs	r0, r0, r6
 8007d4a:	6060      	str	r0, [r4, #4]
 8007d4c:	6863      	ldr	r3, [r4, #4]
 8007d4e:	6123      	str	r3, [r4, #16]
 8007d50:	2300      	movs	r3, #0
 8007d52:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d56:	e7aa      	b.n	8007cae <_printf_i+0x146>
 8007d58:	6923      	ldr	r3, [r4, #16]
 8007d5a:	4632      	mov	r2, r6
 8007d5c:	4649      	mov	r1, r9
 8007d5e:	4640      	mov	r0, r8
 8007d60:	47d0      	blx	sl
 8007d62:	3001      	adds	r0, #1
 8007d64:	d0ad      	beq.n	8007cc2 <_printf_i+0x15a>
 8007d66:	6823      	ldr	r3, [r4, #0]
 8007d68:	079b      	lsls	r3, r3, #30
 8007d6a:	d413      	bmi.n	8007d94 <_printf_i+0x22c>
 8007d6c:	68e0      	ldr	r0, [r4, #12]
 8007d6e:	9b03      	ldr	r3, [sp, #12]
 8007d70:	4298      	cmp	r0, r3
 8007d72:	bfb8      	it	lt
 8007d74:	4618      	movlt	r0, r3
 8007d76:	e7a6      	b.n	8007cc6 <_printf_i+0x15e>
 8007d78:	2301      	movs	r3, #1
 8007d7a:	4632      	mov	r2, r6
 8007d7c:	4649      	mov	r1, r9
 8007d7e:	4640      	mov	r0, r8
 8007d80:	47d0      	blx	sl
 8007d82:	3001      	adds	r0, #1
 8007d84:	d09d      	beq.n	8007cc2 <_printf_i+0x15a>
 8007d86:	3501      	adds	r5, #1
 8007d88:	68e3      	ldr	r3, [r4, #12]
 8007d8a:	9903      	ldr	r1, [sp, #12]
 8007d8c:	1a5b      	subs	r3, r3, r1
 8007d8e:	42ab      	cmp	r3, r5
 8007d90:	dcf2      	bgt.n	8007d78 <_printf_i+0x210>
 8007d92:	e7eb      	b.n	8007d6c <_printf_i+0x204>
 8007d94:	2500      	movs	r5, #0
 8007d96:	f104 0619 	add.w	r6, r4, #25
 8007d9a:	e7f5      	b.n	8007d88 <_printf_i+0x220>
 8007d9c:	0800afa2 	.word	0x0800afa2
 8007da0:	0800afb3 	.word	0x0800afb3

08007da4 <sniprintf>:
 8007da4:	b40c      	push	{r2, r3}
 8007da6:	b530      	push	{r4, r5, lr}
 8007da8:	4b18      	ldr	r3, [pc, #96]	@ (8007e0c <sniprintf+0x68>)
 8007daa:	1e0c      	subs	r4, r1, #0
 8007dac:	681d      	ldr	r5, [r3, #0]
 8007dae:	b09d      	sub	sp, #116	@ 0x74
 8007db0:	da08      	bge.n	8007dc4 <sniprintf+0x20>
 8007db2:	238b      	movs	r3, #139	@ 0x8b
 8007db4:	602b      	str	r3, [r5, #0]
 8007db6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007dba:	b01d      	add	sp, #116	@ 0x74
 8007dbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007dc0:	b002      	add	sp, #8
 8007dc2:	4770      	bx	lr
 8007dc4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007dc8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007dcc:	f04f 0300 	mov.w	r3, #0
 8007dd0:	931b      	str	r3, [sp, #108]	@ 0x6c
 8007dd2:	bf14      	ite	ne
 8007dd4:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8007dd8:	4623      	moveq	r3, r4
 8007dda:	9304      	str	r3, [sp, #16]
 8007ddc:	9307      	str	r3, [sp, #28]
 8007dde:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007de2:	9002      	str	r0, [sp, #8]
 8007de4:	9006      	str	r0, [sp, #24]
 8007de6:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007dea:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007dec:	ab21      	add	r3, sp, #132	@ 0x84
 8007dee:	a902      	add	r1, sp, #8
 8007df0:	4628      	mov	r0, r5
 8007df2:	9301      	str	r3, [sp, #4]
 8007df4:	f000 ffcc 	bl	8008d90 <_svfiprintf_r>
 8007df8:	1c43      	adds	r3, r0, #1
 8007dfa:	bfbc      	itt	lt
 8007dfc:	238b      	movlt	r3, #139	@ 0x8b
 8007dfe:	602b      	strlt	r3, [r5, #0]
 8007e00:	2c00      	cmp	r4, #0
 8007e02:	d0da      	beq.n	8007dba <sniprintf+0x16>
 8007e04:	9b02      	ldr	r3, [sp, #8]
 8007e06:	2200      	movs	r2, #0
 8007e08:	701a      	strb	r2, [r3, #0]
 8007e0a:	e7d6      	b.n	8007dba <sniprintf+0x16>
 8007e0c:	2000002c 	.word	0x2000002c

08007e10 <std>:
 8007e10:	2300      	movs	r3, #0
 8007e12:	b510      	push	{r4, lr}
 8007e14:	4604      	mov	r4, r0
 8007e16:	e9c0 3300 	strd	r3, r3, [r0]
 8007e1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e1e:	6083      	str	r3, [r0, #8]
 8007e20:	8181      	strh	r1, [r0, #12]
 8007e22:	6643      	str	r3, [r0, #100]	@ 0x64
 8007e24:	81c2      	strh	r2, [r0, #14]
 8007e26:	6183      	str	r3, [r0, #24]
 8007e28:	4619      	mov	r1, r3
 8007e2a:	2208      	movs	r2, #8
 8007e2c:	305c      	adds	r0, #92	@ 0x5c
 8007e2e:	f000 f8b1 	bl	8007f94 <memset>
 8007e32:	4b0d      	ldr	r3, [pc, #52]	@ (8007e68 <std+0x58>)
 8007e34:	6263      	str	r3, [r4, #36]	@ 0x24
 8007e36:	4b0d      	ldr	r3, [pc, #52]	@ (8007e6c <std+0x5c>)
 8007e38:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007e3a:	4b0d      	ldr	r3, [pc, #52]	@ (8007e70 <std+0x60>)
 8007e3c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007e3e:	4b0d      	ldr	r3, [pc, #52]	@ (8007e74 <std+0x64>)
 8007e40:	6323      	str	r3, [r4, #48]	@ 0x30
 8007e42:	4b0d      	ldr	r3, [pc, #52]	@ (8007e78 <std+0x68>)
 8007e44:	6224      	str	r4, [r4, #32]
 8007e46:	429c      	cmp	r4, r3
 8007e48:	d006      	beq.n	8007e58 <std+0x48>
 8007e4a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007e4e:	4294      	cmp	r4, r2
 8007e50:	d002      	beq.n	8007e58 <std+0x48>
 8007e52:	33d0      	adds	r3, #208	@ 0xd0
 8007e54:	429c      	cmp	r4, r3
 8007e56:	d105      	bne.n	8007e64 <std+0x54>
 8007e58:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007e5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e60:	f000 b8ca 	b.w	8007ff8 <__retarget_lock_init_recursive>
 8007e64:	bd10      	pop	{r4, pc}
 8007e66:	bf00      	nop
 8007e68:	08009941 	.word	0x08009941
 8007e6c:	08009963 	.word	0x08009963
 8007e70:	0800999b 	.word	0x0800999b
 8007e74:	080099bf 	.word	0x080099bf
 8007e78:	20005004 	.word	0x20005004

08007e7c <stdio_exit_handler>:
 8007e7c:	4a02      	ldr	r2, [pc, #8]	@ (8007e88 <stdio_exit_handler+0xc>)
 8007e7e:	4903      	ldr	r1, [pc, #12]	@ (8007e8c <stdio_exit_handler+0x10>)
 8007e80:	4803      	ldr	r0, [pc, #12]	@ (8007e90 <stdio_exit_handler+0x14>)
 8007e82:	f000 b869 	b.w	8007f58 <_fwalk_sglue>
 8007e86:	bf00      	nop
 8007e88:	20000020 	.word	0x20000020
 8007e8c:	080091e5 	.word	0x080091e5
 8007e90:	20000030 	.word	0x20000030

08007e94 <cleanup_stdio>:
 8007e94:	6841      	ldr	r1, [r0, #4]
 8007e96:	4b0c      	ldr	r3, [pc, #48]	@ (8007ec8 <cleanup_stdio+0x34>)
 8007e98:	4299      	cmp	r1, r3
 8007e9a:	b510      	push	{r4, lr}
 8007e9c:	4604      	mov	r4, r0
 8007e9e:	d001      	beq.n	8007ea4 <cleanup_stdio+0x10>
 8007ea0:	f001 f9a0 	bl	80091e4 <_fflush_r>
 8007ea4:	68a1      	ldr	r1, [r4, #8]
 8007ea6:	4b09      	ldr	r3, [pc, #36]	@ (8007ecc <cleanup_stdio+0x38>)
 8007ea8:	4299      	cmp	r1, r3
 8007eaa:	d002      	beq.n	8007eb2 <cleanup_stdio+0x1e>
 8007eac:	4620      	mov	r0, r4
 8007eae:	f001 f999 	bl	80091e4 <_fflush_r>
 8007eb2:	68e1      	ldr	r1, [r4, #12]
 8007eb4:	4b06      	ldr	r3, [pc, #24]	@ (8007ed0 <cleanup_stdio+0x3c>)
 8007eb6:	4299      	cmp	r1, r3
 8007eb8:	d004      	beq.n	8007ec4 <cleanup_stdio+0x30>
 8007eba:	4620      	mov	r0, r4
 8007ebc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ec0:	f001 b990 	b.w	80091e4 <_fflush_r>
 8007ec4:	bd10      	pop	{r4, pc}
 8007ec6:	bf00      	nop
 8007ec8:	20005004 	.word	0x20005004
 8007ecc:	2000506c 	.word	0x2000506c
 8007ed0:	200050d4 	.word	0x200050d4

08007ed4 <global_stdio_init.part.0>:
 8007ed4:	b510      	push	{r4, lr}
 8007ed6:	4b0b      	ldr	r3, [pc, #44]	@ (8007f04 <global_stdio_init.part.0+0x30>)
 8007ed8:	4c0b      	ldr	r4, [pc, #44]	@ (8007f08 <global_stdio_init.part.0+0x34>)
 8007eda:	4a0c      	ldr	r2, [pc, #48]	@ (8007f0c <global_stdio_init.part.0+0x38>)
 8007edc:	601a      	str	r2, [r3, #0]
 8007ede:	4620      	mov	r0, r4
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	2104      	movs	r1, #4
 8007ee4:	f7ff ff94 	bl	8007e10 <std>
 8007ee8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007eec:	2201      	movs	r2, #1
 8007eee:	2109      	movs	r1, #9
 8007ef0:	f7ff ff8e 	bl	8007e10 <std>
 8007ef4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007ef8:	2202      	movs	r2, #2
 8007efa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007efe:	2112      	movs	r1, #18
 8007f00:	f7ff bf86 	b.w	8007e10 <std>
 8007f04:	2000513c 	.word	0x2000513c
 8007f08:	20005004 	.word	0x20005004
 8007f0c:	08007e7d 	.word	0x08007e7d

08007f10 <__sfp_lock_acquire>:
 8007f10:	4801      	ldr	r0, [pc, #4]	@ (8007f18 <__sfp_lock_acquire+0x8>)
 8007f12:	f000 b872 	b.w	8007ffa <__retarget_lock_acquire_recursive>
 8007f16:	bf00      	nop
 8007f18:	20005141 	.word	0x20005141

08007f1c <__sfp_lock_release>:
 8007f1c:	4801      	ldr	r0, [pc, #4]	@ (8007f24 <__sfp_lock_release+0x8>)
 8007f1e:	f000 b86d 	b.w	8007ffc <__retarget_lock_release_recursive>
 8007f22:	bf00      	nop
 8007f24:	20005141 	.word	0x20005141

08007f28 <__sinit>:
 8007f28:	b510      	push	{r4, lr}
 8007f2a:	4604      	mov	r4, r0
 8007f2c:	f7ff fff0 	bl	8007f10 <__sfp_lock_acquire>
 8007f30:	6a23      	ldr	r3, [r4, #32]
 8007f32:	b11b      	cbz	r3, 8007f3c <__sinit+0x14>
 8007f34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f38:	f7ff bff0 	b.w	8007f1c <__sfp_lock_release>
 8007f3c:	4b04      	ldr	r3, [pc, #16]	@ (8007f50 <__sinit+0x28>)
 8007f3e:	6223      	str	r3, [r4, #32]
 8007f40:	4b04      	ldr	r3, [pc, #16]	@ (8007f54 <__sinit+0x2c>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d1f5      	bne.n	8007f34 <__sinit+0xc>
 8007f48:	f7ff ffc4 	bl	8007ed4 <global_stdio_init.part.0>
 8007f4c:	e7f2      	b.n	8007f34 <__sinit+0xc>
 8007f4e:	bf00      	nop
 8007f50:	08007e95 	.word	0x08007e95
 8007f54:	2000513c 	.word	0x2000513c

08007f58 <_fwalk_sglue>:
 8007f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f5c:	4607      	mov	r7, r0
 8007f5e:	4688      	mov	r8, r1
 8007f60:	4614      	mov	r4, r2
 8007f62:	2600      	movs	r6, #0
 8007f64:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f68:	f1b9 0901 	subs.w	r9, r9, #1
 8007f6c:	d505      	bpl.n	8007f7a <_fwalk_sglue+0x22>
 8007f6e:	6824      	ldr	r4, [r4, #0]
 8007f70:	2c00      	cmp	r4, #0
 8007f72:	d1f7      	bne.n	8007f64 <_fwalk_sglue+0xc>
 8007f74:	4630      	mov	r0, r6
 8007f76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f7a:	89ab      	ldrh	r3, [r5, #12]
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	d907      	bls.n	8007f90 <_fwalk_sglue+0x38>
 8007f80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f84:	3301      	adds	r3, #1
 8007f86:	d003      	beq.n	8007f90 <_fwalk_sglue+0x38>
 8007f88:	4629      	mov	r1, r5
 8007f8a:	4638      	mov	r0, r7
 8007f8c:	47c0      	blx	r8
 8007f8e:	4306      	orrs	r6, r0
 8007f90:	3568      	adds	r5, #104	@ 0x68
 8007f92:	e7e9      	b.n	8007f68 <_fwalk_sglue+0x10>

08007f94 <memset>:
 8007f94:	4402      	add	r2, r0
 8007f96:	4603      	mov	r3, r0
 8007f98:	4293      	cmp	r3, r2
 8007f9a:	d100      	bne.n	8007f9e <memset+0xa>
 8007f9c:	4770      	bx	lr
 8007f9e:	f803 1b01 	strb.w	r1, [r3], #1
 8007fa2:	e7f9      	b.n	8007f98 <memset+0x4>

08007fa4 <__errno>:
 8007fa4:	4b01      	ldr	r3, [pc, #4]	@ (8007fac <__errno+0x8>)
 8007fa6:	6818      	ldr	r0, [r3, #0]
 8007fa8:	4770      	bx	lr
 8007faa:	bf00      	nop
 8007fac:	2000002c 	.word	0x2000002c

08007fb0 <__libc_init_array>:
 8007fb0:	b570      	push	{r4, r5, r6, lr}
 8007fb2:	4d0d      	ldr	r5, [pc, #52]	@ (8007fe8 <__libc_init_array+0x38>)
 8007fb4:	4c0d      	ldr	r4, [pc, #52]	@ (8007fec <__libc_init_array+0x3c>)
 8007fb6:	1b64      	subs	r4, r4, r5
 8007fb8:	10a4      	asrs	r4, r4, #2
 8007fba:	2600      	movs	r6, #0
 8007fbc:	42a6      	cmp	r6, r4
 8007fbe:	d109      	bne.n	8007fd4 <__libc_init_array+0x24>
 8007fc0:	4d0b      	ldr	r5, [pc, #44]	@ (8007ff0 <__libc_init_array+0x40>)
 8007fc2:	4c0c      	ldr	r4, [pc, #48]	@ (8007ff4 <__libc_init_array+0x44>)
 8007fc4:	f002 f8f8 	bl	800a1b8 <_init>
 8007fc8:	1b64      	subs	r4, r4, r5
 8007fca:	10a4      	asrs	r4, r4, #2
 8007fcc:	2600      	movs	r6, #0
 8007fce:	42a6      	cmp	r6, r4
 8007fd0:	d105      	bne.n	8007fde <__libc_init_array+0x2e>
 8007fd2:	bd70      	pop	{r4, r5, r6, pc}
 8007fd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fd8:	4798      	blx	r3
 8007fda:	3601      	adds	r6, #1
 8007fdc:	e7ee      	b.n	8007fbc <__libc_init_array+0xc>
 8007fde:	f855 3b04 	ldr.w	r3, [r5], #4
 8007fe2:	4798      	blx	r3
 8007fe4:	3601      	adds	r6, #1
 8007fe6:	e7f2      	b.n	8007fce <__libc_init_array+0x1e>
 8007fe8:	0800b30c 	.word	0x0800b30c
 8007fec:	0800b30c 	.word	0x0800b30c
 8007ff0:	0800b30c 	.word	0x0800b30c
 8007ff4:	0800b310 	.word	0x0800b310

08007ff8 <__retarget_lock_init_recursive>:
 8007ff8:	4770      	bx	lr

08007ffa <__retarget_lock_acquire_recursive>:
 8007ffa:	4770      	bx	lr

08007ffc <__retarget_lock_release_recursive>:
 8007ffc:	4770      	bx	lr
	...

08008000 <_localeconv_r>:
 8008000:	4800      	ldr	r0, [pc, #0]	@ (8008004 <_localeconv_r+0x4>)
 8008002:	4770      	bx	lr
 8008004:	2000016c 	.word	0x2000016c

08008008 <memcpy>:
 8008008:	440a      	add	r2, r1
 800800a:	4291      	cmp	r1, r2
 800800c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008010:	d100      	bne.n	8008014 <memcpy+0xc>
 8008012:	4770      	bx	lr
 8008014:	b510      	push	{r4, lr}
 8008016:	f811 4b01 	ldrb.w	r4, [r1], #1
 800801a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800801e:	4291      	cmp	r1, r2
 8008020:	d1f9      	bne.n	8008016 <memcpy+0xe>
 8008022:	bd10      	pop	{r4, pc}

08008024 <quorem>:
 8008024:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008028:	6903      	ldr	r3, [r0, #16]
 800802a:	690c      	ldr	r4, [r1, #16]
 800802c:	42a3      	cmp	r3, r4
 800802e:	4607      	mov	r7, r0
 8008030:	db7e      	blt.n	8008130 <quorem+0x10c>
 8008032:	3c01      	subs	r4, #1
 8008034:	f101 0814 	add.w	r8, r1, #20
 8008038:	00a3      	lsls	r3, r4, #2
 800803a:	f100 0514 	add.w	r5, r0, #20
 800803e:	9300      	str	r3, [sp, #0]
 8008040:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008044:	9301      	str	r3, [sp, #4]
 8008046:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800804a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800804e:	3301      	adds	r3, #1
 8008050:	429a      	cmp	r2, r3
 8008052:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008056:	fbb2 f6f3 	udiv	r6, r2, r3
 800805a:	d32e      	bcc.n	80080ba <quorem+0x96>
 800805c:	f04f 0a00 	mov.w	sl, #0
 8008060:	46c4      	mov	ip, r8
 8008062:	46ae      	mov	lr, r5
 8008064:	46d3      	mov	fp, sl
 8008066:	f85c 3b04 	ldr.w	r3, [ip], #4
 800806a:	b298      	uxth	r0, r3
 800806c:	fb06 a000 	mla	r0, r6, r0, sl
 8008070:	0c02      	lsrs	r2, r0, #16
 8008072:	0c1b      	lsrs	r3, r3, #16
 8008074:	fb06 2303 	mla	r3, r6, r3, r2
 8008078:	f8de 2000 	ldr.w	r2, [lr]
 800807c:	b280      	uxth	r0, r0
 800807e:	b292      	uxth	r2, r2
 8008080:	1a12      	subs	r2, r2, r0
 8008082:	445a      	add	r2, fp
 8008084:	f8de 0000 	ldr.w	r0, [lr]
 8008088:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800808c:	b29b      	uxth	r3, r3
 800808e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008092:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008096:	b292      	uxth	r2, r2
 8008098:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800809c:	45e1      	cmp	r9, ip
 800809e:	f84e 2b04 	str.w	r2, [lr], #4
 80080a2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80080a6:	d2de      	bcs.n	8008066 <quorem+0x42>
 80080a8:	9b00      	ldr	r3, [sp, #0]
 80080aa:	58eb      	ldr	r3, [r5, r3]
 80080ac:	b92b      	cbnz	r3, 80080ba <quorem+0x96>
 80080ae:	9b01      	ldr	r3, [sp, #4]
 80080b0:	3b04      	subs	r3, #4
 80080b2:	429d      	cmp	r5, r3
 80080b4:	461a      	mov	r2, r3
 80080b6:	d32f      	bcc.n	8008118 <quorem+0xf4>
 80080b8:	613c      	str	r4, [r7, #16]
 80080ba:	4638      	mov	r0, r7
 80080bc:	f001 fb38 	bl	8009730 <__mcmp>
 80080c0:	2800      	cmp	r0, #0
 80080c2:	db25      	blt.n	8008110 <quorem+0xec>
 80080c4:	4629      	mov	r1, r5
 80080c6:	2000      	movs	r0, #0
 80080c8:	f858 2b04 	ldr.w	r2, [r8], #4
 80080cc:	f8d1 c000 	ldr.w	ip, [r1]
 80080d0:	fa1f fe82 	uxth.w	lr, r2
 80080d4:	fa1f f38c 	uxth.w	r3, ip
 80080d8:	eba3 030e 	sub.w	r3, r3, lr
 80080dc:	4403      	add	r3, r0
 80080de:	0c12      	lsrs	r2, r2, #16
 80080e0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80080e4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80080e8:	b29b      	uxth	r3, r3
 80080ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80080ee:	45c1      	cmp	r9, r8
 80080f0:	f841 3b04 	str.w	r3, [r1], #4
 80080f4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80080f8:	d2e6      	bcs.n	80080c8 <quorem+0xa4>
 80080fa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80080fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008102:	b922      	cbnz	r2, 800810e <quorem+0xea>
 8008104:	3b04      	subs	r3, #4
 8008106:	429d      	cmp	r5, r3
 8008108:	461a      	mov	r2, r3
 800810a:	d30b      	bcc.n	8008124 <quorem+0x100>
 800810c:	613c      	str	r4, [r7, #16]
 800810e:	3601      	adds	r6, #1
 8008110:	4630      	mov	r0, r6
 8008112:	b003      	add	sp, #12
 8008114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008118:	6812      	ldr	r2, [r2, #0]
 800811a:	3b04      	subs	r3, #4
 800811c:	2a00      	cmp	r2, #0
 800811e:	d1cb      	bne.n	80080b8 <quorem+0x94>
 8008120:	3c01      	subs	r4, #1
 8008122:	e7c6      	b.n	80080b2 <quorem+0x8e>
 8008124:	6812      	ldr	r2, [r2, #0]
 8008126:	3b04      	subs	r3, #4
 8008128:	2a00      	cmp	r2, #0
 800812a:	d1ef      	bne.n	800810c <quorem+0xe8>
 800812c:	3c01      	subs	r4, #1
 800812e:	e7ea      	b.n	8008106 <quorem+0xe2>
 8008130:	2000      	movs	r0, #0
 8008132:	e7ee      	b.n	8008112 <quorem+0xee>
 8008134:	0000      	movs	r0, r0
	...

08008138 <_dtoa_r>:
 8008138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800813c:	69c7      	ldr	r7, [r0, #28]
 800813e:	b097      	sub	sp, #92	@ 0x5c
 8008140:	ed8d 0b04 	vstr	d0, [sp, #16]
 8008144:	ec55 4b10 	vmov	r4, r5, d0
 8008148:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800814a:	9107      	str	r1, [sp, #28]
 800814c:	4681      	mov	r9, r0
 800814e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008150:	9311      	str	r3, [sp, #68]	@ 0x44
 8008152:	b97f      	cbnz	r7, 8008174 <_dtoa_r+0x3c>
 8008154:	2010      	movs	r0, #16
 8008156:	f000 ff17 	bl	8008f88 <malloc>
 800815a:	4602      	mov	r2, r0
 800815c:	f8c9 001c 	str.w	r0, [r9, #28]
 8008160:	b920      	cbnz	r0, 800816c <_dtoa_r+0x34>
 8008162:	4ba9      	ldr	r3, [pc, #676]	@ (8008408 <_dtoa_r+0x2d0>)
 8008164:	21ef      	movs	r1, #239	@ 0xef
 8008166:	48a9      	ldr	r0, [pc, #676]	@ (800840c <_dtoa_r+0x2d4>)
 8008168:	f001 fccc 	bl	8009b04 <__assert_func>
 800816c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008170:	6007      	str	r7, [r0, #0]
 8008172:	60c7      	str	r7, [r0, #12]
 8008174:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008178:	6819      	ldr	r1, [r3, #0]
 800817a:	b159      	cbz	r1, 8008194 <_dtoa_r+0x5c>
 800817c:	685a      	ldr	r2, [r3, #4]
 800817e:	604a      	str	r2, [r1, #4]
 8008180:	2301      	movs	r3, #1
 8008182:	4093      	lsls	r3, r2
 8008184:	608b      	str	r3, [r1, #8]
 8008186:	4648      	mov	r0, r9
 8008188:	f001 f8a0 	bl	80092cc <_Bfree>
 800818c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008190:	2200      	movs	r2, #0
 8008192:	601a      	str	r2, [r3, #0]
 8008194:	1e2b      	subs	r3, r5, #0
 8008196:	bfb9      	ittee	lt
 8008198:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800819c:	9305      	strlt	r3, [sp, #20]
 800819e:	2300      	movge	r3, #0
 80081a0:	6033      	strge	r3, [r6, #0]
 80081a2:	9f05      	ldr	r7, [sp, #20]
 80081a4:	4b9a      	ldr	r3, [pc, #616]	@ (8008410 <_dtoa_r+0x2d8>)
 80081a6:	bfbc      	itt	lt
 80081a8:	2201      	movlt	r2, #1
 80081aa:	6032      	strlt	r2, [r6, #0]
 80081ac:	43bb      	bics	r3, r7
 80081ae:	d112      	bne.n	80081d6 <_dtoa_r+0x9e>
 80081b0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80081b2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80081b6:	6013      	str	r3, [r2, #0]
 80081b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80081bc:	4323      	orrs	r3, r4
 80081be:	f000 855a 	beq.w	8008c76 <_dtoa_r+0xb3e>
 80081c2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80081c4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8008424 <_dtoa_r+0x2ec>
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	f000 855c 	beq.w	8008c86 <_dtoa_r+0xb4e>
 80081ce:	f10a 0303 	add.w	r3, sl, #3
 80081d2:	f000 bd56 	b.w	8008c82 <_dtoa_r+0xb4a>
 80081d6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80081da:	2200      	movs	r2, #0
 80081dc:	ec51 0b17 	vmov	r0, r1, d7
 80081e0:	2300      	movs	r3, #0
 80081e2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80081e6:	f7f8 fc8f 	bl	8000b08 <__aeabi_dcmpeq>
 80081ea:	4680      	mov	r8, r0
 80081ec:	b158      	cbz	r0, 8008206 <_dtoa_r+0xce>
 80081ee:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80081f0:	2301      	movs	r3, #1
 80081f2:	6013      	str	r3, [r2, #0]
 80081f4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80081f6:	b113      	cbz	r3, 80081fe <_dtoa_r+0xc6>
 80081f8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80081fa:	4b86      	ldr	r3, [pc, #536]	@ (8008414 <_dtoa_r+0x2dc>)
 80081fc:	6013      	str	r3, [r2, #0]
 80081fe:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8008428 <_dtoa_r+0x2f0>
 8008202:	f000 bd40 	b.w	8008c86 <_dtoa_r+0xb4e>
 8008206:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800820a:	aa14      	add	r2, sp, #80	@ 0x50
 800820c:	a915      	add	r1, sp, #84	@ 0x54
 800820e:	4648      	mov	r0, r9
 8008210:	f001 fb3e 	bl	8009890 <__d2b>
 8008214:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008218:	9002      	str	r0, [sp, #8]
 800821a:	2e00      	cmp	r6, #0
 800821c:	d078      	beq.n	8008310 <_dtoa_r+0x1d8>
 800821e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008220:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8008224:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008228:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800822c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008230:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008234:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008238:	4619      	mov	r1, r3
 800823a:	2200      	movs	r2, #0
 800823c:	4b76      	ldr	r3, [pc, #472]	@ (8008418 <_dtoa_r+0x2e0>)
 800823e:	f7f8 f843 	bl	80002c8 <__aeabi_dsub>
 8008242:	a36b      	add	r3, pc, #428	@ (adr r3, 80083f0 <_dtoa_r+0x2b8>)
 8008244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008248:	f7f8 f9f6 	bl	8000638 <__aeabi_dmul>
 800824c:	a36a      	add	r3, pc, #424	@ (adr r3, 80083f8 <_dtoa_r+0x2c0>)
 800824e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008252:	f7f8 f83b 	bl	80002cc <__adddf3>
 8008256:	4604      	mov	r4, r0
 8008258:	4630      	mov	r0, r6
 800825a:	460d      	mov	r5, r1
 800825c:	f7f8 f982 	bl	8000564 <__aeabi_i2d>
 8008260:	a367      	add	r3, pc, #412	@ (adr r3, 8008400 <_dtoa_r+0x2c8>)
 8008262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008266:	f7f8 f9e7 	bl	8000638 <__aeabi_dmul>
 800826a:	4602      	mov	r2, r0
 800826c:	460b      	mov	r3, r1
 800826e:	4620      	mov	r0, r4
 8008270:	4629      	mov	r1, r5
 8008272:	f7f8 f82b 	bl	80002cc <__adddf3>
 8008276:	4604      	mov	r4, r0
 8008278:	460d      	mov	r5, r1
 800827a:	f7f8 fc8d 	bl	8000b98 <__aeabi_d2iz>
 800827e:	2200      	movs	r2, #0
 8008280:	4607      	mov	r7, r0
 8008282:	2300      	movs	r3, #0
 8008284:	4620      	mov	r0, r4
 8008286:	4629      	mov	r1, r5
 8008288:	f7f8 fc48 	bl	8000b1c <__aeabi_dcmplt>
 800828c:	b140      	cbz	r0, 80082a0 <_dtoa_r+0x168>
 800828e:	4638      	mov	r0, r7
 8008290:	f7f8 f968 	bl	8000564 <__aeabi_i2d>
 8008294:	4622      	mov	r2, r4
 8008296:	462b      	mov	r3, r5
 8008298:	f7f8 fc36 	bl	8000b08 <__aeabi_dcmpeq>
 800829c:	b900      	cbnz	r0, 80082a0 <_dtoa_r+0x168>
 800829e:	3f01      	subs	r7, #1
 80082a0:	2f16      	cmp	r7, #22
 80082a2:	d852      	bhi.n	800834a <_dtoa_r+0x212>
 80082a4:	4b5d      	ldr	r3, [pc, #372]	@ (800841c <_dtoa_r+0x2e4>)
 80082a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80082aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80082b2:	f7f8 fc33 	bl	8000b1c <__aeabi_dcmplt>
 80082b6:	2800      	cmp	r0, #0
 80082b8:	d049      	beq.n	800834e <_dtoa_r+0x216>
 80082ba:	3f01      	subs	r7, #1
 80082bc:	2300      	movs	r3, #0
 80082be:	9310      	str	r3, [sp, #64]	@ 0x40
 80082c0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80082c2:	1b9b      	subs	r3, r3, r6
 80082c4:	1e5a      	subs	r2, r3, #1
 80082c6:	bf45      	ittet	mi
 80082c8:	f1c3 0301 	rsbmi	r3, r3, #1
 80082cc:	9300      	strmi	r3, [sp, #0]
 80082ce:	2300      	movpl	r3, #0
 80082d0:	2300      	movmi	r3, #0
 80082d2:	9206      	str	r2, [sp, #24]
 80082d4:	bf54      	ite	pl
 80082d6:	9300      	strpl	r3, [sp, #0]
 80082d8:	9306      	strmi	r3, [sp, #24]
 80082da:	2f00      	cmp	r7, #0
 80082dc:	db39      	blt.n	8008352 <_dtoa_r+0x21a>
 80082de:	9b06      	ldr	r3, [sp, #24]
 80082e0:	970d      	str	r7, [sp, #52]	@ 0x34
 80082e2:	443b      	add	r3, r7
 80082e4:	9306      	str	r3, [sp, #24]
 80082e6:	2300      	movs	r3, #0
 80082e8:	9308      	str	r3, [sp, #32]
 80082ea:	9b07      	ldr	r3, [sp, #28]
 80082ec:	2b09      	cmp	r3, #9
 80082ee:	d863      	bhi.n	80083b8 <_dtoa_r+0x280>
 80082f0:	2b05      	cmp	r3, #5
 80082f2:	bfc4      	itt	gt
 80082f4:	3b04      	subgt	r3, #4
 80082f6:	9307      	strgt	r3, [sp, #28]
 80082f8:	9b07      	ldr	r3, [sp, #28]
 80082fa:	f1a3 0302 	sub.w	r3, r3, #2
 80082fe:	bfcc      	ite	gt
 8008300:	2400      	movgt	r4, #0
 8008302:	2401      	movle	r4, #1
 8008304:	2b03      	cmp	r3, #3
 8008306:	d863      	bhi.n	80083d0 <_dtoa_r+0x298>
 8008308:	e8df f003 	tbb	[pc, r3]
 800830c:	2b375452 	.word	0x2b375452
 8008310:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008314:	441e      	add	r6, r3
 8008316:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800831a:	2b20      	cmp	r3, #32
 800831c:	bfc1      	itttt	gt
 800831e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008322:	409f      	lslgt	r7, r3
 8008324:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008328:	fa24 f303 	lsrgt.w	r3, r4, r3
 800832c:	bfd6      	itet	le
 800832e:	f1c3 0320 	rsble	r3, r3, #32
 8008332:	ea47 0003 	orrgt.w	r0, r7, r3
 8008336:	fa04 f003 	lslle.w	r0, r4, r3
 800833a:	f7f8 f903 	bl	8000544 <__aeabi_ui2d>
 800833e:	2201      	movs	r2, #1
 8008340:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008344:	3e01      	subs	r6, #1
 8008346:	9212      	str	r2, [sp, #72]	@ 0x48
 8008348:	e776      	b.n	8008238 <_dtoa_r+0x100>
 800834a:	2301      	movs	r3, #1
 800834c:	e7b7      	b.n	80082be <_dtoa_r+0x186>
 800834e:	9010      	str	r0, [sp, #64]	@ 0x40
 8008350:	e7b6      	b.n	80082c0 <_dtoa_r+0x188>
 8008352:	9b00      	ldr	r3, [sp, #0]
 8008354:	1bdb      	subs	r3, r3, r7
 8008356:	9300      	str	r3, [sp, #0]
 8008358:	427b      	negs	r3, r7
 800835a:	9308      	str	r3, [sp, #32]
 800835c:	2300      	movs	r3, #0
 800835e:	930d      	str	r3, [sp, #52]	@ 0x34
 8008360:	e7c3      	b.n	80082ea <_dtoa_r+0x1b2>
 8008362:	2301      	movs	r3, #1
 8008364:	9309      	str	r3, [sp, #36]	@ 0x24
 8008366:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008368:	eb07 0b03 	add.w	fp, r7, r3
 800836c:	f10b 0301 	add.w	r3, fp, #1
 8008370:	2b01      	cmp	r3, #1
 8008372:	9303      	str	r3, [sp, #12]
 8008374:	bfb8      	it	lt
 8008376:	2301      	movlt	r3, #1
 8008378:	e006      	b.n	8008388 <_dtoa_r+0x250>
 800837a:	2301      	movs	r3, #1
 800837c:	9309      	str	r3, [sp, #36]	@ 0x24
 800837e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008380:	2b00      	cmp	r3, #0
 8008382:	dd28      	ble.n	80083d6 <_dtoa_r+0x29e>
 8008384:	469b      	mov	fp, r3
 8008386:	9303      	str	r3, [sp, #12]
 8008388:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800838c:	2100      	movs	r1, #0
 800838e:	2204      	movs	r2, #4
 8008390:	f102 0514 	add.w	r5, r2, #20
 8008394:	429d      	cmp	r5, r3
 8008396:	d926      	bls.n	80083e6 <_dtoa_r+0x2ae>
 8008398:	6041      	str	r1, [r0, #4]
 800839a:	4648      	mov	r0, r9
 800839c:	f000 ff56 	bl	800924c <_Balloc>
 80083a0:	4682      	mov	sl, r0
 80083a2:	2800      	cmp	r0, #0
 80083a4:	d142      	bne.n	800842c <_dtoa_r+0x2f4>
 80083a6:	4b1e      	ldr	r3, [pc, #120]	@ (8008420 <_dtoa_r+0x2e8>)
 80083a8:	4602      	mov	r2, r0
 80083aa:	f240 11af 	movw	r1, #431	@ 0x1af
 80083ae:	e6da      	b.n	8008166 <_dtoa_r+0x2e>
 80083b0:	2300      	movs	r3, #0
 80083b2:	e7e3      	b.n	800837c <_dtoa_r+0x244>
 80083b4:	2300      	movs	r3, #0
 80083b6:	e7d5      	b.n	8008364 <_dtoa_r+0x22c>
 80083b8:	2401      	movs	r4, #1
 80083ba:	2300      	movs	r3, #0
 80083bc:	9307      	str	r3, [sp, #28]
 80083be:	9409      	str	r4, [sp, #36]	@ 0x24
 80083c0:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 80083c4:	2200      	movs	r2, #0
 80083c6:	f8cd b00c 	str.w	fp, [sp, #12]
 80083ca:	2312      	movs	r3, #18
 80083cc:	920c      	str	r2, [sp, #48]	@ 0x30
 80083ce:	e7db      	b.n	8008388 <_dtoa_r+0x250>
 80083d0:	2301      	movs	r3, #1
 80083d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80083d4:	e7f4      	b.n	80083c0 <_dtoa_r+0x288>
 80083d6:	f04f 0b01 	mov.w	fp, #1
 80083da:	f8cd b00c 	str.w	fp, [sp, #12]
 80083de:	465b      	mov	r3, fp
 80083e0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80083e4:	e7d0      	b.n	8008388 <_dtoa_r+0x250>
 80083e6:	3101      	adds	r1, #1
 80083e8:	0052      	lsls	r2, r2, #1
 80083ea:	e7d1      	b.n	8008390 <_dtoa_r+0x258>
 80083ec:	f3af 8000 	nop.w
 80083f0:	636f4361 	.word	0x636f4361
 80083f4:	3fd287a7 	.word	0x3fd287a7
 80083f8:	8b60c8b3 	.word	0x8b60c8b3
 80083fc:	3fc68a28 	.word	0x3fc68a28
 8008400:	509f79fb 	.word	0x509f79fb
 8008404:	3fd34413 	.word	0x3fd34413
 8008408:	0800afd1 	.word	0x0800afd1
 800840c:	0800afe8 	.word	0x0800afe8
 8008410:	7ff00000 	.word	0x7ff00000
 8008414:	0800afa1 	.word	0x0800afa1
 8008418:	3ff80000 	.word	0x3ff80000
 800841c:	0800b138 	.word	0x0800b138
 8008420:	0800b040 	.word	0x0800b040
 8008424:	0800afcd 	.word	0x0800afcd
 8008428:	0800afa0 	.word	0x0800afa0
 800842c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008430:	6018      	str	r0, [r3, #0]
 8008432:	9b03      	ldr	r3, [sp, #12]
 8008434:	2b0e      	cmp	r3, #14
 8008436:	f200 80a1 	bhi.w	800857c <_dtoa_r+0x444>
 800843a:	2c00      	cmp	r4, #0
 800843c:	f000 809e 	beq.w	800857c <_dtoa_r+0x444>
 8008440:	2f00      	cmp	r7, #0
 8008442:	dd33      	ble.n	80084ac <_dtoa_r+0x374>
 8008444:	4b9c      	ldr	r3, [pc, #624]	@ (80086b8 <_dtoa_r+0x580>)
 8008446:	f007 020f 	and.w	r2, r7, #15
 800844a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800844e:	ed93 7b00 	vldr	d7, [r3]
 8008452:	05f8      	lsls	r0, r7, #23
 8008454:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8008458:	ea4f 1427 	mov.w	r4, r7, asr #4
 800845c:	d516      	bpl.n	800848c <_dtoa_r+0x354>
 800845e:	4b97      	ldr	r3, [pc, #604]	@ (80086bc <_dtoa_r+0x584>)
 8008460:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008464:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008468:	f7f8 fa10 	bl	800088c <__aeabi_ddiv>
 800846c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008470:	f004 040f 	and.w	r4, r4, #15
 8008474:	2603      	movs	r6, #3
 8008476:	4d91      	ldr	r5, [pc, #580]	@ (80086bc <_dtoa_r+0x584>)
 8008478:	b954      	cbnz	r4, 8008490 <_dtoa_r+0x358>
 800847a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800847e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008482:	f7f8 fa03 	bl	800088c <__aeabi_ddiv>
 8008486:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800848a:	e028      	b.n	80084de <_dtoa_r+0x3a6>
 800848c:	2602      	movs	r6, #2
 800848e:	e7f2      	b.n	8008476 <_dtoa_r+0x33e>
 8008490:	07e1      	lsls	r1, r4, #31
 8008492:	d508      	bpl.n	80084a6 <_dtoa_r+0x36e>
 8008494:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008498:	e9d5 2300 	ldrd	r2, r3, [r5]
 800849c:	f7f8 f8cc 	bl	8000638 <__aeabi_dmul>
 80084a0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80084a4:	3601      	adds	r6, #1
 80084a6:	1064      	asrs	r4, r4, #1
 80084a8:	3508      	adds	r5, #8
 80084aa:	e7e5      	b.n	8008478 <_dtoa_r+0x340>
 80084ac:	f000 80af 	beq.w	800860e <_dtoa_r+0x4d6>
 80084b0:	427c      	negs	r4, r7
 80084b2:	4b81      	ldr	r3, [pc, #516]	@ (80086b8 <_dtoa_r+0x580>)
 80084b4:	4d81      	ldr	r5, [pc, #516]	@ (80086bc <_dtoa_r+0x584>)
 80084b6:	f004 020f 	and.w	r2, r4, #15
 80084ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80084be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80084c6:	f7f8 f8b7 	bl	8000638 <__aeabi_dmul>
 80084ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80084ce:	1124      	asrs	r4, r4, #4
 80084d0:	2300      	movs	r3, #0
 80084d2:	2602      	movs	r6, #2
 80084d4:	2c00      	cmp	r4, #0
 80084d6:	f040 808f 	bne.w	80085f8 <_dtoa_r+0x4c0>
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d1d3      	bne.n	8008486 <_dtoa_r+0x34e>
 80084de:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80084e0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	f000 8094 	beq.w	8008612 <_dtoa_r+0x4da>
 80084ea:	4b75      	ldr	r3, [pc, #468]	@ (80086c0 <_dtoa_r+0x588>)
 80084ec:	2200      	movs	r2, #0
 80084ee:	4620      	mov	r0, r4
 80084f0:	4629      	mov	r1, r5
 80084f2:	f7f8 fb13 	bl	8000b1c <__aeabi_dcmplt>
 80084f6:	2800      	cmp	r0, #0
 80084f8:	f000 808b 	beq.w	8008612 <_dtoa_r+0x4da>
 80084fc:	9b03      	ldr	r3, [sp, #12]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	f000 8087 	beq.w	8008612 <_dtoa_r+0x4da>
 8008504:	f1bb 0f00 	cmp.w	fp, #0
 8008508:	dd34      	ble.n	8008574 <_dtoa_r+0x43c>
 800850a:	4620      	mov	r0, r4
 800850c:	4b6d      	ldr	r3, [pc, #436]	@ (80086c4 <_dtoa_r+0x58c>)
 800850e:	2200      	movs	r2, #0
 8008510:	4629      	mov	r1, r5
 8008512:	f7f8 f891 	bl	8000638 <__aeabi_dmul>
 8008516:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800851a:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800851e:	3601      	adds	r6, #1
 8008520:	465c      	mov	r4, fp
 8008522:	4630      	mov	r0, r6
 8008524:	f7f8 f81e 	bl	8000564 <__aeabi_i2d>
 8008528:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800852c:	f7f8 f884 	bl	8000638 <__aeabi_dmul>
 8008530:	4b65      	ldr	r3, [pc, #404]	@ (80086c8 <_dtoa_r+0x590>)
 8008532:	2200      	movs	r2, #0
 8008534:	f7f7 feca 	bl	80002cc <__adddf3>
 8008538:	4605      	mov	r5, r0
 800853a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800853e:	2c00      	cmp	r4, #0
 8008540:	d16a      	bne.n	8008618 <_dtoa_r+0x4e0>
 8008542:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008546:	4b61      	ldr	r3, [pc, #388]	@ (80086cc <_dtoa_r+0x594>)
 8008548:	2200      	movs	r2, #0
 800854a:	f7f7 febd 	bl	80002c8 <__aeabi_dsub>
 800854e:	4602      	mov	r2, r0
 8008550:	460b      	mov	r3, r1
 8008552:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008556:	462a      	mov	r2, r5
 8008558:	4633      	mov	r3, r6
 800855a:	f7f8 fafd 	bl	8000b58 <__aeabi_dcmpgt>
 800855e:	2800      	cmp	r0, #0
 8008560:	f040 8298 	bne.w	8008a94 <_dtoa_r+0x95c>
 8008564:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008568:	462a      	mov	r2, r5
 800856a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800856e:	f7f8 fad5 	bl	8000b1c <__aeabi_dcmplt>
 8008572:	bb38      	cbnz	r0, 80085c4 <_dtoa_r+0x48c>
 8008574:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8008578:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800857c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800857e:	2b00      	cmp	r3, #0
 8008580:	f2c0 8157 	blt.w	8008832 <_dtoa_r+0x6fa>
 8008584:	2f0e      	cmp	r7, #14
 8008586:	f300 8154 	bgt.w	8008832 <_dtoa_r+0x6fa>
 800858a:	4b4b      	ldr	r3, [pc, #300]	@ (80086b8 <_dtoa_r+0x580>)
 800858c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008590:	ed93 7b00 	vldr	d7, [r3]
 8008594:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008596:	2b00      	cmp	r3, #0
 8008598:	ed8d 7b00 	vstr	d7, [sp]
 800859c:	f280 80e5 	bge.w	800876a <_dtoa_r+0x632>
 80085a0:	9b03      	ldr	r3, [sp, #12]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	f300 80e1 	bgt.w	800876a <_dtoa_r+0x632>
 80085a8:	d10c      	bne.n	80085c4 <_dtoa_r+0x48c>
 80085aa:	4b48      	ldr	r3, [pc, #288]	@ (80086cc <_dtoa_r+0x594>)
 80085ac:	2200      	movs	r2, #0
 80085ae:	ec51 0b17 	vmov	r0, r1, d7
 80085b2:	f7f8 f841 	bl	8000638 <__aeabi_dmul>
 80085b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085ba:	f7f8 fac3 	bl	8000b44 <__aeabi_dcmpge>
 80085be:	2800      	cmp	r0, #0
 80085c0:	f000 8266 	beq.w	8008a90 <_dtoa_r+0x958>
 80085c4:	2400      	movs	r4, #0
 80085c6:	4625      	mov	r5, r4
 80085c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80085ca:	4656      	mov	r6, sl
 80085cc:	ea6f 0803 	mvn.w	r8, r3
 80085d0:	2700      	movs	r7, #0
 80085d2:	4621      	mov	r1, r4
 80085d4:	4648      	mov	r0, r9
 80085d6:	f000 fe79 	bl	80092cc <_Bfree>
 80085da:	2d00      	cmp	r5, #0
 80085dc:	f000 80bd 	beq.w	800875a <_dtoa_r+0x622>
 80085e0:	b12f      	cbz	r7, 80085ee <_dtoa_r+0x4b6>
 80085e2:	42af      	cmp	r7, r5
 80085e4:	d003      	beq.n	80085ee <_dtoa_r+0x4b6>
 80085e6:	4639      	mov	r1, r7
 80085e8:	4648      	mov	r0, r9
 80085ea:	f000 fe6f 	bl	80092cc <_Bfree>
 80085ee:	4629      	mov	r1, r5
 80085f0:	4648      	mov	r0, r9
 80085f2:	f000 fe6b 	bl	80092cc <_Bfree>
 80085f6:	e0b0      	b.n	800875a <_dtoa_r+0x622>
 80085f8:	07e2      	lsls	r2, r4, #31
 80085fa:	d505      	bpl.n	8008608 <_dtoa_r+0x4d0>
 80085fc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008600:	f7f8 f81a 	bl	8000638 <__aeabi_dmul>
 8008604:	3601      	adds	r6, #1
 8008606:	2301      	movs	r3, #1
 8008608:	1064      	asrs	r4, r4, #1
 800860a:	3508      	adds	r5, #8
 800860c:	e762      	b.n	80084d4 <_dtoa_r+0x39c>
 800860e:	2602      	movs	r6, #2
 8008610:	e765      	b.n	80084de <_dtoa_r+0x3a6>
 8008612:	9c03      	ldr	r4, [sp, #12]
 8008614:	46b8      	mov	r8, r7
 8008616:	e784      	b.n	8008522 <_dtoa_r+0x3ea>
 8008618:	4b27      	ldr	r3, [pc, #156]	@ (80086b8 <_dtoa_r+0x580>)
 800861a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800861c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008620:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008624:	4454      	add	r4, sl
 8008626:	2900      	cmp	r1, #0
 8008628:	d054      	beq.n	80086d4 <_dtoa_r+0x59c>
 800862a:	4929      	ldr	r1, [pc, #164]	@ (80086d0 <_dtoa_r+0x598>)
 800862c:	2000      	movs	r0, #0
 800862e:	f7f8 f92d 	bl	800088c <__aeabi_ddiv>
 8008632:	4633      	mov	r3, r6
 8008634:	462a      	mov	r2, r5
 8008636:	f7f7 fe47 	bl	80002c8 <__aeabi_dsub>
 800863a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800863e:	4656      	mov	r6, sl
 8008640:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008644:	f7f8 faa8 	bl	8000b98 <__aeabi_d2iz>
 8008648:	4605      	mov	r5, r0
 800864a:	f7f7 ff8b 	bl	8000564 <__aeabi_i2d>
 800864e:	4602      	mov	r2, r0
 8008650:	460b      	mov	r3, r1
 8008652:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008656:	f7f7 fe37 	bl	80002c8 <__aeabi_dsub>
 800865a:	3530      	adds	r5, #48	@ 0x30
 800865c:	4602      	mov	r2, r0
 800865e:	460b      	mov	r3, r1
 8008660:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008664:	f806 5b01 	strb.w	r5, [r6], #1
 8008668:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800866c:	f7f8 fa56 	bl	8000b1c <__aeabi_dcmplt>
 8008670:	2800      	cmp	r0, #0
 8008672:	d172      	bne.n	800875a <_dtoa_r+0x622>
 8008674:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008678:	4911      	ldr	r1, [pc, #68]	@ (80086c0 <_dtoa_r+0x588>)
 800867a:	2000      	movs	r0, #0
 800867c:	f7f7 fe24 	bl	80002c8 <__aeabi_dsub>
 8008680:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008684:	f7f8 fa4a 	bl	8000b1c <__aeabi_dcmplt>
 8008688:	2800      	cmp	r0, #0
 800868a:	f040 80b4 	bne.w	80087f6 <_dtoa_r+0x6be>
 800868e:	42a6      	cmp	r6, r4
 8008690:	f43f af70 	beq.w	8008574 <_dtoa_r+0x43c>
 8008694:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008698:	4b0a      	ldr	r3, [pc, #40]	@ (80086c4 <_dtoa_r+0x58c>)
 800869a:	2200      	movs	r2, #0
 800869c:	f7f7 ffcc 	bl	8000638 <__aeabi_dmul>
 80086a0:	4b08      	ldr	r3, [pc, #32]	@ (80086c4 <_dtoa_r+0x58c>)
 80086a2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80086a6:	2200      	movs	r2, #0
 80086a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80086ac:	f7f7 ffc4 	bl	8000638 <__aeabi_dmul>
 80086b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80086b4:	e7c4      	b.n	8008640 <_dtoa_r+0x508>
 80086b6:	bf00      	nop
 80086b8:	0800b138 	.word	0x0800b138
 80086bc:	0800b110 	.word	0x0800b110
 80086c0:	3ff00000 	.word	0x3ff00000
 80086c4:	40240000 	.word	0x40240000
 80086c8:	401c0000 	.word	0x401c0000
 80086cc:	40140000 	.word	0x40140000
 80086d0:	3fe00000 	.word	0x3fe00000
 80086d4:	4631      	mov	r1, r6
 80086d6:	4628      	mov	r0, r5
 80086d8:	f7f7 ffae 	bl	8000638 <__aeabi_dmul>
 80086dc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80086e0:	9413      	str	r4, [sp, #76]	@ 0x4c
 80086e2:	4656      	mov	r6, sl
 80086e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80086e8:	f7f8 fa56 	bl	8000b98 <__aeabi_d2iz>
 80086ec:	4605      	mov	r5, r0
 80086ee:	f7f7 ff39 	bl	8000564 <__aeabi_i2d>
 80086f2:	4602      	mov	r2, r0
 80086f4:	460b      	mov	r3, r1
 80086f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80086fa:	f7f7 fde5 	bl	80002c8 <__aeabi_dsub>
 80086fe:	3530      	adds	r5, #48	@ 0x30
 8008700:	f806 5b01 	strb.w	r5, [r6], #1
 8008704:	4602      	mov	r2, r0
 8008706:	460b      	mov	r3, r1
 8008708:	42a6      	cmp	r6, r4
 800870a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800870e:	f04f 0200 	mov.w	r2, #0
 8008712:	d124      	bne.n	800875e <_dtoa_r+0x626>
 8008714:	4baf      	ldr	r3, [pc, #700]	@ (80089d4 <_dtoa_r+0x89c>)
 8008716:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800871a:	f7f7 fdd7 	bl	80002cc <__adddf3>
 800871e:	4602      	mov	r2, r0
 8008720:	460b      	mov	r3, r1
 8008722:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008726:	f7f8 fa17 	bl	8000b58 <__aeabi_dcmpgt>
 800872a:	2800      	cmp	r0, #0
 800872c:	d163      	bne.n	80087f6 <_dtoa_r+0x6be>
 800872e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008732:	49a8      	ldr	r1, [pc, #672]	@ (80089d4 <_dtoa_r+0x89c>)
 8008734:	2000      	movs	r0, #0
 8008736:	f7f7 fdc7 	bl	80002c8 <__aeabi_dsub>
 800873a:	4602      	mov	r2, r0
 800873c:	460b      	mov	r3, r1
 800873e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008742:	f7f8 f9eb 	bl	8000b1c <__aeabi_dcmplt>
 8008746:	2800      	cmp	r0, #0
 8008748:	f43f af14 	beq.w	8008574 <_dtoa_r+0x43c>
 800874c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800874e:	1e73      	subs	r3, r6, #1
 8008750:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008752:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008756:	2b30      	cmp	r3, #48	@ 0x30
 8008758:	d0f8      	beq.n	800874c <_dtoa_r+0x614>
 800875a:	4647      	mov	r7, r8
 800875c:	e03b      	b.n	80087d6 <_dtoa_r+0x69e>
 800875e:	4b9e      	ldr	r3, [pc, #632]	@ (80089d8 <_dtoa_r+0x8a0>)
 8008760:	f7f7 ff6a 	bl	8000638 <__aeabi_dmul>
 8008764:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008768:	e7bc      	b.n	80086e4 <_dtoa_r+0x5ac>
 800876a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800876e:	4656      	mov	r6, sl
 8008770:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008774:	4620      	mov	r0, r4
 8008776:	4629      	mov	r1, r5
 8008778:	f7f8 f888 	bl	800088c <__aeabi_ddiv>
 800877c:	f7f8 fa0c 	bl	8000b98 <__aeabi_d2iz>
 8008780:	4680      	mov	r8, r0
 8008782:	f7f7 feef 	bl	8000564 <__aeabi_i2d>
 8008786:	e9dd 2300 	ldrd	r2, r3, [sp]
 800878a:	f7f7 ff55 	bl	8000638 <__aeabi_dmul>
 800878e:	4602      	mov	r2, r0
 8008790:	460b      	mov	r3, r1
 8008792:	4620      	mov	r0, r4
 8008794:	4629      	mov	r1, r5
 8008796:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800879a:	f7f7 fd95 	bl	80002c8 <__aeabi_dsub>
 800879e:	f806 4b01 	strb.w	r4, [r6], #1
 80087a2:	9d03      	ldr	r5, [sp, #12]
 80087a4:	eba6 040a 	sub.w	r4, r6, sl
 80087a8:	42a5      	cmp	r5, r4
 80087aa:	4602      	mov	r2, r0
 80087ac:	460b      	mov	r3, r1
 80087ae:	d133      	bne.n	8008818 <_dtoa_r+0x6e0>
 80087b0:	f7f7 fd8c 	bl	80002cc <__adddf3>
 80087b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80087b8:	4604      	mov	r4, r0
 80087ba:	460d      	mov	r5, r1
 80087bc:	f7f8 f9cc 	bl	8000b58 <__aeabi_dcmpgt>
 80087c0:	b9c0      	cbnz	r0, 80087f4 <_dtoa_r+0x6bc>
 80087c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80087c6:	4620      	mov	r0, r4
 80087c8:	4629      	mov	r1, r5
 80087ca:	f7f8 f99d 	bl	8000b08 <__aeabi_dcmpeq>
 80087ce:	b110      	cbz	r0, 80087d6 <_dtoa_r+0x69e>
 80087d0:	f018 0f01 	tst.w	r8, #1
 80087d4:	d10e      	bne.n	80087f4 <_dtoa_r+0x6bc>
 80087d6:	9902      	ldr	r1, [sp, #8]
 80087d8:	4648      	mov	r0, r9
 80087da:	f000 fd77 	bl	80092cc <_Bfree>
 80087de:	2300      	movs	r3, #0
 80087e0:	7033      	strb	r3, [r6, #0]
 80087e2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80087e4:	3701      	adds	r7, #1
 80087e6:	601f      	str	r7, [r3, #0]
 80087e8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	f000 824b 	beq.w	8008c86 <_dtoa_r+0xb4e>
 80087f0:	601e      	str	r6, [r3, #0]
 80087f2:	e248      	b.n	8008c86 <_dtoa_r+0xb4e>
 80087f4:	46b8      	mov	r8, r7
 80087f6:	4633      	mov	r3, r6
 80087f8:	461e      	mov	r6, r3
 80087fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80087fe:	2a39      	cmp	r2, #57	@ 0x39
 8008800:	d106      	bne.n	8008810 <_dtoa_r+0x6d8>
 8008802:	459a      	cmp	sl, r3
 8008804:	d1f8      	bne.n	80087f8 <_dtoa_r+0x6c0>
 8008806:	2230      	movs	r2, #48	@ 0x30
 8008808:	f108 0801 	add.w	r8, r8, #1
 800880c:	f88a 2000 	strb.w	r2, [sl]
 8008810:	781a      	ldrb	r2, [r3, #0]
 8008812:	3201      	adds	r2, #1
 8008814:	701a      	strb	r2, [r3, #0]
 8008816:	e7a0      	b.n	800875a <_dtoa_r+0x622>
 8008818:	4b6f      	ldr	r3, [pc, #444]	@ (80089d8 <_dtoa_r+0x8a0>)
 800881a:	2200      	movs	r2, #0
 800881c:	f7f7 ff0c 	bl	8000638 <__aeabi_dmul>
 8008820:	2200      	movs	r2, #0
 8008822:	2300      	movs	r3, #0
 8008824:	4604      	mov	r4, r0
 8008826:	460d      	mov	r5, r1
 8008828:	f7f8 f96e 	bl	8000b08 <__aeabi_dcmpeq>
 800882c:	2800      	cmp	r0, #0
 800882e:	d09f      	beq.n	8008770 <_dtoa_r+0x638>
 8008830:	e7d1      	b.n	80087d6 <_dtoa_r+0x69e>
 8008832:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008834:	2a00      	cmp	r2, #0
 8008836:	f000 80ea 	beq.w	8008a0e <_dtoa_r+0x8d6>
 800883a:	9a07      	ldr	r2, [sp, #28]
 800883c:	2a01      	cmp	r2, #1
 800883e:	f300 80cd 	bgt.w	80089dc <_dtoa_r+0x8a4>
 8008842:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008844:	2a00      	cmp	r2, #0
 8008846:	f000 80c1 	beq.w	80089cc <_dtoa_r+0x894>
 800884a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800884e:	9c08      	ldr	r4, [sp, #32]
 8008850:	9e00      	ldr	r6, [sp, #0]
 8008852:	9a00      	ldr	r2, [sp, #0]
 8008854:	441a      	add	r2, r3
 8008856:	9200      	str	r2, [sp, #0]
 8008858:	9a06      	ldr	r2, [sp, #24]
 800885a:	2101      	movs	r1, #1
 800885c:	441a      	add	r2, r3
 800885e:	4648      	mov	r0, r9
 8008860:	9206      	str	r2, [sp, #24]
 8008862:	f000 fde7 	bl	8009434 <__i2b>
 8008866:	4605      	mov	r5, r0
 8008868:	b166      	cbz	r6, 8008884 <_dtoa_r+0x74c>
 800886a:	9b06      	ldr	r3, [sp, #24]
 800886c:	2b00      	cmp	r3, #0
 800886e:	dd09      	ble.n	8008884 <_dtoa_r+0x74c>
 8008870:	42b3      	cmp	r3, r6
 8008872:	9a00      	ldr	r2, [sp, #0]
 8008874:	bfa8      	it	ge
 8008876:	4633      	movge	r3, r6
 8008878:	1ad2      	subs	r2, r2, r3
 800887a:	9200      	str	r2, [sp, #0]
 800887c:	9a06      	ldr	r2, [sp, #24]
 800887e:	1af6      	subs	r6, r6, r3
 8008880:	1ad3      	subs	r3, r2, r3
 8008882:	9306      	str	r3, [sp, #24]
 8008884:	9b08      	ldr	r3, [sp, #32]
 8008886:	b30b      	cbz	r3, 80088cc <_dtoa_r+0x794>
 8008888:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800888a:	2b00      	cmp	r3, #0
 800888c:	f000 80c6 	beq.w	8008a1c <_dtoa_r+0x8e4>
 8008890:	2c00      	cmp	r4, #0
 8008892:	f000 80c0 	beq.w	8008a16 <_dtoa_r+0x8de>
 8008896:	4629      	mov	r1, r5
 8008898:	4622      	mov	r2, r4
 800889a:	4648      	mov	r0, r9
 800889c:	f000 fe82 	bl	80095a4 <__pow5mult>
 80088a0:	9a02      	ldr	r2, [sp, #8]
 80088a2:	4601      	mov	r1, r0
 80088a4:	4605      	mov	r5, r0
 80088a6:	4648      	mov	r0, r9
 80088a8:	f000 fdda 	bl	8009460 <__multiply>
 80088ac:	9902      	ldr	r1, [sp, #8]
 80088ae:	4680      	mov	r8, r0
 80088b0:	4648      	mov	r0, r9
 80088b2:	f000 fd0b 	bl	80092cc <_Bfree>
 80088b6:	9b08      	ldr	r3, [sp, #32]
 80088b8:	1b1b      	subs	r3, r3, r4
 80088ba:	9308      	str	r3, [sp, #32]
 80088bc:	f000 80b1 	beq.w	8008a22 <_dtoa_r+0x8ea>
 80088c0:	9a08      	ldr	r2, [sp, #32]
 80088c2:	4641      	mov	r1, r8
 80088c4:	4648      	mov	r0, r9
 80088c6:	f000 fe6d 	bl	80095a4 <__pow5mult>
 80088ca:	9002      	str	r0, [sp, #8]
 80088cc:	2101      	movs	r1, #1
 80088ce:	4648      	mov	r0, r9
 80088d0:	f000 fdb0 	bl	8009434 <__i2b>
 80088d4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80088d6:	4604      	mov	r4, r0
 80088d8:	2b00      	cmp	r3, #0
 80088da:	f000 81d8 	beq.w	8008c8e <_dtoa_r+0xb56>
 80088de:	461a      	mov	r2, r3
 80088e0:	4601      	mov	r1, r0
 80088e2:	4648      	mov	r0, r9
 80088e4:	f000 fe5e 	bl	80095a4 <__pow5mult>
 80088e8:	9b07      	ldr	r3, [sp, #28]
 80088ea:	2b01      	cmp	r3, #1
 80088ec:	4604      	mov	r4, r0
 80088ee:	f300 809f 	bgt.w	8008a30 <_dtoa_r+0x8f8>
 80088f2:	9b04      	ldr	r3, [sp, #16]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	f040 8097 	bne.w	8008a28 <_dtoa_r+0x8f0>
 80088fa:	9b05      	ldr	r3, [sp, #20]
 80088fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008900:	2b00      	cmp	r3, #0
 8008902:	f040 8093 	bne.w	8008a2c <_dtoa_r+0x8f4>
 8008906:	9b05      	ldr	r3, [sp, #20]
 8008908:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800890c:	0d1b      	lsrs	r3, r3, #20
 800890e:	051b      	lsls	r3, r3, #20
 8008910:	b133      	cbz	r3, 8008920 <_dtoa_r+0x7e8>
 8008912:	9b00      	ldr	r3, [sp, #0]
 8008914:	3301      	adds	r3, #1
 8008916:	9300      	str	r3, [sp, #0]
 8008918:	9b06      	ldr	r3, [sp, #24]
 800891a:	3301      	adds	r3, #1
 800891c:	9306      	str	r3, [sp, #24]
 800891e:	2301      	movs	r3, #1
 8008920:	9308      	str	r3, [sp, #32]
 8008922:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008924:	2b00      	cmp	r3, #0
 8008926:	f000 81b8 	beq.w	8008c9a <_dtoa_r+0xb62>
 800892a:	6923      	ldr	r3, [r4, #16]
 800892c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008930:	6918      	ldr	r0, [r3, #16]
 8008932:	f000 fd33 	bl	800939c <__hi0bits>
 8008936:	f1c0 0020 	rsb	r0, r0, #32
 800893a:	9b06      	ldr	r3, [sp, #24]
 800893c:	4418      	add	r0, r3
 800893e:	f010 001f 	ands.w	r0, r0, #31
 8008942:	f000 8082 	beq.w	8008a4a <_dtoa_r+0x912>
 8008946:	f1c0 0320 	rsb	r3, r0, #32
 800894a:	2b04      	cmp	r3, #4
 800894c:	dd73      	ble.n	8008a36 <_dtoa_r+0x8fe>
 800894e:	9b00      	ldr	r3, [sp, #0]
 8008950:	f1c0 001c 	rsb	r0, r0, #28
 8008954:	4403      	add	r3, r0
 8008956:	9300      	str	r3, [sp, #0]
 8008958:	9b06      	ldr	r3, [sp, #24]
 800895a:	4403      	add	r3, r0
 800895c:	4406      	add	r6, r0
 800895e:	9306      	str	r3, [sp, #24]
 8008960:	9b00      	ldr	r3, [sp, #0]
 8008962:	2b00      	cmp	r3, #0
 8008964:	dd05      	ble.n	8008972 <_dtoa_r+0x83a>
 8008966:	9902      	ldr	r1, [sp, #8]
 8008968:	461a      	mov	r2, r3
 800896a:	4648      	mov	r0, r9
 800896c:	f000 fe74 	bl	8009658 <__lshift>
 8008970:	9002      	str	r0, [sp, #8]
 8008972:	9b06      	ldr	r3, [sp, #24]
 8008974:	2b00      	cmp	r3, #0
 8008976:	dd05      	ble.n	8008984 <_dtoa_r+0x84c>
 8008978:	4621      	mov	r1, r4
 800897a:	461a      	mov	r2, r3
 800897c:	4648      	mov	r0, r9
 800897e:	f000 fe6b 	bl	8009658 <__lshift>
 8008982:	4604      	mov	r4, r0
 8008984:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008986:	2b00      	cmp	r3, #0
 8008988:	d061      	beq.n	8008a4e <_dtoa_r+0x916>
 800898a:	9802      	ldr	r0, [sp, #8]
 800898c:	4621      	mov	r1, r4
 800898e:	f000 fecf 	bl	8009730 <__mcmp>
 8008992:	2800      	cmp	r0, #0
 8008994:	da5b      	bge.n	8008a4e <_dtoa_r+0x916>
 8008996:	2300      	movs	r3, #0
 8008998:	9902      	ldr	r1, [sp, #8]
 800899a:	220a      	movs	r2, #10
 800899c:	4648      	mov	r0, r9
 800899e:	f000 fcb7 	bl	8009310 <__multadd>
 80089a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089a4:	9002      	str	r0, [sp, #8]
 80089a6:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	f000 8177 	beq.w	8008c9e <_dtoa_r+0xb66>
 80089b0:	4629      	mov	r1, r5
 80089b2:	2300      	movs	r3, #0
 80089b4:	220a      	movs	r2, #10
 80089b6:	4648      	mov	r0, r9
 80089b8:	f000 fcaa 	bl	8009310 <__multadd>
 80089bc:	f1bb 0f00 	cmp.w	fp, #0
 80089c0:	4605      	mov	r5, r0
 80089c2:	dc6f      	bgt.n	8008aa4 <_dtoa_r+0x96c>
 80089c4:	9b07      	ldr	r3, [sp, #28]
 80089c6:	2b02      	cmp	r3, #2
 80089c8:	dc49      	bgt.n	8008a5e <_dtoa_r+0x926>
 80089ca:	e06b      	b.n	8008aa4 <_dtoa_r+0x96c>
 80089cc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80089ce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80089d2:	e73c      	b.n	800884e <_dtoa_r+0x716>
 80089d4:	3fe00000 	.word	0x3fe00000
 80089d8:	40240000 	.word	0x40240000
 80089dc:	9b03      	ldr	r3, [sp, #12]
 80089de:	1e5c      	subs	r4, r3, #1
 80089e0:	9b08      	ldr	r3, [sp, #32]
 80089e2:	42a3      	cmp	r3, r4
 80089e4:	db09      	blt.n	80089fa <_dtoa_r+0x8c2>
 80089e6:	1b1c      	subs	r4, r3, r4
 80089e8:	9b03      	ldr	r3, [sp, #12]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	f6bf af30 	bge.w	8008850 <_dtoa_r+0x718>
 80089f0:	9b00      	ldr	r3, [sp, #0]
 80089f2:	9a03      	ldr	r2, [sp, #12]
 80089f4:	1a9e      	subs	r6, r3, r2
 80089f6:	2300      	movs	r3, #0
 80089f8:	e72b      	b.n	8008852 <_dtoa_r+0x71a>
 80089fa:	9b08      	ldr	r3, [sp, #32]
 80089fc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80089fe:	9408      	str	r4, [sp, #32]
 8008a00:	1ae3      	subs	r3, r4, r3
 8008a02:	441a      	add	r2, r3
 8008a04:	9e00      	ldr	r6, [sp, #0]
 8008a06:	9b03      	ldr	r3, [sp, #12]
 8008a08:	920d      	str	r2, [sp, #52]	@ 0x34
 8008a0a:	2400      	movs	r4, #0
 8008a0c:	e721      	b.n	8008852 <_dtoa_r+0x71a>
 8008a0e:	9c08      	ldr	r4, [sp, #32]
 8008a10:	9e00      	ldr	r6, [sp, #0]
 8008a12:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8008a14:	e728      	b.n	8008868 <_dtoa_r+0x730>
 8008a16:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008a1a:	e751      	b.n	80088c0 <_dtoa_r+0x788>
 8008a1c:	9a08      	ldr	r2, [sp, #32]
 8008a1e:	9902      	ldr	r1, [sp, #8]
 8008a20:	e750      	b.n	80088c4 <_dtoa_r+0x78c>
 8008a22:	f8cd 8008 	str.w	r8, [sp, #8]
 8008a26:	e751      	b.n	80088cc <_dtoa_r+0x794>
 8008a28:	2300      	movs	r3, #0
 8008a2a:	e779      	b.n	8008920 <_dtoa_r+0x7e8>
 8008a2c:	9b04      	ldr	r3, [sp, #16]
 8008a2e:	e777      	b.n	8008920 <_dtoa_r+0x7e8>
 8008a30:	2300      	movs	r3, #0
 8008a32:	9308      	str	r3, [sp, #32]
 8008a34:	e779      	b.n	800892a <_dtoa_r+0x7f2>
 8008a36:	d093      	beq.n	8008960 <_dtoa_r+0x828>
 8008a38:	9a00      	ldr	r2, [sp, #0]
 8008a3a:	331c      	adds	r3, #28
 8008a3c:	441a      	add	r2, r3
 8008a3e:	9200      	str	r2, [sp, #0]
 8008a40:	9a06      	ldr	r2, [sp, #24]
 8008a42:	441a      	add	r2, r3
 8008a44:	441e      	add	r6, r3
 8008a46:	9206      	str	r2, [sp, #24]
 8008a48:	e78a      	b.n	8008960 <_dtoa_r+0x828>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	e7f4      	b.n	8008a38 <_dtoa_r+0x900>
 8008a4e:	9b03      	ldr	r3, [sp, #12]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	46b8      	mov	r8, r7
 8008a54:	dc20      	bgt.n	8008a98 <_dtoa_r+0x960>
 8008a56:	469b      	mov	fp, r3
 8008a58:	9b07      	ldr	r3, [sp, #28]
 8008a5a:	2b02      	cmp	r3, #2
 8008a5c:	dd1e      	ble.n	8008a9c <_dtoa_r+0x964>
 8008a5e:	f1bb 0f00 	cmp.w	fp, #0
 8008a62:	f47f adb1 	bne.w	80085c8 <_dtoa_r+0x490>
 8008a66:	4621      	mov	r1, r4
 8008a68:	465b      	mov	r3, fp
 8008a6a:	2205      	movs	r2, #5
 8008a6c:	4648      	mov	r0, r9
 8008a6e:	f000 fc4f 	bl	8009310 <__multadd>
 8008a72:	4601      	mov	r1, r0
 8008a74:	4604      	mov	r4, r0
 8008a76:	9802      	ldr	r0, [sp, #8]
 8008a78:	f000 fe5a 	bl	8009730 <__mcmp>
 8008a7c:	2800      	cmp	r0, #0
 8008a7e:	f77f ada3 	ble.w	80085c8 <_dtoa_r+0x490>
 8008a82:	4656      	mov	r6, sl
 8008a84:	2331      	movs	r3, #49	@ 0x31
 8008a86:	f806 3b01 	strb.w	r3, [r6], #1
 8008a8a:	f108 0801 	add.w	r8, r8, #1
 8008a8e:	e59f      	b.n	80085d0 <_dtoa_r+0x498>
 8008a90:	9c03      	ldr	r4, [sp, #12]
 8008a92:	46b8      	mov	r8, r7
 8008a94:	4625      	mov	r5, r4
 8008a96:	e7f4      	b.n	8008a82 <_dtoa_r+0x94a>
 8008a98:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8008a9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	f000 8101 	beq.w	8008ca6 <_dtoa_r+0xb6e>
 8008aa4:	2e00      	cmp	r6, #0
 8008aa6:	dd05      	ble.n	8008ab4 <_dtoa_r+0x97c>
 8008aa8:	4629      	mov	r1, r5
 8008aaa:	4632      	mov	r2, r6
 8008aac:	4648      	mov	r0, r9
 8008aae:	f000 fdd3 	bl	8009658 <__lshift>
 8008ab2:	4605      	mov	r5, r0
 8008ab4:	9b08      	ldr	r3, [sp, #32]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d05c      	beq.n	8008b74 <_dtoa_r+0xa3c>
 8008aba:	6869      	ldr	r1, [r5, #4]
 8008abc:	4648      	mov	r0, r9
 8008abe:	f000 fbc5 	bl	800924c <_Balloc>
 8008ac2:	4606      	mov	r6, r0
 8008ac4:	b928      	cbnz	r0, 8008ad2 <_dtoa_r+0x99a>
 8008ac6:	4b82      	ldr	r3, [pc, #520]	@ (8008cd0 <_dtoa_r+0xb98>)
 8008ac8:	4602      	mov	r2, r0
 8008aca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008ace:	f7ff bb4a 	b.w	8008166 <_dtoa_r+0x2e>
 8008ad2:	692a      	ldr	r2, [r5, #16]
 8008ad4:	3202      	adds	r2, #2
 8008ad6:	0092      	lsls	r2, r2, #2
 8008ad8:	f105 010c 	add.w	r1, r5, #12
 8008adc:	300c      	adds	r0, #12
 8008ade:	f7ff fa93 	bl	8008008 <memcpy>
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	4631      	mov	r1, r6
 8008ae6:	4648      	mov	r0, r9
 8008ae8:	f000 fdb6 	bl	8009658 <__lshift>
 8008aec:	f10a 0301 	add.w	r3, sl, #1
 8008af0:	9300      	str	r3, [sp, #0]
 8008af2:	eb0a 030b 	add.w	r3, sl, fp
 8008af6:	9308      	str	r3, [sp, #32]
 8008af8:	9b04      	ldr	r3, [sp, #16]
 8008afa:	f003 0301 	and.w	r3, r3, #1
 8008afe:	462f      	mov	r7, r5
 8008b00:	9306      	str	r3, [sp, #24]
 8008b02:	4605      	mov	r5, r0
 8008b04:	9b00      	ldr	r3, [sp, #0]
 8008b06:	9802      	ldr	r0, [sp, #8]
 8008b08:	4621      	mov	r1, r4
 8008b0a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8008b0e:	f7ff fa89 	bl	8008024 <quorem>
 8008b12:	4603      	mov	r3, r0
 8008b14:	3330      	adds	r3, #48	@ 0x30
 8008b16:	9003      	str	r0, [sp, #12]
 8008b18:	4639      	mov	r1, r7
 8008b1a:	9802      	ldr	r0, [sp, #8]
 8008b1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b1e:	f000 fe07 	bl	8009730 <__mcmp>
 8008b22:	462a      	mov	r2, r5
 8008b24:	9004      	str	r0, [sp, #16]
 8008b26:	4621      	mov	r1, r4
 8008b28:	4648      	mov	r0, r9
 8008b2a:	f000 fe1d 	bl	8009768 <__mdiff>
 8008b2e:	68c2      	ldr	r2, [r0, #12]
 8008b30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b32:	4606      	mov	r6, r0
 8008b34:	bb02      	cbnz	r2, 8008b78 <_dtoa_r+0xa40>
 8008b36:	4601      	mov	r1, r0
 8008b38:	9802      	ldr	r0, [sp, #8]
 8008b3a:	f000 fdf9 	bl	8009730 <__mcmp>
 8008b3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b40:	4602      	mov	r2, r0
 8008b42:	4631      	mov	r1, r6
 8008b44:	4648      	mov	r0, r9
 8008b46:	920c      	str	r2, [sp, #48]	@ 0x30
 8008b48:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b4a:	f000 fbbf 	bl	80092cc <_Bfree>
 8008b4e:	9b07      	ldr	r3, [sp, #28]
 8008b50:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008b52:	9e00      	ldr	r6, [sp, #0]
 8008b54:	ea42 0103 	orr.w	r1, r2, r3
 8008b58:	9b06      	ldr	r3, [sp, #24]
 8008b5a:	4319      	orrs	r1, r3
 8008b5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b5e:	d10d      	bne.n	8008b7c <_dtoa_r+0xa44>
 8008b60:	2b39      	cmp	r3, #57	@ 0x39
 8008b62:	d027      	beq.n	8008bb4 <_dtoa_r+0xa7c>
 8008b64:	9a04      	ldr	r2, [sp, #16]
 8008b66:	2a00      	cmp	r2, #0
 8008b68:	dd01      	ble.n	8008b6e <_dtoa_r+0xa36>
 8008b6a:	9b03      	ldr	r3, [sp, #12]
 8008b6c:	3331      	adds	r3, #49	@ 0x31
 8008b6e:	f88b 3000 	strb.w	r3, [fp]
 8008b72:	e52e      	b.n	80085d2 <_dtoa_r+0x49a>
 8008b74:	4628      	mov	r0, r5
 8008b76:	e7b9      	b.n	8008aec <_dtoa_r+0x9b4>
 8008b78:	2201      	movs	r2, #1
 8008b7a:	e7e2      	b.n	8008b42 <_dtoa_r+0xa0a>
 8008b7c:	9904      	ldr	r1, [sp, #16]
 8008b7e:	2900      	cmp	r1, #0
 8008b80:	db04      	blt.n	8008b8c <_dtoa_r+0xa54>
 8008b82:	9807      	ldr	r0, [sp, #28]
 8008b84:	4301      	orrs	r1, r0
 8008b86:	9806      	ldr	r0, [sp, #24]
 8008b88:	4301      	orrs	r1, r0
 8008b8a:	d120      	bne.n	8008bce <_dtoa_r+0xa96>
 8008b8c:	2a00      	cmp	r2, #0
 8008b8e:	ddee      	ble.n	8008b6e <_dtoa_r+0xa36>
 8008b90:	9902      	ldr	r1, [sp, #8]
 8008b92:	9300      	str	r3, [sp, #0]
 8008b94:	2201      	movs	r2, #1
 8008b96:	4648      	mov	r0, r9
 8008b98:	f000 fd5e 	bl	8009658 <__lshift>
 8008b9c:	4621      	mov	r1, r4
 8008b9e:	9002      	str	r0, [sp, #8]
 8008ba0:	f000 fdc6 	bl	8009730 <__mcmp>
 8008ba4:	2800      	cmp	r0, #0
 8008ba6:	9b00      	ldr	r3, [sp, #0]
 8008ba8:	dc02      	bgt.n	8008bb0 <_dtoa_r+0xa78>
 8008baa:	d1e0      	bne.n	8008b6e <_dtoa_r+0xa36>
 8008bac:	07da      	lsls	r2, r3, #31
 8008bae:	d5de      	bpl.n	8008b6e <_dtoa_r+0xa36>
 8008bb0:	2b39      	cmp	r3, #57	@ 0x39
 8008bb2:	d1da      	bne.n	8008b6a <_dtoa_r+0xa32>
 8008bb4:	2339      	movs	r3, #57	@ 0x39
 8008bb6:	f88b 3000 	strb.w	r3, [fp]
 8008bba:	4633      	mov	r3, r6
 8008bbc:	461e      	mov	r6, r3
 8008bbe:	3b01      	subs	r3, #1
 8008bc0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008bc4:	2a39      	cmp	r2, #57	@ 0x39
 8008bc6:	d04e      	beq.n	8008c66 <_dtoa_r+0xb2e>
 8008bc8:	3201      	adds	r2, #1
 8008bca:	701a      	strb	r2, [r3, #0]
 8008bcc:	e501      	b.n	80085d2 <_dtoa_r+0x49a>
 8008bce:	2a00      	cmp	r2, #0
 8008bd0:	dd03      	ble.n	8008bda <_dtoa_r+0xaa2>
 8008bd2:	2b39      	cmp	r3, #57	@ 0x39
 8008bd4:	d0ee      	beq.n	8008bb4 <_dtoa_r+0xa7c>
 8008bd6:	3301      	adds	r3, #1
 8008bd8:	e7c9      	b.n	8008b6e <_dtoa_r+0xa36>
 8008bda:	9a00      	ldr	r2, [sp, #0]
 8008bdc:	9908      	ldr	r1, [sp, #32]
 8008bde:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008be2:	428a      	cmp	r2, r1
 8008be4:	d028      	beq.n	8008c38 <_dtoa_r+0xb00>
 8008be6:	9902      	ldr	r1, [sp, #8]
 8008be8:	2300      	movs	r3, #0
 8008bea:	220a      	movs	r2, #10
 8008bec:	4648      	mov	r0, r9
 8008bee:	f000 fb8f 	bl	8009310 <__multadd>
 8008bf2:	42af      	cmp	r7, r5
 8008bf4:	9002      	str	r0, [sp, #8]
 8008bf6:	f04f 0300 	mov.w	r3, #0
 8008bfa:	f04f 020a 	mov.w	r2, #10
 8008bfe:	4639      	mov	r1, r7
 8008c00:	4648      	mov	r0, r9
 8008c02:	d107      	bne.n	8008c14 <_dtoa_r+0xadc>
 8008c04:	f000 fb84 	bl	8009310 <__multadd>
 8008c08:	4607      	mov	r7, r0
 8008c0a:	4605      	mov	r5, r0
 8008c0c:	9b00      	ldr	r3, [sp, #0]
 8008c0e:	3301      	adds	r3, #1
 8008c10:	9300      	str	r3, [sp, #0]
 8008c12:	e777      	b.n	8008b04 <_dtoa_r+0x9cc>
 8008c14:	f000 fb7c 	bl	8009310 <__multadd>
 8008c18:	4629      	mov	r1, r5
 8008c1a:	4607      	mov	r7, r0
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	220a      	movs	r2, #10
 8008c20:	4648      	mov	r0, r9
 8008c22:	f000 fb75 	bl	8009310 <__multadd>
 8008c26:	4605      	mov	r5, r0
 8008c28:	e7f0      	b.n	8008c0c <_dtoa_r+0xad4>
 8008c2a:	f1bb 0f00 	cmp.w	fp, #0
 8008c2e:	bfcc      	ite	gt
 8008c30:	465e      	movgt	r6, fp
 8008c32:	2601      	movle	r6, #1
 8008c34:	4456      	add	r6, sl
 8008c36:	2700      	movs	r7, #0
 8008c38:	9902      	ldr	r1, [sp, #8]
 8008c3a:	9300      	str	r3, [sp, #0]
 8008c3c:	2201      	movs	r2, #1
 8008c3e:	4648      	mov	r0, r9
 8008c40:	f000 fd0a 	bl	8009658 <__lshift>
 8008c44:	4621      	mov	r1, r4
 8008c46:	9002      	str	r0, [sp, #8]
 8008c48:	f000 fd72 	bl	8009730 <__mcmp>
 8008c4c:	2800      	cmp	r0, #0
 8008c4e:	dcb4      	bgt.n	8008bba <_dtoa_r+0xa82>
 8008c50:	d102      	bne.n	8008c58 <_dtoa_r+0xb20>
 8008c52:	9b00      	ldr	r3, [sp, #0]
 8008c54:	07db      	lsls	r3, r3, #31
 8008c56:	d4b0      	bmi.n	8008bba <_dtoa_r+0xa82>
 8008c58:	4633      	mov	r3, r6
 8008c5a:	461e      	mov	r6, r3
 8008c5c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c60:	2a30      	cmp	r2, #48	@ 0x30
 8008c62:	d0fa      	beq.n	8008c5a <_dtoa_r+0xb22>
 8008c64:	e4b5      	b.n	80085d2 <_dtoa_r+0x49a>
 8008c66:	459a      	cmp	sl, r3
 8008c68:	d1a8      	bne.n	8008bbc <_dtoa_r+0xa84>
 8008c6a:	2331      	movs	r3, #49	@ 0x31
 8008c6c:	f108 0801 	add.w	r8, r8, #1
 8008c70:	f88a 3000 	strb.w	r3, [sl]
 8008c74:	e4ad      	b.n	80085d2 <_dtoa_r+0x49a>
 8008c76:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008c78:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8008cd4 <_dtoa_r+0xb9c>
 8008c7c:	b11b      	cbz	r3, 8008c86 <_dtoa_r+0xb4e>
 8008c7e:	f10a 0308 	add.w	r3, sl, #8
 8008c82:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008c84:	6013      	str	r3, [r2, #0]
 8008c86:	4650      	mov	r0, sl
 8008c88:	b017      	add	sp, #92	@ 0x5c
 8008c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c8e:	9b07      	ldr	r3, [sp, #28]
 8008c90:	2b01      	cmp	r3, #1
 8008c92:	f77f ae2e 	ble.w	80088f2 <_dtoa_r+0x7ba>
 8008c96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008c98:	9308      	str	r3, [sp, #32]
 8008c9a:	2001      	movs	r0, #1
 8008c9c:	e64d      	b.n	800893a <_dtoa_r+0x802>
 8008c9e:	f1bb 0f00 	cmp.w	fp, #0
 8008ca2:	f77f aed9 	ble.w	8008a58 <_dtoa_r+0x920>
 8008ca6:	4656      	mov	r6, sl
 8008ca8:	9802      	ldr	r0, [sp, #8]
 8008caa:	4621      	mov	r1, r4
 8008cac:	f7ff f9ba 	bl	8008024 <quorem>
 8008cb0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8008cb4:	f806 3b01 	strb.w	r3, [r6], #1
 8008cb8:	eba6 020a 	sub.w	r2, r6, sl
 8008cbc:	4593      	cmp	fp, r2
 8008cbe:	ddb4      	ble.n	8008c2a <_dtoa_r+0xaf2>
 8008cc0:	9902      	ldr	r1, [sp, #8]
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	220a      	movs	r2, #10
 8008cc6:	4648      	mov	r0, r9
 8008cc8:	f000 fb22 	bl	8009310 <__multadd>
 8008ccc:	9002      	str	r0, [sp, #8]
 8008cce:	e7eb      	b.n	8008ca8 <_dtoa_r+0xb70>
 8008cd0:	0800b040 	.word	0x0800b040
 8008cd4:	0800afc4 	.word	0x0800afc4

08008cd8 <__ssputs_r>:
 8008cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cdc:	688e      	ldr	r6, [r1, #8]
 8008cde:	461f      	mov	r7, r3
 8008ce0:	42be      	cmp	r6, r7
 8008ce2:	680b      	ldr	r3, [r1, #0]
 8008ce4:	4682      	mov	sl, r0
 8008ce6:	460c      	mov	r4, r1
 8008ce8:	4690      	mov	r8, r2
 8008cea:	d82d      	bhi.n	8008d48 <__ssputs_r+0x70>
 8008cec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008cf0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008cf4:	d026      	beq.n	8008d44 <__ssputs_r+0x6c>
 8008cf6:	6965      	ldr	r5, [r4, #20]
 8008cf8:	6909      	ldr	r1, [r1, #16]
 8008cfa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008cfe:	eba3 0901 	sub.w	r9, r3, r1
 8008d02:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008d06:	1c7b      	adds	r3, r7, #1
 8008d08:	444b      	add	r3, r9
 8008d0a:	106d      	asrs	r5, r5, #1
 8008d0c:	429d      	cmp	r5, r3
 8008d0e:	bf38      	it	cc
 8008d10:	461d      	movcc	r5, r3
 8008d12:	0553      	lsls	r3, r2, #21
 8008d14:	d527      	bpl.n	8008d66 <__ssputs_r+0x8e>
 8008d16:	4629      	mov	r1, r5
 8008d18:	f000 f960 	bl	8008fdc <_malloc_r>
 8008d1c:	4606      	mov	r6, r0
 8008d1e:	b360      	cbz	r0, 8008d7a <__ssputs_r+0xa2>
 8008d20:	6921      	ldr	r1, [r4, #16]
 8008d22:	464a      	mov	r2, r9
 8008d24:	f7ff f970 	bl	8008008 <memcpy>
 8008d28:	89a3      	ldrh	r3, [r4, #12]
 8008d2a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008d2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d32:	81a3      	strh	r3, [r4, #12]
 8008d34:	6126      	str	r6, [r4, #16]
 8008d36:	6165      	str	r5, [r4, #20]
 8008d38:	444e      	add	r6, r9
 8008d3a:	eba5 0509 	sub.w	r5, r5, r9
 8008d3e:	6026      	str	r6, [r4, #0]
 8008d40:	60a5      	str	r5, [r4, #8]
 8008d42:	463e      	mov	r6, r7
 8008d44:	42be      	cmp	r6, r7
 8008d46:	d900      	bls.n	8008d4a <__ssputs_r+0x72>
 8008d48:	463e      	mov	r6, r7
 8008d4a:	6820      	ldr	r0, [r4, #0]
 8008d4c:	4632      	mov	r2, r6
 8008d4e:	4641      	mov	r1, r8
 8008d50:	f000 fe67 	bl	8009a22 <memmove>
 8008d54:	68a3      	ldr	r3, [r4, #8]
 8008d56:	1b9b      	subs	r3, r3, r6
 8008d58:	60a3      	str	r3, [r4, #8]
 8008d5a:	6823      	ldr	r3, [r4, #0]
 8008d5c:	4433      	add	r3, r6
 8008d5e:	6023      	str	r3, [r4, #0]
 8008d60:	2000      	movs	r0, #0
 8008d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d66:	462a      	mov	r2, r5
 8008d68:	f000 fe2d 	bl	80099c6 <_realloc_r>
 8008d6c:	4606      	mov	r6, r0
 8008d6e:	2800      	cmp	r0, #0
 8008d70:	d1e0      	bne.n	8008d34 <__ssputs_r+0x5c>
 8008d72:	6921      	ldr	r1, [r4, #16]
 8008d74:	4650      	mov	r0, sl
 8008d76:	f000 fef7 	bl	8009b68 <_free_r>
 8008d7a:	230c      	movs	r3, #12
 8008d7c:	f8ca 3000 	str.w	r3, [sl]
 8008d80:	89a3      	ldrh	r3, [r4, #12]
 8008d82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d86:	81a3      	strh	r3, [r4, #12]
 8008d88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008d8c:	e7e9      	b.n	8008d62 <__ssputs_r+0x8a>
	...

08008d90 <_svfiprintf_r>:
 8008d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d94:	4698      	mov	r8, r3
 8008d96:	898b      	ldrh	r3, [r1, #12]
 8008d98:	061b      	lsls	r3, r3, #24
 8008d9a:	b09d      	sub	sp, #116	@ 0x74
 8008d9c:	4607      	mov	r7, r0
 8008d9e:	460d      	mov	r5, r1
 8008da0:	4614      	mov	r4, r2
 8008da2:	d510      	bpl.n	8008dc6 <_svfiprintf_r+0x36>
 8008da4:	690b      	ldr	r3, [r1, #16]
 8008da6:	b973      	cbnz	r3, 8008dc6 <_svfiprintf_r+0x36>
 8008da8:	2140      	movs	r1, #64	@ 0x40
 8008daa:	f000 f917 	bl	8008fdc <_malloc_r>
 8008dae:	6028      	str	r0, [r5, #0]
 8008db0:	6128      	str	r0, [r5, #16]
 8008db2:	b930      	cbnz	r0, 8008dc2 <_svfiprintf_r+0x32>
 8008db4:	230c      	movs	r3, #12
 8008db6:	603b      	str	r3, [r7, #0]
 8008db8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008dbc:	b01d      	add	sp, #116	@ 0x74
 8008dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dc2:	2340      	movs	r3, #64	@ 0x40
 8008dc4:	616b      	str	r3, [r5, #20]
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	9309      	str	r3, [sp, #36]	@ 0x24
 8008dca:	2320      	movs	r3, #32
 8008dcc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008dd0:	f8cd 800c 	str.w	r8, [sp, #12]
 8008dd4:	2330      	movs	r3, #48	@ 0x30
 8008dd6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008f74 <_svfiprintf_r+0x1e4>
 8008dda:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008dde:	f04f 0901 	mov.w	r9, #1
 8008de2:	4623      	mov	r3, r4
 8008de4:	469a      	mov	sl, r3
 8008de6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008dea:	b10a      	cbz	r2, 8008df0 <_svfiprintf_r+0x60>
 8008dec:	2a25      	cmp	r2, #37	@ 0x25
 8008dee:	d1f9      	bne.n	8008de4 <_svfiprintf_r+0x54>
 8008df0:	ebba 0b04 	subs.w	fp, sl, r4
 8008df4:	d00b      	beq.n	8008e0e <_svfiprintf_r+0x7e>
 8008df6:	465b      	mov	r3, fp
 8008df8:	4622      	mov	r2, r4
 8008dfa:	4629      	mov	r1, r5
 8008dfc:	4638      	mov	r0, r7
 8008dfe:	f7ff ff6b 	bl	8008cd8 <__ssputs_r>
 8008e02:	3001      	adds	r0, #1
 8008e04:	f000 80a7 	beq.w	8008f56 <_svfiprintf_r+0x1c6>
 8008e08:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e0a:	445a      	add	r2, fp
 8008e0c:	9209      	str	r2, [sp, #36]	@ 0x24
 8008e0e:	f89a 3000 	ldrb.w	r3, [sl]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	f000 809f 	beq.w	8008f56 <_svfiprintf_r+0x1c6>
 8008e18:	2300      	movs	r3, #0
 8008e1a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008e1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e22:	f10a 0a01 	add.w	sl, sl, #1
 8008e26:	9304      	str	r3, [sp, #16]
 8008e28:	9307      	str	r3, [sp, #28]
 8008e2a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008e2e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008e30:	4654      	mov	r4, sl
 8008e32:	2205      	movs	r2, #5
 8008e34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e38:	484e      	ldr	r0, [pc, #312]	@ (8008f74 <_svfiprintf_r+0x1e4>)
 8008e3a:	f7f7 f9e9 	bl	8000210 <memchr>
 8008e3e:	9a04      	ldr	r2, [sp, #16]
 8008e40:	b9d8      	cbnz	r0, 8008e7a <_svfiprintf_r+0xea>
 8008e42:	06d0      	lsls	r0, r2, #27
 8008e44:	bf44      	itt	mi
 8008e46:	2320      	movmi	r3, #32
 8008e48:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e4c:	0711      	lsls	r1, r2, #28
 8008e4e:	bf44      	itt	mi
 8008e50:	232b      	movmi	r3, #43	@ 0x2b
 8008e52:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e56:	f89a 3000 	ldrb.w	r3, [sl]
 8008e5a:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e5c:	d015      	beq.n	8008e8a <_svfiprintf_r+0xfa>
 8008e5e:	9a07      	ldr	r2, [sp, #28]
 8008e60:	4654      	mov	r4, sl
 8008e62:	2000      	movs	r0, #0
 8008e64:	f04f 0c0a 	mov.w	ip, #10
 8008e68:	4621      	mov	r1, r4
 8008e6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e6e:	3b30      	subs	r3, #48	@ 0x30
 8008e70:	2b09      	cmp	r3, #9
 8008e72:	d94b      	bls.n	8008f0c <_svfiprintf_r+0x17c>
 8008e74:	b1b0      	cbz	r0, 8008ea4 <_svfiprintf_r+0x114>
 8008e76:	9207      	str	r2, [sp, #28]
 8008e78:	e014      	b.n	8008ea4 <_svfiprintf_r+0x114>
 8008e7a:	eba0 0308 	sub.w	r3, r0, r8
 8008e7e:	fa09 f303 	lsl.w	r3, r9, r3
 8008e82:	4313      	orrs	r3, r2
 8008e84:	9304      	str	r3, [sp, #16]
 8008e86:	46a2      	mov	sl, r4
 8008e88:	e7d2      	b.n	8008e30 <_svfiprintf_r+0xa0>
 8008e8a:	9b03      	ldr	r3, [sp, #12]
 8008e8c:	1d19      	adds	r1, r3, #4
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	9103      	str	r1, [sp, #12]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	bfbb      	ittet	lt
 8008e96:	425b      	neglt	r3, r3
 8008e98:	f042 0202 	orrlt.w	r2, r2, #2
 8008e9c:	9307      	strge	r3, [sp, #28]
 8008e9e:	9307      	strlt	r3, [sp, #28]
 8008ea0:	bfb8      	it	lt
 8008ea2:	9204      	strlt	r2, [sp, #16]
 8008ea4:	7823      	ldrb	r3, [r4, #0]
 8008ea6:	2b2e      	cmp	r3, #46	@ 0x2e
 8008ea8:	d10a      	bne.n	8008ec0 <_svfiprintf_r+0x130>
 8008eaa:	7863      	ldrb	r3, [r4, #1]
 8008eac:	2b2a      	cmp	r3, #42	@ 0x2a
 8008eae:	d132      	bne.n	8008f16 <_svfiprintf_r+0x186>
 8008eb0:	9b03      	ldr	r3, [sp, #12]
 8008eb2:	1d1a      	adds	r2, r3, #4
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	9203      	str	r2, [sp, #12]
 8008eb8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008ebc:	3402      	adds	r4, #2
 8008ebe:	9305      	str	r3, [sp, #20]
 8008ec0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008f84 <_svfiprintf_r+0x1f4>
 8008ec4:	7821      	ldrb	r1, [r4, #0]
 8008ec6:	2203      	movs	r2, #3
 8008ec8:	4650      	mov	r0, sl
 8008eca:	f7f7 f9a1 	bl	8000210 <memchr>
 8008ece:	b138      	cbz	r0, 8008ee0 <_svfiprintf_r+0x150>
 8008ed0:	9b04      	ldr	r3, [sp, #16]
 8008ed2:	eba0 000a 	sub.w	r0, r0, sl
 8008ed6:	2240      	movs	r2, #64	@ 0x40
 8008ed8:	4082      	lsls	r2, r0
 8008eda:	4313      	orrs	r3, r2
 8008edc:	3401      	adds	r4, #1
 8008ede:	9304      	str	r3, [sp, #16]
 8008ee0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ee4:	4824      	ldr	r0, [pc, #144]	@ (8008f78 <_svfiprintf_r+0x1e8>)
 8008ee6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008eea:	2206      	movs	r2, #6
 8008eec:	f7f7 f990 	bl	8000210 <memchr>
 8008ef0:	2800      	cmp	r0, #0
 8008ef2:	d036      	beq.n	8008f62 <_svfiprintf_r+0x1d2>
 8008ef4:	4b21      	ldr	r3, [pc, #132]	@ (8008f7c <_svfiprintf_r+0x1ec>)
 8008ef6:	bb1b      	cbnz	r3, 8008f40 <_svfiprintf_r+0x1b0>
 8008ef8:	9b03      	ldr	r3, [sp, #12]
 8008efa:	3307      	adds	r3, #7
 8008efc:	f023 0307 	bic.w	r3, r3, #7
 8008f00:	3308      	adds	r3, #8
 8008f02:	9303      	str	r3, [sp, #12]
 8008f04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f06:	4433      	add	r3, r6
 8008f08:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f0a:	e76a      	b.n	8008de2 <_svfiprintf_r+0x52>
 8008f0c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f10:	460c      	mov	r4, r1
 8008f12:	2001      	movs	r0, #1
 8008f14:	e7a8      	b.n	8008e68 <_svfiprintf_r+0xd8>
 8008f16:	2300      	movs	r3, #0
 8008f18:	3401      	adds	r4, #1
 8008f1a:	9305      	str	r3, [sp, #20]
 8008f1c:	4619      	mov	r1, r3
 8008f1e:	f04f 0c0a 	mov.w	ip, #10
 8008f22:	4620      	mov	r0, r4
 8008f24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f28:	3a30      	subs	r2, #48	@ 0x30
 8008f2a:	2a09      	cmp	r2, #9
 8008f2c:	d903      	bls.n	8008f36 <_svfiprintf_r+0x1a6>
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d0c6      	beq.n	8008ec0 <_svfiprintf_r+0x130>
 8008f32:	9105      	str	r1, [sp, #20]
 8008f34:	e7c4      	b.n	8008ec0 <_svfiprintf_r+0x130>
 8008f36:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f3a:	4604      	mov	r4, r0
 8008f3c:	2301      	movs	r3, #1
 8008f3e:	e7f0      	b.n	8008f22 <_svfiprintf_r+0x192>
 8008f40:	ab03      	add	r3, sp, #12
 8008f42:	9300      	str	r3, [sp, #0]
 8008f44:	462a      	mov	r2, r5
 8008f46:	4b0e      	ldr	r3, [pc, #56]	@ (8008f80 <_svfiprintf_r+0x1f0>)
 8008f48:	a904      	add	r1, sp, #16
 8008f4a:	4638      	mov	r0, r7
 8008f4c:	f7fe fb74 	bl	8007638 <_printf_float>
 8008f50:	1c42      	adds	r2, r0, #1
 8008f52:	4606      	mov	r6, r0
 8008f54:	d1d6      	bne.n	8008f04 <_svfiprintf_r+0x174>
 8008f56:	89ab      	ldrh	r3, [r5, #12]
 8008f58:	065b      	lsls	r3, r3, #25
 8008f5a:	f53f af2d 	bmi.w	8008db8 <_svfiprintf_r+0x28>
 8008f5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008f60:	e72c      	b.n	8008dbc <_svfiprintf_r+0x2c>
 8008f62:	ab03      	add	r3, sp, #12
 8008f64:	9300      	str	r3, [sp, #0]
 8008f66:	462a      	mov	r2, r5
 8008f68:	4b05      	ldr	r3, [pc, #20]	@ (8008f80 <_svfiprintf_r+0x1f0>)
 8008f6a:	a904      	add	r1, sp, #16
 8008f6c:	4638      	mov	r0, r7
 8008f6e:	f7fe fdfb 	bl	8007b68 <_printf_i>
 8008f72:	e7ed      	b.n	8008f50 <_svfiprintf_r+0x1c0>
 8008f74:	0800b051 	.word	0x0800b051
 8008f78:	0800b05b 	.word	0x0800b05b
 8008f7c:	08007639 	.word	0x08007639
 8008f80:	08008cd9 	.word	0x08008cd9
 8008f84:	0800b057 	.word	0x0800b057

08008f88 <malloc>:
 8008f88:	4b02      	ldr	r3, [pc, #8]	@ (8008f94 <malloc+0xc>)
 8008f8a:	4601      	mov	r1, r0
 8008f8c:	6818      	ldr	r0, [r3, #0]
 8008f8e:	f000 b825 	b.w	8008fdc <_malloc_r>
 8008f92:	bf00      	nop
 8008f94:	2000002c 	.word	0x2000002c

08008f98 <sbrk_aligned>:
 8008f98:	b570      	push	{r4, r5, r6, lr}
 8008f9a:	4e0f      	ldr	r6, [pc, #60]	@ (8008fd8 <sbrk_aligned+0x40>)
 8008f9c:	460c      	mov	r4, r1
 8008f9e:	6831      	ldr	r1, [r6, #0]
 8008fa0:	4605      	mov	r5, r0
 8008fa2:	b911      	cbnz	r1, 8008faa <sbrk_aligned+0x12>
 8008fa4:	f000 fd7c 	bl	8009aa0 <_sbrk_r>
 8008fa8:	6030      	str	r0, [r6, #0]
 8008faa:	4621      	mov	r1, r4
 8008fac:	4628      	mov	r0, r5
 8008fae:	f000 fd77 	bl	8009aa0 <_sbrk_r>
 8008fb2:	1c43      	adds	r3, r0, #1
 8008fb4:	d103      	bne.n	8008fbe <sbrk_aligned+0x26>
 8008fb6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8008fba:	4620      	mov	r0, r4
 8008fbc:	bd70      	pop	{r4, r5, r6, pc}
 8008fbe:	1cc4      	adds	r4, r0, #3
 8008fc0:	f024 0403 	bic.w	r4, r4, #3
 8008fc4:	42a0      	cmp	r0, r4
 8008fc6:	d0f8      	beq.n	8008fba <sbrk_aligned+0x22>
 8008fc8:	1a21      	subs	r1, r4, r0
 8008fca:	4628      	mov	r0, r5
 8008fcc:	f000 fd68 	bl	8009aa0 <_sbrk_r>
 8008fd0:	3001      	adds	r0, #1
 8008fd2:	d1f2      	bne.n	8008fba <sbrk_aligned+0x22>
 8008fd4:	e7ef      	b.n	8008fb6 <sbrk_aligned+0x1e>
 8008fd6:	bf00      	nop
 8008fd8:	20005144 	.word	0x20005144

08008fdc <_malloc_r>:
 8008fdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fe0:	1ccd      	adds	r5, r1, #3
 8008fe2:	f025 0503 	bic.w	r5, r5, #3
 8008fe6:	3508      	adds	r5, #8
 8008fe8:	2d0c      	cmp	r5, #12
 8008fea:	bf38      	it	cc
 8008fec:	250c      	movcc	r5, #12
 8008fee:	2d00      	cmp	r5, #0
 8008ff0:	4606      	mov	r6, r0
 8008ff2:	db01      	blt.n	8008ff8 <_malloc_r+0x1c>
 8008ff4:	42a9      	cmp	r1, r5
 8008ff6:	d904      	bls.n	8009002 <_malloc_r+0x26>
 8008ff8:	230c      	movs	r3, #12
 8008ffa:	6033      	str	r3, [r6, #0]
 8008ffc:	2000      	movs	r0, #0
 8008ffe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009002:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80090d8 <_malloc_r+0xfc>
 8009006:	f000 f915 	bl	8009234 <__malloc_lock>
 800900a:	f8d8 3000 	ldr.w	r3, [r8]
 800900e:	461c      	mov	r4, r3
 8009010:	bb44      	cbnz	r4, 8009064 <_malloc_r+0x88>
 8009012:	4629      	mov	r1, r5
 8009014:	4630      	mov	r0, r6
 8009016:	f7ff ffbf 	bl	8008f98 <sbrk_aligned>
 800901a:	1c43      	adds	r3, r0, #1
 800901c:	4604      	mov	r4, r0
 800901e:	d158      	bne.n	80090d2 <_malloc_r+0xf6>
 8009020:	f8d8 4000 	ldr.w	r4, [r8]
 8009024:	4627      	mov	r7, r4
 8009026:	2f00      	cmp	r7, #0
 8009028:	d143      	bne.n	80090b2 <_malloc_r+0xd6>
 800902a:	2c00      	cmp	r4, #0
 800902c:	d04b      	beq.n	80090c6 <_malloc_r+0xea>
 800902e:	6823      	ldr	r3, [r4, #0]
 8009030:	4639      	mov	r1, r7
 8009032:	4630      	mov	r0, r6
 8009034:	eb04 0903 	add.w	r9, r4, r3
 8009038:	f000 fd32 	bl	8009aa0 <_sbrk_r>
 800903c:	4581      	cmp	r9, r0
 800903e:	d142      	bne.n	80090c6 <_malloc_r+0xea>
 8009040:	6821      	ldr	r1, [r4, #0]
 8009042:	1a6d      	subs	r5, r5, r1
 8009044:	4629      	mov	r1, r5
 8009046:	4630      	mov	r0, r6
 8009048:	f7ff ffa6 	bl	8008f98 <sbrk_aligned>
 800904c:	3001      	adds	r0, #1
 800904e:	d03a      	beq.n	80090c6 <_malloc_r+0xea>
 8009050:	6823      	ldr	r3, [r4, #0]
 8009052:	442b      	add	r3, r5
 8009054:	6023      	str	r3, [r4, #0]
 8009056:	f8d8 3000 	ldr.w	r3, [r8]
 800905a:	685a      	ldr	r2, [r3, #4]
 800905c:	bb62      	cbnz	r2, 80090b8 <_malloc_r+0xdc>
 800905e:	f8c8 7000 	str.w	r7, [r8]
 8009062:	e00f      	b.n	8009084 <_malloc_r+0xa8>
 8009064:	6822      	ldr	r2, [r4, #0]
 8009066:	1b52      	subs	r2, r2, r5
 8009068:	d420      	bmi.n	80090ac <_malloc_r+0xd0>
 800906a:	2a0b      	cmp	r2, #11
 800906c:	d917      	bls.n	800909e <_malloc_r+0xc2>
 800906e:	1961      	adds	r1, r4, r5
 8009070:	42a3      	cmp	r3, r4
 8009072:	6025      	str	r5, [r4, #0]
 8009074:	bf18      	it	ne
 8009076:	6059      	strne	r1, [r3, #4]
 8009078:	6863      	ldr	r3, [r4, #4]
 800907a:	bf08      	it	eq
 800907c:	f8c8 1000 	streq.w	r1, [r8]
 8009080:	5162      	str	r2, [r4, r5]
 8009082:	604b      	str	r3, [r1, #4]
 8009084:	4630      	mov	r0, r6
 8009086:	f000 f8db 	bl	8009240 <__malloc_unlock>
 800908a:	f104 000b 	add.w	r0, r4, #11
 800908e:	1d23      	adds	r3, r4, #4
 8009090:	f020 0007 	bic.w	r0, r0, #7
 8009094:	1ac2      	subs	r2, r0, r3
 8009096:	bf1c      	itt	ne
 8009098:	1a1b      	subne	r3, r3, r0
 800909a:	50a3      	strne	r3, [r4, r2]
 800909c:	e7af      	b.n	8008ffe <_malloc_r+0x22>
 800909e:	6862      	ldr	r2, [r4, #4]
 80090a0:	42a3      	cmp	r3, r4
 80090a2:	bf0c      	ite	eq
 80090a4:	f8c8 2000 	streq.w	r2, [r8]
 80090a8:	605a      	strne	r2, [r3, #4]
 80090aa:	e7eb      	b.n	8009084 <_malloc_r+0xa8>
 80090ac:	4623      	mov	r3, r4
 80090ae:	6864      	ldr	r4, [r4, #4]
 80090b0:	e7ae      	b.n	8009010 <_malloc_r+0x34>
 80090b2:	463c      	mov	r4, r7
 80090b4:	687f      	ldr	r7, [r7, #4]
 80090b6:	e7b6      	b.n	8009026 <_malloc_r+0x4a>
 80090b8:	461a      	mov	r2, r3
 80090ba:	685b      	ldr	r3, [r3, #4]
 80090bc:	42a3      	cmp	r3, r4
 80090be:	d1fb      	bne.n	80090b8 <_malloc_r+0xdc>
 80090c0:	2300      	movs	r3, #0
 80090c2:	6053      	str	r3, [r2, #4]
 80090c4:	e7de      	b.n	8009084 <_malloc_r+0xa8>
 80090c6:	230c      	movs	r3, #12
 80090c8:	6033      	str	r3, [r6, #0]
 80090ca:	4630      	mov	r0, r6
 80090cc:	f000 f8b8 	bl	8009240 <__malloc_unlock>
 80090d0:	e794      	b.n	8008ffc <_malloc_r+0x20>
 80090d2:	6005      	str	r5, [r0, #0]
 80090d4:	e7d6      	b.n	8009084 <_malloc_r+0xa8>
 80090d6:	bf00      	nop
 80090d8:	20005148 	.word	0x20005148

080090dc <__sflush_r>:
 80090dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80090e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090e4:	0716      	lsls	r6, r2, #28
 80090e6:	4605      	mov	r5, r0
 80090e8:	460c      	mov	r4, r1
 80090ea:	d454      	bmi.n	8009196 <__sflush_r+0xba>
 80090ec:	684b      	ldr	r3, [r1, #4]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	dc02      	bgt.n	80090f8 <__sflush_r+0x1c>
 80090f2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	dd48      	ble.n	800918a <__sflush_r+0xae>
 80090f8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80090fa:	2e00      	cmp	r6, #0
 80090fc:	d045      	beq.n	800918a <__sflush_r+0xae>
 80090fe:	2300      	movs	r3, #0
 8009100:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009104:	682f      	ldr	r7, [r5, #0]
 8009106:	6a21      	ldr	r1, [r4, #32]
 8009108:	602b      	str	r3, [r5, #0]
 800910a:	d030      	beq.n	800916e <__sflush_r+0x92>
 800910c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800910e:	89a3      	ldrh	r3, [r4, #12]
 8009110:	0759      	lsls	r1, r3, #29
 8009112:	d505      	bpl.n	8009120 <__sflush_r+0x44>
 8009114:	6863      	ldr	r3, [r4, #4]
 8009116:	1ad2      	subs	r2, r2, r3
 8009118:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800911a:	b10b      	cbz	r3, 8009120 <__sflush_r+0x44>
 800911c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800911e:	1ad2      	subs	r2, r2, r3
 8009120:	2300      	movs	r3, #0
 8009122:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009124:	6a21      	ldr	r1, [r4, #32]
 8009126:	4628      	mov	r0, r5
 8009128:	47b0      	blx	r6
 800912a:	1c43      	adds	r3, r0, #1
 800912c:	89a3      	ldrh	r3, [r4, #12]
 800912e:	d106      	bne.n	800913e <__sflush_r+0x62>
 8009130:	6829      	ldr	r1, [r5, #0]
 8009132:	291d      	cmp	r1, #29
 8009134:	d82b      	bhi.n	800918e <__sflush_r+0xb2>
 8009136:	4a2a      	ldr	r2, [pc, #168]	@ (80091e0 <__sflush_r+0x104>)
 8009138:	40ca      	lsrs	r2, r1
 800913a:	07d6      	lsls	r6, r2, #31
 800913c:	d527      	bpl.n	800918e <__sflush_r+0xb2>
 800913e:	2200      	movs	r2, #0
 8009140:	6062      	str	r2, [r4, #4]
 8009142:	04d9      	lsls	r1, r3, #19
 8009144:	6922      	ldr	r2, [r4, #16]
 8009146:	6022      	str	r2, [r4, #0]
 8009148:	d504      	bpl.n	8009154 <__sflush_r+0x78>
 800914a:	1c42      	adds	r2, r0, #1
 800914c:	d101      	bne.n	8009152 <__sflush_r+0x76>
 800914e:	682b      	ldr	r3, [r5, #0]
 8009150:	b903      	cbnz	r3, 8009154 <__sflush_r+0x78>
 8009152:	6560      	str	r0, [r4, #84]	@ 0x54
 8009154:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009156:	602f      	str	r7, [r5, #0]
 8009158:	b1b9      	cbz	r1, 800918a <__sflush_r+0xae>
 800915a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800915e:	4299      	cmp	r1, r3
 8009160:	d002      	beq.n	8009168 <__sflush_r+0x8c>
 8009162:	4628      	mov	r0, r5
 8009164:	f000 fd00 	bl	8009b68 <_free_r>
 8009168:	2300      	movs	r3, #0
 800916a:	6363      	str	r3, [r4, #52]	@ 0x34
 800916c:	e00d      	b.n	800918a <__sflush_r+0xae>
 800916e:	2301      	movs	r3, #1
 8009170:	4628      	mov	r0, r5
 8009172:	47b0      	blx	r6
 8009174:	4602      	mov	r2, r0
 8009176:	1c50      	adds	r0, r2, #1
 8009178:	d1c9      	bne.n	800910e <__sflush_r+0x32>
 800917a:	682b      	ldr	r3, [r5, #0]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d0c6      	beq.n	800910e <__sflush_r+0x32>
 8009180:	2b1d      	cmp	r3, #29
 8009182:	d001      	beq.n	8009188 <__sflush_r+0xac>
 8009184:	2b16      	cmp	r3, #22
 8009186:	d11e      	bne.n	80091c6 <__sflush_r+0xea>
 8009188:	602f      	str	r7, [r5, #0]
 800918a:	2000      	movs	r0, #0
 800918c:	e022      	b.n	80091d4 <__sflush_r+0xf8>
 800918e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009192:	b21b      	sxth	r3, r3
 8009194:	e01b      	b.n	80091ce <__sflush_r+0xf2>
 8009196:	690f      	ldr	r7, [r1, #16]
 8009198:	2f00      	cmp	r7, #0
 800919a:	d0f6      	beq.n	800918a <__sflush_r+0xae>
 800919c:	0793      	lsls	r3, r2, #30
 800919e:	680e      	ldr	r6, [r1, #0]
 80091a0:	bf08      	it	eq
 80091a2:	694b      	ldreq	r3, [r1, #20]
 80091a4:	600f      	str	r7, [r1, #0]
 80091a6:	bf18      	it	ne
 80091a8:	2300      	movne	r3, #0
 80091aa:	eba6 0807 	sub.w	r8, r6, r7
 80091ae:	608b      	str	r3, [r1, #8]
 80091b0:	f1b8 0f00 	cmp.w	r8, #0
 80091b4:	dde9      	ble.n	800918a <__sflush_r+0xae>
 80091b6:	6a21      	ldr	r1, [r4, #32]
 80091b8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80091ba:	4643      	mov	r3, r8
 80091bc:	463a      	mov	r2, r7
 80091be:	4628      	mov	r0, r5
 80091c0:	47b0      	blx	r6
 80091c2:	2800      	cmp	r0, #0
 80091c4:	dc08      	bgt.n	80091d8 <__sflush_r+0xfc>
 80091c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80091ce:	81a3      	strh	r3, [r4, #12]
 80091d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80091d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091d8:	4407      	add	r7, r0
 80091da:	eba8 0800 	sub.w	r8, r8, r0
 80091de:	e7e7      	b.n	80091b0 <__sflush_r+0xd4>
 80091e0:	20400001 	.word	0x20400001

080091e4 <_fflush_r>:
 80091e4:	b538      	push	{r3, r4, r5, lr}
 80091e6:	690b      	ldr	r3, [r1, #16]
 80091e8:	4605      	mov	r5, r0
 80091ea:	460c      	mov	r4, r1
 80091ec:	b913      	cbnz	r3, 80091f4 <_fflush_r+0x10>
 80091ee:	2500      	movs	r5, #0
 80091f0:	4628      	mov	r0, r5
 80091f2:	bd38      	pop	{r3, r4, r5, pc}
 80091f4:	b118      	cbz	r0, 80091fe <_fflush_r+0x1a>
 80091f6:	6a03      	ldr	r3, [r0, #32]
 80091f8:	b90b      	cbnz	r3, 80091fe <_fflush_r+0x1a>
 80091fa:	f7fe fe95 	bl	8007f28 <__sinit>
 80091fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d0f3      	beq.n	80091ee <_fflush_r+0xa>
 8009206:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009208:	07d0      	lsls	r0, r2, #31
 800920a:	d404      	bmi.n	8009216 <_fflush_r+0x32>
 800920c:	0599      	lsls	r1, r3, #22
 800920e:	d402      	bmi.n	8009216 <_fflush_r+0x32>
 8009210:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009212:	f7fe fef2 	bl	8007ffa <__retarget_lock_acquire_recursive>
 8009216:	4628      	mov	r0, r5
 8009218:	4621      	mov	r1, r4
 800921a:	f7ff ff5f 	bl	80090dc <__sflush_r>
 800921e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009220:	07da      	lsls	r2, r3, #31
 8009222:	4605      	mov	r5, r0
 8009224:	d4e4      	bmi.n	80091f0 <_fflush_r+0xc>
 8009226:	89a3      	ldrh	r3, [r4, #12]
 8009228:	059b      	lsls	r3, r3, #22
 800922a:	d4e1      	bmi.n	80091f0 <_fflush_r+0xc>
 800922c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800922e:	f7fe fee5 	bl	8007ffc <__retarget_lock_release_recursive>
 8009232:	e7dd      	b.n	80091f0 <_fflush_r+0xc>

08009234 <__malloc_lock>:
 8009234:	4801      	ldr	r0, [pc, #4]	@ (800923c <__malloc_lock+0x8>)
 8009236:	f7fe bee0 	b.w	8007ffa <__retarget_lock_acquire_recursive>
 800923a:	bf00      	nop
 800923c:	20005140 	.word	0x20005140

08009240 <__malloc_unlock>:
 8009240:	4801      	ldr	r0, [pc, #4]	@ (8009248 <__malloc_unlock+0x8>)
 8009242:	f7fe bedb 	b.w	8007ffc <__retarget_lock_release_recursive>
 8009246:	bf00      	nop
 8009248:	20005140 	.word	0x20005140

0800924c <_Balloc>:
 800924c:	b570      	push	{r4, r5, r6, lr}
 800924e:	69c6      	ldr	r6, [r0, #28]
 8009250:	4604      	mov	r4, r0
 8009252:	460d      	mov	r5, r1
 8009254:	b976      	cbnz	r6, 8009274 <_Balloc+0x28>
 8009256:	2010      	movs	r0, #16
 8009258:	f7ff fe96 	bl	8008f88 <malloc>
 800925c:	4602      	mov	r2, r0
 800925e:	61e0      	str	r0, [r4, #28]
 8009260:	b920      	cbnz	r0, 800926c <_Balloc+0x20>
 8009262:	4b18      	ldr	r3, [pc, #96]	@ (80092c4 <_Balloc+0x78>)
 8009264:	4818      	ldr	r0, [pc, #96]	@ (80092c8 <_Balloc+0x7c>)
 8009266:	216b      	movs	r1, #107	@ 0x6b
 8009268:	f000 fc4c 	bl	8009b04 <__assert_func>
 800926c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009270:	6006      	str	r6, [r0, #0]
 8009272:	60c6      	str	r6, [r0, #12]
 8009274:	69e6      	ldr	r6, [r4, #28]
 8009276:	68f3      	ldr	r3, [r6, #12]
 8009278:	b183      	cbz	r3, 800929c <_Balloc+0x50>
 800927a:	69e3      	ldr	r3, [r4, #28]
 800927c:	68db      	ldr	r3, [r3, #12]
 800927e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009282:	b9b8      	cbnz	r0, 80092b4 <_Balloc+0x68>
 8009284:	2101      	movs	r1, #1
 8009286:	fa01 f605 	lsl.w	r6, r1, r5
 800928a:	1d72      	adds	r2, r6, #5
 800928c:	0092      	lsls	r2, r2, #2
 800928e:	4620      	mov	r0, r4
 8009290:	f000 fc56 	bl	8009b40 <_calloc_r>
 8009294:	b160      	cbz	r0, 80092b0 <_Balloc+0x64>
 8009296:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800929a:	e00e      	b.n	80092ba <_Balloc+0x6e>
 800929c:	2221      	movs	r2, #33	@ 0x21
 800929e:	2104      	movs	r1, #4
 80092a0:	4620      	mov	r0, r4
 80092a2:	f000 fc4d 	bl	8009b40 <_calloc_r>
 80092a6:	69e3      	ldr	r3, [r4, #28]
 80092a8:	60f0      	str	r0, [r6, #12]
 80092aa:	68db      	ldr	r3, [r3, #12]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d1e4      	bne.n	800927a <_Balloc+0x2e>
 80092b0:	2000      	movs	r0, #0
 80092b2:	bd70      	pop	{r4, r5, r6, pc}
 80092b4:	6802      	ldr	r2, [r0, #0]
 80092b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80092ba:	2300      	movs	r3, #0
 80092bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80092c0:	e7f7      	b.n	80092b2 <_Balloc+0x66>
 80092c2:	bf00      	nop
 80092c4:	0800afd1 	.word	0x0800afd1
 80092c8:	0800b062 	.word	0x0800b062

080092cc <_Bfree>:
 80092cc:	b570      	push	{r4, r5, r6, lr}
 80092ce:	69c6      	ldr	r6, [r0, #28]
 80092d0:	4605      	mov	r5, r0
 80092d2:	460c      	mov	r4, r1
 80092d4:	b976      	cbnz	r6, 80092f4 <_Bfree+0x28>
 80092d6:	2010      	movs	r0, #16
 80092d8:	f7ff fe56 	bl	8008f88 <malloc>
 80092dc:	4602      	mov	r2, r0
 80092de:	61e8      	str	r0, [r5, #28]
 80092e0:	b920      	cbnz	r0, 80092ec <_Bfree+0x20>
 80092e2:	4b09      	ldr	r3, [pc, #36]	@ (8009308 <_Bfree+0x3c>)
 80092e4:	4809      	ldr	r0, [pc, #36]	@ (800930c <_Bfree+0x40>)
 80092e6:	218f      	movs	r1, #143	@ 0x8f
 80092e8:	f000 fc0c 	bl	8009b04 <__assert_func>
 80092ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80092f0:	6006      	str	r6, [r0, #0]
 80092f2:	60c6      	str	r6, [r0, #12]
 80092f4:	b13c      	cbz	r4, 8009306 <_Bfree+0x3a>
 80092f6:	69eb      	ldr	r3, [r5, #28]
 80092f8:	6862      	ldr	r2, [r4, #4]
 80092fa:	68db      	ldr	r3, [r3, #12]
 80092fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009300:	6021      	str	r1, [r4, #0]
 8009302:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009306:	bd70      	pop	{r4, r5, r6, pc}
 8009308:	0800afd1 	.word	0x0800afd1
 800930c:	0800b062 	.word	0x0800b062

08009310 <__multadd>:
 8009310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009314:	690d      	ldr	r5, [r1, #16]
 8009316:	4607      	mov	r7, r0
 8009318:	460c      	mov	r4, r1
 800931a:	461e      	mov	r6, r3
 800931c:	f101 0c14 	add.w	ip, r1, #20
 8009320:	2000      	movs	r0, #0
 8009322:	f8dc 3000 	ldr.w	r3, [ip]
 8009326:	b299      	uxth	r1, r3
 8009328:	fb02 6101 	mla	r1, r2, r1, r6
 800932c:	0c1e      	lsrs	r6, r3, #16
 800932e:	0c0b      	lsrs	r3, r1, #16
 8009330:	fb02 3306 	mla	r3, r2, r6, r3
 8009334:	b289      	uxth	r1, r1
 8009336:	3001      	adds	r0, #1
 8009338:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800933c:	4285      	cmp	r5, r0
 800933e:	f84c 1b04 	str.w	r1, [ip], #4
 8009342:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009346:	dcec      	bgt.n	8009322 <__multadd+0x12>
 8009348:	b30e      	cbz	r6, 800938e <__multadd+0x7e>
 800934a:	68a3      	ldr	r3, [r4, #8]
 800934c:	42ab      	cmp	r3, r5
 800934e:	dc19      	bgt.n	8009384 <__multadd+0x74>
 8009350:	6861      	ldr	r1, [r4, #4]
 8009352:	4638      	mov	r0, r7
 8009354:	3101      	adds	r1, #1
 8009356:	f7ff ff79 	bl	800924c <_Balloc>
 800935a:	4680      	mov	r8, r0
 800935c:	b928      	cbnz	r0, 800936a <__multadd+0x5a>
 800935e:	4602      	mov	r2, r0
 8009360:	4b0c      	ldr	r3, [pc, #48]	@ (8009394 <__multadd+0x84>)
 8009362:	480d      	ldr	r0, [pc, #52]	@ (8009398 <__multadd+0x88>)
 8009364:	21ba      	movs	r1, #186	@ 0xba
 8009366:	f000 fbcd 	bl	8009b04 <__assert_func>
 800936a:	6922      	ldr	r2, [r4, #16]
 800936c:	3202      	adds	r2, #2
 800936e:	f104 010c 	add.w	r1, r4, #12
 8009372:	0092      	lsls	r2, r2, #2
 8009374:	300c      	adds	r0, #12
 8009376:	f7fe fe47 	bl	8008008 <memcpy>
 800937a:	4621      	mov	r1, r4
 800937c:	4638      	mov	r0, r7
 800937e:	f7ff ffa5 	bl	80092cc <_Bfree>
 8009382:	4644      	mov	r4, r8
 8009384:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009388:	3501      	adds	r5, #1
 800938a:	615e      	str	r6, [r3, #20]
 800938c:	6125      	str	r5, [r4, #16]
 800938e:	4620      	mov	r0, r4
 8009390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009394:	0800b040 	.word	0x0800b040
 8009398:	0800b062 	.word	0x0800b062

0800939c <__hi0bits>:
 800939c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80093a0:	4603      	mov	r3, r0
 80093a2:	bf36      	itet	cc
 80093a4:	0403      	lslcc	r3, r0, #16
 80093a6:	2000      	movcs	r0, #0
 80093a8:	2010      	movcc	r0, #16
 80093aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80093ae:	bf3c      	itt	cc
 80093b0:	021b      	lslcc	r3, r3, #8
 80093b2:	3008      	addcc	r0, #8
 80093b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80093b8:	bf3c      	itt	cc
 80093ba:	011b      	lslcc	r3, r3, #4
 80093bc:	3004      	addcc	r0, #4
 80093be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093c2:	bf3c      	itt	cc
 80093c4:	009b      	lslcc	r3, r3, #2
 80093c6:	3002      	addcc	r0, #2
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	db05      	blt.n	80093d8 <__hi0bits+0x3c>
 80093cc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80093d0:	f100 0001 	add.w	r0, r0, #1
 80093d4:	bf08      	it	eq
 80093d6:	2020      	moveq	r0, #32
 80093d8:	4770      	bx	lr

080093da <__lo0bits>:
 80093da:	6803      	ldr	r3, [r0, #0]
 80093dc:	4602      	mov	r2, r0
 80093de:	f013 0007 	ands.w	r0, r3, #7
 80093e2:	d00b      	beq.n	80093fc <__lo0bits+0x22>
 80093e4:	07d9      	lsls	r1, r3, #31
 80093e6:	d421      	bmi.n	800942c <__lo0bits+0x52>
 80093e8:	0798      	lsls	r0, r3, #30
 80093ea:	bf49      	itett	mi
 80093ec:	085b      	lsrmi	r3, r3, #1
 80093ee:	089b      	lsrpl	r3, r3, #2
 80093f0:	2001      	movmi	r0, #1
 80093f2:	6013      	strmi	r3, [r2, #0]
 80093f4:	bf5c      	itt	pl
 80093f6:	6013      	strpl	r3, [r2, #0]
 80093f8:	2002      	movpl	r0, #2
 80093fa:	4770      	bx	lr
 80093fc:	b299      	uxth	r1, r3
 80093fe:	b909      	cbnz	r1, 8009404 <__lo0bits+0x2a>
 8009400:	0c1b      	lsrs	r3, r3, #16
 8009402:	2010      	movs	r0, #16
 8009404:	b2d9      	uxtb	r1, r3
 8009406:	b909      	cbnz	r1, 800940c <__lo0bits+0x32>
 8009408:	3008      	adds	r0, #8
 800940a:	0a1b      	lsrs	r3, r3, #8
 800940c:	0719      	lsls	r1, r3, #28
 800940e:	bf04      	itt	eq
 8009410:	091b      	lsreq	r3, r3, #4
 8009412:	3004      	addeq	r0, #4
 8009414:	0799      	lsls	r1, r3, #30
 8009416:	bf04      	itt	eq
 8009418:	089b      	lsreq	r3, r3, #2
 800941a:	3002      	addeq	r0, #2
 800941c:	07d9      	lsls	r1, r3, #31
 800941e:	d403      	bmi.n	8009428 <__lo0bits+0x4e>
 8009420:	085b      	lsrs	r3, r3, #1
 8009422:	f100 0001 	add.w	r0, r0, #1
 8009426:	d003      	beq.n	8009430 <__lo0bits+0x56>
 8009428:	6013      	str	r3, [r2, #0]
 800942a:	4770      	bx	lr
 800942c:	2000      	movs	r0, #0
 800942e:	4770      	bx	lr
 8009430:	2020      	movs	r0, #32
 8009432:	4770      	bx	lr

08009434 <__i2b>:
 8009434:	b510      	push	{r4, lr}
 8009436:	460c      	mov	r4, r1
 8009438:	2101      	movs	r1, #1
 800943a:	f7ff ff07 	bl	800924c <_Balloc>
 800943e:	4602      	mov	r2, r0
 8009440:	b928      	cbnz	r0, 800944e <__i2b+0x1a>
 8009442:	4b05      	ldr	r3, [pc, #20]	@ (8009458 <__i2b+0x24>)
 8009444:	4805      	ldr	r0, [pc, #20]	@ (800945c <__i2b+0x28>)
 8009446:	f240 1145 	movw	r1, #325	@ 0x145
 800944a:	f000 fb5b 	bl	8009b04 <__assert_func>
 800944e:	2301      	movs	r3, #1
 8009450:	6144      	str	r4, [r0, #20]
 8009452:	6103      	str	r3, [r0, #16]
 8009454:	bd10      	pop	{r4, pc}
 8009456:	bf00      	nop
 8009458:	0800b040 	.word	0x0800b040
 800945c:	0800b062 	.word	0x0800b062

08009460 <__multiply>:
 8009460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009464:	4617      	mov	r7, r2
 8009466:	690a      	ldr	r2, [r1, #16]
 8009468:	693b      	ldr	r3, [r7, #16]
 800946a:	429a      	cmp	r2, r3
 800946c:	bfa8      	it	ge
 800946e:	463b      	movge	r3, r7
 8009470:	4689      	mov	r9, r1
 8009472:	bfa4      	itt	ge
 8009474:	460f      	movge	r7, r1
 8009476:	4699      	movge	r9, r3
 8009478:	693d      	ldr	r5, [r7, #16]
 800947a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	6879      	ldr	r1, [r7, #4]
 8009482:	eb05 060a 	add.w	r6, r5, sl
 8009486:	42b3      	cmp	r3, r6
 8009488:	b085      	sub	sp, #20
 800948a:	bfb8      	it	lt
 800948c:	3101      	addlt	r1, #1
 800948e:	f7ff fedd 	bl	800924c <_Balloc>
 8009492:	b930      	cbnz	r0, 80094a2 <__multiply+0x42>
 8009494:	4602      	mov	r2, r0
 8009496:	4b41      	ldr	r3, [pc, #260]	@ (800959c <__multiply+0x13c>)
 8009498:	4841      	ldr	r0, [pc, #260]	@ (80095a0 <__multiply+0x140>)
 800949a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800949e:	f000 fb31 	bl	8009b04 <__assert_func>
 80094a2:	f100 0414 	add.w	r4, r0, #20
 80094a6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80094aa:	4623      	mov	r3, r4
 80094ac:	2200      	movs	r2, #0
 80094ae:	4573      	cmp	r3, lr
 80094b0:	d320      	bcc.n	80094f4 <__multiply+0x94>
 80094b2:	f107 0814 	add.w	r8, r7, #20
 80094b6:	f109 0114 	add.w	r1, r9, #20
 80094ba:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80094be:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80094c2:	9302      	str	r3, [sp, #8]
 80094c4:	1beb      	subs	r3, r5, r7
 80094c6:	3b15      	subs	r3, #21
 80094c8:	f023 0303 	bic.w	r3, r3, #3
 80094cc:	3304      	adds	r3, #4
 80094ce:	3715      	adds	r7, #21
 80094d0:	42bd      	cmp	r5, r7
 80094d2:	bf38      	it	cc
 80094d4:	2304      	movcc	r3, #4
 80094d6:	9301      	str	r3, [sp, #4]
 80094d8:	9b02      	ldr	r3, [sp, #8]
 80094da:	9103      	str	r1, [sp, #12]
 80094dc:	428b      	cmp	r3, r1
 80094de:	d80c      	bhi.n	80094fa <__multiply+0x9a>
 80094e0:	2e00      	cmp	r6, #0
 80094e2:	dd03      	ble.n	80094ec <__multiply+0x8c>
 80094e4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d055      	beq.n	8009598 <__multiply+0x138>
 80094ec:	6106      	str	r6, [r0, #16]
 80094ee:	b005      	add	sp, #20
 80094f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094f4:	f843 2b04 	str.w	r2, [r3], #4
 80094f8:	e7d9      	b.n	80094ae <__multiply+0x4e>
 80094fa:	f8b1 a000 	ldrh.w	sl, [r1]
 80094fe:	f1ba 0f00 	cmp.w	sl, #0
 8009502:	d01f      	beq.n	8009544 <__multiply+0xe4>
 8009504:	46c4      	mov	ip, r8
 8009506:	46a1      	mov	r9, r4
 8009508:	2700      	movs	r7, #0
 800950a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800950e:	f8d9 3000 	ldr.w	r3, [r9]
 8009512:	fa1f fb82 	uxth.w	fp, r2
 8009516:	b29b      	uxth	r3, r3
 8009518:	fb0a 330b 	mla	r3, sl, fp, r3
 800951c:	443b      	add	r3, r7
 800951e:	f8d9 7000 	ldr.w	r7, [r9]
 8009522:	0c12      	lsrs	r2, r2, #16
 8009524:	0c3f      	lsrs	r7, r7, #16
 8009526:	fb0a 7202 	mla	r2, sl, r2, r7
 800952a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800952e:	b29b      	uxth	r3, r3
 8009530:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009534:	4565      	cmp	r5, ip
 8009536:	f849 3b04 	str.w	r3, [r9], #4
 800953a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800953e:	d8e4      	bhi.n	800950a <__multiply+0xaa>
 8009540:	9b01      	ldr	r3, [sp, #4]
 8009542:	50e7      	str	r7, [r4, r3]
 8009544:	9b03      	ldr	r3, [sp, #12]
 8009546:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800954a:	3104      	adds	r1, #4
 800954c:	f1b9 0f00 	cmp.w	r9, #0
 8009550:	d020      	beq.n	8009594 <__multiply+0x134>
 8009552:	6823      	ldr	r3, [r4, #0]
 8009554:	4647      	mov	r7, r8
 8009556:	46a4      	mov	ip, r4
 8009558:	f04f 0a00 	mov.w	sl, #0
 800955c:	f8b7 b000 	ldrh.w	fp, [r7]
 8009560:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8009564:	fb09 220b 	mla	r2, r9, fp, r2
 8009568:	4452      	add	r2, sl
 800956a:	b29b      	uxth	r3, r3
 800956c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009570:	f84c 3b04 	str.w	r3, [ip], #4
 8009574:	f857 3b04 	ldr.w	r3, [r7], #4
 8009578:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800957c:	f8bc 3000 	ldrh.w	r3, [ip]
 8009580:	fb09 330a 	mla	r3, r9, sl, r3
 8009584:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8009588:	42bd      	cmp	r5, r7
 800958a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800958e:	d8e5      	bhi.n	800955c <__multiply+0xfc>
 8009590:	9a01      	ldr	r2, [sp, #4]
 8009592:	50a3      	str	r3, [r4, r2]
 8009594:	3404      	adds	r4, #4
 8009596:	e79f      	b.n	80094d8 <__multiply+0x78>
 8009598:	3e01      	subs	r6, #1
 800959a:	e7a1      	b.n	80094e0 <__multiply+0x80>
 800959c:	0800b040 	.word	0x0800b040
 80095a0:	0800b062 	.word	0x0800b062

080095a4 <__pow5mult>:
 80095a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095a8:	4615      	mov	r5, r2
 80095aa:	f012 0203 	ands.w	r2, r2, #3
 80095ae:	4607      	mov	r7, r0
 80095b0:	460e      	mov	r6, r1
 80095b2:	d007      	beq.n	80095c4 <__pow5mult+0x20>
 80095b4:	4c25      	ldr	r4, [pc, #148]	@ (800964c <__pow5mult+0xa8>)
 80095b6:	3a01      	subs	r2, #1
 80095b8:	2300      	movs	r3, #0
 80095ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80095be:	f7ff fea7 	bl	8009310 <__multadd>
 80095c2:	4606      	mov	r6, r0
 80095c4:	10ad      	asrs	r5, r5, #2
 80095c6:	d03d      	beq.n	8009644 <__pow5mult+0xa0>
 80095c8:	69fc      	ldr	r4, [r7, #28]
 80095ca:	b97c      	cbnz	r4, 80095ec <__pow5mult+0x48>
 80095cc:	2010      	movs	r0, #16
 80095ce:	f7ff fcdb 	bl	8008f88 <malloc>
 80095d2:	4602      	mov	r2, r0
 80095d4:	61f8      	str	r0, [r7, #28]
 80095d6:	b928      	cbnz	r0, 80095e4 <__pow5mult+0x40>
 80095d8:	4b1d      	ldr	r3, [pc, #116]	@ (8009650 <__pow5mult+0xac>)
 80095da:	481e      	ldr	r0, [pc, #120]	@ (8009654 <__pow5mult+0xb0>)
 80095dc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80095e0:	f000 fa90 	bl	8009b04 <__assert_func>
 80095e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80095e8:	6004      	str	r4, [r0, #0]
 80095ea:	60c4      	str	r4, [r0, #12]
 80095ec:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80095f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80095f4:	b94c      	cbnz	r4, 800960a <__pow5mult+0x66>
 80095f6:	f240 2171 	movw	r1, #625	@ 0x271
 80095fa:	4638      	mov	r0, r7
 80095fc:	f7ff ff1a 	bl	8009434 <__i2b>
 8009600:	2300      	movs	r3, #0
 8009602:	f8c8 0008 	str.w	r0, [r8, #8]
 8009606:	4604      	mov	r4, r0
 8009608:	6003      	str	r3, [r0, #0]
 800960a:	f04f 0900 	mov.w	r9, #0
 800960e:	07eb      	lsls	r3, r5, #31
 8009610:	d50a      	bpl.n	8009628 <__pow5mult+0x84>
 8009612:	4631      	mov	r1, r6
 8009614:	4622      	mov	r2, r4
 8009616:	4638      	mov	r0, r7
 8009618:	f7ff ff22 	bl	8009460 <__multiply>
 800961c:	4631      	mov	r1, r6
 800961e:	4680      	mov	r8, r0
 8009620:	4638      	mov	r0, r7
 8009622:	f7ff fe53 	bl	80092cc <_Bfree>
 8009626:	4646      	mov	r6, r8
 8009628:	106d      	asrs	r5, r5, #1
 800962a:	d00b      	beq.n	8009644 <__pow5mult+0xa0>
 800962c:	6820      	ldr	r0, [r4, #0]
 800962e:	b938      	cbnz	r0, 8009640 <__pow5mult+0x9c>
 8009630:	4622      	mov	r2, r4
 8009632:	4621      	mov	r1, r4
 8009634:	4638      	mov	r0, r7
 8009636:	f7ff ff13 	bl	8009460 <__multiply>
 800963a:	6020      	str	r0, [r4, #0]
 800963c:	f8c0 9000 	str.w	r9, [r0]
 8009640:	4604      	mov	r4, r0
 8009642:	e7e4      	b.n	800960e <__pow5mult+0x6a>
 8009644:	4630      	mov	r0, r6
 8009646:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800964a:	bf00      	nop
 800964c:	0800b104 	.word	0x0800b104
 8009650:	0800afd1 	.word	0x0800afd1
 8009654:	0800b062 	.word	0x0800b062

08009658 <__lshift>:
 8009658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800965c:	460c      	mov	r4, r1
 800965e:	6849      	ldr	r1, [r1, #4]
 8009660:	6923      	ldr	r3, [r4, #16]
 8009662:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009666:	68a3      	ldr	r3, [r4, #8]
 8009668:	4607      	mov	r7, r0
 800966a:	4691      	mov	r9, r2
 800966c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009670:	f108 0601 	add.w	r6, r8, #1
 8009674:	42b3      	cmp	r3, r6
 8009676:	db0b      	blt.n	8009690 <__lshift+0x38>
 8009678:	4638      	mov	r0, r7
 800967a:	f7ff fde7 	bl	800924c <_Balloc>
 800967e:	4605      	mov	r5, r0
 8009680:	b948      	cbnz	r0, 8009696 <__lshift+0x3e>
 8009682:	4602      	mov	r2, r0
 8009684:	4b28      	ldr	r3, [pc, #160]	@ (8009728 <__lshift+0xd0>)
 8009686:	4829      	ldr	r0, [pc, #164]	@ (800972c <__lshift+0xd4>)
 8009688:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800968c:	f000 fa3a 	bl	8009b04 <__assert_func>
 8009690:	3101      	adds	r1, #1
 8009692:	005b      	lsls	r3, r3, #1
 8009694:	e7ee      	b.n	8009674 <__lshift+0x1c>
 8009696:	2300      	movs	r3, #0
 8009698:	f100 0114 	add.w	r1, r0, #20
 800969c:	f100 0210 	add.w	r2, r0, #16
 80096a0:	4618      	mov	r0, r3
 80096a2:	4553      	cmp	r3, sl
 80096a4:	db33      	blt.n	800970e <__lshift+0xb6>
 80096a6:	6920      	ldr	r0, [r4, #16]
 80096a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80096ac:	f104 0314 	add.w	r3, r4, #20
 80096b0:	f019 091f 	ands.w	r9, r9, #31
 80096b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80096b8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80096bc:	d02b      	beq.n	8009716 <__lshift+0xbe>
 80096be:	f1c9 0e20 	rsb	lr, r9, #32
 80096c2:	468a      	mov	sl, r1
 80096c4:	2200      	movs	r2, #0
 80096c6:	6818      	ldr	r0, [r3, #0]
 80096c8:	fa00 f009 	lsl.w	r0, r0, r9
 80096cc:	4310      	orrs	r0, r2
 80096ce:	f84a 0b04 	str.w	r0, [sl], #4
 80096d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80096d6:	459c      	cmp	ip, r3
 80096d8:	fa22 f20e 	lsr.w	r2, r2, lr
 80096dc:	d8f3      	bhi.n	80096c6 <__lshift+0x6e>
 80096de:	ebac 0304 	sub.w	r3, ip, r4
 80096e2:	3b15      	subs	r3, #21
 80096e4:	f023 0303 	bic.w	r3, r3, #3
 80096e8:	3304      	adds	r3, #4
 80096ea:	f104 0015 	add.w	r0, r4, #21
 80096ee:	4560      	cmp	r0, ip
 80096f0:	bf88      	it	hi
 80096f2:	2304      	movhi	r3, #4
 80096f4:	50ca      	str	r2, [r1, r3]
 80096f6:	b10a      	cbz	r2, 80096fc <__lshift+0xa4>
 80096f8:	f108 0602 	add.w	r6, r8, #2
 80096fc:	3e01      	subs	r6, #1
 80096fe:	4638      	mov	r0, r7
 8009700:	612e      	str	r6, [r5, #16]
 8009702:	4621      	mov	r1, r4
 8009704:	f7ff fde2 	bl	80092cc <_Bfree>
 8009708:	4628      	mov	r0, r5
 800970a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800970e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009712:	3301      	adds	r3, #1
 8009714:	e7c5      	b.n	80096a2 <__lshift+0x4a>
 8009716:	3904      	subs	r1, #4
 8009718:	f853 2b04 	ldr.w	r2, [r3], #4
 800971c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009720:	459c      	cmp	ip, r3
 8009722:	d8f9      	bhi.n	8009718 <__lshift+0xc0>
 8009724:	e7ea      	b.n	80096fc <__lshift+0xa4>
 8009726:	bf00      	nop
 8009728:	0800b040 	.word	0x0800b040
 800972c:	0800b062 	.word	0x0800b062

08009730 <__mcmp>:
 8009730:	690a      	ldr	r2, [r1, #16]
 8009732:	4603      	mov	r3, r0
 8009734:	6900      	ldr	r0, [r0, #16]
 8009736:	1a80      	subs	r0, r0, r2
 8009738:	b530      	push	{r4, r5, lr}
 800973a:	d10e      	bne.n	800975a <__mcmp+0x2a>
 800973c:	3314      	adds	r3, #20
 800973e:	3114      	adds	r1, #20
 8009740:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009744:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009748:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800974c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009750:	4295      	cmp	r5, r2
 8009752:	d003      	beq.n	800975c <__mcmp+0x2c>
 8009754:	d205      	bcs.n	8009762 <__mcmp+0x32>
 8009756:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800975a:	bd30      	pop	{r4, r5, pc}
 800975c:	42a3      	cmp	r3, r4
 800975e:	d3f3      	bcc.n	8009748 <__mcmp+0x18>
 8009760:	e7fb      	b.n	800975a <__mcmp+0x2a>
 8009762:	2001      	movs	r0, #1
 8009764:	e7f9      	b.n	800975a <__mcmp+0x2a>
	...

08009768 <__mdiff>:
 8009768:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800976c:	4689      	mov	r9, r1
 800976e:	4606      	mov	r6, r0
 8009770:	4611      	mov	r1, r2
 8009772:	4648      	mov	r0, r9
 8009774:	4614      	mov	r4, r2
 8009776:	f7ff ffdb 	bl	8009730 <__mcmp>
 800977a:	1e05      	subs	r5, r0, #0
 800977c:	d112      	bne.n	80097a4 <__mdiff+0x3c>
 800977e:	4629      	mov	r1, r5
 8009780:	4630      	mov	r0, r6
 8009782:	f7ff fd63 	bl	800924c <_Balloc>
 8009786:	4602      	mov	r2, r0
 8009788:	b928      	cbnz	r0, 8009796 <__mdiff+0x2e>
 800978a:	4b3f      	ldr	r3, [pc, #252]	@ (8009888 <__mdiff+0x120>)
 800978c:	f240 2137 	movw	r1, #567	@ 0x237
 8009790:	483e      	ldr	r0, [pc, #248]	@ (800988c <__mdiff+0x124>)
 8009792:	f000 f9b7 	bl	8009b04 <__assert_func>
 8009796:	2301      	movs	r3, #1
 8009798:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800979c:	4610      	mov	r0, r2
 800979e:	b003      	add	sp, #12
 80097a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097a4:	bfbc      	itt	lt
 80097a6:	464b      	movlt	r3, r9
 80097a8:	46a1      	movlt	r9, r4
 80097aa:	4630      	mov	r0, r6
 80097ac:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80097b0:	bfba      	itte	lt
 80097b2:	461c      	movlt	r4, r3
 80097b4:	2501      	movlt	r5, #1
 80097b6:	2500      	movge	r5, #0
 80097b8:	f7ff fd48 	bl	800924c <_Balloc>
 80097bc:	4602      	mov	r2, r0
 80097be:	b918      	cbnz	r0, 80097c8 <__mdiff+0x60>
 80097c0:	4b31      	ldr	r3, [pc, #196]	@ (8009888 <__mdiff+0x120>)
 80097c2:	f240 2145 	movw	r1, #581	@ 0x245
 80097c6:	e7e3      	b.n	8009790 <__mdiff+0x28>
 80097c8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80097cc:	6926      	ldr	r6, [r4, #16]
 80097ce:	60c5      	str	r5, [r0, #12]
 80097d0:	f109 0310 	add.w	r3, r9, #16
 80097d4:	f109 0514 	add.w	r5, r9, #20
 80097d8:	f104 0e14 	add.w	lr, r4, #20
 80097dc:	f100 0b14 	add.w	fp, r0, #20
 80097e0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80097e4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80097e8:	9301      	str	r3, [sp, #4]
 80097ea:	46d9      	mov	r9, fp
 80097ec:	f04f 0c00 	mov.w	ip, #0
 80097f0:	9b01      	ldr	r3, [sp, #4]
 80097f2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80097f6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80097fa:	9301      	str	r3, [sp, #4]
 80097fc:	fa1f f38a 	uxth.w	r3, sl
 8009800:	4619      	mov	r1, r3
 8009802:	b283      	uxth	r3, r0
 8009804:	1acb      	subs	r3, r1, r3
 8009806:	0c00      	lsrs	r0, r0, #16
 8009808:	4463      	add	r3, ip
 800980a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800980e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009812:	b29b      	uxth	r3, r3
 8009814:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009818:	4576      	cmp	r6, lr
 800981a:	f849 3b04 	str.w	r3, [r9], #4
 800981e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009822:	d8e5      	bhi.n	80097f0 <__mdiff+0x88>
 8009824:	1b33      	subs	r3, r6, r4
 8009826:	3b15      	subs	r3, #21
 8009828:	f023 0303 	bic.w	r3, r3, #3
 800982c:	3415      	adds	r4, #21
 800982e:	3304      	adds	r3, #4
 8009830:	42a6      	cmp	r6, r4
 8009832:	bf38      	it	cc
 8009834:	2304      	movcc	r3, #4
 8009836:	441d      	add	r5, r3
 8009838:	445b      	add	r3, fp
 800983a:	461e      	mov	r6, r3
 800983c:	462c      	mov	r4, r5
 800983e:	4544      	cmp	r4, r8
 8009840:	d30e      	bcc.n	8009860 <__mdiff+0xf8>
 8009842:	f108 0103 	add.w	r1, r8, #3
 8009846:	1b49      	subs	r1, r1, r5
 8009848:	f021 0103 	bic.w	r1, r1, #3
 800984c:	3d03      	subs	r5, #3
 800984e:	45a8      	cmp	r8, r5
 8009850:	bf38      	it	cc
 8009852:	2100      	movcc	r1, #0
 8009854:	440b      	add	r3, r1
 8009856:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800985a:	b191      	cbz	r1, 8009882 <__mdiff+0x11a>
 800985c:	6117      	str	r7, [r2, #16]
 800985e:	e79d      	b.n	800979c <__mdiff+0x34>
 8009860:	f854 1b04 	ldr.w	r1, [r4], #4
 8009864:	46e6      	mov	lr, ip
 8009866:	0c08      	lsrs	r0, r1, #16
 8009868:	fa1c fc81 	uxtah	ip, ip, r1
 800986c:	4471      	add	r1, lr
 800986e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009872:	b289      	uxth	r1, r1
 8009874:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009878:	f846 1b04 	str.w	r1, [r6], #4
 800987c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009880:	e7dd      	b.n	800983e <__mdiff+0xd6>
 8009882:	3f01      	subs	r7, #1
 8009884:	e7e7      	b.n	8009856 <__mdiff+0xee>
 8009886:	bf00      	nop
 8009888:	0800b040 	.word	0x0800b040
 800988c:	0800b062 	.word	0x0800b062

08009890 <__d2b>:
 8009890:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009894:	460f      	mov	r7, r1
 8009896:	2101      	movs	r1, #1
 8009898:	ec59 8b10 	vmov	r8, r9, d0
 800989c:	4616      	mov	r6, r2
 800989e:	f7ff fcd5 	bl	800924c <_Balloc>
 80098a2:	4604      	mov	r4, r0
 80098a4:	b930      	cbnz	r0, 80098b4 <__d2b+0x24>
 80098a6:	4602      	mov	r2, r0
 80098a8:	4b23      	ldr	r3, [pc, #140]	@ (8009938 <__d2b+0xa8>)
 80098aa:	4824      	ldr	r0, [pc, #144]	@ (800993c <__d2b+0xac>)
 80098ac:	f240 310f 	movw	r1, #783	@ 0x30f
 80098b0:	f000 f928 	bl	8009b04 <__assert_func>
 80098b4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80098b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80098bc:	b10d      	cbz	r5, 80098c2 <__d2b+0x32>
 80098be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80098c2:	9301      	str	r3, [sp, #4]
 80098c4:	f1b8 0300 	subs.w	r3, r8, #0
 80098c8:	d023      	beq.n	8009912 <__d2b+0x82>
 80098ca:	4668      	mov	r0, sp
 80098cc:	9300      	str	r3, [sp, #0]
 80098ce:	f7ff fd84 	bl	80093da <__lo0bits>
 80098d2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80098d6:	b1d0      	cbz	r0, 800990e <__d2b+0x7e>
 80098d8:	f1c0 0320 	rsb	r3, r0, #32
 80098dc:	fa02 f303 	lsl.w	r3, r2, r3
 80098e0:	430b      	orrs	r3, r1
 80098e2:	40c2      	lsrs	r2, r0
 80098e4:	6163      	str	r3, [r4, #20]
 80098e6:	9201      	str	r2, [sp, #4]
 80098e8:	9b01      	ldr	r3, [sp, #4]
 80098ea:	61a3      	str	r3, [r4, #24]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	bf0c      	ite	eq
 80098f0:	2201      	moveq	r2, #1
 80098f2:	2202      	movne	r2, #2
 80098f4:	6122      	str	r2, [r4, #16]
 80098f6:	b1a5      	cbz	r5, 8009922 <__d2b+0x92>
 80098f8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80098fc:	4405      	add	r5, r0
 80098fe:	603d      	str	r5, [r7, #0]
 8009900:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009904:	6030      	str	r0, [r6, #0]
 8009906:	4620      	mov	r0, r4
 8009908:	b003      	add	sp, #12
 800990a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800990e:	6161      	str	r1, [r4, #20]
 8009910:	e7ea      	b.n	80098e8 <__d2b+0x58>
 8009912:	a801      	add	r0, sp, #4
 8009914:	f7ff fd61 	bl	80093da <__lo0bits>
 8009918:	9b01      	ldr	r3, [sp, #4]
 800991a:	6163      	str	r3, [r4, #20]
 800991c:	3020      	adds	r0, #32
 800991e:	2201      	movs	r2, #1
 8009920:	e7e8      	b.n	80098f4 <__d2b+0x64>
 8009922:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009926:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800992a:	6038      	str	r0, [r7, #0]
 800992c:	6918      	ldr	r0, [r3, #16]
 800992e:	f7ff fd35 	bl	800939c <__hi0bits>
 8009932:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009936:	e7e5      	b.n	8009904 <__d2b+0x74>
 8009938:	0800b040 	.word	0x0800b040
 800993c:	0800b062 	.word	0x0800b062

08009940 <__sread>:
 8009940:	b510      	push	{r4, lr}
 8009942:	460c      	mov	r4, r1
 8009944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009948:	f000 f898 	bl	8009a7c <_read_r>
 800994c:	2800      	cmp	r0, #0
 800994e:	bfab      	itete	ge
 8009950:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009952:	89a3      	ldrhlt	r3, [r4, #12]
 8009954:	181b      	addge	r3, r3, r0
 8009956:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800995a:	bfac      	ite	ge
 800995c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800995e:	81a3      	strhlt	r3, [r4, #12]
 8009960:	bd10      	pop	{r4, pc}

08009962 <__swrite>:
 8009962:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009966:	461f      	mov	r7, r3
 8009968:	898b      	ldrh	r3, [r1, #12]
 800996a:	05db      	lsls	r3, r3, #23
 800996c:	4605      	mov	r5, r0
 800996e:	460c      	mov	r4, r1
 8009970:	4616      	mov	r6, r2
 8009972:	d505      	bpl.n	8009980 <__swrite+0x1e>
 8009974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009978:	2302      	movs	r3, #2
 800997a:	2200      	movs	r2, #0
 800997c:	f000 f86c 	bl	8009a58 <_lseek_r>
 8009980:	89a3      	ldrh	r3, [r4, #12]
 8009982:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009986:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800998a:	81a3      	strh	r3, [r4, #12]
 800998c:	4632      	mov	r2, r6
 800998e:	463b      	mov	r3, r7
 8009990:	4628      	mov	r0, r5
 8009992:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009996:	f000 b893 	b.w	8009ac0 <_write_r>

0800999a <__sseek>:
 800999a:	b510      	push	{r4, lr}
 800999c:	460c      	mov	r4, r1
 800999e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099a2:	f000 f859 	bl	8009a58 <_lseek_r>
 80099a6:	1c43      	adds	r3, r0, #1
 80099a8:	89a3      	ldrh	r3, [r4, #12]
 80099aa:	bf15      	itete	ne
 80099ac:	6560      	strne	r0, [r4, #84]	@ 0x54
 80099ae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80099b2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80099b6:	81a3      	strheq	r3, [r4, #12]
 80099b8:	bf18      	it	ne
 80099ba:	81a3      	strhne	r3, [r4, #12]
 80099bc:	bd10      	pop	{r4, pc}

080099be <__sclose>:
 80099be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099c2:	f000 b88f 	b.w	8009ae4 <_close_r>

080099c6 <_realloc_r>:
 80099c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099ca:	4607      	mov	r7, r0
 80099cc:	4614      	mov	r4, r2
 80099ce:	460d      	mov	r5, r1
 80099d0:	b921      	cbnz	r1, 80099dc <_realloc_r+0x16>
 80099d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099d6:	4611      	mov	r1, r2
 80099d8:	f7ff bb00 	b.w	8008fdc <_malloc_r>
 80099dc:	b92a      	cbnz	r2, 80099ea <_realloc_r+0x24>
 80099de:	f000 f8c3 	bl	8009b68 <_free_r>
 80099e2:	4625      	mov	r5, r4
 80099e4:	4628      	mov	r0, r5
 80099e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099ea:	f000 f919 	bl	8009c20 <_malloc_usable_size_r>
 80099ee:	4284      	cmp	r4, r0
 80099f0:	4606      	mov	r6, r0
 80099f2:	d802      	bhi.n	80099fa <_realloc_r+0x34>
 80099f4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80099f8:	d8f4      	bhi.n	80099e4 <_realloc_r+0x1e>
 80099fa:	4621      	mov	r1, r4
 80099fc:	4638      	mov	r0, r7
 80099fe:	f7ff faed 	bl	8008fdc <_malloc_r>
 8009a02:	4680      	mov	r8, r0
 8009a04:	b908      	cbnz	r0, 8009a0a <_realloc_r+0x44>
 8009a06:	4645      	mov	r5, r8
 8009a08:	e7ec      	b.n	80099e4 <_realloc_r+0x1e>
 8009a0a:	42b4      	cmp	r4, r6
 8009a0c:	4622      	mov	r2, r4
 8009a0e:	4629      	mov	r1, r5
 8009a10:	bf28      	it	cs
 8009a12:	4632      	movcs	r2, r6
 8009a14:	f7fe faf8 	bl	8008008 <memcpy>
 8009a18:	4629      	mov	r1, r5
 8009a1a:	4638      	mov	r0, r7
 8009a1c:	f000 f8a4 	bl	8009b68 <_free_r>
 8009a20:	e7f1      	b.n	8009a06 <_realloc_r+0x40>

08009a22 <memmove>:
 8009a22:	4288      	cmp	r0, r1
 8009a24:	b510      	push	{r4, lr}
 8009a26:	eb01 0402 	add.w	r4, r1, r2
 8009a2a:	d902      	bls.n	8009a32 <memmove+0x10>
 8009a2c:	4284      	cmp	r4, r0
 8009a2e:	4623      	mov	r3, r4
 8009a30:	d807      	bhi.n	8009a42 <memmove+0x20>
 8009a32:	1e43      	subs	r3, r0, #1
 8009a34:	42a1      	cmp	r1, r4
 8009a36:	d008      	beq.n	8009a4a <memmove+0x28>
 8009a38:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009a3c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009a40:	e7f8      	b.n	8009a34 <memmove+0x12>
 8009a42:	4402      	add	r2, r0
 8009a44:	4601      	mov	r1, r0
 8009a46:	428a      	cmp	r2, r1
 8009a48:	d100      	bne.n	8009a4c <memmove+0x2a>
 8009a4a:	bd10      	pop	{r4, pc}
 8009a4c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009a50:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009a54:	e7f7      	b.n	8009a46 <memmove+0x24>
	...

08009a58 <_lseek_r>:
 8009a58:	b538      	push	{r3, r4, r5, lr}
 8009a5a:	4d07      	ldr	r5, [pc, #28]	@ (8009a78 <_lseek_r+0x20>)
 8009a5c:	4604      	mov	r4, r0
 8009a5e:	4608      	mov	r0, r1
 8009a60:	4611      	mov	r1, r2
 8009a62:	2200      	movs	r2, #0
 8009a64:	602a      	str	r2, [r5, #0]
 8009a66:	461a      	mov	r2, r3
 8009a68:	f7f8 fa27 	bl	8001eba <_lseek>
 8009a6c:	1c43      	adds	r3, r0, #1
 8009a6e:	d102      	bne.n	8009a76 <_lseek_r+0x1e>
 8009a70:	682b      	ldr	r3, [r5, #0]
 8009a72:	b103      	cbz	r3, 8009a76 <_lseek_r+0x1e>
 8009a74:	6023      	str	r3, [r4, #0]
 8009a76:	bd38      	pop	{r3, r4, r5, pc}
 8009a78:	2000514c 	.word	0x2000514c

08009a7c <_read_r>:
 8009a7c:	b538      	push	{r3, r4, r5, lr}
 8009a7e:	4d07      	ldr	r5, [pc, #28]	@ (8009a9c <_read_r+0x20>)
 8009a80:	4604      	mov	r4, r0
 8009a82:	4608      	mov	r0, r1
 8009a84:	4611      	mov	r1, r2
 8009a86:	2200      	movs	r2, #0
 8009a88:	602a      	str	r2, [r5, #0]
 8009a8a:	461a      	mov	r2, r3
 8009a8c:	f7f8 f9d1 	bl	8001e32 <_read>
 8009a90:	1c43      	adds	r3, r0, #1
 8009a92:	d102      	bne.n	8009a9a <_read_r+0x1e>
 8009a94:	682b      	ldr	r3, [r5, #0]
 8009a96:	b103      	cbz	r3, 8009a9a <_read_r+0x1e>
 8009a98:	6023      	str	r3, [r4, #0]
 8009a9a:	bd38      	pop	{r3, r4, r5, pc}
 8009a9c:	2000514c 	.word	0x2000514c

08009aa0 <_sbrk_r>:
 8009aa0:	b538      	push	{r3, r4, r5, lr}
 8009aa2:	4d06      	ldr	r5, [pc, #24]	@ (8009abc <_sbrk_r+0x1c>)
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	4604      	mov	r4, r0
 8009aa8:	4608      	mov	r0, r1
 8009aaa:	602b      	str	r3, [r5, #0]
 8009aac:	f7f8 fa12 	bl	8001ed4 <_sbrk>
 8009ab0:	1c43      	adds	r3, r0, #1
 8009ab2:	d102      	bne.n	8009aba <_sbrk_r+0x1a>
 8009ab4:	682b      	ldr	r3, [r5, #0]
 8009ab6:	b103      	cbz	r3, 8009aba <_sbrk_r+0x1a>
 8009ab8:	6023      	str	r3, [r4, #0]
 8009aba:	bd38      	pop	{r3, r4, r5, pc}
 8009abc:	2000514c 	.word	0x2000514c

08009ac0 <_write_r>:
 8009ac0:	b538      	push	{r3, r4, r5, lr}
 8009ac2:	4d07      	ldr	r5, [pc, #28]	@ (8009ae0 <_write_r+0x20>)
 8009ac4:	4604      	mov	r4, r0
 8009ac6:	4608      	mov	r0, r1
 8009ac8:	4611      	mov	r1, r2
 8009aca:	2200      	movs	r2, #0
 8009acc:	602a      	str	r2, [r5, #0]
 8009ace:	461a      	mov	r2, r3
 8009ad0:	f7f7 fa20 	bl	8000f14 <_write>
 8009ad4:	1c43      	adds	r3, r0, #1
 8009ad6:	d102      	bne.n	8009ade <_write_r+0x1e>
 8009ad8:	682b      	ldr	r3, [r5, #0]
 8009ada:	b103      	cbz	r3, 8009ade <_write_r+0x1e>
 8009adc:	6023      	str	r3, [r4, #0]
 8009ade:	bd38      	pop	{r3, r4, r5, pc}
 8009ae0:	2000514c 	.word	0x2000514c

08009ae4 <_close_r>:
 8009ae4:	b538      	push	{r3, r4, r5, lr}
 8009ae6:	4d06      	ldr	r5, [pc, #24]	@ (8009b00 <_close_r+0x1c>)
 8009ae8:	2300      	movs	r3, #0
 8009aea:	4604      	mov	r4, r0
 8009aec:	4608      	mov	r0, r1
 8009aee:	602b      	str	r3, [r5, #0]
 8009af0:	f7f8 f9bc 	bl	8001e6c <_close>
 8009af4:	1c43      	adds	r3, r0, #1
 8009af6:	d102      	bne.n	8009afe <_close_r+0x1a>
 8009af8:	682b      	ldr	r3, [r5, #0]
 8009afa:	b103      	cbz	r3, 8009afe <_close_r+0x1a>
 8009afc:	6023      	str	r3, [r4, #0]
 8009afe:	bd38      	pop	{r3, r4, r5, pc}
 8009b00:	2000514c 	.word	0x2000514c

08009b04 <__assert_func>:
 8009b04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009b06:	4614      	mov	r4, r2
 8009b08:	461a      	mov	r2, r3
 8009b0a:	4b09      	ldr	r3, [pc, #36]	@ (8009b30 <__assert_func+0x2c>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	4605      	mov	r5, r0
 8009b10:	68d8      	ldr	r0, [r3, #12]
 8009b12:	b14c      	cbz	r4, 8009b28 <__assert_func+0x24>
 8009b14:	4b07      	ldr	r3, [pc, #28]	@ (8009b34 <__assert_func+0x30>)
 8009b16:	9100      	str	r1, [sp, #0]
 8009b18:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009b1c:	4906      	ldr	r1, [pc, #24]	@ (8009b38 <__assert_func+0x34>)
 8009b1e:	462b      	mov	r3, r5
 8009b20:	f000 f886 	bl	8009c30 <fiprintf>
 8009b24:	f000 f8a3 	bl	8009c6e <abort>
 8009b28:	4b04      	ldr	r3, [pc, #16]	@ (8009b3c <__assert_func+0x38>)
 8009b2a:	461c      	mov	r4, r3
 8009b2c:	e7f3      	b.n	8009b16 <__assert_func+0x12>
 8009b2e:	bf00      	nop
 8009b30:	2000002c 	.word	0x2000002c
 8009b34:	0800b0c5 	.word	0x0800b0c5
 8009b38:	0800b0d2 	.word	0x0800b0d2
 8009b3c:	0800b100 	.word	0x0800b100

08009b40 <_calloc_r>:
 8009b40:	b570      	push	{r4, r5, r6, lr}
 8009b42:	fba1 5402 	umull	r5, r4, r1, r2
 8009b46:	b934      	cbnz	r4, 8009b56 <_calloc_r+0x16>
 8009b48:	4629      	mov	r1, r5
 8009b4a:	f7ff fa47 	bl	8008fdc <_malloc_r>
 8009b4e:	4606      	mov	r6, r0
 8009b50:	b928      	cbnz	r0, 8009b5e <_calloc_r+0x1e>
 8009b52:	4630      	mov	r0, r6
 8009b54:	bd70      	pop	{r4, r5, r6, pc}
 8009b56:	220c      	movs	r2, #12
 8009b58:	6002      	str	r2, [r0, #0]
 8009b5a:	2600      	movs	r6, #0
 8009b5c:	e7f9      	b.n	8009b52 <_calloc_r+0x12>
 8009b5e:	462a      	mov	r2, r5
 8009b60:	4621      	mov	r1, r4
 8009b62:	f7fe fa17 	bl	8007f94 <memset>
 8009b66:	e7f4      	b.n	8009b52 <_calloc_r+0x12>

08009b68 <_free_r>:
 8009b68:	b538      	push	{r3, r4, r5, lr}
 8009b6a:	4605      	mov	r5, r0
 8009b6c:	2900      	cmp	r1, #0
 8009b6e:	d041      	beq.n	8009bf4 <_free_r+0x8c>
 8009b70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b74:	1f0c      	subs	r4, r1, #4
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	bfb8      	it	lt
 8009b7a:	18e4      	addlt	r4, r4, r3
 8009b7c:	f7ff fb5a 	bl	8009234 <__malloc_lock>
 8009b80:	4a1d      	ldr	r2, [pc, #116]	@ (8009bf8 <_free_r+0x90>)
 8009b82:	6813      	ldr	r3, [r2, #0]
 8009b84:	b933      	cbnz	r3, 8009b94 <_free_r+0x2c>
 8009b86:	6063      	str	r3, [r4, #4]
 8009b88:	6014      	str	r4, [r2, #0]
 8009b8a:	4628      	mov	r0, r5
 8009b8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b90:	f7ff bb56 	b.w	8009240 <__malloc_unlock>
 8009b94:	42a3      	cmp	r3, r4
 8009b96:	d908      	bls.n	8009baa <_free_r+0x42>
 8009b98:	6820      	ldr	r0, [r4, #0]
 8009b9a:	1821      	adds	r1, r4, r0
 8009b9c:	428b      	cmp	r3, r1
 8009b9e:	bf01      	itttt	eq
 8009ba0:	6819      	ldreq	r1, [r3, #0]
 8009ba2:	685b      	ldreq	r3, [r3, #4]
 8009ba4:	1809      	addeq	r1, r1, r0
 8009ba6:	6021      	streq	r1, [r4, #0]
 8009ba8:	e7ed      	b.n	8009b86 <_free_r+0x1e>
 8009baa:	461a      	mov	r2, r3
 8009bac:	685b      	ldr	r3, [r3, #4]
 8009bae:	b10b      	cbz	r3, 8009bb4 <_free_r+0x4c>
 8009bb0:	42a3      	cmp	r3, r4
 8009bb2:	d9fa      	bls.n	8009baa <_free_r+0x42>
 8009bb4:	6811      	ldr	r1, [r2, #0]
 8009bb6:	1850      	adds	r0, r2, r1
 8009bb8:	42a0      	cmp	r0, r4
 8009bba:	d10b      	bne.n	8009bd4 <_free_r+0x6c>
 8009bbc:	6820      	ldr	r0, [r4, #0]
 8009bbe:	4401      	add	r1, r0
 8009bc0:	1850      	adds	r0, r2, r1
 8009bc2:	4283      	cmp	r3, r0
 8009bc4:	6011      	str	r1, [r2, #0]
 8009bc6:	d1e0      	bne.n	8009b8a <_free_r+0x22>
 8009bc8:	6818      	ldr	r0, [r3, #0]
 8009bca:	685b      	ldr	r3, [r3, #4]
 8009bcc:	6053      	str	r3, [r2, #4]
 8009bce:	4408      	add	r0, r1
 8009bd0:	6010      	str	r0, [r2, #0]
 8009bd2:	e7da      	b.n	8009b8a <_free_r+0x22>
 8009bd4:	d902      	bls.n	8009bdc <_free_r+0x74>
 8009bd6:	230c      	movs	r3, #12
 8009bd8:	602b      	str	r3, [r5, #0]
 8009bda:	e7d6      	b.n	8009b8a <_free_r+0x22>
 8009bdc:	6820      	ldr	r0, [r4, #0]
 8009bde:	1821      	adds	r1, r4, r0
 8009be0:	428b      	cmp	r3, r1
 8009be2:	bf04      	itt	eq
 8009be4:	6819      	ldreq	r1, [r3, #0]
 8009be6:	685b      	ldreq	r3, [r3, #4]
 8009be8:	6063      	str	r3, [r4, #4]
 8009bea:	bf04      	itt	eq
 8009bec:	1809      	addeq	r1, r1, r0
 8009bee:	6021      	streq	r1, [r4, #0]
 8009bf0:	6054      	str	r4, [r2, #4]
 8009bf2:	e7ca      	b.n	8009b8a <_free_r+0x22>
 8009bf4:	bd38      	pop	{r3, r4, r5, pc}
 8009bf6:	bf00      	nop
 8009bf8:	20005148 	.word	0x20005148

08009bfc <__ascii_mbtowc>:
 8009bfc:	b082      	sub	sp, #8
 8009bfe:	b901      	cbnz	r1, 8009c02 <__ascii_mbtowc+0x6>
 8009c00:	a901      	add	r1, sp, #4
 8009c02:	b142      	cbz	r2, 8009c16 <__ascii_mbtowc+0x1a>
 8009c04:	b14b      	cbz	r3, 8009c1a <__ascii_mbtowc+0x1e>
 8009c06:	7813      	ldrb	r3, [r2, #0]
 8009c08:	600b      	str	r3, [r1, #0]
 8009c0a:	7812      	ldrb	r2, [r2, #0]
 8009c0c:	1e10      	subs	r0, r2, #0
 8009c0e:	bf18      	it	ne
 8009c10:	2001      	movne	r0, #1
 8009c12:	b002      	add	sp, #8
 8009c14:	4770      	bx	lr
 8009c16:	4610      	mov	r0, r2
 8009c18:	e7fb      	b.n	8009c12 <__ascii_mbtowc+0x16>
 8009c1a:	f06f 0001 	mvn.w	r0, #1
 8009c1e:	e7f8      	b.n	8009c12 <__ascii_mbtowc+0x16>

08009c20 <_malloc_usable_size_r>:
 8009c20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c24:	1f18      	subs	r0, r3, #4
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	bfbc      	itt	lt
 8009c2a:	580b      	ldrlt	r3, [r1, r0]
 8009c2c:	18c0      	addlt	r0, r0, r3
 8009c2e:	4770      	bx	lr

08009c30 <fiprintf>:
 8009c30:	b40e      	push	{r1, r2, r3}
 8009c32:	b503      	push	{r0, r1, lr}
 8009c34:	4601      	mov	r1, r0
 8009c36:	ab03      	add	r3, sp, #12
 8009c38:	4805      	ldr	r0, [pc, #20]	@ (8009c50 <fiprintf+0x20>)
 8009c3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c3e:	6800      	ldr	r0, [r0, #0]
 8009c40:	9301      	str	r3, [sp, #4]
 8009c42:	f000 f845 	bl	8009cd0 <_vfiprintf_r>
 8009c46:	b002      	add	sp, #8
 8009c48:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c4c:	b003      	add	sp, #12
 8009c4e:	4770      	bx	lr
 8009c50:	2000002c 	.word	0x2000002c

08009c54 <__ascii_wctomb>:
 8009c54:	4603      	mov	r3, r0
 8009c56:	4608      	mov	r0, r1
 8009c58:	b141      	cbz	r1, 8009c6c <__ascii_wctomb+0x18>
 8009c5a:	2aff      	cmp	r2, #255	@ 0xff
 8009c5c:	d904      	bls.n	8009c68 <__ascii_wctomb+0x14>
 8009c5e:	228a      	movs	r2, #138	@ 0x8a
 8009c60:	601a      	str	r2, [r3, #0]
 8009c62:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009c66:	4770      	bx	lr
 8009c68:	700a      	strb	r2, [r1, #0]
 8009c6a:	2001      	movs	r0, #1
 8009c6c:	4770      	bx	lr

08009c6e <abort>:
 8009c6e:	b508      	push	{r3, lr}
 8009c70:	2006      	movs	r0, #6
 8009c72:	f000 fa63 	bl	800a13c <raise>
 8009c76:	2001      	movs	r0, #1
 8009c78:	f7f8 f8d0 	bl	8001e1c <_exit>

08009c7c <__sfputc_r>:
 8009c7c:	6893      	ldr	r3, [r2, #8]
 8009c7e:	3b01      	subs	r3, #1
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	b410      	push	{r4}
 8009c84:	6093      	str	r3, [r2, #8]
 8009c86:	da08      	bge.n	8009c9a <__sfputc_r+0x1e>
 8009c88:	6994      	ldr	r4, [r2, #24]
 8009c8a:	42a3      	cmp	r3, r4
 8009c8c:	db01      	blt.n	8009c92 <__sfputc_r+0x16>
 8009c8e:	290a      	cmp	r1, #10
 8009c90:	d103      	bne.n	8009c9a <__sfputc_r+0x1e>
 8009c92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c96:	f000 b933 	b.w	8009f00 <__swbuf_r>
 8009c9a:	6813      	ldr	r3, [r2, #0]
 8009c9c:	1c58      	adds	r0, r3, #1
 8009c9e:	6010      	str	r0, [r2, #0]
 8009ca0:	7019      	strb	r1, [r3, #0]
 8009ca2:	4608      	mov	r0, r1
 8009ca4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ca8:	4770      	bx	lr

08009caa <__sfputs_r>:
 8009caa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cac:	4606      	mov	r6, r0
 8009cae:	460f      	mov	r7, r1
 8009cb0:	4614      	mov	r4, r2
 8009cb2:	18d5      	adds	r5, r2, r3
 8009cb4:	42ac      	cmp	r4, r5
 8009cb6:	d101      	bne.n	8009cbc <__sfputs_r+0x12>
 8009cb8:	2000      	movs	r0, #0
 8009cba:	e007      	b.n	8009ccc <__sfputs_r+0x22>
 8009cbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cc0:	463a      	mov	r2, r7
 8009cc2:	4630      	mov	r0, r6
 8009cc4:	f7ff ffda 	bl	8009c7c <__sfputc_r>
 8009cc8:	1c43      	adds	r3, r0, #1
 8009cca:	d1f3      	bne.n	8009cb4 <__sfputs_r+0xa>
 8009ccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009cd0 <_vfiprintf_r>:
 8009cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cd4:	460d      	mov	r5, r1
 8009cd6:	b09d      	sub	sp, #116	@ 0x74
 8009cd8:	4614      	mov	r4, r2
 8009cda:	4698      	mov	r8, r3
 8009cdc:	4606      	mov	r6, r0
 8009cde:	b118      	cbz	r0, 8009ce8 <_vfiprintf_r+0x18>
 8009ce0:	6a03      	ldr	r3, [r0, #32]
 8009ce2:	b90b      	cbnz	r3, 8009ce8 <_vfiprintf_r+0x18>
 8009ce4:	f7fe f920 	bl	8007f28 <__sinit>
 8009ce8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009cea:	07d9      	lsls	r1, r3, #31
 8009cec:	d405      	bmi.n	8009cfa <_vfiprintf_r+0x2a>
 8009cee:	89ab      	ldrh	r3, [r5, #12]
 8009cf0:	059a      	lsls	r2, r3, #22
 8009cf2:	d402      	bmi.n	8009cfa <_vfiprintf_r+0x2a>
 8009cf4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009cf6:	f7fe f980 	bl	8007ffa <__retarget_lock_acquire_recursive>
 8009cfa:	89ab      	ldrh	r3, [r5, #12]
 8009cfc:	071b      	lsls	r3, r3, #28
 8009cfe:	d501      	bpl.n	8009d04 <_vfiprintf_r+0x34>
 8009d00:	692b      	ldr	r3, [r5, #16]
 8009d02:	b99b      	cbnz	r3, 8009d2c <_vfiprintf_r+0x5c>
 8009d04:	4629      	mov	r1, r5
 8009d06:	4630      	mov	r0, r6
 8009d08:	f000 f938 	bl	8009f7c <__swsetup_r>
 8009d0c:	b170      	cbz	r0, 8009d2c <_vfiprintf_r+0x5c>
 8009d0e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009d10:	07dc      	lsls	r4, r3, #31
 8009d12:	d504      	bpl.n	8009d1e <_vfiprintf_r+0x4e>
 8009d14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009d18:	b01d      	add	sp, #116	@ 0x74
 8009d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d1e:	89ab      	ldrh	r3, [r5, #12]
 8009d20:	0598      	lsls	r0, r3, #22
 8009d22:	d4f7      	bmi.n	8009d14 <_vfiprintf_r+0x44>
 8009d24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009d26:	f7fe f969 	bl	8007ffc <__retarget_lock_release_recursive>
 8009d2a:	e7f3      	b.n	8009d14 <_vfiprintf_r+0x44>
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d30:	2320      	movs	r3, #32
 8009d32:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009d36:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d3a:	2330      	movs	r3, #48	@ 0x30
 8009d3c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009eec <_vfiprintf_r+0x21c>
 8009d40:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009d44:	f04f 0901 	mov.w	r9, #1
 8009d48:	4623      	mov	r3, r4
 8009d4a:	469a      	mov	sl, r3
 8009d4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d50:	b10a      	cbz	r2, 8009d56 <_vfiprintf_r+0x86>
 8009d52:	2a25      	cmp	r2, #37	@ 0x25
 8009d54:	d1f9      	bne.n	8009d4a <_vfiprintf_r+0x7a>
 8009d56:	ebba 0b04 	subs.w	fp, sl, r4
 8009d5a:	d00b      	beq.n	8009d74 <_vfiprintf_r+0xa4>
 8009d5c:	465b      	mov	r3, fp
 8009d5e:	4622      	mov	r2, r4
 8009d60:	4629      	mov	r1, r5
 8009d62:	4630      	mov	r0, r6
 8009d64:	f7ff ffa1 	bl	8009caa <__sfputs_r>
 8009d68:	3001      	adds	r0, #1
 8009d6a:	f000 80a7 	beq.w	8009ebc <_vfiprintf_r+0x1ec>
 8009d6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d70:	445a      	add	r2, fp
 8009d72:	9209      	str	r2, [sp, #36]	@ 0x24
 8009d74:	f89a 3000 	ldrb.w	r3, [sl]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	f000 809f 	beq.w	8009ebc <_vfiprintf_r+0x1ec>
 8009d7e:	2300      	movs	r3, #0
 8009d80:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009d84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d88:	f10a 0a01 	add.w	sl, sl, #1
 8009d8c:	9304      	str	r3, [sp, #16]
 8009d8e:	9307      	str	r3, [sp, #28]
 8009d90:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009d94:	931a      	str	r3, [sp, #104]	@ 0x68
 8009d96:	4654      	mov	r4, sl
 8009d98:	2205      	movs	r2, #5
 8009d9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d9e:	4853      	ldr	r0, [pc, #332]	@ (8009eec <_vfiprintf_r+0x21c>)
 8009da0:	f7f6 fa36 	bl	8000210 <memchr>
 8009da4:	9a04      	ldr	r2, [sp, #16]
 8009da6:	b9d8      	cbnz	r0, 8009de0 <_vfiprintf_r+0x110>
 8009da8:	06d1      	lsls	r1, r2, #27
 8009daa:	bf44      	itt	mi
 8009dac:	2320      	movmi	r3, #32
 8009dae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009db2:	0713      	lsls	r3, r2, #28
 8009db4:	bf44      	itt	mi
 8009db6:	232b      	movmi	r3, #43	@ 0x2b
 8009db8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009dbc:	f89a 3000 	ldrb.w	r3, [sl]
 8009dc0:	2b2a      	cmp	r3, #42	@ 0x2a
 8009dc2:	d015      	beq.n	8009df0 <_vfiprintf_r+0x120>
 8009dc4:	9a07      	ldr	r2, [sp, #28]
 8009dc6:	4654      	mov	r4, sl
 8009dc8:	2000      	movs	r0, #0
 8009dca:	f04f 0c0a 	mov.w	ip, #10
 8009dce:	4621      	mov	r1, r4
 8009dd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009dd4:	3b30      	subs	r3, #48	@ 0x30
 8009dd6:	2b09      	cmp	r3, #9
 8009dd8:	d94b      	bls.n	8009e72 <_vfiprintf_r+0x1a2>
 8009dda:	b1b0      	cbz	r0, 8009e0a <_vfiprintf_r+0x13a>
 8009ddc:	9207      	str	r2, [sp, #28]
 8009dde:	e014      	b.n	8009e0a <_vfiprintf_r+0x13a>
 8009de0:	eba0 0308 	sub.w	r3, r0, r8
 8009de4:	fa09 f303 	lsl.w	r3, r9, r3
 8009de8:	4313      	orrs	r3, r2
 8009dea:	9304      	str	r3, [sp, #16]
 8009dec:	46a2      	mov	sl, r4
 8009dee:	e7d2      	b.n	8009d96 <_vfiprintf_r+0xc6>
 8009df0:	9b03      	ldr	r3, [sp, #12]
 8009df2:	1d19      	adds	r1, r3, #4
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	9103      	str	r1, [sp, #12]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	bfbb      	ittet	lt
 8009dfc:	425b      	neglt	r3, r3
 8009dfe:	f042 0202 	orrlt.w	r2, r2, #2
 8009e02:	9307      	strge	r3, [sp, #28]
 8009e04:	9307      	strlt	r3, [sp, #28]
 8009e06:	bfb8      	it	lt
 8009e08:	9204      	strlt	r2, [sp, #16]
 8009e0a:	7823      	ldrb	r3, [r4, #0]
 8009e0c:	2b2e      	cmp	r3, #46	@ 0x2e
 8009e0e:	d10a      	bne.n	8009e26 <_vfiprintf_r+0x156>
 8009e10:	7863      	ldrb	r3, [r4, #1]
 8009e12:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e14:	d132      	bne.n	8009e7c <_vfiprintf_r+0x1ac>
 8009e16:	9b03      	ldr	r3, [sp, #12]
 8009e18:	1d1a      	adds	r2, r3, #4
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	9203      	str	r2, [sp, #12]
 8009e1e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009e22:	3402      	adds	r4, #2
 8009e24:	9305      	str	r3, [sp, #20]
 8009e26:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009efc <_vfiprintf_r+0x22c>
 8009e2a:	7821      	ldrb	r1, [r4, #0]
 8009e2c:	2203      	movs	r2, #3
 8009e2e:	4650      	mov	r0, sl
 8009e30:	f7f6 f9ee 	bl	8000210 <memchr>
 8009e34:	b138      	cbz	r0, 8009e46 <_vfiprintf_r+0x176>
 8009e36:	9b04      	ldr	r3, [sp, #16]
 8009e38:	eba0 000a 	sub.w	r0, r0, sl
 8009e3c:	2240      	movs	r2, #64	@ 0x40
 8009e3e:	4082      	lsls	r2, r0
 8009e40:	4313      	orrs	r3, r2
 8009e42:	3401      	adds	r4, #1
 8009e44:	9304      	str	r3, [sp, #16]
 8009e46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e4a:	4829      	ldr	r0, [pc, #164]	@ (8009ef0 <_vfiprintf_r+0x220>)
 8009e4c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009e50:	2206      	movs	r2, #6
 8009e52:	f7f6 f9dd 	bl	8000210 <memchr>
 8009e56:	2800      	cmp	r0, #0
 8009e58:	d03f      	beq.n	8009eda <_vfiprintf_r+0x20a>
 8009e5a:	4b26      	ldr	r3, [pc, #152]	@ (8009ef4 <_vfiprintf_r+0x224>)
 8009e5c:	bb1b      	cbnz	r3, 8009ea6 <_vfiprintf_r+0x1d6>
 8009e5e:	9b03      	ldr	r3, [sp, #12]
 8009e60:	3307      	adds	r3, #7
 8009e62:	f023 0307 	bic.w	r3, r3, #7
 8009e66:	3308      	adds	r3, #8
 8009e68:	9303      	str	r3, [sp, #12]
 8009e6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e6c:	443b      	add	r3, r7
 8009e6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e70:	e76a      	b.n	8009d48 <_vfiprintf_r+0x78>
 8009e72:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e76:	460c      	mov	r4, r1
 8009e78:	2001      	movs	r0, #1
 8009e7a:	e7a8      	b.n	8009dce <_vfiprintf_r+0xfe>
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	3401      	adds	r4, #1
 8009e80:	9305      	str	r3, [sp, #20]
 8009e82:	4619      	mov	r1, r3
 8009e84:	f04f 0c0a 	mov.w	ip, #10
 8009e88:	4620      	mov	r0, r4
 8009e8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e8e:	3a30      	subs	r2, #48	@ 0x30
 8009e90:	2a09      	cmp	r2, #9
 8009e92:	d903      	bls.n	8009e9c <_vfiprintf_r+0x1cc>
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d0c6      	beq.n	8009e26 <_vfiprintf_r+0x156>
 8009e98:	9105      	str	r1, [sp, #20]
 8009e9a:	e7c4      	b.n	8009e26 <_vfiprintf_r+0x156>
 8009e9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ea0:	4604      	mov	r4, r0
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	e7f0      	b.n	8009e88 <_vfiprintf_r+0x1b8>
 8009ea6:	ab03      	add	r3, sp, #12
 8009ea8:	9300      	str	r3, [sp, #0]
 8009eaa:	462a      	mov	r2, r5
 8009eac:	4b12      	ldr	r3, [pc, #72]	@ (8009ef8 <_vfiprintf_r+0x228>)
 8009eae:	a904      	add	r1, sp, #16
 8009eb0:	4630      	mov	r0, r6
 8009eb2:	f7fd fbc1 	bl	8007638 <_printf_float>
 8009eb6:	4607      	mov	r7, r0
 8009eb8:	1c78      	adds	r0, r7, #1
 8009eba:	d1d6      	bne.n	8009e6a <_vfiprintf_r+0x19a>
 8009ebc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009ebe:	07d9      	lsls	r1, r3, #31
 8009ec0:	d405      	bmi.n	8009ece <_vfiprintf_r+0x1fe>
 8009ec2:	89ab      	ldrh	r3, [r5, #12]
 8009ec4:	059a      	lsls	r2, r3, #22
 8009ec6:	d402      	bmi.n	8009ece <_vfiprintf_r+0x1fe>
 8009ec8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009eca:	f7fe f897 	bl	8007ffc <__retarget_lock_release_recursive>
 8009ece:	89ab      	ldrh	r3, [r5, #12]
 8009ed0:	065b      	lsls	r3, r3, #25
 8009ed2:	f53f af1f 	bmi.w	8009d14 <_vfiprintf_r+0x44>
 8009ed6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009ed8:	e71e      	b.n	8009d18 <_vfiprintf_r+0x48>
 8009eda:	ab03      	add	r3, sp, #12
 8009edc:	9300      	str	r3, [sp, #0]
 8009ede:	462a      	mov	r2, r5
 8009ee0:	4b05      	ldr	r3, [pc, #20]	@ (8009ef8 <_vfiprintf_r+0x228>)
 8009ee2:	a904      	add	r1, sp, #16
 8009ee4:	4630      	mov	r0, r6
 8009ee6:	f7fd fe3f 	bl	8007b68 <_printf_i>
 8009eea:	e7e4      	b.n	8009eb6 <_vfiprintf_r+0x1e6>
 8009eec:	0800b051 	.word	0x0800b051
 8009ef0:	0800b05b 	.word	0x0800b05b
 8009ef4:	08007639 	.word	0x08007639
 8009ef8:	08009cab 	.word	0x08009cab
 8009efc:	0800b057 	.word	0x0800b057

08009f00 <__swbuf_r>:
 8009f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f02:	460e      	mov	r6, r1
 8009f04:	4614      	mov	r4, r2
 8009f06:	4605      	mov	r5, r0
 8009f08:	b118      	cbz	r0, 8009f12 <__swbuf_r+0x12>
 8009f0a:	6a03      	ldr	r3, [r0, #32]
 8009f0c:	b90b      	cbnz	r3, 8009f12 <__swbuf_r+0x12>
 8009f0e:	f7fe f80b 	bl	8007f28 <__sinit>
 8009f12:	69a3      	ldr	r3, [r4, #24]
 8009f14:	60a3      	str	r3, [r4, #8]
 8009f16:	89a3      	ldrh	r3, [r4, #12]
 8009f18:	071a      	lsls	r2, r3, #28
 8009f1a:	d501      	bpl.n	8009f20 <__swbuf_r+0x20>
 8009f1c:	6923      	ldr	r3, [r4, #16]
 8009f1e:	b943      	cbnz	r3, 8009f32 <__swbuf_r+0x32>
 8009f20:	4621      	mov	r1, r4
 8009f22:	4628      	mov	r0, r5
 8009f24:	f000 f82a 	bl	8009f7c <__swsetup_r>
 8009f28:	b118      	cbz	r0, 8009f32 <__swbuf_r+0x32>
 8009f2a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8009f2e:	4638      	mov	r0, r7
 8009f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f32:	6823      	ldr	r3, [r4, #0]
 8009f34:	6922      	ldr	r2, [r4, #16]
 8009f36:	1a98      	subs	r0, r3, r2
 8009f38:	6963      	ldr	r3, [r4, #20]
 8009f3a:	b2f6      	uxtb	r6, r6
 8009f3c:	4283      	cmp	r3, r0
 8009f3e:	4637      	mov	r7, r6
 8009f40:	dc05      	bgt.n	8009f4e <__swbuf_r+0x4e>
 8009f42:	4621      	mov	r1, r4
 8009f44:	4628      	mov	r0, r5
 8009f46:	f7ff f94d 	bl	80091e4 <_fflush_r>
 8009f4a:	2800      	cmp	r0, #0
 8009f4c:	d1ed      	bne.n	8009f2a <__swbuf_r+0x2a>
 8009f4e:	68a3      	ldr	r3, [r4, #8]
 8009f50:	3b01      	subs	r3, #1
 8009f52:	60a3      	str	r3, [r4, #8]
 8009f54:	6823      	ldr	r3, [r4, #0]
 8009f56:	1c5a      	adds	r2, r3, #1
 8009f58:	6022      	str	r2, [r4, #0]
 8009f5a:	701e      	strb	r6, [r3, #0]
 8009f5c:	6962      	ldr	r2, [r4, #20]
 8009f5e:	1c43      	adds	r3, r0, #1
 8009f60:	429a      	cmp	r2, r3
 8009f62:	d004      	beq.n	8009f6e <__swbuf_r+0x6e>
 8009f64:	89a3      	ldrh	r3, [r4, #12]
 8009f66:	07db      	lsls	r3, r3, #31
 8009f68:	d5e1      	bpl.n	8009f2e <__swbuf_r+0x2e>
 8009f6a:	2e0a      	cmp	r6, #10
 8009f6c:	d1df      	bne.n	8009f2e <__swbuf_r+0x2e>
 8009f6e:	4621      	mov	r1, r4
 8009f70:	4628      	mov	r0, r5
 8009f72:	f7ff f937 	bl	80091e4 <_fflush_r>
 8009f76:	2800      	cmp	r0, #0
 8009f78:	d0d9      	beq.n	8009f2e <__swbuf_r+0x2e>
 8009f7a:	e7d6      	b.n	8009f2a <__swbuf_r+0x2a>

08009f7c <__swsetup_r>:
 8009f7c:	b538      	push	{r3, r4, r5, lr}
 8009f7e:	4b29      	ldr	r3, [pc, #164]	@ (800a024 <__swsetup_r+0xa8>)
 8009f80:	4605      	mov	r5, r0
 8009f82:	6818      	ldr	r0, [r3, #0]
 8009f84:	460c      	mov	r4, r1
 8009f86:	b118      	cbz	r0, 8009f90 <__swsetup_r+0x14>
 8009f88:	6a03      	ldr	r3, [r0, #32]
 8009f8a:	b90b      	cbnz	r3, 8009f90 <__swsetup_r+0x14>
 8009f8c:	f7fd ffcc 	bl	8007f28 <__sinit>
 8009f90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f94:	0719      	lsls	r1, r3, #28
 8009f96:	d422      	bmi.n	8009fde <__swsetup_r+0x62>
 8009f98:	06da      	lsls	r2, r3, #27
 8009f9a:	d407      	bmi.n	8009fac <__swsetup_r+0x30>
 8009f9c:	2209      	movs	r2, #9
 8009f9e:	602a      	str	r2, [r5, #0]
 8009fa0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009fa4:	81a3      	strh	r3, [r4, #12]
 8009fa6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009faa:	e033      	b.n	800a014 <__swsetup_r+0x98>
 8009fac:	0758      	lsls	r0, r3, #29
 8009fae:	d512      	bpl.n	8009fd6 <__swsetup_r+0x5a>
 8009fb0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009fb2:	b141      	cbz	r1, 8009fc6 <__swsetup_r+0x4a>
 8009fb4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009fb8:	4299      	cmp	r1, r3
 8009fba:	d002      	beq.n	8009fc2 <__swsetup_r+0x46>
 8009fbc:	4628      	mov	r0, r5
 8009fbe:	f7ff fdd3 	bl	8009b68 <_free_r>
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	6363      	str	r3, [r4, #52]	@ 0x34
 8009fc6:	89a3      	ldrh	r3, [r4, #12]
 8009fc8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009fcc:	81a3      	strh	r3, [r4, #12]
 8009fce:	2300      	movs	r3, #0
 8009fd0:	6063      	str	r3, [r4, #4]
 8009fd2:	6923      	ldr	r3, [r4, #16]
 8009fd4:	6023      	str	r3, [r4, #0]
 8009fd6:	89a3      	ldrh	r3, [r4, #12]
 8009fd8:	f043 0308 	orr.w	r3, r3, #8
 8009fdc:	81a3      	strh	r3, [r4, #12]
 8009fde:	6923      	ldr	r3, [r4, #16]
 8009fe0:	b94b      	cbnz	r3, 8009ff6 <__swsetup_r+0x7a>
 8009fe2:	89a3      	ldrh	r3, [r4, #12]
 8009fe4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009fe8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009fec:	d003      	beq.n	8009ff6 <__swsetup_r+0x7a>
 8009fee:	4621      	mov	r1, r4
 8009ff0:	4628      	mov	r0, r5
 8009ff2:	f000 f83f 	bl	800a074 <__smakebuf_r>
 8009ff6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ffa:	f013 0201 	ands.w	r2, r3, #1
 8009ffe:	d00a      	beq.n	800a016 <__swsetup_r+0x9a>
 800a000:	2200      	movs	r2, #0
 800a002:	60a2      	str	r2, [r4, #8]
 800a004:	6962      	ldr	r2, [r4, #20]
 800a006:	4252      	negs	r2, r2
 800a008:	61a2      	str	r2, [r4, #24]
 800a00a:	6922      	ldr	r2, [r4, #16]
 800a00c:	b942      	cbnz	r2, 800a020 <__swsetup_r+0xa4>
 800a00e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a012:	d1c5      	bne.n	8009fa0 <__swsetup_r+0x24>
 800a014:	bd38      	pop	{r3, r4, r5, pc}
 800a016:	0799      	lsls	r1, r3, #30
 800a018:	bf58      	it	pl
 800a01a:	6962      	ldrpl	r2, [r4, #20]
 800a01c:	60a2      	str	r2, [r4, #8]
 800a01e:	e7f4      	b.n	800a00a <__swsetup_r+0x8e>
 800a020:	2000      	movs	r0, #0
 800a022:	e7f7      	b.n	800a014 <__swsetup_r+0x98>
 800a024:	2000002c 	.word	0x2000002c

0800a028 <__swhatbuf_r>:
 800a028:	b570      	push	{r4, r5, r6, lr}
 800a02a:	460c      	mov	r4, r1
 800a02c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a030:	2900      	cmp	r1, #0
 800a032:	b096      	sub	sp, #88	@ 0x58
 800a034:	4615      	mov	r5, r2
 800a036:	461e      	mov	r6, r3
 800a038:	da0d      	bge.n	800a056 <__swhatbuf_r+0x2e>
 800a03a:	89a3      	ldrh	r3, [r4, #12]
 800a03c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a040:	f04f 0100 	mov.w	r1, #0
 800a044:	bf14      	ite	ne
 800a046:	2340      	movne	r3, #64	@ 0x40
 800a048:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a04c:	2000      	movs	r0, #0
 800a04e:	6031      	str	r1, [r6, #0]
 800a050:	602b      	str	r3, [r5, #0]
 800a052:	b016      	add	sp, #88	@ 0x58
 800a054:	bd70      	pop	{r4, r5, r6, pc}
 800a056:	466a      	mov	r2, sp
 800a058:	f000 f89c 	bl	800a194 <_fstat_r>
 800a05c:	2800      	cmp	r0, #0
 800a05e:	dbec      	blt.n	800a03a <__swhatbuf_r+0x12>
 800a060:	9901      	ldr	r1, [sp, #4]
 800a062:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a066:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a06a:	4259      	negs	r1, r3
 800a06c:	4159      	adcs	r1, r3
 800a06e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a072:	e7eb      	b.n	800a04c <__swhatbuf_r+0x24>

0800a074 <__smakebuf_r>:
 800a074:	898b      	ldrh	r3, [r1, #12]
 800a076:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a078:	079d      	lsls	r5, r3, #30
 800a07a:	4606      	mov	r6, r0
 800a07c:	460c      	mov	r4, r1
 800a07e:	d507      	bpl.n	800a090 <__smakebuf_r+0x1c>
 800a080:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a084:	6023      	str	r3, [r4, #0]
 800a086:	6123      	str	r3, [r4, #16]
 800a088:	2301      	movs	r3, #1
 800a08a:	6163      	str	r3, [r4, #20]
 800a08c:	b003      	add	sp, #12
 800a08e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a090:	ab01      	add	r3, sp, #4
 800a092:	466a      	mov	r2, sp
 800a094:	f7ff ffc8 	bl	800a028 <__swhatbuf_r>
 800a098:	9f00      	ldr	r7, [sp, #0]
 800a09a:	4605      	mov	r5, r0
 800a09c:	4639      	mov	r1, r7
 800a09e:	4630      	mov	r0, r6
 800a0a0:	f7fe ff9c 	bl	8008fdc <_malloc_r>
 800a0a4:	b948      	cbnz	r0, 800a0ba <__smakebuf_r+0x46>
 800a0a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0aa:	059a      	lsls	r2, r3, #22
 800a0ac:	d4ee      	bmi.n	800a08c <__smakebuf_r+0x18>
 800a0ae:	f023 0303 	bic.w	r3, r3, #3
 800a0b2:	f043 0302 	orr.w	r3, r3, #2
 800a0b6:	81a3      	strh	r3, [r4, #12]
 800a0b8:	e7e2      	b.n	800a080 <__smakebuf_r+0xc>
 800a0ba:	89a3      	ldrh	r3, [r4, #12]
 800a0bc:	6020      	str	r0, [r4, #0]
 800a0be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a0c2:	81a3      	strh	r3, [r4, #12]
 800a0c4:	9b01      	ldr	r3, [sp, #4]
 800a0c6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a0ca:	b15b      	cbz	r3, 800a0e4 <__smakebuf_r+0x70>
 800a0cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a0d0:	4630      	mov	r0, r6
 800a0d2:	f000 f83b 	bl	800a14c <_isatty_r>
 800a0d6:	b128      	cbz	r0, 800a0e4 <__smakebuf_r+0x70>
 800a0d8:	89a3      	ldrh	r3, [r4, #12]
 800a0da:	f023 0303 	bic.w	r3, r3, #3
 800a0de:	f043 0301 	orr.w	r3, r3, #1
 800a0e2:	81a3      	strh	r3, [r4, #12]
 800a0e4:	89a3      	ldrh	r3, [r4, #12]
 800a0e6:	431d      	orrs	r5, r3
 800a0e8:	81a5      	strh	r5, [r4, #12]
 800a0ea:	e7cf      	b.n	800a08c <__smakebuf_r+0x18>

0800a0ec <_raise_r>:
 800a0ec:	291f      	cmp	r1, #31
 800a0ee:	b538      	push	{r3, r4, r5, lr}
 800a0f0:	4605      	mov	r5, r0
 800a0f2:	460c      	mov	r4, r1
 800a0f4:	d904      	bls.n	800a100 <_raise_r+0x14>
 800a0f6:	2316      	movs	r3, #22
 800a0f8:	6003      	str	r3, [r0, #0]
 800a0fa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a0fe:	bd38      	pop	{r3, r4, r5, pc}
 800a100:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a102:	b112      	cbz	r2, 800a10a <_raise_r+0x1e>
 800a104:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a108:	b94b      	cbnz	r3, 800a11e <_raise_r+0x32>
 800a10a:	4628      	mov	r0, r5
 800a10c:	f000 f840 	bl	800a190 <_getpid_r>
 800a110:	4622      	mov	r2, r4
 800a112:	4601      	mov	r1, r0
 800a114:	4628      	mov	r0, r5
 800a116:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a11a:	f000 b827 	b.w	800a16c <_kill_r>
 800a11e:	2b01      	cmp	r3, #1
 800a120:	d00a      	beq.n	800a138 <_raise_r+0x4c>
 800a122:	1c59      	adds	r1, r3, #1
 800a124:	d103      	bne.n	800a12e <_raise_r+0x42>
 800a126:	2316      	movs	r3, #22
 800a128:	6003      	str	r3, [r0, #0]
 800a12a:	2001      	movs	r0, #1
 800a12c:	e7e7      	b.n	800a0fe <_raise_r+0x12>
 800a12e:	2100      	movs	r1, #0
 800a130:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a134:	4620      	mov	r0, r4
 800a136:	4798      	blx	r3
 800a138:	2000      	movs	r0, #0
 800a13a:	e7e0      	b.n	800a0fe <_raise_r+0x12>

0800a13c <raise>:
 800a13c:	4b02      	ldr	r3, [pc, #8]	@ (800a148 <raise+0xc>)
 800a13e:	4601      	mov	r1, r0
 800a140:	6818      	ldr	r0, [r3, #0]
 800a142:	f7ff bfd3 	b.w	800a0ec <_raise_r>
 800a146:	bf00      	nop
 800a148:	2000002c 	.word	0x2000002c

0800a14c <_isatty_r>:
 800a14c:	b538      	push	{r3, r4, r5, lr}
 800a14e:	4d06      	ldr	r5, [pc, #24]	@ (800a168 <_isatty_r+0x1c>)
 800a150:	2300      	movs	r3, #0
 800a152:	4604      	mov	r4, r0
 800a154:	4608      	mov	r0, r1
 800a156:	602b      	str	r3, [r5, #0]
 800a158:	f7f7 fea4 	bl	8001ea4 <_isatty>
 800a15c:	1c43      	adds	r3, r0, #1
 800a15e:	d102      	bne.n	800a166 <_isatty_r+0x1a>
 800a160:	682b      	ldr	r3, [r5, #0]
 800a162:	b103      	cbz	r3, 800a166 <_isatty_r+0x1a>
 800a164:	6023      	str	r3, [r4, #0]
 800a166:	bd38      	pop	{r3, r4, r5, pc}
 800a168:	2000514c 	.word	0x2000514c

0800a16c <_kill_r>:
 800a16c:	b538      	push	{r3, r4, r5, lr}
 800a16e:	4d07      	ldr	r5, [pc, #28]	@ (800a18c <_kill_r+0x20>)
 800a170:	2300      	movs	r3, #0
 800a172:	4604      	mov	r4, r0
 800a174:	4608      	mov	r0, r1
 800a176:	4611      	mov	r1, r2
 800a178:	602b      	str	r3, [r5, #0]
 800a17a:	f7f7 fe3f 	bl	8001dfc <_kill>
 800a17e:	1c43      	adds	r3, r0, #1
 800a180:	d102      	bne.n	800a188 <_kill_r+0x1c>
 800a182:	682b      	ldr	r3, [r5, #0]
 800a184:	b103      	cbz	r3, 800a188 <_kill_r+0x1c>
 800a186:	6023      	str	r3, [r4, #0]
 800a188:	bd38      	pop	{r3, r4, r5, pc}
 800a18a:	bf00      	nop
 800a18c:	2000514c 	.word	0x2000514c

0800a190 <_getpid_r>:
 800a190:	f7f7 be2c 	b.w	8001dec <_getpid>

0800a194 <_fstat_r>:
 800a194:	b538      	push	{r3, r4, r5, lr}
 800a196:	4d07      	ldr	r5, [pc, #28]	@ (800a1b4 <_fstat_r+0x20>)
 800a198:	2300      	movs	r3, #0
 800a19a:	4604      	mov	r4, r0
 800a19c:	4608      	mov	r0, r1
 800a19e:	4611      	mov	r1, r2
 800a1a0:	602b      	str	r3, [r5, #0]
 800a1a2:	f7f7 fe6f 	bl	8001e84 <_fstat>
 800a1a6:	1c43      	adds	r3, r0, #1
 800a1a8:	d102      	bne.n	800a1b0 <_fstat_r+0x1c>
 800a1aa:	682b      	ldr	r3, [r5, #0]
 800a1ac:	b103      	cbz	r3, 800a1b0 <_fstat_r+0x1c>
 800a1ae:	6023      	str	r3, [r4, #0]
 800a1b0:	bd38      	pop	{r3, r4, r5, pc}
 800a1b2:	bf00      	nop
 800a1b4:	2000514c 	.word	0x2000514c

0800a1b8 <_init>:
 800a1b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1ba:	bf00      	nop
 800a1bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1be:	bc08      	pop	{r3}
 800a1c0:	469e      	mov	lr, r3
 800a1c2:	4770      	bx	lr

0800a1c4 <_fini>:
 800a1c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1c6:	bf00      	nop
 800a1c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1ca:	bc08      	pop	{r3}
 800a1cc:	469e      	mov	lr, r3
 800a1ce:	4770      	bx	lr
